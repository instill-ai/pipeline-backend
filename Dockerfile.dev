ARG GOLANG_VERSION=1.23.4
FROM golang:${GOLANG_VERSION}-bullseye

ARG SERVICE_NAME

WORKDIR /${SERVICE_NAME}

# -- install 3rd-party

ARG TARGETOS TARGETARCH K6_VERSION XK6_VERSION XK6_SQL_VERSION XK6_SQL_POSTGRES_VERSION

# Install Python, create virtual environment, install pdfplumber and Docling
RUN apt update && \
    apt install -y \
    wget \
    unzip \
    build-essential \
    xz-utils \
    python3 \
    python3-venv \
    python3-dev \
    libgeos++-dev \
    poppler-utils \
    wv \
    unrtf \
    tidy \
    tesseract-ocr \
    libtesseract-dev \
    libreoffice \
    libsoxr-dev \
    chromium \
    qpdf && \
    python3 -m venv /opt/venv && \
    /opt/venv/bin/pip install pdfplumber mistral-common tokenizers docling==2.19.0 && \
    rm -rf /var/lib/apt/lists/*

# Install FFmpeg Static Build
RUN FFMPEG_ARCH=$([ "$TARGETARCH" = "arm64" ] && echo "arm64" || echo "amd64") && \
    wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-${FFMPEG_ARCH}-static.tar.xz && \
    tar xvf ffmpeg-release-${FFMPEG_ARCH}-static.tar.xz && \
    mv ffmpeg-*-static/ffmpeg /usr/local/bin/ && \
    mv ffmpeg-*-static/ffprobe /usr/local/bin/ && \
    rm -rf ffmpeg-*

# Install ONNX Runtime (latest release)
ENV ONNXRUNTIME_ROOT_PATH=/usr/local/onnxruntime
RUN apt update && \
    apt install -y jq && \
    LATEST_VERSION=$(wget -qO- https://api.github.com/repos/microsoft/onnxruntime/releases/latest | jq -r .tag_name) && \
    ONNX_ARCH=$([ "$TARGETARCH" = "arm64" ] && echo "aarch64" || echo "x64") && \
    wget https://github.com/microsoft/onnxruntime/releases/download/${LATEST_VERSION}/onnxruntime-linux-${ONNX_ARCH}-${LATEST_VERSION#v}.tgz && \
    tar -xzf onnxruntime-linux-${ONNX_ARCH}-${LATEST_VERSION#v}.tgz && \
    mv onnxruntime-linux-${ONNX_ARCH}-${LATEST_VERSION#v} ${ONNXRUNTIME_ROOT_PATH} && \
    rm onnxruntime-linux-${ONNX_ARCH}-${LATEST_VERSION#v}.tgz && \
    apt remove -y jq

# Set environment variables and create symlinks for ONNX Runtime
ENV C_INCLUDE_PATH=${ONNXRUNTIME_ROOT_PATH}/include
ENV LD_RUN_PATH=${ONNXRUNTIME_ROOT_PATH}/lib
ENV LIBRARY_PATH=${ONNXRUNTIME_ROOT_PATH}/lib

# tparse
RUN --mount=target=. --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/go/pkg GOOS=$TARGETOS GOARCH=$TARGETARCH go install github.com/mfridman/tparse@latest

# air
RUN --mount=target=. --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/go/pkg GOOS=$TARGETOS GOARCH=$TARGETARCH go install github.com/cosmtrek/air@v1.49

# k6
RUN --mount=target=. --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/go/pkg GOOS=$TARGETOS GOARCH=$TARGETARCH go install go.k6.io/xk6/cmd/xk6@v${XK6_VERSION}
RUN --mount=target=. --mount=type=cache,target=/root/.cache/go-build --mount=type=cache,target=/go/pkg GOOS=$TARGETOS GOARCH=$TARGETARCH xk6 build v${K6_VERSION} \
    --with github.com/grafana/xk6-sql@v${XK6_SQL_VERSION} \
    --with github.com/grafana/xk6-sql-driver-postgres@v${XK6_SQL_POSTGRES_VERSION} \
    --output /usr/bin/k6

# -- set up Go

COPY go.mod go.sum ./
RUN go mod download
COPY . .

RUN chown -R nobody:nogroup /go
ENV GOCACHE=/go/.cache/go-build
ENV GOENV=/go/.config/go/env

# Go 1.22 has dropped support for some TLS versions. This configuration is
# required to restore compatibility with those versions.
ENV GODEBUG=tlsrsakex=1

# Set up ONNX model and environment variable
COPY ./pkg/component/resources/onnx/silero_vad.onnx /${SERVICE_NAME}/pkg/component/resources/onnx/silero_vad.onnx
ENV ONNX_MODEL_FOLDER_PATH=/${SERVICE_NAME}/pkg/component/resources/onnx

# Docling will need a $HOME-prefixed path to write cache files. We'll also put
# the prefetched model artifacts there.
ENV BASE_DOCLING_PATH=/home/nobody
RUN mkdir -p ${BASE_DOCLING_PATH}/.EasyOCR/model && chown -R nobody:nogroup ${BASE_DOCLING_PATH}
RUN wget https://github.com/JaidedAI/EasyOCR/releases/download/v1.3/latin_g2.zip && \
    unzip latin_g2.zip -d ${BASE_DOCLING_PATH}/.EasyOCR/model/ && \
    rm latin_g2.zip
RUN wget https://github.com/JaidedAI/EasyOCR/releases/download/pre-v1.1.6/craft_mlt_25k.zip && \
    unzip craft_mlt_25k.zip -d ${BASE_DOCLING_PATH}/.EasyOCR/model/ && \
    rm craft_mlt_25k.zip

ENV DOCLING_ARTIFACTS_PATH=${BASE_DOCLING_PATH}/docling-artifacts
RUN echo "from docling.pipeline.standard_pdf_pipeline import StandardPdfPipeline" > import_artifacts.py
RUN echo "StandardPdfPipeline.download_models_hf(local_dir='${DOCLING_ARTIFACTS_PATH}')" >> import_artifacts.py
RUN /opt/venv/bin/python import_artifacts.py && rm import_artifacts.py

# Clean up apt
RUN apt remove -y wget unzip && \
    apt autoremove -y && \
    rm -rf /var/lib/apt/lists/*

# USER needs write permissions on the workspace to run the coverage report.
RUN chown -R nobody:nogroup /${SERVICE_NAME}

USER nobody:nogroup
ENV HOME=${BASE_DOCLING_PATH}

ENTRYPOINT ["tail", "-f", "/dev/null"]
