// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/protogen-go/model (interfaces: ModelClient)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/instill-ai/protogen-go/model"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// MockModelClient is a mock of ModelClient interface.
type MockModelClient struct {
	ctrl     *gomock.Controller
	recorder *MockModelClientMockRecorder
}

// MockModelClientMockRecorder is the mock recorder for MockModelClient.
type MockModelClientMockRecorder struct {
	mock *MockModelClient
}

// NewMockModelClient creates a new mock instance.
func NewMockModelClient(ctrl *gomock.Controller) *MockModelClient {
	mock := &MockModelClient{ctrl: ctrl}
	mock.recorder = &MockModelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelClient) EXPECT() *MockModelClientMockRecorder {
	return m.recorder
}

// CreateModel mocks base method.
func (m *MockModelClient) CreateModel(arg0 context.Context, arg1 *model.CreateModelRequest, arg2 ...grpc.CallOption) (*model.ModelInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModel", varargs...)
	ret0, _ := ret[0].(*model.ModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockModelClientMockRecorder) CreateModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockModelClient)(nil).CreateModel), varargs...)
}

// CreateModelByUpload mocks base method.
func (m *MockModelClient) CreateModelByUpload(arg0 context.Context, arg1 ...grpc.CallOption) (model.Model_CreateModelByUploadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModelByUpload", varargs...)
	ret0, _ := ret[0].(model.Model_CreateModelByUploadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelByUpload indicates an expected call of CreateModelByUpload.
func (mr *MockModelClientMockRecorder) CreateModelByUpload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelByUpload", reflect.TypeOf((*MockModelClient)(nil).CreateModelByUpload), varargs...)
}

// DeleteModel mocks base method.
func (m *MockModelClient) DeleteModel(arg0 context.Context, arg1 *model.DeleteModelRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModel", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockModelClientMockRecorder) DeleteModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockModelClient)(nil).DeleteModel), varargs...)
}

// DeleteModelVersion mocks base method.
func (m *MockModelClient) DeleteModelVersion(arg0 context.Context, arg1 *model.DeleteModelVersionRequest, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModelVersion", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelVersion indicates an expected call of DeleteModelVersion.
func (mr *MockModelClientMockRecorder) DeleteModelVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelVersion", reflect.TypeOf((*MockModelClient)(nil).DeleteModelVersion), varargs...)
}

// GetModel mocks base method.
func (m *MockModelClient) GetModel(arg0 context.Context, arg1 *model.GetModelRequest, arg2 ...grpc.CallOption) (*model.ModelInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModel", varargs...)
	ret0, _ := ret[0].(*model.ModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockModelClientMockRecorder) GetModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockModelClient)(nil).GetModel), varargs...)
}

// ListModels mocks base method.
func (m *MockModelClient) ListModels(arg0 context.Context, arg1 *model.ListModelRequest, arg2 ...grpc.CallOption) (*model.ListModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModels", varargs...)
	ret0, _ := ret[0].(*model.ListModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockModelClientMockRecorder) ListModels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockModelClient)(nil).ListModels), varargs...)
}

// Liveness mocks base method.
func (m *MockModelClient) Liveness(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*model.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Liveness", varargs...)
	ret0, _ := ret[0].(*model.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Liveness indicates an expected call of Liveness.
func (mr *MockModelClientMockRecorder) Liveness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liveness", reflect.TypeOf((*MockModelClient)(nil).Liveness), varargs...)
}

// PredictModel mocks base method.
func (m *MockModelClient) PredictModel(arg0 context.Context, arg1 *model.PredictModelImageRequest, arg2 ...grpc.CallOption) (*structpb.Struct, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PredictModel", varargs...)
	ret0, _ := ret[0].(*structpb.Struct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PredictModel indicates an expected call of PredictModel.
func (mr *MockModelClientMockRecorder) PredictModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PredictModel", reflect.TypeOf((*MockModelClient)(nil).PredictModel), varargs...)
}

// PredictModelByUpload mocks base method.
func (m *MockModelClient) PredictModelByUpload(arg0 context.Context, arg1 ...grpc.CallOption) (model.Model_PredictModelByUploadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PredictModelByUpload", varargs...)
	ret0, _ := ret[0].(model.Model_PredictModelByUploadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PredictModelByUpload indicates an expected call of PredictModelByUpload.
func (mr *MockModelClientMockRecorder) PredictModelByUpload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PredictModelByUpload", reflect.TypeOf((*MockModelClient)(nil).PredictModelByUpload), varargs...)
}

// Readiness mocks base method.
func (m *MockModelClient) Readiness(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*model.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Readiness", varargs...)
	ret0, _ := ret[0].(*model.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readiness indicates an expected call of Readiness.
func (mr *MockModelClientMockRecorder) Readiness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readiness", reflect.TypeOf((*MockModelClient)(nil).Readiness), varargs...)
}

// UpdateModel mocks base method.
func (m *MockModelClient) UpdateModel(arg0 context.Context, arg1 *model.UpdateModelRequest, arg2 ...grpc.CallOption) (*model.ModelInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateModel", varargs...)
	ret0, _ := ret[0].(*model.ModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModel indicates an expected call of UpdateModel.
func (mr *MockModelClientMockRecorder) UpdateModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModel", reflect.TypeOf((*MockModelClient)(nil).UpdateModel), varargs...)
}
