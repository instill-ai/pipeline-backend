syntax = "proto3";

package vdp.pipeline.v1beta;

// Google API
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/visibility.proto";
// OpenAPI definition
import "protoc-gen-openapiv2/options/annotations.proto";
// VDP definitions
import "../../../vdp/pipeline/v1beta/common.proto";
import "../../../vdp/pipeline/v1beta/component_definition.proto";
import "../../../vdp/pipeline/v1beta/pipeline.proto";
import "../../../vdp/pipeline/v1beta/secret.proto";

// VDP
//
// PipelinePublicService exposes the public VDP endpoints that allow clients to
// manage pipelines.
service PipelinePublicService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {description: "Public VDP endpoints"};

  // Check if the pipeline server is alive
  //
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get: "/v1beta/__liveness"
      additional_bindings: [
        {get: "/v1beta/health/pipeline"}]
    };
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // Check if the pipeline server is ready
  //
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Readiness(ReadinessRequest) returns (v1beta.ReadinessResponse) {
    option (google.api.http) = {get: "/v1beta/__readiness"};
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // Get hub status
  //
  // Return the stats of the hub
  rpc GetHubStats(GetHubStatsRequest) returns (GetHubStatsResponse) {
    option (google.api.http) = {get: "/v1beta/hub-stats"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // List accessible pipelines
  //
  // Returns a paginated list of pipelines that are visible to the requester.
  rpc ListPipelines(ListPipelinesRequest) returns (ListPipelinesResponse) {
    option (google.api.http) = {get: "/v1beta/pipelines"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Get a pipeline by UID
  //
  // Returns the details of a pipeline by a permalink defined by the resource
  // UID.
  rpc LookUpPipeline(LookUpPipelineRequest) returns (LookUpPipelineResponse) {
    option (google.api.http) = {get: "/v1beta/{permalink=pipelines/*}/lookUp"};
    option (google.api.method_signature) = "permalink";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Create a new user pipeline
  //
  // Creates a new pipeline under the parenthood of a user. Users can only
  // create a pipeline as the parent of that resource (i.e. the authenticated
  // user must match the `parent` path parameter).
  rpc CreateUserPipeline(CreateUserPipelineRequest) returns (CreateUserPipelineResponse) {
    option (google.api.http) = {
      post: "/v1beta/{parent=users/*}/pipelines"
      body: "pipeline"
    };
    option (google.api.method_signature) = "parent,pipeline";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // List user pipelines
  //
  // Returns a paginated list of pipelines that belong to the specified user.
  // The parent user may be different from the authenticated user, in which
  // case the results will contain the pipelines that are visible to the
  // latter.
  rpc ListUserPipelines(ListUserPipelinesRequest) returns (ListUserPipelinesResponse) {
    option (google.api.http) = {get: "/v1beta/{parent=users/*}/pipelines"};
    option (google.api.method_signature) = "parent";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Get a pipeline owned by a user
  //
  // Returns the details of a user-owned pipeline by its resource name, which is defined
  // by the parent user and the ID of the pipeline.
  rpc GetUserPipeline(GetUserPipelineRequest) returns (GetUserPipelineResponse) {
    option (google.api.http) = {get: "/v1beta/{name=users/*/pipelines/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Update a pipeline owned by a user
  //
  // Udpates a pipeline, accessing it by its resource name, which is defined by
  // the parent user and the ID of the pipeline. The authenticated user must be
  // the parent of the pipeline in order to modify it.
  //
  // In REST requests, only the supplied pipeline fields will be taken into
  // account when updating the resource.
  rpc UpdateUserPipeline(UpdateUserPipelineRequest) returns (UpdateUserPipelineResponse) {
    option (google.api.http) = {
      patch: "/v1beta/{pipeline.name=users/*/pipelines/*}"
      body: "pipeline"
    };
    option (google.api.method_signature) = "pipeline,update_mask";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Delete a pipeline owned by a user
  //
  // Deletes a pipeline, accesing it by its resource name, which is defined by
  // the parent user and the ID of the pipeline. The authenticated user must be
  // the parent of the pipeline in order to delete it.
  rpc DeleteUserPipeline(DeleteUserPipelineRequest) returns (DeleteUserPipelineResponse) {
    option (google.api.http) = {delete: "/v1beta/{name=users/*/pipelines/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Validate a pipeline a pipeline owned by a user
  //
  // Validates a pipeline by its resource name, which is defined by the parent
  // user and the ID of the pipeline.
  //
  // Validation checks the recipe of the pipeline and the status of its components.
  rpc ValidateUserPipeline(ValidateUserPipelineRequest) returns (ValidateUserPipelineResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=users/*/pipelines/*}/validate"
      body: "*"
    };
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Rename a pipeline owned by a user
  //
  // Updates the ID of a pipeline. Since this is an output-only field, a custom
  // method is required to modify it.
  //
  // The pipeline name will be updated accordingly, as it is  composed by the
  // parent user and ID of the pipeline (e.g.
  // `users/luigi/pipelines/pizza-recipe-generator`).
  //
  // The authenticated user must be the parent of the pipeline in order to
  // perform this action.
  rpc RenameUserPipeline(RenameUserPipelineRequest) returns (RenameUserPipelineResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=users/*/pipelines/*}/rename"
      body: "*"
    };
    option (google.api.method_signature) = "name,new_pipeline_id";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Clone a pipeline owned by a user
  //
  // Clones a pipeline owned by a user. The new pipeline may have a different
  // parent, and this can be either a user or an organization.
  rpc CloneUserPipeline(CloneUserPipelineRequest) returns (CloneUserPipelineResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=users/*/pipelines/*}/clone"
      body: "*"
    };
    option (google.api.method_signature) = "name,target";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Trigger a pipeline owned by a user
  //
  // Triggers the execution of a pipeline synchronously, i.e., the result is
  // sent back to the user right after the data is processed. This method is
  // intended for real-time inference when low latency is of concern.
  //
  // The pipeline is identified by its resource name, formed by the parent user
  // and ID of the pipeline.
  //
  // For more information, see [Trigger
  // Pipeline](https://www.instill.tech/docs/latest/core/concepts/pipeline#trigger-pipeline).
  rpc TriggerUserPipeline(TriggerUserPipelineRequest) returns (TriggerUserPipelineResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=users/*/pipelines/*}/trigger"
      body: "*"
    };
    option (google.api.method_signature) = "name,data";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Trigger"};
  }

  // Trigger a pipeline owned by a user and stream back the response
  //
  // Triggers the execution of a pipeline asynchronously and streams back the response.
  // This method is intended for real-time inference when low latency is of concern
  // and the response needs to be processed incrementally.
  //
  // The pipeline is identified by its resource name, formed by the parent user
  // and ID of the pipeline.
  rpc TriggerUserPipelineWithStream(TriggerUserPipelineWithStreamRequest) returns (stream TriggerUserPipelineWithStreamResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=users/*/pipelines/*}/trigger:stream"
      body: "*"
    };
    option (google.api.method_signature) = "name,inputs";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Trigger"};
  }

  // Trigger a pipeline owned by a user asynchronously
  //
  // Triggers the execution of a pipeline asynchronously, i.e., the result
  // contains the necessary information to access the result and status of the
  // operation. This method is intended for cases that require long-running
  // workloads.
  //
  // The pipeline is identified by its resource name, formed by the parent user
  // and ID of the pipeline.
  //
  // For more information, see [Trigger
  // Pipeline](https://www.instill.tech/docs/latest/core/concepts/pipeline#trigger-pipeline).
  rpc TriggerAsyncUserPipeline(TriggerAsyncUserPipelineRequest) returns (TriggerAsyncUserPipelineResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=users/*/pipelines/*}/triggerAsync"
      body: "*"
    };
    option (google.api.method_signature) = "name,data";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Trigger"};
  }

  // Release a version of a pipeline owned by a user
  //
  // Commits the version of a pipeline, identified by its resource name, which
  // is formed by the parent user and ID of the pipeline.
  //
  // The authenticated user must be the parent of the pipeline in order to
  // perform this action.
  rpc CreateUserPipelineRelease(CreateUserPipelineReleaseRequest) returns (CreateUserPipelineReleaseResponse) {
    option (google.api.http) = {
      post: "/v1beta/{parent=users/*/pipelines/*}/releases"
      body: "release"
    };
    option (google.api.method_signature) = "parent,release";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Release"};
  }

  // List the releases in a pipeline owned by a user
  //
  // Lists the commited versions of a pipeline, identified by its resource
  // name, which is formed by the parent user and ID of the pipeline.
  rpc ListUserPipelineReleases(ListUserPipelineReleasesRequest) returns (ListUserPipelineReleasesResponse) {
    option (google.api.http) = {get: "/v1beta/{parent=users/*/pipelines/*}/releases"};
    option (google.api.method_signature) = "pipelines";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Release"};
  }

  // Get a release in a pipeline owned by a user
  //
  // Gets the details of a pipeline release, where the pipeline is identified
  // by its resource name, formed by its parent user and ID.
  rpc GetUserPipelineRelease(GetUserPipelineReleaseRequest) returns (GetUserPipelineReleaseResponse) {
    option (google.api.http) = {get: "/v1beta/{name=users/*/pipelines/*/releases/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Release"};
  }

  // Update a release in a pipeline owned by a user
  //
  // Updates the details of a pipeline release, where the pipeline is
  // identified by its resource name, formed by its parent user and ID.
  //
  // The authenticated user must be the parent of the pipeline in order to
  // perform this action.
  rpc UpdateUserPipelineRelease(UpdateUserPipelineReleaseRequest) returns (UpdateUserPipelineReleaseResponse) {
    option (google.api.http) = {
      patch: "/v1beta/{release.name=users/*/pipelines/*/releases/*}"
      body: "release"
    };
    option (google.api.method_signature) = "release,update_mask";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Release"};
  }

  // Delete a release in a pipeline owned by a user
  //
  // Deletes a pipeline release, where the pipeline is identified by its
  // resource name, formed by its parent user and ID.
  //
  // The authenticated user must be the parent of the pipeline in order to
  // perform this action.
  rpc DeleteUserPipelineRelease(DeleteUserPipelineReleaseRequest) returns (DeleteUserPipelineReleaseResponse) {
    option (google.api.http) = {delete: "/v1beta/{name=users/*/pipelines/*/releases/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Release"};
  }

  // Set the version of a pipeline owned by a user to a pinned release
  //
  // Sets the pipeline configuration to a pinned version defined by a release.
  //
  // The pipeline is identified by its resource name, formed by its parent user
  // and ID.
  //
  // The authenticated user must be the parent of the pipeline in order to
  // perform this action.
  rpc RestoreUserPipelineRelease(RestoreUserPipelineReleaseRequest) returns (RestoreUserPipelineReleaseResponse) {
    option (google.api.http) = {post: "/v1beta/{name=users/*/pipelines/*/releases/*}/restore"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Release"};
  }

  // Rename a release in a pipeline owned by a user
  //
  // Updates the ID of a pipeline release, where the pipeline is identified by
  // its resource name, formed by the parent user and ID. Since this is an
  // output-only field, a custom method is required to modify it.
  //
  // The pipeline release name will be updated accordingly, as it is  composed
  // by the pipeline name and the ID of the release (e.g.
  // `users/luigi/pipelines/pizza-recipe-generator/releases/v0.2.1`).
  //
  // The authenticated user must be the parent of the pipeline in order to
  // perform this action.
  rpc RenameUserPipelineRelease(RenameUserPipelineReleaseRequest) returns (RenameUserPipelineReleaseResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=users/*/pipelines/*/releases/*}/rename"
      body: "*"
    };
    option (google.api.method_signature) = "name,new_pipeline_release_id";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Release"};
  }

  // Trigger a version of a pipeline owned by a user
  //
  // Triggers the synchronous execution of of a pipeline. While the trigger
  // endpoint (where the release version isn't specified) triggers the pipeline
  // at its latest release, this method allows the client to specified any
  // committed release.
  //
  // The pipeline is identified by its resource name, formed by its parent user
  // and ID.
  rpc TriggerUserPipelineRelease(TriggerUserPipelineReleaseRequest) returns (TriggerUserPipelineReleaseResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=users/*/pipelines/*/releases/*}/trigger"
      body: "*"
    };
    option (google.api.method_signature) = "name,data";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Trigger"};
  }

  // Trigger a version of a pipeline owned by a user asynchronously
  //
  // Triggers the asynchronous execution of of a pipeline. While the trigger
  // endpoint (where the release version isn't specified) triggers the pipeline
  // at its latest release, this method allows the client to specified any
  // committed release.
  //
  // The pipeline is identified by its resource name, formed by its parent user
  // and ID.
  rpc TriggerAsyncUserPipelineRelease(TriggerAsyncUserPipelineReleaseRequest) returns (TriggerAsyncUserPipelineReleaseResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=users/*/pipelines/*/releases/*}/triggerAsync"
      body: "*"
    };
    option (google.api.method_signature) = "name,data";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Trigger"};
  }

  // Create a new organization pipeline
  //
  // Creates a new pipeline under the parenthood of an organization.
  rpc CreateOrganizationPipeline(CreateOrganizationPipelineRequest) returns (CreateOrganizationPipelineResponse) {
    option (google.api.http) = {
      post: "/v1beta/{parent=organizations/*}/pipelines"
      body: "pipeline"
    };
    option (google.api.method_signature) = "parent,pipeline";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // List organization pipelines
  //
  // Returns a paginated list of pipelines that belong to the specified
  // organization.
  rpc ListOrganizationPipelines(ListOrganizationPipelinesRequest) returns (ListOrganizationPipelinesResponse) {
    option (google.api.http) = {get: "/v1beta/{parent=organizations/*}/pipelines"};
    option (google.api.method_signature) = "parent";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Get a pipeline owned by an organization
  //
  // Returns the details of an organization-owned pipeline by its resource name,
  // which is defined by the parent organization and the ID of the pipeline.
  rpc GetOrganizationPipeline(GetOrganizationPipelineRequest) returns (GetOrganizationPipelineResponse) {
    option (google.api.http) = {get: "/v1beta/{name=organizations/*/pipelines/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Update a pipeline owned by an organization
  //
  // Udpates a pipeline, accessing it by its resource name, which is defined by
  //
  // In REST requests, only the supplied pipeline fields will be taken into
  // account when updating the resource.
  rpc UpdateOrganizationPipeline(UpdateOrganizationPipelineRequest) returns (UpdateOrganizationPipelineResponse) {
    option (google.api.http) = {
      patch: "/v1beta/{pipeline.name=organizations/*/pipelines/*}"
      body: "pipeline"
    };
    option (google.api.method_signature) = "pipeline,update_mask";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Delete a pipeline owned by an organization
  //
  // Deletes a pipeline, accesing it by its resource name, which is defined by
  // the parent organization and the ID of the pipeline.
  rpc DeleteOrganizationPipeline(DeleteOrganizationPipelineRequest) returns (DeleteOrganizationPipelineResponse) {
    option (google.api.http) = {delete: "/v1beta/{name=organizations/*/pipelines/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Validate a pipeline a pipeline owned by an organization
  //
  // Validates a pipeline by its resource name, which is defined by the parent
  // organization and the ID of the pipeline.
  //
  // Validation checks the recipe of the pipeline and the status of its
  // components.
  rpc ValidateOrganizationPipeline(ValidateOrganizationPipelineRequest) returns (ValidateOrganizationPipelineResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=organizations/*/pipelines/*}/validate"
      body: "*"
    };
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Rename a pipeline owned by an organization
  //
  // Updates the ID of a pipeline. Since this is an output-only field, a custom
  // method is required to modify it.
  //
  // The pipeline name will be updated accordingly, as it is  composed by the
  // parent organization and ID of the pipeline (e.g.
  // `organizations/luigi/pipelines/pizza-recipe-generator`).
  rpc RenameOrganizationPipeline(RenameOrganizationPipelineRequest) returns (RenameOrganizationPipelineResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=organizations/*/pipelines/*}/rename"
      body: "*"
    };
    option (google.api.method_signature) = "name,new_pipeline_id";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Clone a pipeline owned by an organization
  //
  // Clones a pipeline owned by an organization. The new pipeline may have a
  // different parent, and this can be either a user or an organization.
  rpc CloneOrganizationPipeline(CloneOrganizationPipelineRequest) returns (CloneOrganizationPipelineResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=organizations/*/pipelines/*}/clone"
      body: "*"
    };
    option (google.api.method_signature) = "name,target";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Pipeline"};
  }

  // Trigger a pipeline owned by an organization
  //
  // Triggers the execution of a pipeline synchronously, i.e., the result is sent
  // back to the organization right after the data is processed. This method is
  // intended for real-time inference when low latency is of concern.
  //
  // The pipeline is identified by its resource name, formed by the parent
  // organization and ID of the pipeline.
  //
  // For more information, see [Trigger
  // Pipeline](https://www.instill.tech/docs/latest/core/concepts/pipeline#trigger-pipeline).
  rpc TriggerOrganizationPipeline(TriggerOrganizationPipelineRequest) returns (TriggerOrganizationPipelineResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=organizations/*/pipelines/*}/trigger"
      body: "*"
    };
    option (google.api.method_signature) = "name,data";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Trigger"};
  }

  // Trigger a pipeline owned by an organization asynchronously
  //
  // Triggers the execution of a pipeline asynchronously, i.e., the result
  // contains the necessary information to access the result and status of the
  // operation. This method is intended for cases that require long-running
  // workloads.
  //
  // The pipeline is identified by its resource name, formed by the parent
  // organization and ID of the pipeline.
  //
  // For more information, see [Trigger
  // Pipeline](https://www.instill.tech/docs/latest/core/concepts/pipeline#trigger-pipeline).
  rpc TriggerAsyncOrganizationPipeline(TriggerAsyncOrganizationPipelineRequest) returns (TriggerAsyncOrganizationPipelineResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=organizations/*/pipelines/*}/triggerAsync"
      body: "*"
    };
    option (google.api.method_signature) = "name,data";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Trigger"};
  }

  // Release a version of a pipeline owned by an organization
  //
  // Commits the version of a pipeline, identified by its resource name, which is
  // formed by the parent organization and ID of the pipeline.
  rpc CreateOrganizationPipelineRelease(CreateOrganizationPipelineReleaseRequest) returns (CreateOrganizationPipelineReleaseResponse) {
    option (google.api.http) = {
      post: "/v1beta/{parent=organizations/*/pipelines/*}/releases"
      body: "release"
    };
    option (google.api.method_signature) = "parent,release";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Release"};
  }

  // List the releases in a pipeline owned by an organization
  //
  // Lists the commited versions of a pipeline, identified by its resource name,
  // which is formed by the parent organization and ID of the pipeline.
  rpc ListOrganizationPipelineReleases(ListOrganizationPipelineReleasesRequest) returns (ListOrganizationPipelineReleasesResponse) {
    option (google.api.http) = {get: "/v1beta/{parent=organizations/*/pipelines/*}/releases"};
    option (google.api.method_signature) = "pipelines";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Release"};
  }

  // Get a release in a pipeline owned by an organization
  //
  // Gets the details of a pipeline release, where the pipeline is identified by
  // its resource name, formed by its parent organization and ID.
  rpc GetOrganizationPipelineRelease(GetOrganizationPipelineReleaseRequest) returns (GetOrganizationPipelineReleaseResponse) {
    option (google.api.http) = {get: "/v1beta/{name=organizations/*/pipelines/*/releases/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Release"};
  }

  // Update a release in a pipeline owned by an organization
  //
  // Updates the details of a pipeline release, where the pipeline is identified
  // by its resource name, formed by its parent organization and ID.
  rpc UpdateOrganizationPipelineRelease(UpdateOrganizationPipelineReleaseRequest) returns (UpdateOrganizationPipelineReleaseResponse) {
    option (google.api.http) = {
      patch: "/v1beta/{release.name=organizations/*/pipelines/*/releases/*}"
      body: "release"
    };
    option (google.api.method_signature) = "release,update_mask";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Release"};
  }

  // Delete a release in a pipeline owned by an organization
  //
  // Deletes a pipeline release, where the pipeline is identified by its resource
  // name, formed by its parent organization and ID.
  rpc DeleteOrganizationPipelineRelease(DeleteOrganizationPipelineReleaseRequest) returns (DeleteOrganizationPipelineReleaseResponse) {
    option (google.api.http) = {delete: "/v1beta/{name=organizations/*/pipelines/*/releases/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Release"};
  }

  // Set the version of a pipeline owned by an organization to a pinned release
  //
  // Sets the pipeline configuration to a pinned version defined by a release.
  //
  // The pipeline is identified by its resource name, formed by its parent
  // organization and ID.
  rpc RestoreOrganizationPipelineRelease(RestoreOrganizationPipelineReleaseRequest) returns (RestoreOrganizationPipelineReleaseResponse) {
    option (google.api.http) = {post: "/v1beta/{name=organizations/*/pipelines/*/releases/*}/restore"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Release"};
  }

  // Rename a release in a pipeline owned by an organization
  //
  // Updates the ID of a pipeline release, where the pipeline is identified by
  // its resource name, formed by the parent organization and ID. Since this is
  // an output-only field, a custom method is required to modify it.
  //
  // The pipeline release name will be updated accordingly, as it is  composed by
  // the pipeline name and the ID of the release (e.g.
  // `organizations/luigi/pipelines/pizza-recipe-generator/releases/v0.2.1`).
  rpc RenameOrganizationPipelineRelease(RenameOrganizationPipelineReleaseRequest) returns (RenameOrganizationPipelineReleaseResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=organizations/*/pipelines/*/releases/*}/rename"
      body: "*"
    };
    option (google.api.method_signature) = "name,new_pipeline_release_id";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Release"};
  }

  // Trigger a version of a pipeline owned by an organization
  //
  // Triggers the synchronous execution of of a pipeline. While the trigger
  // endpoint (where the release version isn't specified) triggers the pipeline
  // at its latest release, this method allows the client to specified any
  // committed release.
  //
  // The pipeline is identified by its resource name, formed by its parent
  // organization and ID.
  rpc TriggerOrganizationPipelineRelease(TriggerOrganizationPipelineReleaseRequest) returns (TriggerOrganizationPipelineReleaseResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=organizations/*/pipelines/*/releases/*}/trigger"
      body: "*"
    };
    option (google.api.method_signature) = "name,data";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Trigger"};
  }

  // Trigger a version of a pipeline owned by an organization asynchronously
  //
  // Triggers the asynchronous execution of of a pipeline. While the trigger
  // endpoint (where the release version isn't specified) triggers the pipeline
  // at its latest release, this method allows the client to specified any
  // committed release.
  //
  // The pipeline is identified by its resource name, formed by its parent
  // organization and ID.
  rpc TriggerAsyncOrganizationPipelineRelease(TriggerAsyncOrganizationPipelineReleaseRequest) returns (TriggerAsyncOrganizationPipelineReleaseResponse) {
    option (google.api.http) = {
      post: "/v1beta/{name=organizations/*/pipelines/*/releases/*}/triggerAsync"
      body: "*"
    };
    option (google.api.method_signature) = "name,data";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Trigger"};
  }

  // Get the details of a long-running operation
  //
  // This method allows requesters to request the status and outcome of
  // long-running operations such as asynchronous pipeline triggers.
  rpc GetOperation(GetOperationRequest) returns (GetOperationResponse) {
    option (google.api.http) = {get: "/v1beta/{name=operations/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Trigger"};
  }

  // List connector definitions
  //
  // Returns a paginated list of connector definitions.
  rpc ListConnectorDefinitions(ListConnectorDefinitionsRequest) returns (ListConnectorDefinitionsResponse) {
    option (google.api.http) = {get: "/v1beta/connector-definitions"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Component"};
    option deprecated = true;
  }

  // Get connector definition
  //
  // Returns the details of a connector definition.
  rpc GetConnectorDefinition(GetConnectorDefinitionRequest) returns (GetConnectorDefinitionResponse) {
    option (google.api.http) = {get: "/v1beta/{name=connector-definitions/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Component"};
    option deprecated = true;
  }

  // List operator definitions
  //
  // Returns a paginated list of operator definitions.
  rpc ListOperatorDefinitions(ListOperatorDefinitionsRequest) returns (ListOperatorDefinitionsResponse) {
    option (google.api.http) = {get: "/v1beta/operator-definitions"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Component"};
    option deprecated = true;
  }

  // List component definitions
  //
  // Returns a paginated list of component definitions, regardless their type.
  // This offers a single source of truth, with pagination and filter
  // capabilities, for the components that might be used in a VDP pipeline.
  rpc ListComponentDefinitions(ListComponentDefinitionsRequest) returns (ListComponentDefinitionsResponse) {
    option (google.api.http) = {get: "/v1beta/component-definitions"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Component"};
  }

  // Get operator definition
  //
  // Returns the details of an operator definition.
  rpc GetOperatorDefinition(GetOperatorDefinitionRequest) returns (GetOperatorDefinitionResponse) {
    option (google.api.http) = {get: "/v1beta/{name=operator-definitions/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Component"};
    option deprecated = true;
  }

  // Check the availibity of a resource name
  //
  // Check whether a resource name is already in use. Currently this endpoint
  // only supports pipeline and connector resource names.
  rpc CheckName(CheckNameRequest) returns (CheckNameResponse) {
    option (google.api.http) = {
      post: "/v1beta/check-name"
      body: "*"
    };
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Utils"};
  }

  // Create a new user secret
  //
  // Creates a new secret under the parenthood of an user.
  rpc CreateUserSecret(CreateUserSecretRequest) returns (CreateUserSecretResponse) {
    option (google.api.http) = {
      post: "/v1beta/{parent=users/*}/secrets"
      body: "secret"
    };
    option (google.api.method_signature) = "parent,secret";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Secret"};
  }

  // List user secrets
  //
  // Returns a paginated list of secrets that belong to the specified
  // user.
  rpc ListUserSecrets(ListUserSecretsRequest) returns (ListUserSecretsResponse) {
    option (google.api.http) = {get: "/v1beta/{parent=users/*}/secrets"};
    option (google.api.method_signature) = "parent";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Secret"};
  }

  // Get a secret owned by an user
  //
  // Returns the details of an user-owned secret by its resource name,
  // which is defined by the parent user and the ID of the secret.
  rpc GetUserSecret(GetUserSecretRequest) returns (GetUserSecretResponse) {
    option (google.api.http) = {get: "/v1beta/{name=users/*/secrets/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Secret"};
  }

  // Update a secret owned by an user
  //
  // Udpates a secret, accessing it by its resource name, which is defined by
  //
  // In REST requests, only the supplied secret fields will be taken into
  // account when updating the resource.
  rpc UpdateUserSecret(UpdateUserSecretRequest) returns (UpdateUserSecretResponse) {
    option (google.api.http) = {
      patch: "/v1beta/{secret.name=users/*/secrets/*}"
      body: "secret"
    };
    option (google.api.method_signature) = "secret,update_mask";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Secret"};
  }

  // Delete a secret owned by an user
  //
  // Deletes a secret, accesing it by its resource name, which is defined by
  // the parent user and the ID of the secret.
  rpc DeleteUserSecret(DeleteUserSecretRequest) returns (DeleteUserSecretResponse) {
    option (google.api.http) = {delete: "/v1beta/{name=users/*/secrets/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Secret"};
  }

  // Create a new organization secret
  //
  // Creates a new secret under the parenthood of an organization.
  rpc CreateOrganizationSecret(CreateOrganizationSecretRequest) returns (CreateOrganizationSecretResponse) {
    option (google.api.http) = {
      post: "/v1beta/{parent=organizations/*}/secrets"
      body: "secret"
    };
    option (google.api.method_signature) = "parent,secret";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Secret"};
  }

  // List organization secrets
  //
  // Returns a paginated list of secrets that belong to the specified
  // organization.
  rpc ListOrganizationSecrets(ListOrganizationSecretsRequest) returns (ListOrganizationSecretsResponse) {
    option (google.api.http) = {get: "/v1beta/{parent=organizations/*}/secrets"};
    option (google.api.method_signature) = "parent";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Secret"};
  }

  // Get a secret owned by an organization
  //
  // Returns the details of an organization-owned secret by its resource name,
  // which is defined by the parent organization and the ID of the secret.
  rpc GetOrganizationSecret(GetOrganizationSecretRequest) returns (GetOrganizationSecretResponse) {
    option (google.api.http) = {get: "/v1beta/{name=organizations/*/secrets/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Secret"};
  }

  // Update a secret owned by an organization
  //
  // Udpates a secret, accessing it by its resource name, which is defined by
  //
  // In REST requests, only the supplied secret fields will be taken into
  // account when updating the resource.
  rpc UpdateOrganizationSecret(UpdateOrganizationSecretRequest) returns (UpdateOrganizationSecretResponse) {
    option (google.api.http) = {
      patch: "/v1beta/{secret.name=organizations/*/secrets/*}"
      body: "secret"
    };
    option (google.api.method_signature) = "secret,update_mask";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Secret"};
  }

  // Delete a secret owned by an organization
  //
  // Deletes a secret, accesing it by its resource name, which is defined by
  // the parent organization and the ID of the secret.
  rpc DeleteOrganizationSecret(DeleteOrganizationSecretRequest) returns (DeleteOrganizationSecretResponse) {
    option (google.api.http) = {delete: "/v1beta/{name=organizations/*/secrets/*}"};
    option (google.api.method_signature) = "name";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Secret"};
  }
}
