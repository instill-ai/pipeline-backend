syntax = "proto3";

package vdp.pipeline.v1beta;

// Google API
import "google/api/field_behavior.proto";
// Protocol Buffers Well-Known types
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
// VDP definitions
import "../../../vdp/pipeline/v1beta/common.proto";

// Connection contains the parameters to communicate with a 3rd party app. A
// component may reference a connection in their setup. One connection may be
// used by several components and pipelines.
message Connection {
  // Method defines how the connection is set up.
  enum Method {
    // Unspecified.
    METHOD_UNSPECIFIED = 0;
    // Key-value collection. The user is responsible of fetching the connection
    // details from the 3rd party service.
    METHOD_DICTIONARY = 1;
    // Access token created via OAuth 2.0 authorization.
    METHOD_OAUTH = 2;
  }
  // UUID-formatted unique identifier.
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // ID.
  string id = 2 [(google.api.field_behavior) = REQUIRED];
  // ID of the namespace owning the connection.
  string namespace_id = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Integration ID. It determines for which type of components can reference
  // this connection.
  string integration_id = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];
  // Integration title. This helps the console display the results grouped by
  // integration ID without needing an extra call to fetch title by integration
  // ID.
  string integration_title = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Connection method. It references the setup schema provided by the
  // integration.
  Method method = 6 [(google.api.field_behavior) = REQUIRED];
  // Connection details. This field is required on creation, optional on view.
  // When viewing the connection details, the setup values will be redacted.
  google.protobuf.Struct setup = 7 [(google.api.field_behavior) = REQUIRED];
  // A list of scopes that identify the resources that the connection will be
  // able to access on the user's behalf. This is typically passed on creation
  // when the setup has been generated through an OAuth flow with a limited set
  // of scopes.
  repeated string scopes = 11 [(google.api.field_behavior) = OPTIONAL];
  // When the connection method is METHOD_OAUTH, this field will hold the
  // identity (e.g., email, username) with which the access token has been
  // generated.
  optional string identity = 13 [(google.api.field_behavior) = OPTIONAL];
  // When the connection method is METHOD_OAUTH, the access token might come
  // with some extra information that might vary across vendors. This
  // information is passed as connection metadata.
  optional google.protobuf.Struct o_auth_access_details = 12 [(google.api.field_behavior) = OPTIONAL];
  // View defines how the connection is presented. The following fields are
  // only shown in the FULL view:
  // - setup
  // - scopes
  // - oAuthAccessDetails
  View view = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Creation timestamp.
  google.protobuf.Timestamp create_time = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Last update timestamp.
  google.protobuf.Timestamp update_time = 10 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ListNamespaceConnectionsRequest represents a request to list the connections
// created by a namespace.
message ListNamespaceConnectionsRequest {
  // Namespace ID.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The maximum number of items to return. The default and cap values are 10 and 100, respectively.
  optional int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];
  // Page token. By default, the first page will be returned.
  optional string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
  // Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
  // The following filters are supported:
  // - `integrationId`
  // - `qConnection` (fuzzy search on connection ID, integration title or vendor)
  //
  // **Examples**:
  // - List connections where app name, vendor or connection ID match `googl`: `q="googl"`.
  // - List connections where the component type is `openai` (e.g. to setup a connector within a pipeline): `integrationId="openai"`.
  optional string filter = 4 [(google.api.field_behavior) = OPTIONAL];
}

// ListNamespaceConnectionsResponse contains a paginated list of connections.
message ListNamespaceConnectionsResponse {
  // A list of connections matching the request parameters.
  repeated Connection connections = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Next page token.
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Total number of items.
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// GetNamespaceConnectionRequest represents a request to view the details of a
// connection.
message GetNamespaceConnectionRequest {
  // Namespace ID.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // Connection ID.
  string connection_id = 2 [(google.api.field_behavior) = REQUIRED];
  // View allows clients to specify the desired view in the response.
  optional View view = 3 [(google.api.field_behavior) = OPTIONAL];
}

// GetNamespaceConnectionResponse contains the requested connection.
message GetNamespaceConnectionResponse {
  // The requested connection.
  Connection connection = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CreateNamespaceConnectionRequest represents a request to create a
// connection.
message CreateNamespaceConnectionRequest {
  // ID of the namespace that owns the connection.
  string namespace_id = 2 [(google.api.field_behavior) = REQUIRED];
  // Properties of the connection to be created.
  Connection connection = 1 [(google.api.field_behavior) = REQUIRED];
}

// CreateNamespaceConnectionResponse contains the created connection.
message CreateNamespaceConnectionResponse {
  // The created connection.
  Connection connection = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UpdateNamespaceConnectionRequest represents a request to update a
// connection.
message UpdateNamespaceConnectionRequest {
  // ID of the connection to be updated, as present in the database.
  string connection_id = 1 [(google.api.field_behavior) = REQUIRED];
  // ID of the namespace that owns the connection.
  string namespace_id = 4 [(google.api.field_behavior) = REQUIRED];
  // Connection object with the new properties to be updated. Immutable and
  // output-only fields will be ignored. The Setup property must be updated
  // in block (no partial update is supported).
  Connection connection = 2 [(google.api.field_behavior) = REQUIRED];
  // The update mask specifies the subset of fields that should be modified.
  //
  // For more information about this field, see
  // https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#field-mask.
  google.protobuf.FieldMask update_mask = 3 [(google.api.field_behavior) = REQUIRED];
}

// UpdateNamespaceConnectionResponse contains the updated connection.
message UpdateNamespaceConnectionResponse {
  // The created connection.
  Connection connection = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// DeleteNamespaceConnectionRequest represents a request to delete a
// connection.
message DeleteNamespaceConnectionRequest {
  // Namespace ID.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // Connection ID.
  string connection_id = 2 [(google.api.field_behavior) = REQUIRED];
}

// DeleteNamespaceConnectionResponse is an empty response.
message DeleteNamespaceConnectionResponse {}

// TestNamespaceConnectionRequest represents a request to test a connection.
message TestNamespaceConnectionRequest {
  // Namespace ID.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // Connection ID.
  string connection_id = 2 [(google.api.field_behavior) = REQUIRED];
}

// TestNamespaceConnectionResponse is an empty response.
message TestNamespaceConnectionResponse {}

// Integration contains the parameters to create a connection between
// components and 3rd party apps.
message Integration {
  // Link contains the information to display an reference to an external URL.
  message Link {
    // Text contains the message to display.
    string text = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
    // URL contains the reference the link will redirect to.
    string url = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // OAuthConfig contains the configuration parameters for fetching an access
  // token via an OAuth 2.0 flow.
  message OAuthConfig {
    // The URL of the OAuth server to initiate the authentication and
    // authorization process.
    string auth_url = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
    // The URL of the OAuth server to exchange the authorization code for an
    // access token.
    string access_url = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
    // A list of scopes that identify the resources that the connection will be
    // able to access on the user's behalf.
    repeated string scopes = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // UUID-formatted unique identifier. It references a component definition.
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Identifier of the integration, which references a component definition.
  // Components with that definition ID will be able to use the connections
  // produced by this integration.
  string id = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Title, reflects the app name.
  string title = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Short description of the integrated app.
  string description = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Integrated app vendor name.
  string vendor = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Integration icon. This is a path that's relative to the root of
  // the component implementation and that allows frontend applications to pull
  // and locate the icons.
  // See the `icon` field in the `ComponentDefinition` entity for more
  // information.
  string icon = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Reference to the vendor's documentation to expand the integration details.
  optional Link help_link = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The connection setup field definitions. Each integration will require
  // different data to connect to the 3rd party app.
  google.protobuf.Struct setup_schema = 10 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Configuration parameters required for the OAuth setup flow. This field
  // will be present only if the integration supports OAuth 2.0.
  optional OAuthConfig o_auth_config = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
  // View defines how the integration is presented. The following fields are
  // only shown in the FULL view:
  // - schemas
  // - setupSchema
  // - oAuthConfig
  View view = 9 [(google.api.field_behavior) = OUTPUT_ONLY];

  // SetupSchema defines the schema for a connection setup.
  // This message is deprecated.
  message SetupSchema {
    // The connection method, which will define the fields in the schema.
    Connection.Method method = 1 [
      deprecated = true,
      (google.api.field_behavior) = OUTPUT_ONLY
    ];
    // The connection setup field definitions. Each integration will require
    // different data to connect to the 3rd party app.
    google.protobuf.Struct schema = 2 [
      deprecated = true,
      (google.api.field_behavior) = OUTPUT_ONLY
    ];
  }

  // Schemas defines the supported schemas for the connection setup.
  // We haven't found a case for a schema that changes on the connection method
  // (components don't care about how the connection was built), so the schema
  // will be provided in the setupSchema field and the OAuth support and
  // configuration will be provided in oAuthConfig.
  repeated SetupSchema schemas = 8 [
    deprecated = true,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

// ListPipelineIDsByConnectionIDRequest represents a request to list the
// pipelines that reference a connection.
message ListPipelineIDsByConnectionIDRequest {
  // Namespace ID.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // Connection ID.
  string connection_id = 2 [(google.api.field_behavior) = REQUIRED];
  // The maximum number of items to return. The default and cap values are 10 and 100, respectively.
  optional int32 page_size = 3 [(google.api.field_behavior) = OPTIONAL];
  // Page token. By default, the first page will be returned.
  optional string page_token = 4 [(google.api.field_behavior) = OPTIONAL];
  // Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
  // The following filters are supported:
  // - `q` (fuzzy search on pipeline ID)
  optional string filter = 5 [(google.api.field_behavior) = OPTIONAL];
}

// ListPipelineIDsByConnectionIDResponse contains a paginated list of integrations.
message ListPipelineIDsByConnectionIDResponse {
  // A list of pipeline IDs matching the request parameters.
  repeated string pipeline_ids = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Next page token.
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Total number of items.
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ListIntegrationsRequest represents a request to list the available
// integrations.
message ListIntegrationsRequest {
  // The maximum number of items to return. The default and cap values are 10 and 100, respectively.
  optional int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];
  // Page token. By default, the first page will be returned.
  optional string page_token = 2 [(google.api.field_behavior) = OPTIONAL];
  // Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
  // The following filters are supported:
  // - `qIntegration` (fuzzy search on title or vendor)
  //
  // **Examples**:
  // - List integrations where app name or vendor match `googl`: `q="googl"`.
  optional string filter = 3 [(google.api.field_behavior) = OPTIONAL];
}

// ListIntegrationsResponse contains a paginated list of integrations.
message ListIntegrationsResponse {
  // A list of integrations matching the request parameters.
  repeated Integration integrations = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Next page token.
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Total number of items.
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// GetIntegrationRequest represents a request to view the details of an
// integration.
message GetIntegrationRequest {
  // Integration ID.
  string integration_id = 1 [(google.api.field_behavior) = REQUIRED];
  // View allows clients to specify the desired view in the response.
  optional View view = 2 [(google.api.field_behavior) = OPTIONAL];
}

// GetIntegrationResponse contains the requested integration.
message GetIntegrationResponse {
  // The requested integration.
  Integration integration = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}
