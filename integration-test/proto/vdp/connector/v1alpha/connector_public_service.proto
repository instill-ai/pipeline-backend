syntax = "proto3";

package vdp.connector.v1alpha;

// Google API
import "google/api/annotations.proto";
import "google/api/client.proto";

import "../../../vdp/connector/v1alpha/connector_definition.proto";
import "../../../vdp/connector/v1alpha/connector.proto";

// Connector service responds to external access
service ConnectorPublicService {
  option (google.api.default_host) = "api.instill.tech";

  /////////////////////////////////
  // Connector definition methods
  /////////////////////////////////

  // Liveness method receives a LivenessRequest message and returns a
  // LivenessResponse message.
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__liveness"
      additional_bindings : [ {get : "/v1alpha/health/connector"} ]
    };
  }

  // Readiness method receives a ReadinessRequest message and returns a
  // ReadinessResponse message.
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__readiness"
    };
  }

  // ListConnectorDefinitions method receives a
  // ListConnectorDefinitionsRequest message and returns a
  // ListConnectorDefinitionsResponse message.
  rpc ListConnectorDefinitions(ListConnectorDefinitionsRequest)
      returns (ListConnectorDefinitionsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/connector-definitions"
    };
  }

  // GetConnectorDefinition method receives a
  // GetConnectorDefinitionRequest message and returns a
  // GetGetConnectorDefinitionResponse message.
  rpc GetConnectorDefinition(GetConnectorDefinitionRequest)
      returns (GetConnectorDefinitionResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=connector-definitions/*}"
    };
    option (google.api.method_signature) = "name";
  }

  /////////////////////////////////
  // Connector methods
  /////////////////////////////////

  // CreateConnector method receives a
  // CreateConnectorRequest message and returns a
  // CreateConnectorResponse message.
  rpc CreateConnector(CreateConnectorRequest)
      returns (CreateConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/connectors"
      body : "connector"
    };
    option (google.api.method_signature) = "connector";
  }

  // ListConnectors method receives a
  // ListConnectorsRequest message and returns a
  // ListConnectorsResponse message.
  rpc ListConnectors(ListConnectorsRequest)
      returns (ListConnectorsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/connectors"
    };
  }

  // GetConnector method receives a GetConnectorRequest
  // message and returns a GetConnectorResponse message.
  rpc GetConnector(GetConnectorRequest)
      returns (GetConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=connectors/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // UpdateConnector method receives a
  // UpdateConnectorRequest message and returns a
  // UpdateConnectorResponse message.
  rpc UpdateConnector(UpdateConnectorRequest)
      returns (UpdateConnectorResponse) {
    option (google.api.http) = {
      patch : "/v1alpha/{connector.name=connectors/*}"
      body : "connector"
    };
    option (google.api.method_signature) = "connector,update_mask";
  }

  // DeleteConnector method receives a
  // DeleteConnectorRequest message and returns a
  // DeleteConnectorResponse message.
  rpc DeleteConnector(DeleteConnectorRequest)
      returns (DeleteConnectorResponse) {
    option (google.api.http) = {
      delete : "/v1alpha/{name=connectors/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // LookUpConnector method receives a
  // LookUpConnectorRequest message and returns a
  // LookUpConnectorResponse
  rpc LookUpConnector(LookUpConnectorRequest)
      returns (LookUpConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{permalink=connectors/*}/lookUp"
    };
    option (google.api.method_signature) = "permalink";
  }

  // Connect a connector.
  // The "state" of the connector after connecting is "CONNECTED".
  // ConnectConnector can be called on Connector in the
  // state `DISCONNECTED`; Connector in a different state (including
  // `CONNECTED`) returns an error.
  rpc ConnectConnector(ConnectConnectorRequest)
      returns (ConnectConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=connectors/*}/connect"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Disconnect a connector.
  // The "state" of the connector after disconnecting is "DISCONNECTED".
  // DisconnectConnector can be called on Connector in the
  // state `CONNECTED`; Connector in a different state (including
  // `DISCONNECTED`) returns an error.
  rpc DisconnectConnector(DisconnectConnectorRequest)
      returns (DisconnectConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=connectors/*}/disconnect"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // RenameConnector method receives a
  // RenameConnectorRequest message and returns a
  // RenameConnectorResponse message.
  rpc RenameConnector(RenameConnectorRequest)
      returns (RenameConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=connectors/*}/rename"
      body : "*"
    };
    option (google.api.method_signature) = "name,new_connector_id";
  }

  // ExecuteConnector method receives a
  // ExecuteConnectorRequest message and returns a
  // ExecuteConnectorResponse message.
  rpc ExecuteConnector(ExecuteConnectorRequest)
      returns (ExecuteConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=connectors/*}/execute"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  };

  // WatchConnector method receives a
  // WatchConnectorRequest message and returns a
  // WatchConnectorResponse
  rpc WatchConnector(WatchConnectorRequest)
      returns (WatchConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=connectors/*}/watch"
    };
    option (google.api.method_signature) = "name";
  }

  // TestConnector method receives a TestConnectorRequest
  // message and returns a TestConnectorResponse
  rpc TestConnector(TestConnectorRequest)
      returns (TestConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=connectors/*}/testConnection"
    };
    option (google.api.method_signature) = "name";
  }
}
