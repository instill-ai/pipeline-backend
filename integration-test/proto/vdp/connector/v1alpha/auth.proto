syntax = "proto3";

package vdp.connector.v1alpha;

// Protobuf standard
import "google/protobuf/struct.proto";

// Google API
import "google/api/field_behavior.proto";

// OauthConfigSpecification represents oauth config specification
message OauthConfigSpecification {
  // OAuth specific blob. This is a Json Schema used to validate Json
  // configurations used as input to OAuth. Must be a valid non-nested JSON that
  // refers to properties from ConnectorSpecification.connectionSpecification
  // using special annotation 'path_in_connector_config'.
  // These are input values the user is entering through the UI to authenticate
  // to the connector, that might also shared as inputs for syncing data via the
  // connector.
  //
  // Examples:
  //
  // if no connector values is shared during oauth flow,
  // oauth_user_input_from_connector_config_specification=[] if connector values
  // such as 'app_id' inside the top level are used to generate the API url for
  // the oauth flow,
  //   oauth_user_input_from_connector_config_specification={
  //     app_id: {
  //       type: string
  //       path_in_connector_config: ['app_id']
  //     }
  //   }
  // if connector values such as 'info.app_id' nested inside another object are
  // used to generate the API url for the oauth flow,
  //  oauth_user_input_from_connector_config_specification={
  //    app_id: {
  //      type: string
  //      path_in_connector_config: ['info', 'app_id']
  //    }
  //  }
  google.protobuf.Struct oauth_user_input_from_connector_config_specification =
      1 [ (google.api.field_behavior) = OUTPUT_ONLY ];

  // OAuth specific blob. This is a Json Schema used to validate Json
  // configurations produced by the OAuth flows as they are returned by the
  // distant OAuth APIs. Must be a valid JSON describing the fields to merge
  // back to `ConnectorSpecification.connectionSpecification`. For each field, a
  // special annotation `path_in_connector_config` can be specified to determine
  // where to merge it,
  //
  // Examples:
  //
  //     complete_oauth_output_specification={
  //       refresh_token: {
  //         type: string,
  //         path_in_connector_config: ['credentials', 'refresh_token']
  //       }
  //     }
  google.protobuf.Struct complete_oauth_output_specification = 2
      [ (google.api.field_behavior) = OUTPUT_ONLY ];

  // OAuth specific blob. This is a Json Schema used to validate Json
  // configurations persisted as Airbyte Server configurations. Must be a valid
  // non-nested JSON describing additional fields configured by the Airbyte
  // Instance or Workspace Admins to be used by the server when completing an
  // OAuth flow (typically exchanging an auth code for refresh token).
  //
  // Examples:
  //
  //     complete_oauth_server_input_specification={
  //       client_id: {
  //         type: string
  //       },
  //       client_secret: {
  //         type: string
  //       }
  //     }
  google.protobuf.Struct complete_oauth_server_input_specification = 3
      [ (google.api.field_behavior) = OUTPUT_ONLY ];

  // OAuth specific blob. This is a Json Schema used to validate Json
  // configurations persisted as Airbyte Server configurations that also need to
  // be merged back into the connector configuration at runtime. This is a
  // subset configuration of `complete_oauth_server_input_specification` that
  // filters fields out to retain only the ones that are necessary for the
  // connector to function with OAuth. (some fields could be used during oauth
  // flows but not needed afterwards, therefore they would be listed in the
  // `complete_oauth_server_input_specification` but not
  // `complete_oauth_server_output_specification`) Must be a valid non-nested
  // JSON describing additional fields configured by the Airbyte Instance or
  // Workspace Admins to be used by the connector when using OAuth flow APIs.
  // These fields are to be merged back to
  // `ConnectorSpecification.connectionSpecification`. For each field, a special
  // annotation `path_in_connector_config` can be specified to determine where
  // to merge it,
  //
  // Examples:
  //
  //       complete_oauth_server_output_specification={
  //         client_id: {
  //           type: string,
  //           path_in_connector_config: ['credentials', 'client_id']
  //         },
  //         client_secret: {
  //           type: string,
  //           path_in_connector_config: ['credentials', 'client_secret']
  //         }
  //       }
  google.protobuf.Struct complete_oauth_server_output_specification = 4
      [ (google.api.field_behavior) = OUTPUT_ONLY ];
}

// Additional and optional specification object to describe what an 'advanced'
// Auth flow would need to function.
// - A connector should be able to fully function with the configuration as
// described by the ConnectorSpecification in a 'basic' mode.
// - The 'advanced' mode provides easier UX for the user with UI improvements
// and automations. However, this requires further setup on the server side by
// instance or workspace admins beforehand. The trade-off is that the user does
// not have to provide as many technical inputs anymore and the auth process is
// faster and easier to complete.
message AdvancedAuth {
  // AuthFlowType enumerates the type of auth
  enum AuthFlowType {
    // AuthFlowType: AUTH_TYPE_UNSPECIFIED
    AUTH_FLOW_TYPE_UNSPECIFIED = 0;
    // AuthFlowType: AUTH_TYPE_OAUTH2_0
    AUTH_FLOW_TYPE_OAUTH2_0 = 1;
    // AuthFlowType: AUTH_TYPE_OAUTH1_0
    AUTH_FLOW_TYPE_OAUTH1_0 = 2;
  }

  // AdvancedAuth auth flow type
  AuthFlowType auth_flow_type = 1;
  // AdvancedAuth predicate key, i.e., the JSON Path to a field in the
  // connectorSpecification that should exist for the advanced auth to be
  // applicable
  repeated string predicate_key = 2;
  // AdvancedAuth predicate value, i.e., the value of the predicate key fields
  // for the advanced auth to be applicable
  string predicate_value = 3;
  // OauthConfigSpecification represents OAuth config specification
  OauthConfigSpecification oauth_config_specification = 4;
}
