import sql from 'k6/x/sql';
import { uuidv4 } from "https://jslib.k6.io/k6-utils/1.4.0/index.js";
import encoding from "k6/encoding";

let proto;

export const apiGatewayMode = (__ENV.API_GATEWAY_URL && true);

if (__ENV.API_GATEWAY_PROTOCOL) {
  if (__ENV.API_GATEWAY_PROTOCOL !== "http" && __ENV.API_GATEWAY_PROTOCOL != "https") {
    fail("only allow `http` or `https` for API_GATEWAY_PROTOCOL")
  }
  proto = __ENV.API_GATEWAY_PROTOCOL
} else {
  proto = "http"
}

if (__ENV.API_GATEWAY_PROTOCOL) {
  if (__ENV.API_GATEWAY_PROTOCOL !== "http" && __ENV.API_GATEWAY_PROTOCOL != "https") {
    fail("only allow `http` or `https` for API_GATEWAY_PROTOCOL")
  }
  proto = __ENV.API_GATEWAY_PROTOCOL
} else {
  proto = "http"
}


export const pipelinePrivateHost = `http://pipeline-backend:3081`;
export const pipelinePublicHost = apiGatewayMode ? `${proto}://${__ENV.API_GATEWAY_URL}` : `http://api-gateway:8080`
export const mgmtPublicHost = apiGatewayMode ? `${proto}://${__ENV.API_GATEWAY_URL}` : `http://api-gateway:8080`
export const pipelineGRPCPrivateHost = `pipeline-backend:3081`;
export const pipelineGRPCPublicHost = apiGatewayMode ? `${__ENV.API_GATEWAY_URL}` : `api-gateway:8080`;
export const mgmtGRPCPublicHost = apiGatewayMode ? `${__ENV.API_GATEWAY_URL}` : `api-gateway:8080`;
export const mgmtGRPCPrivateHost = `mgmt-backend:3084`;

export const dogImg = encoding.b64encode(
  open(`${__ENV.TEST_FOLDER_ABS_PATH}/integration-test/data/dog.jpg`, "b")
);
export const catImg = encoding.b64encode(
  open(`${__ENV.TEST_FOLDER_ABS_PATH}/integration-test/data/cat.jpg`, "b")
);
export const bearImg = encoding.b64encode(
  open(`${__ENV.TEST_FOLDER_ABS_PATH}/integration-test/data/bear.jpg`, "b")
);
export const dogRGBAImg = encoding.b64encode(
  open(`${__ENV.TEST_FOLDER_ABS_PATH}/integration-test/data/dog-rgba.png`, "b")
);

export const namespace = "users/admin"
export const defaultUsername = "admin"
export const defaultPassword = "password"

export const params = {
  headers: {
    "Content-Type": "application/json",
  },
  timeout: "300s",
};

export const paramsGrpc = {
  metadata: {
    "Content-Type": "application/json",
  },
  timeout: "300s",
};

const randomUUID = uuidv4();
export const paramsGRPCWithJwt = {
  metadata: {
    "Content-Type": "application/json",
    "Instill-User-Uid": randomUUID,
  },
};

export const paramsHTTPWithJwt = {
  headers: {
    "Content-Type": "application/json",
    "Instill-User-Uid": randomUUID,
  },
};


export const simplePipelineWithJSONRecipe = {
  recipe: {
    version:  "v1beta",
    variable: {
      input: {
        title: "Input",
        format: "string"
      }
    },
    output: {
      answer: {
        title: "Answer",
        value: "${b01.output.data}"
      }
    },
    component: {
      b01: {
        type: "base64",
        task: "TASK_ENCODE",
        input: {
          data: "${variable.input}"
        }
      }
    },
  },
};

const yamlRecipe = `
version: v1beta
variable:
  input:
    title: Input
    format: string

output:
  answer:
    title: Answer
    value: \${b01.output.data}

component:
  b01:
    type: base64
    task: TASK_ENCODE
    input:
      data: \${variable.input}
`;

export const simplePipelineWithYAMLRecipe = {
  rawRecipe: yamlRecipe,
};




export const simplePayload = {
  data: [
    {
      variable: {
        input: "a",
      }
    },
  ],
};

// TODO read from env
let dbHost = 'localhost';
if (__ENV.DB_HOST) {
  dbHost = __ENV.DB_HOST;
}

export const db = sql.open('postgres', `postgres://postgres:password@${dbHost}:5432/pipeline?sslmode=disable`);

// Since the tests rely on a pre-existing user, this prefix is used to clean
// up only the resources generated by these tests.
export const dbIDPrefix = "integration-test-";
