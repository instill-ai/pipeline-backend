// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/protogen-go/vdp/connector/v1alpha (interfaces: ConnectorPublicServiceClient)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	connectorv1alpha "github.com/instill-ai/protogen-go/vdp/connector/v1alpha"
	grpc "google.golang.org/grpc"
)

// MockConnectorPublicServiceClient is a mock of ConnectorPublicServiceClient interface.
type MockConnectorPublicServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorPublicServiceClientMockRecorder
}

// MockConnectorPublicServiceClientMockRecorder is the mock recorder for MockConnectorPublicServiceClient.
type MockConnectorPublicServiceClientMockRecorder struct {
	mock *MockConnectorPublicServiceClient
}

// NewMockConnectorPublicServiceClient creates a new mock instance.
func NewMockConnectorPublicServiceClient(ctrl *gomock.Controller) *MockConnectorPublicServiceClient {
	mock := &MockConnectorPublicServiceClient{ctrl: ctrl}
	mock.recorder = &MockConnectorPublicServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectorPublicServiceClient) EXPECT() *MockConnectorPublicServiceClientMockRecorder {
	return m.recorder
}

// ConnectConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) ConnectConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.ConnectConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ConnectConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConnectConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ConnectConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectConnectorResource indicates an expected call of ConnectConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) ConnectConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ConnectConnectorResource), varargs...)
}

// CreateConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) CreateConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.CreateConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.CreateConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.CreateConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectorResource indicates an expected call of CreateConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) CreateConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).CreateConnectorResource), varargs...)
}

// DeleteConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) DeleteConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.DeleteConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.DeleteConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.DeleteConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectorResource indicates an expected call of DeleteConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) DeleteConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).DeleteConnectorResource), varargs...)
}

// DisconnectConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) DisconnectConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.DisconnectConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.DisconnectConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisconnectConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.DisconnectConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectConnectorResource indicates an expected call of DisconnectConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) DisconnectConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).DisconnectConnectorResource), varargs...)
}

// ExecuteConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) ExecuteConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.ExecuteConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ExecuteConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ExecuteConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteConnectorResource indicates an expected call of ExecuteConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) ExecuteConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ExecuteConnectorResource), varargs...)
}

// GetConnectorDefinition mocks base method.
func (m *MockConnectorPublicServiceClient) GetConnectorDefinition(arg0 context.Context, arg1 *connectorv1alpha.GetConnectorDefinitionRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.GetConnectorDefinitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectorDefinition", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.GetConnectorDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectorDefinition indicates an expected call of GetConnectorDefinition.
func (mr *MockConnectorPublicServiceClientMockRecorder) GetConnectorDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorDefinition", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).GetConnectorDefinition), varargs...)
}

// GetConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) GetConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.GetConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.GetConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.GetConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectorResource indicates an expected call of GetConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) GetConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).GetConnectorResource), varargs...)
}

// ListConnectorDefinitions mocks base method.
func (m *MockConnectorPublicServiceClient) ListConnectorDefinitions(arg0 context.Context, arg1 *connectorv1alpha.ListConnectorDefinitionsRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ListConnectorDefinitionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectorDefinitions", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ListConnectorDefinitionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectorDefinitions indicates an expected call of ListConnectorDefinitions.
func (mr *MockConnectorPublicServiceClientMockRecorder) ListConnectorDefinitions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorDefinitions", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ListConnectorDefinitions), varargs...)
}

// ListConnectorResources mocks base method.
func (m *MockConnectorPublicServiceClient) ListConnectorResources(arg0 context.Context, arg1 *connectorv1alpha.ListConnectorResourcesRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ListConnectorResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectorResources", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ListConnectorResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectorResources indicates an expected call of ListConnectorResources.
func (mr *MockConnectorPublicServiceClientMockRecorder) ListConnectorResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorResources", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ListConnectorResources), varargs...)
}

// Liveness mocks base method.
func (m *MockConnectorPublicServiceClient) Liveness(arg0 context.Context, arg1 *connectorv1alpha.LivenessRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.LivenessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Liveness", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.LivenessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Liveness indicates an expected call of Liveness.
func (mr *MockConnectorPublicServiceClientMockRecorder) Liveness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liveness", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).Liveness), varargs...)
}

// LookUpConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) LookUpConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.LookUpConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.LookUpConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookUpConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.LookUpConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUpConnectorResource indicates an expected call of LookUpConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) LookUpConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUpConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).LookUpConnectorResource), varargs...)
}

// Readiness mocks base method.
func (m *MockConnectorPublicServiceClient) Readiness(arg0 context.Context, arg1 *connectorv1alpha.ReadinessRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ReadinessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Readiness", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ReadinessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readiness indicates an expected call of Readiness.
func (mr *MockConnectorPublicServiceClientMockRecorder) Readiness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readiness", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).Readiness), varargs...)
}

// RenameConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) RenameConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.RenameConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.RenameConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.RenameConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameConnectorResource indicates an expected call of RenameConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) RenameConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).RenameConnectorResource), varargs...)
}

// TestConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) TestConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.TestConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.TestConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.TestConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestConnectorResource indicates an expected call of TestConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) TestConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).TestConnectorResource), varargs...)
}

// UpdateConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) UpdateConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.UpdateConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.UpdateConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.UpdateConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnectorResource indicates an expected call of UpdateConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) UpdateConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).UpdateConnectorResource), varargs...)
}

// WatchConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) WatchConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.WatchConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.WatchConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.WatchConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConnectorResource indicates an expected call of WatchConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) WatchConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).WatchConnectorResource), varargs...)
}
