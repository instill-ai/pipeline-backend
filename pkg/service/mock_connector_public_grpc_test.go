// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/protogen-go/vdp/connector/v1alpha (interfaces: ConnectorPublicServiceClient)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	connectorv1alpha "github.com/instill-ai/protogen-go/vdp/connector/v1alpha"
	grpc "google.golang.org/grpc"
)

// MockConnectorPublicServiceClient is a mock of ConnectorPublicServiceClient interface.
type MockConnectorPublicServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorPublicServiceClientMockRecorder
}

// MockConnectorPublicServiceClientMockRecorder is the mock recorder for MockConnectorPublicServiceClient.
type MockConnectorPublicServiceClientMockRecorder struct {
	mock *MockConnectorPublicServiceClient
}

// NewMockConnectorPublicServiceClient creates a new mock instance.
func NewMockConnectorPublicServiceClient(ctrl *gomock.Controller) *MockConnectorPublicServiceClient {
	mock := &MockConnectorPublicServiceClient{ctrl: ctrl}
	mock.recorder = &MockConnectorPublicServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectorPublicServiceClient) EXPECT() *MockConnectorPublicServiceClientMockRecorder {
	return m.recorder
}

// ConnectUserConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) ConnectUserConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.ConnectUserConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ConnectUserConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConnectUserConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ConnectUserConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectUserConnectorResource indicates an expected call of ConnectUserConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) ConnectUserConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectUserConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ConnectUserConnectorResource), varargs...)
}

// CreateUserConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) CreateUserConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.CreateUserConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.CreateUserConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.CreateUserConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserConnectorResource indicates an expected call of CreateUserConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) CreateUserConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).CreateUserConnectorResource), varargs...)
}

// DeleteUserConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) DeleteUserConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.DeleteUserConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.DeleteUserConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.DeleteUserConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserConnectorResource indicates an expected call of DeleteUserConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) DeleteUserConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).DeleteUserConnectorResource), varargs...)
}

// DisconnectUserConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) DisconnectUserConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.DisconnectUserConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.DisconnectUserConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisconnectUserConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.DisconnectUserConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectUserConnectorResource indicates an expected call of DisconnectUserConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) DisconnectUserConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectUserConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).DisconnectUserConnectorResource), varargs...)
}

// ExecuteUserConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) ExecuteUserConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.ExecuteUserConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ExecuteUserConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteUserConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ExecuteUserConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteUserConnectorResource indicates an expected call of ExecuteUserConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) ExecuteUserConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteUserConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ExecuteUserConnectorResource), varargs...)
}

// GetConnectorDefinition mocks base method.
func (m *MockConnectorPublicServiceClient) GetConnectorDefinition(arg0 context.Context, arg1 *connectorv1alpha.GetConnectorDefinitionRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.GetConnectorDefinitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectorDefinition", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.GetConnectorDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectorDefinition indicates an expected call of GetConnectorDefinition.
func (mr *MockConnectorPublicServiceClientMockRecorder) GetConnectorDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorDefinition", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).GetConnectorDefinition), varargs...)
}

// GetUserConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) GetUserConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.GetUserConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.GetUserConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.GetUserConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConnectorResource indicates an expected call of GetUserConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) GetUserConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).GetUserConnectorResource), varargs...)
}

// ListConnectorDefinitions mocks base method.
func (m *MockConnectorPublicServiceClient) ListConnectorDefinitions(arg0 context.Context, arg1 *connectorv1alpha.ListConnectorDefinitionsRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ListConnectorDefinitionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectorDefinitions", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ListConnectorDefinitionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectorDefinitions indicates an expected call of ListConnectorDefinitions.
func (mr *MockConnectorPublicServiceClientMockRecorder) ListConnectorDefinitions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorDefinitions", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ListConnectorDefinitions), varargs...)
}

// ListConnectorResources mocks base method.
func (m *MockConnectorPublicServiceClient) ListConnectorResources(arg0 context.Context, arg1 *connectorv1alpha.ListConnectorResourcesRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ListConnectorResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectorResources", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ListConnectorResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectorResources indicates an expected call of ListConnectorResources.
func (mr *MockConnectorPublicServiceClientMockRecorder) ListConnectorResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorResources", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ListConnectorResources), varargs...)
}

// ListUserConnectorResources mocks base method.
func (m *MockConnectorPublicServiceClient) ListUserConnectorResources(arg0 context.Context, arg1 *connectorv1alpha.ListUserConnectorResourcesRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ListUserConnectorResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserConnectorResources", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ListUserConnectorResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserConnectorResources indicates an expected call of ListUserConnectorResources.
func (mr *MockConnectorPublicServiceClientMockRecorder) ListUserConnectorResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserConnectorResources", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ListUserConnectorResources), varargs...)
}

// Liveness mocks base method.
func (m *MockConnectorPublicServiceClient) Liveness(arg0 context.Context, arg1 *connectorv1alpha.LivenessRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.LivenessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Liveness", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.LivenessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Liveness indicates an expected call of Liveness.
func (mr *MockConnectorPublicServiceClientMockRecorder) Liveness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liveness", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).Liveness), varargs...)
}

// LookUpUserConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) LookUpUserConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.LookUpUserConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.LookUpUserConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookUpUserConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.LookUpUserConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUpUserConnectorResource indicates an expected call of LookUpUserConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) LookUpUserConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUpUserConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).LookUpUserConnectorResource), varargs...)
}

// Readiness mocks base method.
func (m *MockConnectorPublicServiceClient) Readiness(arg0 context.Context, arg1 *connectorv1alpha.ReadinessRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ReadinessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Readiness", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ReadinessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readiness indicates an expected call of Readiness.
func (mr *MockConnectorPublicServiceClientMockRecorder) Readiness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readiness", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).Readiness), varargs...)
}

// RenameUserConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) RenameUserConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.RenameUserConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.RenameUserConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameUserConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.RenameUserConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameUserConnectorResource indicates an expected call of RenameUserConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) RenameUserConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameUserConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).RenameUserConnectorResource), varargs...)
}

// TestUserConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) TestUserConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.TestUserConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.TestUserConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestUserConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.TestUserConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestUserConnectorResource indicates an expected call of TestUserConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) TestUserConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestUserConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).TestUserConnectorResource), varargs...)
}

// UpdateUserConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) UpdateUserConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.UpdateUserConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.UpdateUserConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.UpdateUserConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserConnectorResource indicates an expected call of UpdateUserConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) UpdateUserConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).UpdateUserConnectorResource), varargs...)
}

// WatchUserConnectorResource mocks base method.
func (m *MockConnectorPublicServiceClient) WatchUserConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.WatchUserConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.WatchUserConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchUserConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.WatchUserConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUserConnectorResource indicates an expected call of WatchUserConnectorResource.
func (mr *MockConnectorPublicServiceClientMockRecorder) WatchUserConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUserConnectorResource", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).WatchUserConnectorResource), varargs...)
}
