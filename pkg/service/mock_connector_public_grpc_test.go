// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/protogen-go/vdp/connector/v1alpha (interfaces: ConnectorPublicServiceClient)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	connectorv1alpha "github.com/instill-ai/protogen-go/vdp/connector/v1alpha"
	grpc "google.golang.org/grpc"
)

// MockConnectorPublicServiceClient is a mock of ConnectorPublicServiceClient interface.
type MockConnectorPublicServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorPublicServiceClientMockRecorder
}

// MockConnectorPublicServiceClientMockRecorder is the mock recorder for MockConnectorPublicServiceClient.
type MockConnectorPublicServiceClientMockRecorder struct {
	mock *MockConnectorPublicServiceClient
}

// NewMockConnectorPublicServiceClient creates a new mock instance.
func NewMockConnectorPublicServiceClient(ctrl *gomock.Controller) *MockConnectorPublicServiceClient {
	mock := &MockConnectorPublicServiceClient{ctrl: ctrl}
	mock.recorder = &MockConnectorPublicServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectorPublicServiceClient) EXPECT() *MockConnectorPublicServiceClientMockRecorder {
	return m.recorder
}

// ConnectDestinationConnector mocks base method.
func (m *MockConnectorPublicServiceClient) ConnectDestinationConnector(arg0 context.Context, arg1 *connectorv1alpha.ConnectDestinationConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ConnectDestinationConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConnectDestinationConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ConnectDestinationConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectDestinationConnector indicates an expected call of ConnectDestinationConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) ConnectDestinationConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDestinationConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ConnectDestinationConnector), varargs...)
}

// ConnectSourceConnector mocks base method.
func (m *MockConnectorPublicServiceClient) ConnectSourceConnector(arg0 context.Context, arg1 *connectorv1alpha.ConnectSourceConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ConnectSourceConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConnectSourceConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ConnectSourceConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectSourceConnector indicates an expected call of ConnectSourceConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) ConnectSourceConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectSourceConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ConnectSourceConnector), varargs...)
}

// CreateDestinationConnector mocks base method.
func (m *MockConnectorPublicServiceClient) CreateDestinationConnector(arg0 context.Context, arg1 *connectorv1alpha.CreateDestinationConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.CreateDestinationConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDestinationConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.CreateDestinationConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDestinationConnector indicates an expected call of CreateDestinationConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) CreateDestinationConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDestinationConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).CreateDestinationConnector), varargs...)
}

// CreateSourceConnector mocks base method.
func (m *MockConnectorPublicServiceClient) CreateSourceConnector(arg0 context.Context, arg1 *connectorv1alpha.CreateSourceConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.CreateSourceConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSourceConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.CreateSourceConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSourceConnector indicates an expected call of CreateSourceConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) CreateSourceConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSourceConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).CreateSourceConnector), varargs...)
}

// DeleteDestinationConnector mocks base method.
func (m *MockConnectorPublicServiceClient) DeleteDestinationConnector(arg0 context.Context, arg1 *connectorv1alpha.DeleteDestinationConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.DeleteDestinationConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDestinationConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.DeleteDestinationConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDestinationConnector indicates an expected call of DeleteDestinationConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) DeleteDestinationConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDestinationConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).DeleteDestinationConnector), varargs...)
}

// DeleteSourceConnector mocks base method.
func (m *MockConnectorPublicServiceClient) DeleteSourceConnector(arg0 context.Context, arg1 *connectorv1alpha.DeleteSourceConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.DeleteSourceConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSourceConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.DeleteSourceConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSourceConnector indicates an expected call of DeleteSourceConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) DeleteSourceConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).DeleteSourceConnector), varargs...)
}

// DisconnectDestinationConnector mocks base method.
func (m *MockConnectorPublicServiceClient) DisconnectDestinationConnector(arg0 context.Context, arg1 *connectorv1alpha.DisconnectDestinationConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.DisconnectDestinationConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisconnectDestinationConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.DisconnectDestinationConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectDestinationConnector indicates an expected call of DisconnectDestinationConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) DisconnectDestinationConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectDestinationConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).DisconnectDestinationConnector), varargs...)
}

// DisconnectSourceConnector mocks base method.
func (m *MockConnectorPublicServiceClient) DisconnectSourceConnector(arg0 context.Context, arg1 *connectorv1alpha.DisconnectSourceConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.DisconnectSourceConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisconnectSourceConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.DisconnectSourceConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectSourceConnector indicates an expected call of DisconnectSourceConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) DisconnectSourceConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectSourceConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).DisconnectSourceConnector), varargs...)
}

// GetConnectorOperation mocks base method.
func (m *MockConnectorPublicServiceClient) GetConnectorOperation(arg0 context.Context, arg1 *connectorv1alpha.GetConnectorOperationRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.GetConnectorOperationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectorOperation", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.GetConnectorOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectorOperation indicates an expected call of GetConnectorOperation.
func (mr *MockConnectorPublicServiceClientMockRecorder) GetConnectorOperation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorOperation", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).GetConnectorOperation), varargs...)
}

// GetDestinationConnector mocks base method.
func (m *MockConnectorPublicServiceClient) GetDestinationConnector(arg0 context.Context, arg1 *connectorv1alpha.GetDestinationConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.GetDestinationConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDestinationConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.GetDestinationConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestinationConnector indicates an expected call of GetDestinationConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) GetDestinationConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).GetDestinationConnector), varargs...)
}

// GetDestinationConnectorDefinition mocks base method.
func (m *MockConnectorPublicServiceClient) GetDestinationConnectorDefinition(arg0 context.Context, arg1 *connectorv1alpha.GetDestinationConnectorDefinitionRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.GetDestinationConnectorDefinitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDestinationConnectorDefinition", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.GetDestinationConnectorDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestinationConnectorDefinition indicates an expected call of GetDestinationConnectorDefinition.
func (mr *MockConnectorPublicServiceClientMockRecorder) GetDestinationConnectorDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestinationConnectorDefinition", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).GetDestinationConnectorDefinition), varargs...)
}

// GetSourceConnector mocks base method.
func (m *MockConnectorPublicServiceClient) GetSourceConnector(arg0 context.Context, arg1 *connectorv1alpha.GetSourceConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.GetSourceConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSourceConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.GetSourceConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceConnector indicates an expected call of GetSourceConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) GetSourceConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).GetSourceConnector), varargs...)
}

// GetSourceConnectorDefinition mocks base method.
func (m *MockConnectorPublicServiceClient) GetSourceConnectorDefinition(arg0 context.Context, arg1 *connectorv1alpha.GetSourceConnectorDefinitionRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.GetSourceConnectorDefinitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSourceConnectorDefinition", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.GetSourceConnectorDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceConnectorDefinition indicates an expected call of GetSourceConnectorDefinition.
func (mr *MockConnectorPublicServiceClientMockRecorder) GetSourceConnectorDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceConnectorDefinition", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).GetSourceConnectorDefinition), varargs...)
}

// ListDestinationConnectorDefinitions mocks base method.
func (m *MockConnectorPublicServiceClient) ListDestinationConnectorDefinitions(arg0 context.Context, arg1 *connectorv1alpha.ListDestinationConnectorDefinitionsRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ListDestinationConnectorDefinitionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDestinationConnectorDefinitions", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ListDestinationConnectorDefinitionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDestinationConnectorDefinitions indicates an expected call of ListDestinationConnectorDefinitions.
func (mr *MockConnectorPublicServiceClientMockRecorder) ListDestinationConnectorDefinitions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDestinationConnectorDefinitions", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ListDestinationConnectorDefinitions), varargs...)
}

// ListDestinationConnectors mocks base method.
func (m *MockConnectorPublicServiceClient) ListDestinationConnectors(arg0 context.Context, arg1 *connectorv1alpha.ListDestinationConnectorsRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ListDestinationConnectorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDestinationConnectors", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ListDestinationConnectorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDestinationConnectors indicates an expected call of ListDestinationConnectors.
func (mr *MockConnectorPublicServiceClientMockRecorder) ListDestinationConnectors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDestinationConnectors", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ListDestinationConnectors), varargs...)
}

// ListSourceConnectorDefinitions mocks base method.
func (m *MockConnectorPublicServiceClient) ListSourceConnectorDefinitions(arg0 context.Context, arg1 *connectorv1alpha.ListSourceConnectorDefinitionsRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ListSourceConnectorDefinitionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSourceConnectorDefinitions", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ListSourceConnectorDefinitionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSourceConnectorDefinitions indicates an expected call of ListSourceConnectorDefinitions.
func (mr *MockConnectorPublicServiceClientMockRecorder) ListSourceConnectorDefinitions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourceConnectorDefinitions", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ListSourceConnectorDefinitions), varargs...)
}

// ListSourceConnectors mocks base method.
func (m *MockConnectorPublicServiceClient) ListSourceConnectors(arg0 context.Context, arg1 *connectorv1alpha.ListSourceConnectorsRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ListSourceConnectorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSourceConnectors", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ListSourceConnectorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSourceConnectors indicates an expected call of ListSourceConnectors.
func (mr *MockConnectorPublicServiceClientMockRecorder) ListSourceConnectors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourceConnectors", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ListSourceConnectors), varargs...)
}

// Liveness mocks base method.
func (m *MockConnectorPublicServiceClient) Liveness(arg0 context.Context, arg1 *connectorv1alpha.LivenessRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.LivenessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Liveness", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.LivenessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Liveness indicates an expected call of Liveness.
func (mr *MockConnectorPublicServiceClientMockRecorder) Liveness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liveness", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).Liveness), varargs...)
}

// LookUpDestinationConnector mocks base method.
func (m *MockConnectorPublicServiceClient) LookUpDestinationConnector(arg0 context.Context, arg1 *connectorv1alpha.LookUpDestinationConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.LookUpDestinationConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookUpDestinationConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.LookUpDestinationConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUpDestinationConnector indicates an expected call of LookUpDestinationConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) LookUpDestinationConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUpDestinationConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).LookUpDestinationConnector), varargs...)
}

// LookUpSourceConnector mocks base method.
func (m *MockConnectorPublicServiceClient) LookUpSourceConnector(arg0 context.Context, arg1 *connectorv1alpha.LookUpSourceConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.LookUpSourceConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookUpSourceConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.LookUpSourceConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUpSourceConnector indicates an expected call of LookUpSourceConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) LookUpSourceConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUpSourceConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).LookUpSourceConnector), varargs...)
}

// ReadSourceConnector mocks base method.
func (m *MockConnectorPublicServiceClient) ReadSourceConnector(arg0 context.Context, arg1 *connectorv1alpha.ReadSourceConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ReadSourceConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadSourceConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ReadSourceConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSourceConnector indicates an expected call of ReadSourceConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) ReadSourceConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSourceConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).ReadSourceConnector), varargs...)
}

// Readiness mocks base method.
func (m *MockConnectorPublicServiceClient) Readiness(arg0 context.Context, arg1 *connectorv1alpha.ReadinessRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ReadinessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Readiness", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ReadinessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readiness indicates an expected call of Readiness.
func (mr *MockConnectorPublicServiceClientMockRecorder) Readiness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readiness", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).Readiness), varargs...)
}

// RenameDestinationConnector mocks base method.
func (m *MockConnectorPublicServiceClient) RenameDestinationConnector(arg0 context.Context, arg1 *connectorv1alpha.RenameDestinationConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.RenameDestinationConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameDestinationConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.RenameDestinationConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameDestinationConnector indicates an expected call of RenameDestinationConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) RenameDestinationConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameDestinationConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).RenameDestinationConnector), varargs...)
}

// RenameSourceConnector mocks base method.
func (m *MockConnectorPublicServiceClient) RenameSourceConnector(arg0 context.Context, arg1 *connectorv1alpha.RenameSourceConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.RenameSourceConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameSourceConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.RenameSourceConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameSourceConnector indicates an expected call of RenameSourceConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) RenameSourceConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameSourceConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).RenameSourceConnector), varargs...)
}

// UpdateDestinationConnector mocks base method.
func (m *MockConnectorPublicServiceClient) UpdateDestinationConnector(arg0 context.Context, arg1 *connectorv1alpha.UpdateDestinationConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.UpdateDestinationConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDestinationConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.UpdateDestinationConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDestinationConnector indicates an expected call of UpdateDestinationConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) UpdateDestinationConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDestinationConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).UpdateDestinationConnector), varargs...)
}

// UpdateSourceConnector mocks base method.
func (m *MockConnectorPublicServiceClient) UpdateSourceConnector(arg0 context.Context, arg1 *connectorv1alpha.UpdateSourceConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.UpdateSourceConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSourceConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.UpdateSourceConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSourceConnector indicates an expected call of UpdateSourceConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) UpdateSourceConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSourceConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).UpdateSourceConnector), varargs...)
}

// WatchDestinationConnector mocks base method.
func (m *MockConnectorPublicServiceClient) WatchDestinationConnector(arg0 context.Context, arg1 *connectorv1alpha.WatchDestinationConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.WatchDestinationConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchDestinationConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.WatchDestinationConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchDestinationConnector indicates an expected call of WatchDestinationConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) WatchDestinationConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchDestinationConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).WatchDestinationConnector), varargs...)
}

// WatchSourceConnector mocks base method.
func (m *MockConnectorPublicServiceClient) WatchSourceConnector(arg0 context.Context, arg1 *connectorv1alpha.WatchSourceConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.WatchSourceConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchSourceConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.WatchSourceConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSourceConnector indicates an expected call of WatchSourceConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) WatchSourceConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSourceConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).WatchSourceConnector), varargs...)
}

// WriteDestinationConnector mocks base method.
func (m *MockConnectorPublicServiceClient) WriteDestinationConnector(arg0 context.Context, arg1 *connectorv1alpha.WriteDestinationConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.WriteDestinationConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteDestinationConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.WriteDestinationConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteDestinationConnector indicates an expected call of WriteDestinationConnector.
func (mr *MockConnectorPublicServiceClientMockRecorder) WriteDestinationConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteDestinationConnector", reflect.TypeOf((*MockConnectorPublicServiceClient)(nil).WriteDestinationConnector), varargs...)
}
