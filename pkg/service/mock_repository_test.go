// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/pipeline-backend/pkg/repository (interfaces: Repository)

// Package service_test is a generated GoMock package.
package service_test

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	datamodel "github.com/instill-ai/pipeline-backend/pkg/datamodel"
	filtering "go.einride.tech/aip/filtering"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreatePipeline mocks base method.
func (m *MockRepository) CreatePipeline(arg0 *datamodel.Pipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockRepositoryMockRecorder) CreatePipeline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockRepository)(nil).CreatePipeline), arg0)
}

// CreatePipelineRelease mocks base method.
func (m *MockRepository) CreatePipelineRelease(arg0 *datamodel.PipelineRelease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipelineRelease", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePipelineRelease indicates an expected call of CreatePipelineRelease.
func (mr *MockRepositoryMockRecorder) CreatePipelineRelease(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineRelease", reflect.TypeOf((*MockRepository)(nil).CreatePipelineRelease), arg0)
}

// DeletePipeline mocks base method.
func (m *MockRepository) DeletePipeline(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline.
func (mr *MockRepositoryMockRecorder) DeletePipeline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockRepository)(nil).DeletePipeline), arg0, arg1)
}

// DeletePipelineRelease mocks base method.
func (m *MockRepository) DeletePipelineRelease(arg0 string, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipelineRelease", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipelineRelease indicates an expected call of DeletePipelineRelease.
func (mr *MockRepositoryMockRecorder) DeletePipelineRelease(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipelineRelease", reflect.TypeOf((*MockRepository)(nil).DeletePipelineRelease), arg0, arg1)
}

// GetPipelineByID mocks base method.
func (m *MockRepository) GetPipelineByID(arg0, arg1 string, arg2 bool) (*datamodel.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*datamodel.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineByID indicates an expected call of GetPipelineByID.
func (mr *MockRepositoryMockRecorder) GetPipelineByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineByID", reflect.TypeOf((*MockRepository)(nil).GetPipelineByID), arg0, arg1, arg2)
}

// GetPipelineByIDAdmin mocks base method.
func (m *MockRepository) GetPipelineByIDAdmin(arg0 string, arg1 bool) (*datamodel.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineByIDAdmin", arg0, arg1)
	ret0, _ := ret[0].(*datamodel.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineByIDAdmin indicates an expected call of GetPipelineByIDAdmin.
func (mr *MockRepositoryMockRecorder) GetPipelineByIDAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineByIDAdmin", reflect.TypeOf((*MockRepository)(nil).GetPipelineByIDAdmin), arg0, arg1)
}

// GetPipelineByUID mocks base method.
func (m *MockRepository) GetPipelineByUID(arg0 uuid.UUID, arg1 string, arg2 bool) (*datamodel.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineByUID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*datamodel.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineByUID indicates an expected call of GetPipelineByUID.
func (mr *MockRepositoryMockRecorder) GetPipelineByUID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineByUID", reflect.TypeOf((*MockRepository)(nil).GetPipelineByUID), arg0, arg1, arg2)
}

// GetPipelineByUIDAdmin mocks base method.
func (m *MockRepository) GetPipelineByUIDAdmin(arg0 uuid.UUID, arg1 bool) (*datamodel.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineByUIDAdmin", arg0, arg1)
	ret0, _ := ret[0].(*datamodel.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineByUIDAdmin indicates an expected call of GetPipelineByUIDAdmin.
func (mr *MockRepositoryMockRecorder) GetPipelineByUIDAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineByUIDAdmin", reflect.TypeOf((*MockRepository)(nil).GetPipelineByUIDAdmin), arg0, arg1)
}

// GetPipelineReleaseByID mocks base method.
func (m *MockRepository) GetPipelineReleaseByID(arg0 string, arg1 uuid.UUID, arg2 bool) (*datamodel.PipelineRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineReleaseByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*datamodel.PipelineRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineReleaseByID indicates an expected call of GetPipelineReleaseByID.
func (mr *MockRepositoryMockRecorder) GetPipelineReleaseByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineReleaseByID", reflect.TypeOf((*MockRepository)(nil).GetPipelineReleaseByID), arg0, arg1, arg2)
}

// GetPipelineReleaseByUID mocks base method.
func (m *MockRepository) GetPipelineReleaseByUID(arg0, arg1 uuid.UUID, arg2 bool) (*datamodel.PipelineRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineReleaseByUID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*datamodel.PipelineRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineReleaseByUID indicates an expected call of GetPipelineReleaseByUID.
func (mr *MockRepositoryMockRecorder) GetPipelineReleaseByUID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineReleaseByUID", reflect.TypeOf((*MockRepository)(nil).GetPipelineReleaseByUID), arg0, arg1, arg2)
}

// ListPipelineReleases mocks base method.
func (m *MockRepository) ListPipelineReleases(arg0 uuid.UUID, arg1 int64, arg2 string, arg3 bool, arg4 filtering.Filter) ([]datamodel.PipelineRelease, int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelineReleases", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]datamodel.PipelineRelease)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListPipelineReleases indicates an expected call of ListPipelineReleases.
func (mr *MockRepositoryMockRecorder) ListPipelineReleases(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelineReleases", reflect.TypeOf((*MockRepository)(nil).ListPipelineReleases), arg0, arg1, arg2, arg3, arg4)
}

// ListPipelines mocks base method.
func (m *MockRepository) ListPipelines(arg0 string, arg1 int64, arg2 string, arg3 bool, arg4 filtering.Filter) ([]datamodel.Pipeline, int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelines", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]datamodel.Pipeline)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListPipelines indicates an expected call of ListPipelines.
func (mr *MockRepositoryMockRecorder) ListPipelines(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockRepository)(nil).ListPipelines), arg0, arg1, arg2, arg3, arg4)
}

// ListPipelinesAdmin mocks base method.
func (m *MockRepository) ListPipelinesAdmin(arg0 int64, arg1 string, arg2 bool, arg3 filtering.Filter) ([]datamodel.Pipeline, int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelinesAdmin", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]datamodel.Pipeline)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListPipelinesAdmin indicates an expected call of ListPipelinesAdmin.
func (mr *MockRepositoryMockRecorder) ListPipelinesAdmin(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesAdmin", reflect.TypeOf((*MockRepository)(nil).ListPipelinesAdmin), arg0, arg1, arg2, arg3)
}

// UpdatePipeline mocks base method.
func (m *MockRepository) UpdatePipeline(arg0, arg1 string, arg2 *datamodel.Pipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipeline", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePipeline indicates an expected call of UpdatePipeline.
func (mr *MockRepositoryMockRecorder) UpdatePipeline(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipeline", reflect.TypeOf((*MockRepository)(nil).UpdatePipeline), arg0, arg1, arg2)
}

// UpdatePipelineID mocks base method.
func (m *MockRepository) UpdatePipelineID(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipelineID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePipelineID indicates an expected call of UpdatePipelineID.
func (mr *MockRepositoryMockRecorder) UpdatePipelineID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipelineID", reflect.TypeOf((*MockRepository)(nil).UpdatePipelineID), arg0, arg1, arg2)
}

// UpdatePipelineRelease mocks base method.
func (m *MockRepository) UpdatePipelineRelease(arg0 string, arg1 uuid.UUID, arg2 *datamodel.PipelineRelease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipelineRelease", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePipelineRelease indicates an expected call of UpdatePipelineRelease.
func (mr *MockRepositoryMockRecorder) UpdatePipelineRelease(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipelineRelease", reflect.TypeOf((*MockRepository)(nil).UpdatePipelineRelease), arg0, arg1, arg2)
}
