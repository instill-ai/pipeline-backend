// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/protogen-go/model/v1alpha (interfaces: ModelServiceClient)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	modelv1alpha "github.com/instill-ai/protogen-go/model/v1alpha"
	grpc "google.golang.org/grpc"
)

// MockModelServiceClient is a mock of ModelServiceClient interface.
type MockModelServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceClientMockRecorder
}

// MockModelServiceClientMockRecorder is the mock recorder for MockModelServiceClient.
type MockModelServiceClientMockRecorder struct {
	mock *MockModelServiceClient
}

// NewMockModelServiceClient creates a new mock instance.
func NewMockModelServiceClient(ctrl *gomock.Controller) *MockModelServiceClient {
	mock := &MockModelServiceClient{ctrl: ctrl}
	mock.recorder = &MockModelServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelServiceClient) EXPECT() *MockModelServiceClientMockRecorder {
	return m.recorder
}

// CreateModelBinaryFileUpload mocks base method.
func (m *MockModelServiceClient) CreateModelBinaryFileUpload(arg0 context.Context, arg1 ...grpc.CallOption) (modelv1alpha.ModelService_CreateModelBinaryFileUploadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModelBinaryFileUpload", varargs...)
	ret0, _ := ret[0].(modelv1alpha.ModelService_CreateModelBinaryFileUploadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelBinaryFileUpload indicates an expected call of CreateModelBinaryFileUpload.
func (mr *MockModelServiceClientMockRecorder) CreateModelBinaryFileUpload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelBinaryFileUpload", reflect.TypeOf((*MockModelServiceClient)(nil).CreateModelBinaryFileUpload), varargs...)
}

// CreateModelByGitHub mocks base method.
func (m *MockModelServiceClient) CreateModelByGitHub(arg0 context.Context, arg1 *modelv1alpha.CreateModelByGitHubRequest, arg2 ...grpc.CallOption) (*modelv1alpha.CreateModelByGitHubResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModelByGitHub", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.CreateModelByGitHubResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelByGitHub indicates an expected call of CreateModelByGitHub.
func (mr *MockModelServiceClientMockRecorder) CreateModelByGitHub(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelByGitHub", reflect.TypeOf((*MockModelServiceClient)(nil).CreateModelByGitHub), varargs...)
}

// DeleteModel mocks base method.
func (m *MockModelServiceClient) DeleteModel(arg0 context.Context, arg1 *modelv1alpha.DeleteModelRequest, arg2 ...grpc.CallOption) (*modelv1alpha.DeleteModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModel", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.DeleteModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockModelServiceClientMockRecorder) DeleteModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockModelServiceClient)(nil).DeleteModel), varargs...)
}

// DeleteModelVersion mocks base method.
func (m *MockModelServiceClient) DeleteModelVersion(arg0 context.Context, arg1 *modelv1alpha.DeleteModelVersionRequest, arg2 ...grpc.CallOption) (*modelv1alpha.DeleteModelVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModelVersion", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.DeleteModelVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModelVersion indicates an expected call of DeleteModelVersion.
func (mr *MockModelServiceClientMockRecorder) DeleteModelVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModelVersion", reflect.TypeOf((*MockModelServiceClient)(nil).DeleteModelVersion), varargs...)
}

// GetModel mocks base method.
func (m *MockModelServiceClient) GetModel(arg0 context.Context, arg1 *modelv1alpha.GetModelRequest, arg2 ...grpc.CallOption) (*modelv1alpha.GetModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModel", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.GetModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockModelServiceClientMockRecorder) GetModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockModelServiceClient)(nil).GetModel), varargs...)
}

// ListModel mocks base method.
func (m *MockModelServiceClient) ListModel(arg0 context.Context, arg1 *modelv1alpha.ListModelRequest, arg2 ...grpc.CallOption) (*modelv1alpha.ListModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModel", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.ListModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModel indicates an expected call of ListModel.
func (mr *MockModelServiceClientMockRecorder) ListModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModel", reflect.TypeOf((*MockModelServiceClient)(nil).ListModel), varargs...)
}

// Liveness mocks base method.
func (m *MockModelServiceClient) Liveness(arg0 context.Context, arg1 *modelv1alpha.LivenessRequest, arg2 ...grpc.CallOption) (*modelv1alpha.LivenessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Liveness", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.LivenessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Liveness indicates an expected call of Liveness.
func (mr *MockModelServiceClientMockRecorder) Liveness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liveness", reflect.TypeOf((*MockModelServiceClient)(nil).Liveness), varargs...)
}

// Readiness mocks base method.
func (m *MockModelServiceClient) Readiness(arg0 context.Context, arg1 *modelv1alpha.ReadinessRequest, arg2 ...grpc.CallOption) (*modelv1alpha.ReadinessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Readiness", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.ReadinessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readiness indicates an expected call of Readiness.
func (mr *MockModelServiceClientMockRecorder) Readiness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readiness", reflect.TypeOf((*MockModelServiceClient)(nil).Readiness), varargs...)
}

// TriggerModel mocks base method.
func (m *MockModelServiceClient) TriggerModel(arg0 context.Context, arg1 *modelv1alpha.TriggerModelRequest, arg2 ...grpc.CallOption) (*modelv1alpha.TriggerModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerModel", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.TriggerModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerModel indicates an expected call of TriggerModel.
func (mr *MockModelServiceClientMockRecorder) TriggerModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerModel", reflect.TypeOf((*MockModelServiceClient)(nil).TriggerModel), varargs...)
}

// TriggerModelBinaryFileUpload mocks base method.
func (m *MockModelServiceClient) TriggerModelBinaryFileUpload(arg0 context.Context, arg1 ...grpc.CallOption) (modelv1alpha.ModelService_TriggerModelBinaryFileUploadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerModelBinaryFileUpload", varargs...)
	ret0, _ := ret[0].(modelv1alpha.ModelService_TriggerModelBinaryFileUploadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerModelBinaryFileUpload indicates an expected call of TriggerModelBinaryFileUpload.
func (mr *MockModelServiceClientMockRecorder) TriggerModelBinaryFileUpload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerModelBinaryFileUpload", reflect.TypeOf((*MockModelServiceClient)(nil).TriggerModelBinaryFileUpload), varargs...)
}

// UpdateModelVersion mocks base method.
func (m *MockModelServiceClient) UpdateModelVersion(arg0 context.Context, arg1 *modelv1alpha.UpdateModelVersionRequest, arg2 ...grpc.CallOption) (*modelv1alpha.UpdateModelVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateModelVersion", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.UpdateModelVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModelVersion indicates an expected call of UpdateModelVersion.
func (mr *MockModelServiceClientMockRecorder) UpdateModelVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelVersion", reflect.TypeOf((*MockModelServiceClient)(nil).UpdateModelVersion), varargs...)
}
