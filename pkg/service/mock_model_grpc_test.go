// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/protogen-go/vdp/model/v1alpha (interfaces: ModelPublicServiceClient)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	modelv1alpha "github.com/instill-ai/protogen-go/vdp/model/v1alpha"
	grpc "google.golang.org/grpc"
)

// MockModelPublicServiceClient is a mock of ModelPublicServiceClient interface.
type MockModelPublicServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockModelPublicServiceClientMockRecorder
}

// MockModelPublicServiceClientMockRecorder is the mock recorder for MockModelPublicServiceClient.
type MockModelPublicServiceClientMockRecorder struct {
	mock *MockModelPublicServiceClient
}

// NewMockModelPublicServiceClient creates a new mock instance.
func NewMockModelPublicServiceClient(ctrl *gomock.Controller) *MockModelPublicServiceClient {
	mock := &MockModelPublicServiceClient{ctrl: ctrl}
	mock.recorder = &MockModelPublicServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelPublicServiceClient) EXPECT() *MockModelPublicServiceClientMockRecorder {
	return m.recorder
}

// CancelModelOperation mocks base method.
func (m *MockModelPublicServiceClient) CancelModelOperation(arg0 context.Context, arg1 *modelv1alpha.CancelModelOperationRequest, arg2 ...grpc.CallOption) (*modelv1alpha.CancelModelOperationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelModelOperation", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.CancelModelOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelModelOperation indicates an expected call of CancelModelOperation.
func (mr *MockModelPublicServiceClientMockRecorder) CancelModelOperation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelModelOperation", reflect.TypeOf((*MockModelPublicServiceClient)(nil).CancelModelOperation), varargs...)
}

// CreateModel mocks base method.
func (m *MockModelPublicServiceClient) CreateModel(arg0 context.Context, arg1 *modelv1alpha.CreateModelRequest, arg2 ...grpc.CallOption) (*modelv1alpha.CreateModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModel", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.CreateModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockModelPublicServiceClientMockRecorder) CreateModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockModelPublicServiceClient)(nil).CreateModel), varargs...)
}

// CreateModelBinaryFileUpload mocks base method.
func (m *MockModelPublicServiceClient) CreateModelBinaryFileUpload(arg0 context.Context, arg1 ...grpc.CallOption) (modelv1alpha.ModelPublicService_CreateModelBinaryFileUploadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateModelBinaryFileUpload", varargs...)
	ret0, _ := ret[0].(modelv1alpha.ModelPublicService_CreateModelBinaryFileUploadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModelBinaryFileUpload indicates an expected call of CreateModelBinaryFileUpload.
func (mr *MockModelPublicServiceClientMockRecorder) CreateModelBinaryFileUpload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModelBinaryFileUpload", reflect.TypeOf((*MockModelPublicServiceClient)(nil).CreateModelBinaryFileUpload), varargs...)
}

// DeleteModel mocks base method.
func (m *MockModelPublicServiceClient) DeleteModel(arg0 context.Context, arg1 *modelv1alpha.DeleteModelRequest, arg2 ...grpc.CallOption) (*modelv1alpha.DeleteModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModel", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.DeleteModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockModelPublicServiceClientMockRecorder) DeleteModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockModelPublicServiceClient)(nil).DeleteModel), varargs...)
}

// DeployModelInstance mocks base method.
func (m *MockModelPublicServiceClient) DeployModelInstance(arg0 context.Context, arg1 *modelv1alpha.DeployModelInstanceRequest, arg2 ...grpc.CallOption) (*modelv1alpha.DeployModelInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeployModelInstance", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.DeployModelInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployModelInstance indicates an expected call of DeployModelInstance.
func (mr *MockModelPublicServiceClientMockRecorder) DeployModelInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployModelInstance", reflect.TypeOf((*MockModelPublicServiceClient)(nil).DeployModelInstance), varargs...)
}

// GetModel mocks base method.
func (m *MockModelPublicServiceClient) GetModel(arg0 context.Context, arg1 *modelv1alpha.GetModelRequest, arg2 ...grpc.CallOption) (*modelv1alpha.GetModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModel", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.GetModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockModelPublicServiceClientMockRecorder) GetModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockModelPublicServiceClient)(nil).GetModel), varargs...)
}

// GetModelDefinition mocks base method.
func (m *MockModelPublicServiceClient) GetModelDefinition(arg0 context.Context, arg1 *modelv1alpha.GetModelDefinitionRequest, arg2 ...grpc.CallOption) (*modelv1alpha.GetModelDefinitionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelDefinition", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.GetModelDefinitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelDefinition indicates an expected call of GetModelDefinition.
func (mr *MockModelPublicServiceClientMockRecorder) GetModelDefinition(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelDefinition", reflect.TypeOf((*MockModelPublicServiceClient)(nil).GetModelDefinition), varargs...)
}

// GetModelInstance mocks base method.
func (m *MockModelPublicServiceClient) GetModelInstance(arg0 context.Context, arg1 *modelv1alpha.GetModelInstanceRequest, arg2 ...grpc.CallOption) (*modelv1alpha.GetModelInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelInstance", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.GetModelInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInstance indicates an expected call of GetModelInstance.
func (mr *MockModelPublicServiceClientMockRecorder) GetModelInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInstance", reflect.TypeOf((*MockModelPublicServiceClient)(nil).GetModelInstance), varargs...)
}

// GetModelInstanceCard mocks base method.
func (m *MockModelPublicServiceClient) GetModelInstanceCard(arg0 context.Context, arg1 *modelv1alpha.GetModelInstanceCardRequest, arg2 ...grpc.CallOption) (*modelv1alpha.GetModelInstanceCardResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelInstanceCard", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.GetModelInstanceCardResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInstanceCard indicates an expected call of GetModelInstanceCard.
func (mr *MockModelPublicServiceClientMockRecorder) GetModelInstanceCard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInstanceCard", reflect.TypeOf((*MockModelPublicServiceClient)(nil).GetModelInstanceCard), varargs...)
}

// GetModelOperation mocks base method.
func (m *MockModelPublicServiceClient) GetModelOperation(arg0 context.Context, arg1 *modelv1alpha.GetModelOperationRequest, arg2 ...grpc.CallOption) (*modelv1alpha.GetModelOperationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetModelOperation", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.GetModelOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelOperation indicates an expected call of GetModelOperation.
func (mr *MockModelPublicServiceClientMockRecorder) GetModelOperation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelOperation", reflect.TypeOf((*MockModelPublicServiceClient)(nil).GetModelOperation), varargs...)
}

// ListModelDefinitions mocks base method.
func (m *MockModelPublicServiceClient) ListModelDefinitions(arg0 context.Context, arg1 *modelv1alpha.ListModelDefinitionsRequest, arg2 ...grpc.CallOption) (*modelv1alpha.ListModelDefinitionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelDefinitions", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.ListModelDefinitionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelDefinitions indicates an expected call of ListModelDefinitions.
func (mr *MockModelPublicServiceClientMockRecorder) ListModelDefinitions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelDefinitions", reflect.TypeOf((*MockModelPublicServiceClient)(nil).ListModelDefinitions), varargs...)
}

// ListModelInstances mocks base method.
func (m *MockModelPublicServiceClient) ListModelInstances(arg0 context.Context, arg1 *modelv1alpha.ListModelInstancesRequest, arg2 ...grpc.CallOption) (*modelv1alpha.ListModelInstancesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelInstances", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.ListModelInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelInstances indicates an expected call of ListModelInstances.
func (mr *MockModelPublicServiceClientMockRecorder) ListModelInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelInstances", reflect.TypeOf((*MockModelPublicServiceClient)(nil).ListModelInstances), varargs...)
}

// ListModelOperations mocks base method.
func (m *MockModelPublicServiceClient) ListModelOperations(arg0 context.Context, arg1 *modelv1alpha.ListModelOperationsRequest, arg2 ...grpc.CallOption) (*modelv1alpha.ListModelOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModelOperations", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.ListModelOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelOperations indicates an expected call of ListModelOperations.
func (mr *MockModelPublicServiceClientMockRecorder) ListModelOperations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelOperations", reflect.TypeOf((*MockModelPublicServiceClient)(nil).ListModelOperations), varargs...)
}

// ListModels mocks base method.
func (m *MockModelPublicServiceClient) ListModels(arg0 context.Context, arg1 *modelv1alpha.ListModelsRequest, arg2 ...grpc.CallOption) (*modelv1alpha.ListModelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListModels", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.ListModelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockModelPublicServiceClientMockRecorder) ListModels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockModelPublicServiceClient)(nil).ListModels), varargs...)
}

// Liveness mocks base method.
func (m *MockModelPublicServiceClient) Liveness(arg0 context.Context, arg1 *modelv1alpha.LivenessRequest, arg2 ...grpc.CallOption) (*modelv1alpha.LivenessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Liveness", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.LivenessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Liveness indicates an expected call of Liveness.
func (mr *MockModelPublicServiceClientMockRecorder) Liveness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liveness", reflect.TypeOf((*MockModelPublicServiceClient)(nil).Liveness), varargs...)
}

// LookUpModel mocks base method.
func (m *MockModelPublicServiceClient) LookUpModel(arg0 context.Context, arg1 *modelv1alpha.LookUpModelRequest, arg2 ...grpc.CallOption) (*modelv1alpha.LookUpModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookUpModel", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.LookUpModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUpModel indicates an expected call of LookUpModel.
func (mr *MockModelPublicServiceClientMockRecorder) LookUpModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUpModel", reflect.TypeOf((*MockModelPublicServiceClient)(nil).LookUpModel), varargs...)
}

// LookUpModelInstance mocks base method.
func (m *MockModelPublicServiceClient) LookUpModelInstance(arg0 context.Context, arg1 *modelv1alpha.LookUpModelInstanceRequest, arg2 ...grpc.CallOption) (*modelv1alpha.LookUpModelInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookUpModelInstance", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.LookUpModelInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUpModelInstance indicates an expected call of LookUpModelInstance.
func (mr *MockModelPublicServiceClientMockRecorder) LookUpModelInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUpModelInstance", reflect.TypeOf((*MockModelPublicServiceClient)(nil).LookUpModelInstance), varargs...)
}

// PublishModel mocks base method.
func (m *MockModelPublicServiceClient) PublishModel(arg0 context.Context, arg1 *modelv1alpha.PublishModelRequest, arg2 ...grpc.CallOption) (*modelv1alpha.PublishModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishModel", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.PublishModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishModel indicates an expected call of PublishModel.
func (mr *MockModelPublicServiceClientMockRecorder) PublishModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishModel", reflect.TypeOf((*MockModelPublicServiceClient)(nil).PublishModel), varargs...)
}

// Readiness mocks base method.
func (m *MockModelPublicServiceClient) Readiness(arg0 context.Context, arg1 *modelv1alpha.ReadinessRequest, arg2 ...grpc.CallOption) (*modelv1alpha.ReadinessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Readiness", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.ReadinessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readiness indicates an expected call of Readiness.
func (mr *MockModelPublicServiceClientMockRecorder) Readiness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readiness", reflect.TypeOf((*MockModelPublicServiceClient)(nil).Readiness), varargs...)
}

// RenameModel mocks base method.
func (m *MockModelPublicServiceClient) RenameModel(arg0 context.Context, arg1 *modelv1alpha.RenameModelRequest, arg2 ...grpc.CallOption) (*modelv1alpha.RenameModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameModel", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.RenameModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameModel indicates an expected call of RenameModel.
func (mr *MockModelPublicServiceClientMockRecorder) RenameModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameModel", reflect.TypeOf((*MockModelPublicServiceClient)(nil).RenameModel), varargs...)
}

// TestModelInstance mocks base method.
func (m *MockModelPublicServiceClient) TestModelInstance(arg0 context.Context, arg1 *modelv1alpha.TestModelInstanceRequest, arg2 ...grpc.CallOption) (*modelv1alpha.TestModelInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestModelInstance", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.TestModelInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestModelInstance indicates an expected call of TestModelInstance.
func (mr *MockModelPublicServiceClientMockRecorder) TestModelInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestModelInstance", reflect.TypeOf((*MockModelPublicServiceClient)(nil).TestModelInstance), varargs...)
}

// TestModelInstanceBinaryFileUpload mocks base method.
func (m *MockModelPublicServiceClient) TestModelInstanceBinaryFileUpload(arg0 context.Context, arg1 ...grpc.CallOption) (modelv1alpha.ModelPublicService_TestModelInstanceBinaryFileUploadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestModelInstanceBinaryFileUpload", varargs...)
	ret0, _ := ret[0].(modelv1alpha.ModelPublicService_TestModelInstanceBinaryFileUploadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestModelInstanceBinaryFileUpload indicates an expected call of TestModelInstanceBinaryFileUpload.
func (mr *MockModelPublicServiceClientMockRecorder) TestModelInstanceBinaryFileUpload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestModelInstanceBinaryFileUpload", reflect.TypeOf((*MockModelPublicServiceClient)(nil).TestModelInstanceBinaryFileUpload), varargs...)
}

// TriggerModelInstance mocks base method.
func (m *MockModelPublicServiceClient) TriggerModelInstance(arg0 context.Context, arg1 *modelv1alpha.TriggerModelInstanceRequest, arg2 ...grpc.CallOption) (*modelv1alpha.TriggerModelInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerModelInstance", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.TriggerModelInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerModelInstance indicates an expected call of TriggerModelInstance.
func (mr *MockModelPublicServiceClientMockRecorder) TriggerModelInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerModelInstance", reflect.TypeOf((*MockModelPublicServiceClient)(nil).TriggerModelInstance), varargs...)
}

// TriggerModelInstanceBinaryFileUpload mocks base method.
func (m *MockModelPublicServiceClient) TriggerModelInstanceBinaryFileUpload(arg0 context.Context, arg1 ...grpc.CallOption) (modelv1alpha.ModelPublicService_TriggerModelInstanceBinaryFileUploadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerModelInstanceBinaryFileUpload", varargs...)
	ret0, _ := ret[0].(modelv1alpha.ModelPublicService_TriggerModelInstanceBinaryFileUploadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerModelInstanceBinaryFileUpload indicates an expected call of TriggerModelInstanceBinaryFileUpload.
func (mr *MockModelPublicServiceClientMockRecorder) TriggerModelInstanceBinaryFileUpload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerModelInstanceBinaryFileUpload", reflect.TypeOf((*MockModelPublicServiceClient)(nil).TriggerModelInstanceBinaryFileUpload), varargs...)
}

// UndeployModelInstance mocks base method.
func (m *MockModelPublicServiceClient) UndeployModelInstance(arg0 context.Context, arg1 *modelv1alpha.UndeployModelInstanceRequest, arg2 ...grpc.CallOption) (*modelv1alpha.UndeployModelInstanceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UndeployModelInstance", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.UndeployModelInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UndeployModelInstance indicates an expected call of UndeployModelInstance.
func (mr *MockModelPublicServiceClientMockRecorder) UndeployModelInstance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndeployModelInstance", reflect.TypeOf((*MockModelPublicServiceClient)(nil).UndeployModelInstance), varargs...)
}

// UnpublishModel mocks base method.
func (m *MockModelPublicServiceClient) UnpublishModel(arg0 context.Context, arg1 *modelv1alpha.UnpublishModelRequest, arg2 ...grpc.CallOption) (*modelv1alpha.UnpublishModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnpublishModel", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.UnpublishModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpublishModel indicates an expected call of UnpublishModel.
func (mr *MockModelPublicServiceClientMockRecorder) UnpublishModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpublishModel", reflect.TypeOf((*MockModelPublicServiceClient)(nil).UnpublishModel), varargs...)
}

// UpdateModel mocks base method.
func (m *MockModelPublicServiceClient) UpdateModel(arg0 context.Context, arg1 *modelv1alpha.UpdateModelRequest, arg2 ...grpc.CallOption) (*modelv1alpha.UpdateModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateModel", varargs...)
	ret0, _ := ret[0].(*modelv1alpha.UpdateModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModel indicates an expected call of UpdateModel.
func (mr *MockModelPublicServiceClientMockRecorder) UpdateModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModel", reflect.TypeOf((*MockModelPublicServiceClient)(nil).UpdateModel), varargs...)
}
