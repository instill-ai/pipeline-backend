// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/protogen-go/vdp/connector/v1alpha (interfaces: ConnectorPrivateServiceClient)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	connectorv1alpha "github.com/instill-ai/protogen-go/vdp/connector/v1alpha"
	grpc "google.golang.org/grpc"
)

// MockConnectorPrivateServiceClient is a mock of ConnectorPrivateServiceClient interface.
type MockConnectorPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorPrivateServiceClientMockRecorder
}

// MockConnectorPrivateServiceClientMockRecorder is the mock recorder for MockConnectorPrivateServiceClient.
type MockConnectorPrivateServiceClientMockRecorder struct {
	mock *MockConnectorPrivateServiceClient
}

// NewMockConnectorPrivateServiceClient creates a new mock instance.
func NewMockConnectorPrivateServiceClient(ctrl *gomock.Controller) *MockConnectorPrivateServiceClient {
	mock := &MockConnectorPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockConnectorPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectorPrivateServiceClient) EXPECT() *MockConnectorPrivateServiceClientMockRecorder {
	return m.recorder
}

// CheckConnectorResource mocks base method.
func (m *MockConnectorPrivateServiceClient) CheckConnectorResource(arg0 context.Context, arg1 *connectorv1alpha.CheckConnectorResourceRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.CheckConnectorResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckConnectorResource", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.CheckConnectorResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckConnectorResource indicates an expected call of CheckConnectorResource.
func (mr *MockConnectorPrivateServiceClientMockRecorder) CheckConnectorResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConnectorResource", reflect.TypeOf((*MockConnectorPrivateServiceClient)(nil).CheckConnectorResource), varargs...)
}

// ListConnectorResourcesAdmin mocks base method.
func (m *MockConnectorPrivateServiceClient) ListConnectorResourcesAdmin(arg0 context.Context, arg1 *connectorv1alpha.ListConnectorResourcesAdminRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ListConnectorResourcesAdminResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectorResourcesAdmin", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ListConnectorResourcesAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectorResourcesAdmin indicates an expected call of ListConnectorResourcesAdmin.
func (mr *MockConnectorPrivateServiceClientMockRecorder) ListConnectorResourcesAdmin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorResourcesAdmin", reflect.TypeOf((*MockConnectorPrivateServiceClient)(nil).ListConnectorResourcesAdmin), varargs...)
}

// LookUpConnectorDefinitionAdmin mocks base method.
func (m *MockConnectorPrivateServiceClient) LookUpConnectorDefinitionAdmin(arg0 context.Context, arg1 *connectorv1alpha.LookUpConnectorDefinitionAdminRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.LookUpConnectorDefinitionAdminResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookUpConnectorDefinitionAdmin", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.LookUpConnectorDefinitionAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUpConnectorDefinitionAdmin indicates an expected call of LookUpConnectorDefinitionAdmin.
func (mr *MockConnectorPrivateServiceClientMockRecorder) LookUpConnectorDefinitionAdmin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUpConnectorDefinitionAdmin", reflect.TypeOf((*MockConnectorPrivateServiceClient)(nil).LookUpConnectorDefinitionAdmin), varargs...)
}

// LookUpConnectorResourceAdmin mocks base method.
func (m *MockConnectorPrivateServiceClient) LookUpConnectorResourceAdmin(arg0 context.Context, arg1 *connectorv1alpha.LookUpConnectorResourceAdminRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.LookUpConnectorResourceAdminResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookUpConnectorResourceAdmin", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.LookUpConnectorResourceAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUpConnectorResourceAdmin indicates an expected call of LookUpConnectorResourceAdmin.
func (mr *MockConnectorPrivateServiceClientMockRecorder) LookUpConnectorResourceAdmin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUpConnectorResourceAdmin", reflect.TypeOf((*MockConnectorPrivateServiceClient)(nil).LookUpConnectorResourceAdmin), varargs...)
}
