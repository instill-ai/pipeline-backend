// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/protogen-go/vdp/connector/v1alpha (interfaces: ConnectorPrivateServiceClient)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	connectorv1alpha "github.com/instill-ai/protogen-go/vdp/connector/v1alpha"
	grpc "google.golang.org/grpc"
)

// MockConnectorPrivateServiceClient is a mock of ConnectorPrivateServiceClient interface.
type MockConnectorPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorPrivateServiceClientMockRecorder
}

// MockConnectorPrivateServiceClientMockRecorder is the mock recorder for MockConnectorPrivateServiceClient.
type MockConnectorPrivateServiceClientMockRecorder struct {
	mock *MockConnectorPrivateServiceClient
}

// NewMockConnectorPrivateServiceClient creates a new mock instance.
func NewMockConnectorPrivateServiceClient(ctrl *gomock.Controller) *MockConnectorPrivateServiceClient {
	mock := &MockConnectorPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockConnectorPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectorPrivateServiceClient) EXPECT() *MockConnectorPrivateServiceClientMockRecorder {
	return m.recorder
}

// CheckConnector mocks base method.
func (m *MockConnectorPrivateServiceClient) CheckConnector(arg0 context.Context, arg1 *connectorv1alpha.CheckConnectorRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.CheckConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckConnector", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.CheckConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckConnector indicates an expected call of CheckConnector.
func (mr *MockConnectorPrivateServiceClientMockRecorder) CheckConnector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConnector", reflect.TypeOf((*MockConnectorPrivateServiceClient)(nil).CheckConnector), varargs...)
}

// ListConnectorsAdmin mocks base method.
func (m *MockConnectorPrivateServiceClient) ListConnectorsAdmin(arg0 context.Context, arg1 *connectorv1alpha.ListConnectorsAdminRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.ListConnectorsAdminResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectorsAdmin", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.ListConnectorsAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectorsAdmin indicates an expected call of ListConnectorsAdmin.
func (mr *MockConnectorPrivateServiceClientMockRecorder) ListConnectorsAdmin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorsAdmin", reflect.TypeOf((*MockConnectorPrivateServiceClient)(nil).ListConnectorsAdmin), varargs...)
}

// LookUpConnectorAdmin mocks base method.
func (m *MockConnectorPrivateServiceClient) LookUpConnectorAdmin(arg0 context.Context, arg1 *connectorv1alpha.LookUpConnectorAdminRequest, arg2 ...grpc.CallOption) (*connectorv1alpha.LookUpConnectorAdminResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookUpConnectorAdmin", varargs...)
	ret0, _ := ret[0].(*connectorv1alpha.LookUpConnectorAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUpConnectorAdmin indicates an expected call of LookUpConnectorAdmin.
func (mr *MockConnectorPrivateServiceClientMockRecorder) LookUpConnectorAdmin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUpConnectorAdmin", reflect.TypeOf((*MockConnectorPrivateServiceClient)(nil).LookUpConnectorAdmin), varargs...)
}
