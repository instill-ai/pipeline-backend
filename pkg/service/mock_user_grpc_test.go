// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/protogen-go/vdp/mgmt/v1alpha (interfaces: MgmtAdminServiceClient)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mgmtv1alpha "github.com/instill-ai/protogen-go/vdp/mgmt/v1alpha"
	grpc "google.golang.org/grpc"
)

// MockMgmtAdminServiceClient is a mock of MgmtAdminServiceClient interface.
type MockMgmtAdminServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMgmtAdminServiceClientMockRecorder
}

// MockMgmtAdminServiceClientMockRecorder is the mock recorder for MockMgmtAdminServiceClient.
type MockMgmtAdminServiceClientMockRecorder struct {
	mock *MockMgmtAdminServiceClient
}

// NewMockMgmtAdminServiceClient creates a new mock instance.
func NewMockMgmtAdminServiceClient(ctrl *gomock.Controller) *MockMgmtAdminServiceClient {
	mock := &MockMgmtAdminServiceClient{ctrl: ctrl}
	mock.recorder = &MockMgmtAdminServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMgmtAdminServiceClient) EXPECT() *MockMgmtAdminServiceClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockMgmtAdminServiceClient) CreateUser(arg0 context.Context, arg1 *mgmtv1alpha.CreateUserRequest, arg2 ...grpc.CallOption) (*mgmtv1alpha.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*mgmtv1alpha.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMgmtAdminServiceClientMockRecorder) CreateUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMgmtAdminServiceClient)(nil).CreateUser), varargs...)
}

// DeleteUser mocks base method.
func (m *MockMgmtAdminServiceClient) DeleteUser(arg0 context.Context, arg1 *mgmtv1alpha.DeleteUserRequest, arg2 ...grpc.CallOption) (*mgmtv1alpha.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(*mgmtv1alpha.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockMgmtAdminServiceClientMockRecorder) DeleteUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockMgmtAdminServiceClient)(nil).DeleteUser), varargs...)
}

// GetUser mocks base method.
func (m *MockMgmtAdminServiceClient) GetUser(arg0 context.Context, arg1 *mgmtv1alpha.GetUserRequest, arg2 ...grpc.CallOption) (*mgmtv1alpha.GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*mgmtv1alpha.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockMgmtAdminServiceClientMockRecorder) GetUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockMgmtAdminServiceClient)(nil).GetUser), varargs...)
}

// ListUser mocks base method.
func (m *MockMgmtAdminServiceClient) ListUser(arg0 context.Context, arg1 *mgmtv1alpha.ListUserRequest, arg2 ...grpc.CallOption) (*mgmtv1alpha.ListUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUser", varargs...)
	ret0, _ := ret[0].(*mgmtv1alpha.ListUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser indicates an expected call of ListUser.
func (mr *MockMgmtAdminServiceClientMockRecorder) ListUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockMgmtAdminServiceClient)(nil).ListUser), varargs...)
}

// LookUpUser mocks base method.
func (m *MockMgmtAdminServiceClient) LookUpUser(arg0 context.Context, arg1 *mgmtv1alpha.LookUpUserRequest, arg2 ...grpc.CallOption) (*mgmtv1alpha.LookUpUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LookUpUser", varargs...)
	ret0, _ := ret[0].(*mgmtv1alpha.LookUpUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookUpUser indicates an expected call of LookUpUser.
func (mr *MockMgmtAdminServiceClientMockRecorder) LookUpUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookUpUser", reflect.TypeOf((*MockMgmtAdminServiceClient)(nil).LookUpUser), varargs...)
}

// UpdateUser mocks base method.
func (m *MockMgmtAdminServiceClient) UpdateUser(arg0 context.Context, arg1 *mgmtv1alpha.UpdateUserRequest, arg2 ...grpc.CallOption) (*mgmtv1alpha.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*mgmtv1alpha.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockMgmtAdminServiceClientMockRecorder) UpdateUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockMgmtAdminServiceClient)(nil).UpdateUser), varargs...)
}
