// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/protogen-go/core/usage/v1alpha (interfaces: UsageServiceClient)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	usagev1alpha "github.com/instill-ai/protogen-go/core/usage/v1alpha"
)

// MockUsageServiceClient is a mock of UsageServiceClient interface.
type MockUsageServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUsageServiceClientMockRecorder
}

// MockUsageServiceClientMockRecorder is the mock recorder for MockUsageServiceClient.
type MockUsageServiceClientMockRecorder struct {
	mock *MockUsageServiceClient
}

// NewMockUsageServiceClient creates a new mock instance.
func NewMockUsageServiceClient(ctrl *gomock.Controller) *MockUsageServiceClient {
	mock := &MockUsageServiceClient{ctrl: ctrl}
	mock.recorder = &MockUsageServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsageServiceClient) EXPECT() *MockUsageServiceClientMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockUsageServiceClient) CreateSession(arg0 context.Context, arg1 *usagev1alpha.CreateSessionRequest, arg2 ...grpc.CallOption) (*usagev1alpha.CreateSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSession", varargs...)
	ret0, _ := ret[0].(*usagev1alpha.CreateSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockUsageServiceClientMockRecorder) CreateSession(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockUsageServiceClient)(nil).CreateSession), varargs...)
}

// Liveness mocks base method.
func (m *MockUsageServiceClient) Liveness(arg0 context.Context, arg1 *usagev1alpha.LivenessRequest, arg2 ...grpc.CallOption) (*usagev1alpha.LivenessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Liveness", varargs...)
	ret0, _ := ret[0].(*usagev1alpha.LivenessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Liveness indicates an expected call of Liveness.
func (mr *MockUsageServiceClientMockRecorder) Liveness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liveness", reflect.TypeOf((*MockUsageServiceClient)(nil).Liveness), varargs...)
}

// Readiness mocks base method.
func (m *MockUsageServiceClient) Readiness(arg0 context.Context, arg1 *usagev1alpha.ReadinessRequest, arg2 ...grpc.CallOption) (*usagev1alpha.ReadinessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Readiness", varargs...)
	ret0, _ := ret[0].(*usagev1alpha.ReadinessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readiness indicates an expected call of Readiness.
func (mr *MockUsageServiceClientMockRecorder) Readiness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readiness", reflect.TypeOf((*MockUsageServiceClient)(nil).Readiness), varargs...)
}

// SendSessionReport mocks base method.
func (m *MockUsageServiceClient) SendSessionReport(arg0 context.Context, arg1 *usagev1alpha.SendSessionReportRequest, arg2 ...grpc.CallOption) (*usagev1alpha.SendSessionReportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendSessionReport", varargs...)
	ret0, _ := ret[0].(*usagev1alpha.SendSessionReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSessionReport indicates an expected call of SendSessionReport.
func (mr *MockUsageServiceClientMockRecorder) SendSessionReport(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSessionReport", reflect.TypeOf((*MockUsageServiceClient)(nil).SendSessionReport), varargs...)
}
