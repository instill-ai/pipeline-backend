// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/instill-ai/protogen-go/vdp/controller/v1beta (interfaces: ControllerPrivateServiceClient)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controllerv1beta "github.com/instill-ai/protogen-go/vdp/controller/v1beta"
	grpc "google.golang.org/grpc"
)

// MockControllerPrivateServiceClient is a mock of ControllerPrivateServiceClient interface.
type MockControllerPrivateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockControllerPrivateServiceClientMockRecorder
}

// MockControllerPrivateServiceClientMockRecorder is the mock recorder for MockControllerPrivateServiceClient.
type MockControllerPrivateServiceClientMockRecorder struct {
	mock *MockControllerPrivateServiceClient
}

// NewMockControllerPrivateServiceClient creates a new mock instance.
func NewMockControllerPrivateServiceClient(ctrl *gomock.Controller) *MockControllerPrivateServiceClient {
	mock := &MockControllerPrivateServiceClient{ctrl: ctrl}
	mock.recorder = &MockControllerPrivateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerPrivateServiceClient) EXPECT() *MockControllerPrivateServiceClientMockRecorder {
	return m.recorder
}

// DeleteResource mocks base method.
func (m *MockControllerPrivateServiceClient) DeleteResource(arg0 context.Context, arg1 *controllerv1beta.DeleteResourceRequest, arg2 ...grpc.CallOption) (*controllerv1beta.DeleteResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResource", varargs...)
	ret0, _ := ret[0].(*controllerv1beta.DeleteResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockControllerPrivateServiceClientMockRecorder) DeleteResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockControllerPrivateServiceClient)(nil).DeleteResource), varargs...)
}

// GetResource mocks base method.
func (m *MockControllerPrivateServiceClient) GetResource(arg0 context.Context, arg1 *controllerv1beta.GetResourceRequest, arg2 ...grpc.CallOption) (*controllerv1beta.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResource", varargs...)
	ret0, _ := ret[0].(*controllerv1beta.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockControllerPrivateServiceClientMockRecorder) GetResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockControllerPrivateServiceClient)(nil).GetResource), varargs...)
}

// Liveness mocks base method.
func (m *MockControllerPrivateServiceClient) Liveness(arg0 context.Context, arg1 *controllerv1beta.LivenessRequest, arg2 ...grpc.CallOption) (*controllerv1beta.LivenessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Liveness", varargs...)
	ret0, _ := ret[0].(*controllerv1beta.LivenessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Liveness indicates an expected call of Liveness.
func (mr *MockControllerPrivateServiceClientMockRecorder) Liveness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Liveness", reflect.TypeOf((*MockControllerPrivateServiceClient)(nil).Liveness), varargs...)
}

// Readiness mocks base method.
func (m *MockControllerPrivateServiceClient) Readiness(arg0 context.Context, arg1 *controllerv1beta.ReadinessRequest, arg2 ...grpc.CallOption) (*controllerv1beta.ReadinessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Readiness", varargs...)
	ret0, _ := ret[0].(*controllerv1beta.ReadinessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Readiness indicates an expected call of Readiness.
func (mr *MockControllerPrivateServiceClientMockRecorder) Readiness(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readiness", reflect.TypeOf((*MockControllerPrivateServiceClient)(nil).Readiness), varargs...)
}

// UpdateResource mocks base method.
func (m *MockControllerPrivateServiceClient) UpdateResource(arg0 context.Context, arg1 *controllerv1beta.UpdateResourceRequest, arg2 ...grpc.CallOption) (*controllerv1beta.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResource", varargs...)
	ret0, _ := ret[0].(*controllerv1beta.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockControllerPrivateServiceClientMockRecorder) UpdateResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockControllerPrivateServiceClient)(nil).UpdateResource), varargs...)
}
