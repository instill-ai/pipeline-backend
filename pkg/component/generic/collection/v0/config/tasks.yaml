TASK_APPEND:
  shortDescription: Append values to create or extend an array, or add key-value pairs to an object.
  input:
    description: Input parameters for append operation.
    uiOrder: 0
    properties:
      data:
        description: >-
          The input data. If it's an array, the value will be appended. If it's an object, the key-value pairs from value will be added. If it's
          a primitive type (string, number, boolean), it will be converted to a single-element array before appending.
        type: "*"
        uiOrder: 0
        title: Data
      value:
        description: >-
          The value to append. For arrays: the value will be appended as a new element. For objects: if value is an object, its key-value pairs
          will be added to the input object. For primitives: value will be appended to create/extend an array.
        type: "*"
        uiOrder: 1
        title: Value
    required:
      - data
      - value
    title: Input
    type: object
  output:
    description: Output containing the modified data structure.
    uiOrder: 0
    properties:
      data:
        description: >-
          The resulting data structure after the append operation. Will be either an array (if input was array or primitive) or an object (if
          input was object). Examples: [1,2,3], {"name": "John", "age": 25}, or ["hello","world"].
        uiOrder: 0
        required: []
        title: Data
        type: "*"
    required:
      - data
    title: Output
    type: object
TASK_ASSIGN:
  shortDescription: Assign a value to a specific path in a data structure.
  input:
    description: Input parameters for assign operation.
    uiOrder: 0
    properties:
      data:
        description: The input data structure to modify. Can be an array, object, or primitive value.
        type: "*"
        uiOrder: 0
        title: Data
      path:
        description: >-
          The path where to assign the value. Use dot notation for nested objects and [n] for array indices. Examples: `users.[0].name`, `.[0].key`,
          `metadata.tags.[2]`.
        type: string
        uiOrder: 1
        title: Path
      value:
        description: >-
          The value to assign at the specified path. Can be any type (string, number, boolean, array, or object).
        type: "*"
        uiOrder: 2
        title: Value
    required:
      - data
      - path
      - value
    title: Input
    type: object
  output:
    description: Output containing the modified data structure.
    uiOrder: 0
    properties:
      data:
        description: >-
          The resulting data structure after the assign operation.
        uiOrder: 0
        title: Data
        type: "*"
    required:
      - data
    title: Output
    type: object
TASK_CONCAT:
  shortDescription: Concatenate multiple arrays or merge multiple objects into a single collection.
  input:
    description: Input parameters for concat operation. Can handle both arrays and objects.
    uiOrder: 0
    properties:
      data:
        description: >-
          An array of arrays or objects to be concatenated/merged. For arrays: `[[1, 2], [3, 4]]` becomes `[1, 2, 3, 4]`. For objects: `[{"a":
          1}, {"b": 2}]` becomes `{"a": 1, "b": 2}`. Later values override earlier ones for objects.
        type: array
        uiOrder: 0
        items:
          type: "*"
        title: Data
    required:
      - data
    title: Input
    type: object
  output:
    description: Output containing the concatenated/merged result.
    uiOrder: 0
    properties:
      data:
        description: >-
          The resulting array or object after concat operation.
        uiOrder: 0
        title: Data
        type: "*"
    required:
      - data
    title: Output
    type: object
TASK_DIFFERENCE:
  shortDescription: Find elements that exist in the first array or object but not in any of the other arrays or objects.
  input:
    description: Input parameters for difference operation. Can handle both arrays and objects.
    properties:
      data:
        description: >-
          An array of arrays or objects to find the difference. The first element is compared against all subsequent elements. For example,
          given arrays `[[1, 2, 3], [2, 3, 4], [3, 4, 5]]`, the result will be `[1]`. For objects, given `[{"a": 1, "b": 2}, {"b": 2, "c": 3}]`, the result
          will be `{"a": 1}`.
        type: array
        uiOrder: 0
        items:
          type: "*"
        required: []
        title: Data
    required:
      - data
    title: Input
    type: object
  output:
    description: Output containing the difference result.
    uiOrder: 0
    properties:
      data:
        description: >-
          The resulting array or object after the difference operation.
        uiOrder: 0
        title: Data
        type: "*"
    required:
      - data
    title: Output
    type: object
TASK_INTERSECTION:
  shortDescription: Find common elements that exist in all input arrays or objects.
  input:
    description: Input parameters for intersection operation. Can handle both arrays and objects.
    uiOrder: 0
    properties:
      data:
        description: >-
          An array of arrays or objects to find common elements. For arrays: given `[[1, 2, 3], [2, 3, 4]]`, the result will be `[2, 3]`. For objects:
          given `[{"a": 1, "b": 2}, {"b": 2, "c": 3}]`, the result will be `{"b": 2}`.
        type: array
        uiOrder: 0
        items:
          type: "*"
        title: Data
    required:
      - data
    title: Input
    type: object
  output:
    description: Output containing the intersection result.
    uiOrder: 0
    properties:
      data:
        description: >-
          The resulting array or object after the intersection operation.
        uiOrder: 0
        title: Data
        type: "*"
    required:
      - data
    title: Output
    type: object
TASK_SPLIT:
  shortDescription: Split arrays or objects into smaller chunks.
  input:
    description: Input parameters for split operation.
    uiOrder: 0
    properties:
      data:
        description: >-
          The source data to be split. Can be: 1) An array to split into groups 2) An object to split by property count (keys are sorted alphabetically
          for consistent ordering).
        type: "*"
        uiOrder: 0
        title: Data
      size:
        description: Number of elements per group
        uiOrder: 1
        type: integer
        title: Size
    required:
      - data
      - size
    title: Input
    type: object
  output:
    description: Output containing the split results. For objects, the properties in each chunk maintain alphabetical ordering of keys.
    uiOrder: 1
    properties:
      data:
        description: >-
          The resulting array after splitting. For arrays input: the array of sub-arrays. For objects input: array of smaller objects with alphabetically
          ordered
          keys.
        uiOrder: 0
        items:
          type: "*"
        title: Data
        type: array
    required:
      - data
    title: Output
    type: object
TASK_SYMMETRIC_DIFFERENCE:
  shortDescription: Find elements that exist in exactly one of the input arrays or objects, but not in multiple inputs.
  input:
    description: Input parameters for symmetric difference operation. Can handle both arrays and objects.
    uiOrder: 0
    properties:
      data:
        description: >-
          An array of arrays or objects to find symmetric difference. For arrays: given `[[1, 2], [2, 3]]`, the result will be `[1, 3]`. For objects:
          given `[{"a": 1, "b": 2}, {"b": 2, "c": 3}]`, the result will be `{"a": 1, "c": 3}`.
        type: array
        uiOrder: 0
        items:
          type: "*"
        title: Data
    required:
      - data
    title: Input
    type: object
  output:
    description: Output containing the symmetric difference result.
    uiOrder: 0
    properties:
      data:
        description: The resulting array or object after the symmetric difference operation.
        uiOrder: 0
        title: Data
        type: "*"
    required:
      - data
    title: Output
    type: object
TASK_UNION:
  shortDescription: Find unique elements that exist in any of the input arrays or objects.
  input:
    description: Input parameters for union operation. Can handle both arrays and objects.
    uiOrder: 0
    properties:
      data:
        description: >-
          An array of arrays or objects to find unique elements. For arrays: given `[[1, 2], [2, 3]]`, the result will be `[1, 2, 3]`. For objects:
          given `[{"a": 1, "b": 2}, {"b": 2, "c": 3}]`, the result will be `{"a": 1, "b": 2, "c": 3}`.
        type: array
        uiOrder: 0
        items:
          type: "*"
        title: Data
    required:
      - data
    title: Input
    type: object
  output:
    description: Output containing the union result.
    uiOrder: 0
    properties:
      data:
        description: The resulting array or object after the union operation.
        uiOrder: 0
        title: Data
        type: "*"
    required:
      - data
    title: Output
    type: object
