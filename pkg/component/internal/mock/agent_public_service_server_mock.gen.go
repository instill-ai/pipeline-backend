// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

import (
	context "context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_agentv1alpha "github.com/instill-ai/protogen-go/agent/agent/v1alpha"
)

// AgentPublicServiceServerMock implements mm_agentv1alpha.AgentPublicServiceServer
type AgentPublicServiceServerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcBindChatTable          func(ctx context.Context, bp1 *mm_agentv1alpha.BindChatTableRequest) (bp2 *mm_agentv1alpha.BindChatTableResponse, err error)
	funcBindChatTableOrigin    string
	inspectFuncBindChatTable   func(ctx context.Context, bp1 *mm_agentv1alpha.BindChatTableRequest)
	afterBindChatTableCounter  uint64
	beforeBindChatTableCounter uint64
	BindChatTableMock          mAgentPublicServiceServerMockBindChatTable

	funcChat          func(ctx context.Context, cp1 *mm_agentv1alpha.ChatRequest) (cp2 *mm_agentv1alpha.ChatResponse, err error)
	funcChatOrigin    string
	inspectFuncChat   func(ctx context.Context, cp1 *mm_agentv1alpha.ChatRequest)
	afterChatCounter  uint64
	beforeChatCounter uint64
	ChatMock          mAgentPublicServiceServerMockChat

	funcCreateChat          func(ctx context.Context, cp1 *mm_agentv1alpha.CreateChatRequest) (cp2 *mm_agentv1alpha.CreateChatResponse, err error)
	funcCreateChatOrigin    string
	inspectFuncCreateChat   func(ctx context.Context, cp1 *mm_agentv1alpha.CreateChatRequest)
	afterCreateChatCounter  uint64
	beforeCreateChatCounter uint64
	CreateChatMock          mAgentPublicServiceServerMockCreateChat

	funcCreateMessage          func(ctx context.Context, cp1 *mm_agentv1alpha.CreateMessageRequest) (cp2 *mm_agentv1alpha.CreateMessageResponse, err error)
	funcCreateMessageOrigin    string
	inspectFuncCreateMessage   func(ctx context.Context, cp1 *mm_agentv1alpha.CreateMessageRequest)
	afterCreateMessageCounter  uint64
	beforeCreateMessageCounter uint64
	CreateMessageMock          mAgentPublicServiceServerMockCreateMessage

	funcCreateTable          func(ctx context.Context, cp1 *mm_agentv1alpha.CreateTableRequest) (cp2 *mm_agentv1alpha.CreateTableResponse, err error)
	funcCreateTableOrigin    string
	inspectFuncCreateTable   func(ctx context.Context, cp1 *mm_agentv1alpha.CreateTableRequest)
	afterCreateTableCounter  uint64
	beforeCreateTableCounter uint64
	CreateTableMock          mAgentPublicServiceServerMockCreateTable

	funcDeleteChat          func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteChatRequest) (dp2 *mm_agentv1alpha.DeleteChatResponse, err error)
	funcDeleteChatOrigin    string
	inspectFuncDeleteChat   func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteChatRequest)
	afterDeleteChatCounter  uint64
	beforeDeleteChatCounter uint64
	DeleteChatMock          mAgentPublicServiceServerMockDeleteChat

	funcDeleteMessage          func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteMessageRequest) (dp2 *mm_agentv1alpha.DeleteMessageResponse, err error)
	funcDeleteMessageOrigin    string
	inspectFuncDeleteMessage   func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteMessageRequest)
	afterDeleteMessageCounter  uint64
	beforeDeleteMessageCounter uint64
	DeleteMessageMock          mAgentPublicServiceServerMockDeleteMessage

	funcDeleteRow          func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteRowRequest) (dp2 *mm_agentv1alpha.DeleteRowResponse, err error)
	funcDeleteRowOrigin    string
	inspectFuncDeleteRow   func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteRowRequest)
	afterDeleteRowCounter  uint64
	beforeDeleteRowCounter uint64
	DeleteRowMock          mAgentPublicServiceServerMockDeleteRow

	funcDeleteRows          func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteRowsRequest) (dp2 *mm_agentv1alpha.DeleteRowsResponse, err error)
	funcDeleteRowsOrigin    string
	inspectFuncDeleteRows   func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteRowsRequest)
	afterDeleteRowsCounter  uint64
	beforeDeleteRowsCounter uint64
	DeleteRowsMock          mAgentPublicServiceServerMockDeleteRows

	funcDeleteTable          func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteTableRequest) (dp2 *mm_agentv1alpha.DeleteTableResponse, err error)
	funcDeleteTableOrigin    string
	inspectFuncDeleteTable   func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteTableRequest)
	afterDeleteTableCounter  uint64
	beforeDeleteTableCounter uint64
	DeleteTableMock          mAgentPublicServiceServerMockDeleteTable

	funcExportTable          func(ctx context.Context, ep1 *mm_agentv1alpha.ExportTableRequest) (ep2 *mm_agentv1alpha.ExportTableResponse, err error)
	funcExportTableOrigin    string
	inspectFuncExportTable   func(ctx context.Context, ep1 *mm_agentv1alpha.ExportTableRequest)
	afterExportTableCounter  uint64
	beforeExportTableCounter uint64
	ExportTableMock          mAgentPublicServiceServerMockExportTable

	funcGenerateMockTable          func(ctx context.Context, gp1 *mm_agentv1alpha.GenerateMockTableRequest) (gp2 *mm_agentv1alpha.GenerateMockTableResponse, err error)
	funcGenerateMockTableOrigin    string
	inspectFuncGenerateMockTable   func(ctx context.Context, gp1 *mm_agentv1alpha.GenerateMockTableRequest)
	afterGenerateMockTableCounter  uint64
	beforeGenerateMockTableCounter uint64
	GenerateMockTableMock          mAgentPublicServiceServerMockGenerateMockTable

	funcGetChat          func(ctx context.Context, gp1 *mm_agentv1alpha.GetChatRequest) (gp2 *mm_agentv1alpha.GetChatResponse, err error)
	funcGetChatOrigin    string
	inspectFuncGetChat   func(ctx context.Context, gp1 *mm_agentv1alpha.GetChatRequest)
	afterGetChatCounter  uint64
	beforeGetChatCounter uint64
	GetChatMock          mAgentPublicServiceServerMockGetChat

	funcGetColumnDefinitions          func(ctx context.Context, gp1 *mm_agentv1alpha.GetColumnDefinitionsRequest) (gp2 *mm_agentv1alpha.GetColumnDefinitionsResponse, err error)
	funcGetColumnDefinitionsOrigin    string
	inspectFuncGetColumnDefinitions   func(ctx context.Context, gp1 *mm_agentv1alpha.GetColumnDefinitionsRequest)
	afterGetColumnDefinitionsCounter  uint64
	beforeGetColumnDefinitionsCounter uint64
	GetColumnDefinitionsMock          mAgentPublicServiceServerMockGetColumnDefinitions

	funcGetTable          func(ctx context.Context, gp1 *mm_agentv1alpha.GetTableRequest) (gp2 *mm_agentv1alpha.GetTableResponse, err error)
	funcGetTableOrigin    string
	inspectFuncGetTable   func(ctx context.Context, gp1 *mm_agentv1alpha.GetTableRequest)
	afterGetTableCounter  uint64
	beforeGetTableCounter uint64
	GetTableMock          mAgentPublicServiceServerMockGetTable

	funcGetTableEvents          func(gp1 *mm_agentv1alpha.GetTableEventsRequest, a1 mm_agentv1alpha.AgentPublicService_GetTableEventsServer) (err error)
	funcGetTableEventsOrigin    string
	inspectFuncGetTableEvents   func(gp1 *mm_agentv1alpha.GetTableEventsRequest, a1 mm_agentv1alpha.AgentPublicService_GetTableEventsServer)
	afterGetTableEventsCounter  uint64
	beforeGetTableEventsCounter uint64
	GetTableEventsMock          mAgentPublicServiceServerMockGetTableEvents

	funcInsertRow          func(ctx context.Context, ip1 *mm_agentv1alpha.InsertRowRequest) (ip2 *mm_agentv1alpha.InsertRowResponse, err error)
	funcInsertRowOrigin    string
	inspectFuncInsertRow   func(ctx context.Context, ip1 *mm_agentv1alpha.InsertRowRequest)
	afterInsertRowCounter  uint64
	beforeInsertRowCounter uint64
	InsertRowMock          mAgentPublicServiceServerMockInsertRow

	funcListChatTables          func(ctx context.Context, lp1 *mm_agentv1alpha.ListChatTablesRequest) (lp2 *mm_agentv1alpha.ListChatTablesResponse, err error)
	funcListChatTablesOrigin    string
	inspectFuncListChatTables   func(ctx context.Context, lp1 *mm_agentv1alpha.ListChatTablesRequest)
	afterListChatTablesCounter  uint64
	beforeListChatTablesCounter uint64
	ListChatTablesMock          mAgentPublicServiceServerMockListChatTables

	funcListChats          func(ctx context.Context, lp1 *mm_agentv1alpha.ListChatsRequest) (lp2 *mm_agentv1alpha.ListChatsResponse, err error)
	funcListChatsOrigin    string
	inspectFuncListChats   func(ctx context.Context, lp1 *mm_agentv1alpha.ListChatsRequest)
	afterListChatsCounter  uint64
	beforeListChatsCounter uint64
	ListChatsMock          mAgentPublicServiceServerMockListChats

	funcListMessages          func(ctx context.Context, lp1 *mm_agentv1alpha.ListMessagesRequest) (lp2 *mm_agentv1alpha.ListMessagesResponse, err error)
	funcListMessagesOrigin    string
	inspectFuncListMessages   func(ctx context.Context, lp1 *mm_agentv1alpha.ListMessagesRequest)
	afterListMessagesCounter  uint64
	beforeListMessagesCounter uint64
	ListMessagesMock          mAgentPublicServiceServerMockListMessages

	funcListRows          func(ctx context.Context, lp1 *mm_agentv1alpha.ListRowsRequest) (lp2 *mm_agentv1alpha.ListRowsResponse, err error)
	funcListRowsOrigin    string
	inspectFuncListRows   func(ctx context.Context, lp1 *mm_agentv1alpha.ListRowsRequest)
	afterListRowsCounter  uint64
	beforeListRowsCounter uint64
	ListRowsMock          mAgentPublicServiceServerMockListRows

	funcListTables          func(ctx context.Context, lp1 *mm_agentv1alpha.ListTablesRequest) (lp2 *mm_agentv1alpha.ListTablesResponse, err error)
	funcListTablesOrigin    string
	inspectFuncListTables   func(ctx context.Context, lp1 *mm_agentv1alpha.ListTablesRequest)
	afterListTablesCounter  uint64
	beforeListTablesCounter uint64
	ListTablesMock          mAgentPublicServiceServerMockListTables

	funcLiveness          func(ctx context.Context, lp1 *mm_agentv1alpha.LivenessRequest) (lp2 *mm_agentv1alpha.LivenessResponse, err error)
	funcLivenessOrigin    string
	inspectFuncLiveness   func(ctx context.Context, lp1 *mm_agentv1alpha.LivenessRequest)
	afterLivenessCounter  uint64
	beforeLivenessCounter uint64
	LivenessMock          mAgentPublicServiceServerMockLiveness

	funcMoveRows          func(ctx context.Context, mp1 *mm_agentv1alpha.MoveRowsRequest) (mp2 *mm_agentv1alpha.MoveRowsResponse, err error)
	funcMoveRowsOrigin    string
	inspectFuncMoveRows   func(ctx context.Context, mp1 *mm_agentv1alpha.MoveRowsRequest)
	afterMoveRowsCounter  uint64
	beforeMoveRowsCounter uint64
	MoveRowsMock          mAgentPublicServiceServerMockMoveRows

	funcReadiness          func(ctx context.Context, rp1 *mm_agentv1alpha.ReadinessRequest) (rp2 *mm_agentv1alpha.ReadinessResponse, err error)
	funcReadinessOrigin    string
	inspectFuncReadiness   func(ctx context.Context, rp1 *mm_agentv1alpha.ReadinessRequest)
	afterReadinessCounter  uint64
	beforeReadinessCounter uint64
	ReadinessMock          mAgentPublicServiceServerMockReadiness

	funcUnbindChatTable          func(ctx context.Context, up1 *mm_agentv1alpha.UnbindChatTableRequest) (up2 *mm_agentv1alpha.UnbindChatTableResponse, err error)
	funcUnbindChatTableOrigin    string
	inspectFuncUnbindChatTable   func(ctx context.Context, up1 *mm_agentv1alpha.UnbindChatTableRequest)
	afterUnbindChatTableCounter  uint64
	beforeUnbindChatTableCounter uint64
	UnbindChatTableMock          mAgentPublicServiceServerMockUnbindChatTable

	funcUpdateChat          func(ctx context.Context, up1 *mm_agentv1alpha.UpdateChatRequest) (up2 *mm_agentv1alpha.UpdateChatResponse, err error)
	funcUpdateChatOrigin    string
	inspectFuncUpdateChat   func(ctx context.Context, up1 *mm_agentv1alpha.UpdateChatRequest)
	afterUpdateChatCounter  uint64
	beforeUpdateChatCounter uint64
	UpdateChatMock          mAgentPublicServiceServerMockUpdateChat

	funcUpdateColumnDefinitions          func(ctx context.Context, up1 *mm_agentv1alpha.UpdateColumnDefinitionsRequest) (up2 *mm_agentv1alpha.UpdateColumnDefinitionsResponse, err error)
	funcUpdateColumnDefinitionsOrigin    string
	inspectFuncUpdateColumnDefinitions   func(ctx context.Context, up1 *mm_agentv1alpha.UpdateColumnDefinitionsRequest)
	afterUpdateColumnDefinitionsCounter  uint64
	beforeUpdateColumnDefinitionsCounter uint64
	UpdateColumnDefinitionsMock          mAgentPublicServiceServerMockUpdateColumnDefinitions

	funcUpdateMessage          func(ctx context.Context, up1 *mm_agentv1alpha.UpdateMessageRequest) (up2 *mm_agentv1alpha.UpdateMessageResponse, err error)
	funcUpdateMessageOrigin    string
	inspectFuncUpdateMessage   func(ctx context.Context, up1 *mm_agentv1alpha.UpdateMessageRequest)
	afterUpdateMessageCounter  uint64
	beforeUpdateMessageCounter uint64
	UpdateMessageMock          mAgentPublicServiceServerMockUpdateMessage

	funcUpdateRow          func(ctx context.Context, up1 *mm_agentv1alpha.UpdateRowRequest) (up2 *mm_agentv1alpha.UpdateRowResponse, err error)
	funcUpdateRowOrigin    string
	inspectFuncUpdateRow   func(ctx context.Context, up1 *mm_agentv1alpha.UpdateRowRequest)
	afterUpdateRowCounter  uint64
	beforeUpdateRowCounter uint64
	UpdateRowMock          mAgentPublicServiceServerMockUpdateRow

	funcUpdateRows          func(ctx context.Context, up1 *mm_agentv1alpha.UpdateRowsRequest) (up2 *mm_agentv1alpha.UpdateRowsResponse, err error)
	funcUpdateRowsOrigin    string
	inspectFuncUpdateRows   func(ctx context.Context, up1 *mm_agentv1alpha.UpdateRowsRequest)
	afterUpdateRowsCounter  uint64
	beforeUpdateRowsCounter uint64
	UpdateRowsMock          mAgentPublicServiceServerMockUpdateRows

	funcUpdateTable          func(ctx context.Context, up1 *mm_agentv1alpha.UpdateTableRequest) (up2 *mm_agentv1alpha.UpdateTableResponse, err error)
	funcUpdateTableOrigin    string
	inspectFuncUpdateTable   func(ctx context.Context, up1 *mm_agentv1alpha.UpdateTableRequest)
	afterUpdateTableCounter  uint64
	beforeUpdateTableCounter uint64
	UpdateTableMock          mAgentPublicServiceServerMockUpdateTable
}

// NewAgentPublicServiceServerMock returns a mock for mm_agentv1alpha.AgentPublicServiceServer
func NewAgentPublicServiceServerMock(t minimock.Tester) *AgentPublicServiceServerMock {
	m := &AgentPublicServiceServerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.BindChatTableMock = mAgentPublicServiceServerMockBindChatTable{mock: m}
	m.BindChatTableMock.callArgs = []*AgentPublicServiceServerMockBindChatTableParams{}

	m.ChatMock = mAgentPublicServiceServerMockChat{mock: m}
	m.ChatMock.callArgs = []*AgentPublicServiceServerMockChatParams{}

	m.CreateChatMock = mAgentPublicServiceServerMockCreateChat{mock: m}
	m.CreateChatMock.callArgs = []*AgentPublicServiceServerMockCreateChatParams{}

	m.CreateMessageMock = mAgentPublicServiceServerMockCreateMessage{mock: m}
	m.CreateMessageMock.callArgs = []*AgentPublicServiceServerMockCreateMessageParams{}

	m.CreateTableMock = mAgentPublicServiceServerMockCreateTable{mock: m}
	m.CreateTableMock.callArgs = []*AgentPublicServiceServerMockCreateTableParams{}

	m.DeleteChatMock = mAgentPublicServiceServerMockDeleteChat{mock: m}
	m.DeleteChatMock.callArgs = []*AgentPublicServiceServerMockDeleteChatParams{}

	m.DeleteMessageMock = mAgentPublicServiceServerMockDeleteMessage{mock: m}
	m.DeleteMessageMock.callArgs = []*AgentPublicServiceServerMockDeleteMessageParams{}

	m.DeleteRowMock = mAgentPublicServiceServerMockDeleteRow{mock: m}
	m.DeleteRowMock.callArgs = []*AgentPublicServiceServerMockDeleteRowParams{}

	m.DeleteRowsMock = mAgentPublicServiceServerMockDeleteRows{mock: m}
	m.DeleteRowsMock.callArgs = []*AgentPublicServiceServerMockDeleteRowsParams{}

	m.DeleteTableMock = mAgentPublicServiceServerMockDeleteTable{mock: m}
	m.DeleteTableMock.callArgs = []*AgentPublicServiceServerMockDeleteTableParams{}

	m.ExportTableMock = mAgentPublicServiceServerMockExportTable{mock: m}
	m.ExportTableMock.callArgs = []*AgentPublicServiceServerMockExportTableParams{}

	m.GenerateMockTableMock = mAgentPublicServiceServerMockGenerateMockTable{mock: m}
	m.GenerateMockTableMock.callArgs = []*AgentPublicServiceServerMockGenerateMockTableParams{}

	m.GetChatMock = mAgentPublicServiceServerMockGetChat{mock: m}
	m.GetChatMock.callArgs = []*AgentPublicServiceServerMockGetChatParams{}

	m.GetColumnDefinitionsMock = mAgentPublicServiceServerMockGetColumnDefinitions{mock: m}
	m.GetColumnDefinitionsMock.callArgs = []*AgentPublicServiceServerMockGetColumnDefinitionsParams{}

	m.GetTableMock = mAgentPublicServiceServerMockGetTable{mock: m}
	m.GetTableMock.callArgs = []*AgentPublicServiceServerMockGetTableParams{}

	m.GetTableEventsMock = mAgentPublicServiceServerMockGetTableEvents{mock: m}
	m.GetTableEventsMock.callArgs = []*AgentPublicServiceServerMockGetTableEventsParams{}

	m.InsertRowMock = mAgentPublicServiceServerMockInsertRow{mock: m}
	m.InsertRowMock.callArgs = []*AgentPublicServiceServerMockInsertRowParams{}

	m.ListChatTablesMock = mAgentPublicServiceServerMockListChatTables{mock: m}
	m.ListChatTablesMock.callArgs = []*AgentPublicServiceServerMockListChatTablesParams{}

	m.ListChatsMock = mAgentPublicServiceServerMockListChats{mock: m}
	m.ListChatsMock.callArgs = []*AgentPublicServiceServerMockListChatsParams{}

	m.ListMessagesMock = mAgentPublicServiceServerMockListMessages{mock: m}
	m.ListMessagesMock.callArgs = []*AgentPublicServiceServerMockListMessagesParams{}

	m.ListRowsMock = mAgentPublicServiceServerMockListRows{mock: m}
	m.ListRowsMock.callArgs = []*AgentPublicServiceServerMockListRowsParams{}

	m.ListTablesMock = mAgentPublicServiceServerMockListTables{mock: m}
	m.ListTablesMock.callArgs = []*AgentPublicServiceServerMockListTablesParams{}

	m.LivenessMock = mAgentPublicServiceServerMockLiveness{mock: m}
	m.LivenessMock.callArgs = []*AgentPublicServiceServerMockLivenessParams{}

	m.MoveRowsMock = mAgentPublicServiceServerMockMoveRows{mock: m}
	m.MoveRowsMock.callArgs = []*AgentPublicServiceServerMockMoveRowsParams{}

	m.ReadinessMock = mAgentPublicServiceServerMockReadiness{mock: m}
	m.ReadinessMock.callArgs = []*AgentPublicServiceServerMockReadinessParams{}

	m.UnbindChatTableMock = mAgentPublicServiceServerMockUnbindChatTable{mock: m}
	m.UnbindChatTableMock.callArgs = []*AgentPublicServiceServerMockUnbindChatTableParams{}

	m.UpdateChatMock = mAgentPublicServiceServerMockUpdateChat{mock: m}
	m.UpdateChatMock.callArgs = []*AgentPublicServiceServerMockUpdateChatParams{}

	m.UpdateColumnDefinitionsMock = mAgentPublicServiceServerMockUpdateColumnDefinitions{mock: m}
	m.UpdateColumnDefinitionsMock.callArgs = []*AgentPublicServiceServerMockUpdateColumnDefinitionsParams{}

	m.UpdateMessageMock = mAgentPublicServiceServerMockUpdateMessage{mock: m}
	m.UpdateMessageMock.callArgs = []*AgentPublicServiceServerMockUpdateMessageParams{}

	m.UpdateRowMock = mAgentPublicServiceServerMockUpdateRow{mock: m}
	m.UpdateRowMock.callArgs = []*AgentPublicServiceServerMockUpdateRowParams{}

	m.UpdateRowsMock = mAgentPublicServiceServerMockUpdateRows{mock: m}
	m.UpdateRowsMock.callArgs = []*AgentPublicServiceServerMockUpdateRowsParams{}

	m.UpdateTableMock = mAgentPublicServiceServerMockUpdateTable{mock: m}
	m.UpdateTableMock.callArgs = []*AgentPublicServiceServerMockUpdateTableParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAgentPublicServiceServerMockBindChatTable struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockBindChatTableExpectation
	expectations       []*AgentPublicServiceServerMockBindChatTableExpectation

	callArgs []*AgentPublicServiceServerMockBindChatTableParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockBindChatTableExpectation specifies expectation struct of the AgentPublicServiceServer.BindChatTable
type AgentPublicServiceServerMockBindChatTableExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockBindChatTableParams
	paramPtrs          *AgentPublicServiceServerMockBindChatTableParamPtrs
	expectationOrigins AgentPublicServiceServerMockBindChatTableExpectationOrigins
	results            *AgentPublicServiceServerMockBindChatTableResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockBindChatTableParams contains parameters of the AgentPublicServiceServer.BindChatTable
type AgentPublicServiceServerMockBindChatTableParams struct {
	ctx context.Context
	bp1 *mm_agentv1alpha.BindChatTableRequest
}

// AgentPublicServiceServerMockBindChatTableParamPtrs contains pointers to parameters of the AgentPublicServiceServer.BindChatTable
type AgentPublicServiceServerMockBindChatTableParamPtrs struct {
	ctx *context.Context
	bp1 **mm_agentv1alpha.BindChatTableRequest
}

// AgentPublicServiceServerMockBindChatTableResults contains results of the AgentPublicServiceServer.BindChatTable
type AgentPublicServiceServerMockBindChatTableResults struct {
	bp2 *mm_agentv1alpha.BindChatTableResponse
	err error
}

// AgentPublicServiceServerMockBindChatTableOrigins contains origins of expectations of the AgentPublicServiceServer.BindChatTable
type AgentPublicServiceServerMockBindChatTableExpectationOrigins struct {
	origin    string
	originCtx string
	originBp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmBindChatTable *mAgentPublicServiceServerMockBindChatTable) Optional() *mAgentPublicServiceServerMockBindChatTable {
	mmBindChatTable.optional = true
	return mmBindChatTable
}

// Expect sets up expected params for AgentPublicServiceServer.BindChatTable
func (mmBindChatTable *mAgentPublicServiceServerMockBindChatTable) Expect(ctx context.Context, bp1 *mm_agentv1alpha.BindChatTableRequest) *mAgentPublicServiceServerMockBindChatTable {
	if mmBindChatTable.mock.funcBindChatTable != nil {
		mmBindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.BindChatTable mock is already set by Set")
	}

	if mmBindChatTable.defaultExpectation == nil {
		mmBindChatTable.defaultExpectation = &AgentPublicServiceServerMockBindChatTableExpectation{}
	}

	if mmBindChatTable.defaultExpectation.paramPtrs != nil {
		mmBindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.BindChatTable mock is already set by ExpectParams functions")
	}

	mmBindChatTable.defaultExpectation.params = &AgentPublicServiceServerMockBindChatTableParams{ctx, bp1}
	mmBindChatTable.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmBindChatTable.expectations {
		if minimock.Equal(e.params, mmBindChatTable.defaultExpectation.params) {
			mmBindChatTable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmBindChatTable.defaultExpectation.params)
		}
	}

	return mmBindChatTable
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.BindChatTable
func (mmBindChatTable *mAgentPublicServiceServerMockBindChatTable) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockBindChatTable {
	if mmBindChatTable.mock.funcBindChatTable != nil {
		mmBindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.BindChatTable mock is already set by Set")
	}

	if mmBindChatTable.defaultExpectation == nil {
		mmBindChatTable.defaultExpectation = &AgentPublicServiceServerMockBindChatTableExpectation{}
	}

	if mmBindChatTable.defaultExpectation.params != nil {
		mmBindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.BindChatTable mock is already set by Expect")
	}

	if mmBindChatTable.defaultExpectation.paramPtrs == nil {
		mmBindChatTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockBindChatTableParamPtrs{}
	}
	mmBindChatTable.defaultExpectation.paramPtrs.ctx = &ctx
	mmBindChatTable.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmBindChatTable
}

// ExpectBp1Param2 sets up expected param bp1 for AgentPublicServiceServer.BindChatTable
func (mmBindChatTable *mAgentPublicServiceServerMockBindChatTable) ExpectBp1Param2(bp1 *mm_agentv1alpha.BindChatTableRequest) *mAgentPublicServiceServerMockBindChatTable {
	if mmBindChatTable.mock.funcBindChatTable != nil {
		mmBindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.BindChatTable mock is already set by Set")
	}

	if mmBindChatTable.defaultExpectation == nil {
		mmBindChatTable.defaultExpectation = &AgentPublicServiceServerMockBindChatTableExpectation{}
	}

	if mmBindChatTable.defaultExpectation.params != nil {
		mmBindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.BindChatTable mock is already set by Expect")
	}

	if mmBindChatTable.defaultExpectation.paramPtrs == nil {
		mmBindChatTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockBindChatTableParamPtrs{}
	}
	mmBindChatTable.defaultExpectation.paramPtrs.bp1 = &bp1
	mmBindChatTable.defaultExpectation.expectationOrigins.originBp1 = minimock.CallerInfo(1)

	return mmBindChatTable
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.BindChatTable
func (mmBindChatTable *mAgentPublicServiceServerMockBindChatTable) Inspect(f func(ctx context.Context, bp1 *mm_agentv1alpha.BindChatTableRequest)) *mAgentPublicServiceServerMockBindChatTable {
	if mmBindChatTable.mock.inspectFuncBindChatTable != nil {
		mmBindChatTable.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.BindChatTable")
	}

	mmBindChatTable.mock.inspectFuncBindChatTable = f

	return mmBindChatTable
}

// Return sets up results that will be returned by AgentPublicServiceServer.BindChatTable
func (mmBindChatTable *mAgentPublicServiceServerMockBindChatTable) Return(bp2 *mm_agentv1alpha.BindChatTableResponse, err error) *AgentPublicServiceServerMock {
	if mmBindChatTable.mock.funcBindChatTable != nil {
		mmBindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.BindChatTable mock is already set by Set")
	}

	if mmBindChatTable.defaultExpectation == nil {
		mmBindChatTable.defaultExpectation = &AgentPublicServiceServerMockBindChatTableExpectation{mock: mmBindChatTable.mock}
	}
	mmBindChatTable.defaultExpectation.results = &AgentPublicServiceServerMockBindChatTableResults{bp2, err}
	mmBindChatTable.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmBindChatTable.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.BindChatTable method
func (mmBindChatTable *mAgentPublicServiceServerMockBindChatTable) Set(f func(ctx context.Context, bp1 *mm_agentv1alpha.BindChatTableRequest) (bp2 *mm_agentv1alpha.BindChatTableResponse, err error)) *AgentPublicServiceServerMock {
	if mmBindChatTable.defaultExpectation != nil {
		mmBindChatTable.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.BindChatTable method")
	}

	if len(mmBindChatTable.expectations) > 0 {
		mmBindChatTable.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.BindChatTable method")
	}

	mmBindChatTable.mock.funcBindChatTable = f
	mmBindChatTable.mock.funcBindChatTableOrigin = minimock.CallerInfo(1)
	return mmBindChatTable.mock
}

// When sets expectation for the AgentPublicServiceServer.BindChatTable which will trigger the result defined by the following
// Then helper
func (mmBindChatTable *mAgentPublicServiceServerMockBindChatTable) When(ctx context.Context, bp1 *mm_agentv1alpha.BindChatTableRequest) *AgentPublicServiceServerMockBindChatTableExpectation {
	if mmBindChatTable.mock.funcBindChatTable != nil {
		mmBindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.BindChatTable mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockBindChatTableExpectation{
		mock:               mmBindChatTable.mock,
		params:             &AgentPublicServiceServerMockBindChatTableParams{ctx, bp1},
		expectationOrigins: AgentPublicServiceServerMockBindChatTableExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmBindChatTable.expectations = append(mmBindChatTable.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.BindChatTable return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockBindChatTableExpectation) Then(bp2 *mm_agentv1alpha.BindChatTableResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockBindChatTableResults{bp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.BindChatTable should be invoked
func (mmBindChatTable *mAgentPublicServiceServerMockBindChatTable) Times(n uint64) *mAgentPublicServiceServerMockBindChatTable {
	if n == 0 {
		mmBindChatTable.mock.t.Fatalf("Times of AgentPublicServiceServerMock.BindChatTable mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmBindChatTable.expectedInvocations, n)
	mmBindChatTable.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmBindChatTable
}

func (mmBindChatTable *mAgentPublicServiceServerMockBindChatTable) invocationsDone() bool {
	if len(mmBindChatTable.expectations) == 0 && mmBindChatTable.defaultExpectation == nil && mmBindChatTable.mock.funcBindChatTable == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmBindChatTable.mock.afterBindChatTableCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmBindChatTable.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// BindChatTable implements mm_agentv1alpha.AgentPublicServiceServer
func (mmBindChatTable *AgentPublicServiceServerMock) BindChatTable(ctx context.Context, bp1 *mm_agentv1alpha.BindChatTableRequest) (bp2 *mm_agentv1alpha.BindChatTableResponse, err error) {
	mm_atomic.AddUint64(&mmBindChatTable.beforeBindChatTableCounter, 1)
	defer mm_atomic.AddUint64(&mmBindChatTable.afterBindChatTableCounter, 1)

	mmBindChatTable.t.Helper()

	if mmBindChatTable.inspectFuncBindChatTable != nil {
		mmBindChatTable.inspectFuncBindChatTable(ctx, bp1)
	}

	mm_params := AgentPublicServiceServerMockBindChatTableParams{ctx, bp1}

	// Record call args
	mmBindChatTable.BindChatTableMock.mutex.Lock()
	mmBindChatTable.BindChatTableMock.callArgs = append(mmBindChatTable.BindChatTableMock.callArgs, &mm_params)
	mmBindChatTable.BindChatTableMock.mutex.Unlock()

	for _, e := range mmBindChatTable.BindChatTableMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.bp2, e.results.err
		}
	}

	if mmBindChatTable.BindChatTableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmBindChatTable.BindChatTableMock.defaultExpectation.Counter, 1)
		mm_want := mmBindChatTable.BindChatTableMock.defaultExpectation.params
		mm_want_ptrs := mmBindChatTable.BindChatTableMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockBindChatTableParams{ctx, bp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmBindChatTable.t.Errorf("AgentPublicServiceServerMock.BindChatTable got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmBindChatTable.BindChatTableMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.bp1 != nil && !minimock.Equal(*mm_want_ptrs.bp1, mm_got.bp1) {
				mmBindChatTable.t.Errorf("AgentPublicServiceServerMock.BindChatTable got unexpected parameter bp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmBindChatTable.BindChatTableMock.defaultExpectation.expectationOrigins.originBp1, *mm_want_ptrs.bp1, mm_got.bp1, minimock.Diff(*mm_want_ptrs.bp1, mm_got.bp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmBindChatTable.t.Errorf("AgentPublicServiceServerMock.BindChatTable got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmBindChatTable.BindChatTableMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmBindChatTable.BindChatTableMock.defaultExpectation.results
		if mm_results == nil {
			mmBindChatTable.t.Fatal("No results are set for the AgentPublicServiceServerMock.BindChatTable")
		}
		return (*mm_results).bp2, (*mm_results).err
	}
	if mmBindChatTable.funcBindChatTable != nil {
		return mmBindChatTable.funcBindChatTable(ctx, bp1)
	}
	mmBindChatTable.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.BindChatTable. %v %v", ctx, bp1)
	return
}

// BindChatTableAfterCounter returns a count of finished AgentPublicServiceServerMock.BindChatTable invocations
func (mmBindChatTable *AgentPublicServiceServerMock) BindChatTableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBindChatTable.afterBindChatTableCounter)
}

// BindChatTableBeforeCounter returns a count of AgentPublicServiceServerMock.BindChatTable invocations
func (mmBindChatTable *AgentPublicServiceServerMock) BindChatTableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBindChatTable.beforeBindChatTableCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.BindChatTable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmBindChatTable *mAgentPublicServiceServerMockBindChatTable) Calls() []*AgentPublicServiceServerMockBindChatTableParams {
	mmBindChatTable.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockBindChatTableParams, len(mmBindChatTable.callArgs))
	copy(argCopy, mmBindChatTable.callArgs)

	mmBindChatTable.mutex.RUnlock()

	return argCopy
}

// MinimockBindChatTableDone returns true if the count of the BindChatTable invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockBindChatTableDone() bool {
	if m.BindChatTableMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.BindChatTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.BindChatTableMock.invocationsDone()
}

// MinimockBindChatTableInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockBindChatTableInspect() {
	for _, e := range m.BindChatTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.BindChatTable at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterBindChatTableCounter := mm_atomic.LoadUint64(&m.afterBindChatTableCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.BindChatTableMock.defaultExpectation != nil && afterBindChatTableCounter < 1 {
		if m.BindChatTableMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.BindChatTable at\n%s", m.BindChatTableMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.BindChatTable at\n%s with params: %#v", m.BindChatTableMock.defaultExpectation.expectationOrigins.origin, *m.BindChatTableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBindChatTable != nil && afterBindChatTableCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.BindChatTable at\n%s", m.funcBindChatTableOrigin)
	}

	if !m.BindChatTableMock.invocationsDone() && afterBindChatTableCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.BindChatTable at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.BindChatTableMock.expectedInvocations), m.BindChatTableMock.expectedInvocationsOrigin, afterBindChatTableCounter)
	}
}

type mAgentPublicServiceServerMockChat struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockChatExpectation
	expectations       []*AgentPublicServiceServerMockChatExpectation

	callArgs []*AgentPublicServiceServerMockChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockChatExpectation specifies expectation struct of the AgentPublicServiceServer.Chat
type AgentPublicServiceServerMockChatExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockChatParams
	paramPtrs          *AgentPublicServiceServerMockChatParamPtrs
	expectationOrigins AgentPublicServiceServerMockChatExpectationOrigins
	results            *AgentPublicServiceServerMockChatResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockChatParams contains parameters of the AgentPublicServiceServer.Chat
type AgentPublicServiceServerMockChatParams struct {
	ctx context.Context
	cp1 *mm_agentv1alpha.ChatRequest
}

// AgentPublicServiceServerMockChatParamPtrs contains pointers to parameters of the AgentPublicServiceServer.Chat
type AgentPublicServiceServerMockChatParamPtrs struct {
	ctx *context.Context
	cp1 **mm_agentv1alpha.ChatRequest
}

// AgentPublicServiceServerMockChatResults contains results of the AgentPublicServiceServer.Chat
type AgentPublicServiceServerMockChatResults struct {
	cp2 *mm_agentv1alpha.ChatResponse
	err error
}

// AgentPublicServiceServerMockChatOrigins contains origins of expectations of the AgentPublicServiceServer.Chat
type AgentPublicServiceServerMockChatExpectationOrigins struct {
	origin    string
	originCtx string
	originCp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmChat *mAgentPublicServiceServerMockChat) Optional() *mAgentPublicServiceServerMockChat {
	mmChat.optional = true
	return mmChat
}

// Expect sets up expected params for AgentPublicServiceServer.Chat
func (mmChat *mAgentPublicServiceServerMockChat) Expect(ctx context.Context, cp1 *mm_agentv1alpha.ChatRequest) *mAgentPublicServiceServerMockChat {
	if mmChat.mock.funcChat != nil {
		mmChat.mock.t.Fatalf("AgentPublicServiceServerMock.Chat mock is already set by Set")
	}

	if mmChat.defaultExpectation == nil {
		mmChat.defaultExpectation = &AgentPublicServiceServerMockChatExpectation{}
	}

	if mmChat.defaultExpectation.paramPtrs != nil {
		mmChat.mock.t.Fatalf("AgentPublicServiceServerMock.Chat mock is already set by ExpectParams functions")
	}

	mmChat.defaultExpectation.params = &AgentPublicServiceServerMockChatParams{ctx, cp1}
	mmChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmChat.expectations {
		if minimock.Equal(e.params, mmChat.defaultExpectation.params) {
			mmChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmChat.defaultExpectation.params)
		}
	}

	return mmChat
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.Chat
func (mmChat *mAgentPublicServiceServerMockChat) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockChat {
	if mmChat.mock.funcChat != nil {
		mmChat.mock.t.Fatalf("AgentPublicServiceServerMock.Chat mock is already set by Set")
	}

	if mmChat.defaultExpectation == nil {
		mmChat.defaultExpectation = &AgentPublicServiceServerMockChatExpectation{}
	}

	if mmChat.defaultExpectation.params != nil {
		mmChat.mock.t.Fatalf("AgentPublicServiceServerMock.Chat mock is already set by Expect")
	}

	if mmChat.defaultExpectation.paramPtrs == nil {
		mmChat.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockChatParamPtrs{}
	}
	mmChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmChat
}

// ExpectCp1Param2 sets up expected param cp1 for AgentPublicServiceServer.Chat
func (mmChat *mAgentPublicServiceServerMockChat) ExpectCp1Param2(cp1 *mm_agentv1alpha.ChatRequest) *mAgentPublicServiceServerMockChat {
	if mmChat.mock.funcChat != nil {
		mmChat.mock.t.Fatalf("AgentPublicServiceServerMock.Chat mock is already set by Set")
	}

	if mmChat.defaultExpectation == nil {
		mmChat.defaultExpectation = &AgentPublicServiceServerMockChatExpectation{}
	}

	if mmChat.defaultExpectation.params != nil {
		mmChat.mock.t.Fatalf("AgentPublicServiceServerMock.Chat mock is already set by Expect")
	}

	if mmChat.defaultExpectation.paramPtrs == nil {
		mmChat.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockChatParamPtrs{}
	}
	mmChat.defaultExpectation.paramPtrs.cp1 = &cp1
	mmChat.defaultExpectation.expectationOrigins.originCp1 = minimock.CallerInfo(1)

	return mmChat
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.Chat
func (mmChat *mAgentPublicServiceServerMockChat) Inspect(f func(ctx context.Context, cp1 *mm_agentv1alpha.ChatRequest)) *mAgentPublicServiceServerMockChat {
	if mmChat.mock.inspectFuncChat != nil {
		mmChat.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.Chat")
	}

	mmChat.mock.inspectFuncChat = f

	return mmChat
}

// Return sets up results that will be returned by AgentPublicServiceServer.Chat
func (mmChat *mAgentPublicServiceServerMockChat) Return(cp2 *mm_agentv1alpha.ChatResponse, err error) *AgentPublicServiceServerMock {
	if mmChat.mock.funcChat != nil {
		mmChat.mock.t.Fatalf("AgentPublicServiceServerMock.Chat mock is already set by Set")
	}

	if mmChat.defaultExpectation == nil {
		mmChat.defaultExpectation = &AgentPublicServiceServerMockChatExpectation{mock: mmChat.mock}
	}
	mmChat.defaultExpectation.results = &AgentPublicServiceServerMockChatResults{cp2, err}
	mmChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmChat.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.Chat method
func (mmChat *mAgentPublicServiceServerMockChat) Set(f func(ctx context.Context, cp1 *mm_agentv1alpha.ChatRequest) (cp2 *mm_agentv1alpha.ChatResponse, err error)) *AgentPublicServiceServerMock {
	if mmChat.defaultExpectation != nil {
		mmChat.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.Chat method")
	}

	if len(mmChat.expectations) > 0 {
		mmChat.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.Chat method")
	}

	mmChat.mock.funcChat = f
	mmChat.mock.funcChatOrigin = minimock.CallerInfo(1)
	return mmChat.mock
}

// When sets expectation for the AgentPublicServiceServer.Chat which will trigger the result defined by the following
// Then helper
func (mmChat *mAgentPublicServiceServerMockChat) When(ctx context.Context, cp1 *mm_agentv1alpha.ChatRequest) *AgentPublicServiceServerMockChatExpectation {
	if mmChat.mock.funcChat != nil {
		mmChat.mock.t.Fatalf("AgentPublicServiceServerMock.Chat mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockChatExpectation{
		mock:               mmChat.mock,
		params:             &AgentPublicServiceServerMockChatParams{ctx, cp1},
		expectationOrigins: AgentPublicServiceServerMockChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmChat.expectations = append(mmChat.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.Chat return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockChatExpectation) Then(cp2 *mm_agentv1alpha.ChatResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockChatResults{cp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.Chat should be invoked
func (mmChat *mAgentPublicServiceServerMockChat) Times(n uint64) *mAgentPublicServiceServerMockChat {
	if n == 0 {
		mmChat.mock.t.Fatalf("Times of AgentPublicServiceServerMock.Chat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmChat.expectedInvocations, n)
	mmChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmChat
}

func (mmChat *mAgentPublicServiceServerMockChat) invocationsDone() bool {
	if len(mmChat.expectations) == 0 && mmChat.defaultExpectation == nil && mmChat.mock.funcChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmChat.mock.afterChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Chat implements mm_agentv1alpha.AgentPublicServiceServer
func (mmChat *AgentPublicServiceServerMock) Chat(ctx context.Context, cp1 *mm_agentv1alpha.ChatRequest) (cp2 *mm_agentv1alpha.ChatResponse, err error) {
	mm_atomic.AddUint64(&mmChat.beforeChatCounter, 1)
	defer mm_atomic.AddUint64(&mmChat.afterChatCounter, 1)

	mmChat.t.Helper()

	if mmChat.inspectFuncChat != nil {
		mmChat.inspectFuncChat(ctx, cp1)
	}

	mm_params := AgentPublicServiceServerMockChatParams{ctx, cp1}

	// Record call args
	mmChat.ChatMock.mutex.Lock()
	mmChat.ChatMock.callArgs = append(mmChat.ChatMock.callArgs, &mm_params)
	mmChat.ChatMock.mutex.Unlock()

	for _, e := range mmChat.ChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp2, e.results.err
		}
	}

	if mmChat.ChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmChat.ChatMock.defaultExpectation.Counter, 1)
		mm_want := mmChat.ChatMock.defaultExpectation.params
		mm_want_ptrs := mmChat.ChatMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockChatParams{ctx, cp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmChat.t.Errorf("AgentPublicServiceServerMock.Chat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmChat.ChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cp1 != nil && !minimock.Equal(*mm_want_ptrs.cp1, mm_got.cp1) {
				mmChat.t.Errorf("AgentPublicServiceServerMock.Chat got unexpected parameter cp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmChat.ChatMock.defaultExpectation.expectationOrigins.originCp1, *mm_want_ptrs.cp1, mm_got.cp1, minimock.Diff(*mm_want_ptrs.cp1, mm_got.cp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmChat.t.Errorf("AgentPublicServiceServerMock.Chat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmChat.ChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmChat.ChatMock.defaultExpectation.results
		if mm_results == nil {
			mmChat.t.Fatal("No results are set for the AgentPublicServiceServerMock.Chat")
		}
		return (*mm_results).cp2, (*mm_results).err
	}
	if mmChat.funcChat != nil {
		return mmChat.funcChat(ctx, cp1)
	}
	mmChat.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.Chat. %v %v", ctx, cp1)
	return
}

// ChatAfterCounter returns a count of finished AgentPublicServiceServerMock.Chat invocations
func (mmChat *AgentPublicServiceServerMock) ChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChat.afterChatCounter)
}

// ChatBeforeCounter returns a count of AgentPublicServiceServerMock.Chat invocations
func (mmChat *AgentPublicServiceServerMock) ChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChat.beforeChatCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.Chat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmChat *mAgentPublicServiceServerMockChat) Calls() []*AgentPublicServiceServerMockChatParams {
	mmChat.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockChatParams, len(mmChat.callArgs))
	copy(argCopy, mmChat.callArgs)

	mmChat.mutex.RUnlock()

	return argCopy
}

// MinimockChatDone returns true if the count of the Chat invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockChatDone() bool {
	if m.ChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ChatMock.invocationsDone()
}

// MinimockChatInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockChatInspect() {
	for _, e := range m.ChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.Chat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterChatCounter := mm_atomic.LoadUint64(&m.afterChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ChatMock.defaultExpectation != nil && afterChatCounter < 1 {
		if m.ChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.Chat at\n%s", m.ChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.Chat at\n%s with params: %#v", m.ChatMock.defaultExpectation.expectationOrigins.origin, *m.ChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChat != nil && afterChatCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.Chat at\n%s", m.funcChatOrigin)
	}

	if !m.ChatMock.invocationsDone() && afterChatCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.Chat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ChatMock.expectedInvocations), m.ChatMock.expectedInvocationsOrigin, afterChatCounter)
	}
}

type mAgentPublicServiceServerMockCreateChat struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockCreateChatExpectation
	expectations       []*AgentPublicServiceServerMockCreateChatExpectation

	callArgs []*AgentPublicServiceServerMockCreateChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockCreateChatExpectation specifies expectation struct of the AgentPublicServiceServer.CreateChat
type AgentPublicServiceServerMockCreateChatExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockCreateChatParams
	paramPtrs          *AgentPublicServiceServerMockCreateChatParamPtrs
	expectationOrigins AgentPublicServiceServerMockCreateChatExpectationOrigins
	results            *AgentPublicServiceServerMockCreateChatResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockCreateChatParams contains parameters of the AgentPublicServiceServer.CreateChat
type AgentPublicServiceServerMockCreateChatParams struct {
	ctx context.Context
	cp1 *mm_agentv1alpha.CreateChatRequest
}

// AgentPublicServiceServerMockCreateChatParamPtrs contains pointers to parameters of the AgentPublicServiceServer.CreateChat
type AgentPublicServiceServerMockCreateChatParamPtrs struct {
	ctx *context.Context
	cp1 **mm_agentv1alpha.CreateChatRequest
}

// AgentPublicServiceServerMockCreateChatResults contains results of the AgentPublicServiceServer.CreateChat
type AgentPublicServiceServerMockCreateChatResults struct {
	cp2 *mm_agentv1alpha.CreateChatResponse
	err error
}

// AgentPublicServiceServerMockCreateChatOrigins contains origins of expectations of the AgentPublicServiceServer.CreateChat
type AgentPublicServiceServerMockCreateChatExpectationOrigins struct {
	origin    string
	originCtx string
	originCp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateChat *mAgentPublicServiceServerMockCreateChat) Optional() *mAgentPublicServiceServerMockCreateChat {
	mmCreateChat.optional = true
	return mmCreateChat
}

// Expect sets up expected params for AgentPublicServiceServer.CreateChat
func (mmCreateChat *mAgentPublicServiceServerMockCreateChat) Expect(ctx context.Context, cp1 *mm_agentv1alpha.CreateChatRequest) *mAgentPublicServiceServerMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("AgentPublicServiceServerMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &AgentPublicServiceServerMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.paramPtrs != nil {
		mmCreateChat.mock.t.Fatalf("AgentPublicServiceServerMock.CreateChat mock is already set by ExpectParams functions")
	}

	mmCreateChat.defaultExpectation.params = &AgentPublicServiceServerMockCreateChatParams{ctx, cp1}
	mmCreateChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateChat.expectations {
		if minimock.Equal(e.params, mmCreateChat.defaultExpectation.params) {
			mmCreateChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateChat.defaultExpectation.params)
		}
	}

	return mmCreateChat
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.CreateChat
func (mmCreateChat *mAgentPublicServiceServerMockCreateChat) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("AgentPublicServiceServerMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &AgentPublicServiceServerMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("AgentPublicServiceServerMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateChat
}

// ExpectCp1Param2 sets up expected param cp1 for AgentPublicServiceServer.CreateChat
func (mmCreateChat *mAgentPublicServiceServerMockCreateChat) ExpectCp1Param2(cp1 *mm_agentv1alpha.CreateChatRequest) *mAgentPublicServiceServerMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("AgentPublicServiceServerMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &AgentPublicServiceServerMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("AgentPublicServiceServerMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.cp1 = &cp1
	mmCreateChat.defaultExpectation.expectationOrigins.originCp1 = minimock.CallerInfo(1)

	return mmCreateChat
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.CreateChat
func (mmCreateChat *mAgentPublicServiceServerMockCreateChat) Inspect(f func(ctx context.Context, cp1 *mm_agentv1alpha.CreateChatRequest)) *mAgentPublicServiceServerMockCreateChat {
	if mmCreateChat.mock.inspectFuncCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.CreateChat")
	}

	mmCreateChat.mock.inspectFuncCreateChat = f

	return mmCreateChat
}

// Return sets up results that will be returned by AgentPublicServiceServer.CreateChat
func (mmCreateChat *mAgentPublicServiceServerMockCreateChat) Return(cp2 *mm_agentv1alpha.CreateChatResponse, err error) *AgentPublicServiceServerMock {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("AgentPublicServiceServerMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &AgentPublicServiceServerMockCreateChatExpectation{mock: mmCreateChat.mock}
	}
	mmCreateChat.defaultExpectation.results = &AgentPublicServiceServerMockCreateChatResults{cp2, err}
	mmCreateChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.CreateChat method
func (mmCreateChat *mAgentPublicServiceServerMockCreateChat) Set(f func(ctx context.Context, cp1 *mm_agentv1alpha.CreateChatRequest) (cp2 *mm_agentv1alpha.CreateChatResponse, err error)) *AgentPublicServiceServerMock {
	if mmCreateChat.defaultExpectation != nil {
		mmCreateChat.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.CreateChat method")
	}

	if len(mmCreateChat.expectations) > 0 {
		mmCreateChat.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.CreateChat method")
	}

	mmCreateChat.mock.funcCreateChat = f
	mmCreateChat.mock.funcCreateChatOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// When sets expectation for the AgentPublicServiceServer.CreateChat which will trigger the result defined by the following
// Then helper
func (mmCreateChat *mAgentPublicServiceServerMockCreateChat) When(ctx context.Context, cp1 *mm_agentv1alpha.CreateChatRequest) *AgentPublicServiceServerMockCreateChatExpectation {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("AgentPublicServiceServerMock.CreateChat mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockCreateChatExpectation{
		mock:               mmCreateChat.mock,
		params:             &AgentPublicServiceServerMockCreateChatParams{ctx, cp1},
		expectationOrigins: AgentPublicServiceServerMockCreateChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateChat.expectations = append(mmCreateChat.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.CreateChat return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockCreateChatExpectation) Then(cp2 *mm_agentv1alpha.CreateChatResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockCreateChatResults{cp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.CreateChat should be invoked
func (mmCreateChat *mAgentPublicServiceServerMockCreateChat) Times(n uint64) *mAgentPublicServiceServerMockCreateChat {
	if n == 0 {
		mmCreateChat.mock.t.Fatalf("Times of AgentPublicServiceServerMock.CreateChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateChat.expectedInvocations, n)
	mmCreateChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateChat
}

func (mmCreateChat *mAgentPublicServiceServerMockCreateChat) invocationsDone() bool {
	if len(mmCreateChat.expectations) == 0 && mmCreateChat.defaultExpectation == nil && mmCreateChat.mock.funcCreateChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateChat.mock.afterCreateChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateChat implements mm_agentv1alpha.AgentPublicServiceServer
func (mmCreateChat *AgentPublicServiceServerMock) CreateChat(ctx context.Context, cp1 *mm_agentv1alpha.CreateChatRequest) (cp2 *mm_agentv1alpha.CreateChatResponse, err error) {
	mm_atomic.AddUint64(&mmCreateChat.beforeCreateChatCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateChat.afterCreateChatCounter, 1)

	mmCreateChat.t.Helper()

	if mmCreateChat.inspectFuncCreateChat != nil {
		mmCreateChat.inspectFuncCreateChat(ctx, cp1)
	}

	mm_params := AgentPublicServiceServerMockCreateChatParams{ctx, cp1}

	// Record call args
	mmCreateChat.CreateChatMock.mutex.Lock()
	mmCreateChat.CreateChatMock.callArgs = append(mmCreateChat.CreateChatMock.callArgs, &mm_params)
	mmCreateChat.CreateChatMock.mutex.Unlock()

	for _, e := range mmCreateChat.CreateChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp2, e.results.err
		}
	}

	if mmCreateChat.CreateChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateChat.CreateChatMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateChat.CreateChatMock.defaultExpectation.params
		mm_want_ptrs := mmCreateChat.CreateChatMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockCreateChatParams{ctx, cp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateChat.t.Errorf("AgentPublicServiceServerMock.CreateChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cp1 != nil && !minimock.Equal(*mm_want_ptrs.cp1, mm_got.cp1) {
				mmCreateChat.t.Errorf("AgentPublicServiceServerMock.CreateChat got unexpected parameter cp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originCp1, *mm_want_ptrs.cp1, mm_got.cp1, minimock.Diff(*mm_want_ptrs.cp1, mm_got.cp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateChat.t.Errorf("AgentPublicServiceServerMock.CreateChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateChat.CreateChatMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateChat.t.Fatal("No results are set for the AgentPublicServiceServerMock.CreateChat")
		}
		return (*mm_results).cp2, (*mm_results).err
	}
	if mmCreateChat.funcCreateChat != nil {
		return mmCreateChat.funcCreateChat(ctx, cp1)
	}
	mmCreateChat.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.CreateChat. %v %v", ctx, cp1)
	return
}

// CreateChatAfterCounter returns a count of finished AgentPublicServiceServerMock.CreateChat invocations
func (mmCreateChat *AgentPublicServiceServerMock) CreateChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.afterCreateChatCounter)
}

// CreateChatBeforeCounter returns a count of AgentPublicServiceServerMock.CreateChat invocations
func (mmCreateChat *AgentPublicServiceServerMock) CreateChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.beforeCreateChatCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.CreateChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateChat *mAgentPublicServiceServerMockCreateChat) Calls() []*AgentPublicServiceServerMockCreateChatParams {
	mmCreateChat.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockCreateChatParams, len(mmCreateChat.callArgs))
	copy(argCopy, mmCreateChat.callArgs)

	mmCreateChat.mutex.RUnlock()

	return argCopy
}

// MinimockCreateChatDone returns true if the count of the CreateChat invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockCreateChatDone() bool {
	if m.CreateChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateChatMock.invocationsDone()
}

// MinimockCreateChatInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockCreateChatInspect() {
	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.CreateChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateChatCounter := mm_atomic.LoadUint64(&m.afterCreateChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateChatMock.defaultExpectation != nil && afterCreateChatCounter < 1 {
		if m.CreateChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.CreateChat at\n%s", m.CreateChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.CreateChat at\n%s with params: %#v", m.CreateChatMock.defaultExpectation.expectationOrigins.origin, *m.CreateChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateChat != nil && afterCreateChatCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.CreateChat at\n%s", m.funcCreateChatOrigin)
	}

	if !m.CreateChatMock.invocationsDone() && afterCreateChatCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.CreateChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateChatMock.expectedInvocations), m.CreateChatMock.expectedInvocationsOrigin, afterCreateChatCounter)
	}
}

type mAgentPublicServiceServerMockCreateMessage struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockCreateMessageExpectation
	expectations       []*AgentPublicServiceServerMockCreateMessageExpectation

	callArgs []*AgentPublicServiceServerMockCreateMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockCreateMessageExpectation specifies expectation struct of the AgentPublicServiceServer.CreateMessage
type AgentPublicServiceServerMockCreateMessageExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockCreateMessageParams
	paramPtrs          *AgentPublicServiceServerMockCreateMessageParamPtrs
	expectationOrigins AgentPublicServiceServerMockCreateMessageExpectationOrigins
	results            *AgentPublicServiceServerMockCreateMessageResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockCreateMessageParams contains parameters of the AgentPublicServiceServer.CreateMessage
type AgentPublicServiceServerMockCreateMessageParams struct {
	ctx context.Context
	cp1 *mm_agentv1alpha.CreateMessageRequest
}

// AgentPublicServiceServerMockCreateMessageParamPtrs contains pointers to parameters of the AgentPublicServiceServer.CreateMessage
type AgentPublicServiceServerMockCreateMessageParamPtrs struct {
	ctx *context.Context
	cp1 **mm_agentv1alpha.CreateMessageRequest
}

// AgentPublicServiceServerMockCreateMessageResults contains results of the AgentPublicServiceServer.CreateMessage
type AgentPublicServiceServerMockCreateMessageResults struct {
	cp2 *mm_agentv1alpha.CreateMessageResponse
	err error
}

// AgentPublicServiceServerMockCreateMessageOrigins contains origins of expectations of the AgentPublicServiceServer.CreateMessage
type AgentPublicServiceServerMockCreateMessageExpectationOrigins struct {
	origin    string
	originCtx string
	originCp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateMessage *mAgentPublicServiceServerMockCreateMessage) Optional() *mAgentPublicServiceServerMockCreateMessage {
	mmCreateMessage.optional = true
	return mmCreateMessage
}

// Expect sets up expected params for AgentPublicServiceServer.CreateMessage
func (mmCreateMessage *mAgentPublicServiceServerMockCreateMessage) Expect(ctx context.Context, cp1 *mm_agentv1alpha.CreateMessageRequest) *mAgentPublicServiceServerMockCreateMessage {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &AgentPublicServiceServerMockCreateMessageExpectation{}
	}

	if mmCreateMessage.defaultExpectation.paramPtrs != nil {
		mmCreateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.CreateMessage mock is already set by ExpectParams functions")
	}

	mmCreateMessage.defaultExpectation.params = &AgentPublicServiceServerMockCreateMessageParams{ctx, cp1}
	mmCreateMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateMessage.expectations {
		if minimock.Equal(e.params, mmCreateMessage.defaultExpectation.params) {
			mmCreateMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateMessage.defaultExpectation.params)
		}
	}

	return mmCreateMessage
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.CreateMessage
func (mmCreateMessage *mAgentPublicServiceServerMockCreateMessage) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockCreateMessage {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &AgentPublicServiceServerMockCreateMessageExpectation{}
	}

	if mmCreateMessage.defaultExpectation.params != nil {
		mmCreateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.CreateMessage mock is already set by Expect")
	}

	if mmCreateMessage.defaultExpectation.paramPtrs == nil {
		mmCreateMessage.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockCreateMessageParamPtrs{}
	}
	mmCreateMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateMessage
}

// ExpectCp1Param2 sets up expected param cp1 for AgentPublicServiceServer.CreateMessage
func (mmCreateMessage *mAgentPublicServiceServerMockCreateMessage) ExpectCp1Param2(cp1 *mm_agentv1alpha.CreateMessageRequest) *mAgentPublicServiceServerMockCreateMessage {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &AgentPublicServiceServerMockCreateMessageExpectation{}
	}

	if mmCreateMessage.defaultExpectation.params != nil {
		mmCreateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.CreateMessage mock is already set by Expect")
	}

	if mmCreateMessage.defaultExpectation.paramPtrs == nil {
		mmCreateMessage.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockCreateMessageParamPtrs{}
	}
	mmCreateMessage.defaultExpectation.paramPtrs.cp1 = &cp1
	mmCreateMessage.defaultExpectation.expectationOrigins.originCp1 = minimock.CallerInfo(1)

	return mmCreateMessage
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.CreateMessage
func (mmCreateMessage *mAgentPublicServiceServerMockCreateMessage) Inspect(f func(ctx context.Context, cp1 *mm_agentv1alpha.CreateMessageRequest)) *mAgentPublicServiceServerMockCreateMessage {
	if mmCreateMessage.mock.inspectFuncCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.CreateMessage")
	}

	mmCreateMessage.mock.inspectFuncCreateMessage = f

	return mmCreateMessage
}

// Return sets up results that will be returned by AgentPublicServiceServer.CreateMessage
func (mmCreateMessage *mAgentPublicServiceServerMockCreateMessage) Return(cp2 *mm_agentv1alpha.CreateMessageResponse, err error) *AgentPublicServiceServerMock {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &AgentPublicServiceServerMockCreateMessageExpectation{mock: mmCreateMessage.mock}
	}
	mmCreateMessage.defaultExpectation.results = &AgentPublicServiceServerMockCreateMessageResults{cp2, err}
	mmCreateMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateMessage.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.CreateMessage method
func (mmCreateMessage *mAgentPublicServiceServerMockCreateMessage) Set(f func(ctx context.Context, cp1 *mm_agentv1alpha.CreateMessageRequest) (cp2 *mm_agentv1alpha.CreateMessageResponse, err error)) *AgentPublicServiceServerMock {
	if mmCreateMessage.defaultExpectation != nil {
		mmCreateMessage.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.CreateMessage method")
	}

	if len(mmCreateMessage.expectations) > 0 {
		mmCreateMessage.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.CreateMessage method")
	}

	mmCreateMessage.mock.funcCreateMessage = f
	mmCreateMessage.mock.funcCreateMessageOrigin = minimock.CallerInfo(1)
	return mmCreateMessage.mock
}

// When sets expectation for the AgentPublicServiceServer.CreateMessage which will trigger the result defined by the following
// Then helper
func (mmCreateMessage *mAgentPublicServiceServerMockCreateMessage) When(ctx context.Context, cp1 *mm_agentv1alpha.CreateMessageRequest) *AgentPublicServiceServerMockCreateMessageExpectation {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.CreateMessage mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockCreateMessageExpectation{
		mock:               mmCreateMessage.mock,
		params:             &AgentPublicServiceServerMockCreateMessageParams{ctx, cp1},
		expectationOrigins: AgentPublicServiceServerMockCreateMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateMessage.expectations = append(mmCreateMessage.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.CreateMessage return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockCreateMessageExpectation) Then(cp2 *mm_agentv1alpha.CreateMessageResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockCreateMessageResults{cp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.CreateMessage should be invoked
func (mmCreateMessage *mAgentPublicServiceServerMockCreateMessage) Times(n uint64) *mAgentPublicServiceServerMockCreateMessage {
	if n == 0 {
		mmCreateMessage.mock.t.Fatalf("Times of AgentPublicServiceServerMock.CreateMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateMessage.expectedInvocations, n)
	mmCreateMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateMessage
}

func (mmCreateMessage *mAgentPublicServiceServerMockCreateMessage) invocationsDone() bool {
	if len(mmCreateMessage.expectations) == 0 && mmCreateMessage.defaultExpectation == nil && mmCreateMessage.mock.funcCreateMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateMessage.mock.afterCreateMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateMessage implements mm_agentv1alpha.AgentPublicServiceServer
func (mmCreateMessage *AgentPublicServiceServerMock) CreateMessage(ctx context.Context, cp1 *mm_agentv1alpha.CreateMessageRequest) (cp2 *mm_agentv1alpha.CreateMessageResponse, err error) {
	mm_atomic.AddUint64(&mmCreateMessage.beforeCreateMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateMessage.afterCreateMessageCounter, 1)

	mmCreateMessage.t.Helper()

	if mmCreateMessage.inspectFuncCreateMessage != nil {
		mmCreateMessage.inspectFuncCreateMessage(ctx, cp1)
	}

	mm_params := AgentPublicServiceServerMockCreateMessageParams{ctx, cp1}

	// Record call args
	mmCreateMessage.CreateMessageMock.mutex.Lock()
	mmCreateMessage.CreateMessageMock.callArgs = append(mmCreateMessage.CreateMessageMock.callArgs, &mm_params)
	mmCreateMessage.CreateMessageMock.mutex.Unlock()

	for _, e := range mmCreateMessage.CreateMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp2, e.results.err
		}
	}

	if mmCreateMessage.CreateMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateMessage.CreateMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateMessage.CreateMessageMock.defaultExpectation.params
		mm_want_ptrs := mmCreateMessage.CreateMessageMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockCreateMessageParams{ctx, cp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateMessage.t.Errorf("AgentPublicServiceServerMock.CreateMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateMessage.CreateMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cp1 != nil && !minimock.Equal(*mm_want_ptrs.cp1, mm_got.cp1) {
				mmCreateMessage.t.Errorf("AgentPublicServiceServerMock.CreateMessage got unexpected parameter cp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateMessage.CreateMessageMock.defaultExpectation.expectationOrigins.originCp1, *mm_want_ptrs.cp1, mm_got.cp1, minimock.Diff(*mm_want_ptrs.cp1, mm_got.cp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateMessage.t.Errorf("AgentPublicServiceServerMock.CreateMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateMessage.CreateMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateMessage.CreateMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateMessage.t.Fatal("No results are set for the AgentPublicServiceServerMock.CreateMessage")
		}
		return (*mm_results).cp2, (*mm_results).err
	}
	if mmCreateMessage.funcCreateMessage != nil {
		return mmCreateMessage.funcCreateMessage(ctx, cp1)
	}
	mmCreateMessage.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.CreateMessage. %v %v", ctx, cp1)
	return
}

// CreateMessageAfterCounter returns a count of finished AgentPublicServiceServerMock.CreateMessage invocations
func (mmCreateMessage *AgentPublicServiceServerMock) CreateMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateMessage.afterCreateMessageCounter)
}

// CreateMessageBeforeCounter returns a count of AgentPublicServiceServerMock.CreateMessage invocations
func (mmCreateMessage *AgentPublicServiceServerMock) CreateMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateMessage.beforeCreateMessageCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.CreateMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateMessage *mAgentPublicServiceServerMockCreateMessage) Calls() []*AgentPublicServiceServerMockCreateMessageParams {
	mmCreateMessage.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockCreateMessageParams, len(mmCreateMessage.callArgs))
	copy(argCopy, mmCreateMessage.callArgs)

	mmCreateMessage.mutex.RUnlock()

	return argCopy
}

// MinimockCreateMessageDone returns true if the count of the CreateMessage invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockCreateMessageDone() bool {
	if m.CreateMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMessageMock.invocationsDone()
}

// MinimockCreateMessageInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockCreateMessageInspect() {
	for _, e := range m.CreateMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.CreateMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateMessageCounter := mm_atomic.LoadUint64(&m.afterCreateMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMessageMock.defaultExpectation != nil && afterCreateMessageCounter < 1 {
		if m.CreateMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.CreateMessage at\n%s", m.CreateMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.CreateMessage at\n%s with params: %#v", m.CreateMessageMock.defaultExpectation.expectationOrigins.origin, *m.CreateMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateMessage != nil && afterCreateMessageCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.CreateMessage at\n%s", m.funcCreateMessageOrigin)
	}

	if !m.CreateMessageMock.invocationsDone() && afterCreateMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.CreateMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMessageMock.expectedInvocations), m.CreateMessageMock.expectedInvocationsOrigin, afterCreateMessageCounter)
	}
}

type mAgentPublicServiceServerMockCreateTable struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockCreateTableExpectation
	expectations       []*AgentPublicServiceServerMockCreateTableExpectation

	callArgs []*AgentPublicServiceServerMockCreateTableParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockCreateTableExpectation specifies expectation struct of the AgentPublicServiceServer.CreateTable
type AgentPublicServiceServerMockCreateTableExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockCreateTableParams
	paramPtrs          *AgentPublicServiceServerMockCreateTableParamPtrs
	expectationOrigins AgentPublicServiceServerMockCreateTableExpectationOrigins
	results            *AgentPublicServiceServerMockCreateTableResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockCreateTableParams contains parameters of the AgentPublicServiceServer.CreateTable
type AgentPublicServiceServerMockCreateTableParams struct {
	ctx context.Context
	cp1 *mm_agentv1alpha.CreateTableRequest
}

// AgentPublicServiceServerMockCreateTableParamPtrs contains pointers to parameters of the AgentPublicServiceServer.CreateTable
type AgentPublicServiceServerMockCreateTableParamPtrs struct {
	ctx *context.Context
	cp1 **mm_agentv1alpha.CreateTableRequest
}

// AgentPublicServiceServerMockCreateTableResults contains results of the AgentPublicServiceServer.CreateTable
type AgentPublicServiceServerMockCreateTableResults struct {
	cp2 *mm_agentv1alpha.CreateTableResponse
	err error
}

// AgentPublicServiceServerMockCreateTableOrigins contains origins of expectations of the AgentPublicServiceServer.CreateTable
type AgentPublicServiceServerMockCreateTableExpectationOrigins struct {
	origin    string
	originCtx string
	originCp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateTable *mAgentPublicServiceServerMockCreateTable) Optional() *mAgentPublicServiceServerMockCreateTable {
	mmCreateTable.optional = true
	return mmCreateTable
}

// Expect sets up expected params for AgentPublicServiceServer.CreateTable
func (mmCreateTable *mAgentPublicServiceServerMockCreateTable) Expect(ctx context.Context, cp1 *mm_agentv1alpha.CreateTableRequest) *mAgentPublicServiceServerMockCreateTable {
	if mmCreateTable.mock.funcCreateTable != nil {
		mmCreateTable.mock.t.Fatalf("AgentPublicServiceServerMock.CreateTable mock is already set by Set")
	}

	if mmCreateTable.defaultExpectation == nil {
		mmCreateTable.defaultExpectation = &AgentPublicServiceServerMockCreateTableExpectation{}
	}

	if mmCreateTable.defaultExpectation.paramPtrs != nil {
		mmCreateTable.mock.t.Fatalf("AgentPublicServiceServerMock.CreateTable mock is already set by ExpectParams functions")
	}

	mmCreateTable.defaultExpectation.params = &AgentPublicServiceServerMockCreateTableParams{ctx, cp1}
	mmCreateTable.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateTable.expectations {
		if minimock.Equal(e.params, mmCreateTable.defaultExpectation.params) {
			mmCreateTable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateTable.defaultExpectation.params)
		}
	}

	return mmCreateTable
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.CreateTable
func (mmCreateTable *mAgentPublicServiceServerMockCreateTable) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockCreateTable {
	if mmCreateTable.mock.funcCreateTable != nil {
		mmCreateTable.mock.t.Fatalf("AgentPublicServiceServerMock.CreateTable mock is already set by Set")
	}

	if mmCreateTable.defaultExpectation == nil {
		mmCreateTable.defaultExpectation = &AgentPublicServiceServerMockCreateTableExpectation{}
	}

	if mmCreateTable.defaultExpectation.params != nil {
		mmCreateTable.mock.t.Fatalf("AgentPublicServiceServerMock.CreateTable mock is already set by Expect")
	}

	if mmCreateTable.defaultExpectation.paramPtrs == nil {
		mmCreateTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockCreateTableParamPtrs{}
	}
	mmCreateTable.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateTable.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateTable
}

// ExpectCp1Param2 sets up expected param cp1 for AgentPublicServiceServer.CreateTable
func (mmCreateTable *mAgentPublicServiceServerMockCreateTable) ExpectCp1Param2(cp1 *mm_agentv1alpha.CreateTableRequest) *mAgentPublicServiceServerMockCreateTable {
	if mmCreateTable.mock.funcCreateTable != nil {
		mmCreateTable.mock.t.Fatalf("AgentPublicServiceServerMock.CreateTable mock is already set by Set")
	}

	if mmCreateTable.defaultExpectation == nil {
		mmCreateTable.defaultExpectation = &AgentPublicServiceServerMockCreateTableExpectation{}
	}

	if mmCreateTable.defaultExpectation.params != nil {
		mmCreateTable.mock.t.Fatalf("AgentPublicServiceServerMock.CreateTable mock is already set by Expect")
	}

	if mmCreateTable.defaultExpectation.paramPtrs == nil {
		mmCreateTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockCreateTableParamPtrs{}
	}
	mmCreateTable.defaultExpectation.paramPtrs.cp1 = &cp1
	mmCreateTable.defaultExpectation.expectationOrigins.originCp1 = minimock.CallerInfo(1)

	return mmCreateTable
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.CreateTable
func (mmCreateTable *mAgentPublicServiceServerMockCreateTable) Inspect(f func(ctx context.Context, cp1 *mm_agentv1alpha.CreateTableRequest)) *mAgentPublicServiceServerMockCreateTable {
	if mmCreateTable.mock.inspectFuncCreateTable != nil {
		mmCreateTable.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.CreateTable")
	}

	mmCreateTable.mock.inspectFuncCreateTable = f

	return mmCreateTable
}

// Return sets up results that will be returned by AgentPublicServiceServer.CreateTable
func (mmCreateTable *mAgentPublicServiceServerMockCreateTable) Return(cp2 *mm_agentv1alpha.CreateTableResponse, err error) *AgentPublicServiceServerMock {
	if mmCreateTable.mock.funcCreateTable != nil {
		mmCreateTable.mock.t.Fatalf("AgentPublicServiceServerMock.CreateTable mock is already set by Set")
	}

	if mmCreateTable.defaultExpectation == nil {
		mmCreateTable.defaultExpectation = &AgentPublicServiceServerMockCreateTableExpectation{mock: mmCreateTable.mock}
	}
	mmCreateTable.defaultExpectation.results = &AgentPublicServiceServerMockCreateTableResults{cp2, err}
	mmCreateTable.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateTable.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.CreateTable method
func (mmCreateTable *mAgentPublicServiceServerMockCreateTable) Set(f func(ctx context.Context, cp1 *mm_agentv1alpha.CreateTableRequest) (cp2 *mm_agentv1alpha.CreateTableResponse, err error)) *AgentPublicServiceServerMock {
	if mmCreateTable.defaultExpectation != nil {
		mmCreateTable.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.CreateTable method")
	}

	if len(mmCreateTable.expectations) > 0 {
		mmCreateTable.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.CreateTable method")
	}

	mmCreateTable.mock.funcCreateTable = f
	mmCreateTable.mock.funcCreateTableOrigin = minimock.CallerInfo(1)
	return mmCreateTable.mock
}

// When sets expectation for the AgentPublicServiceServer.CreateTable which will trigger the result defined by the following
// Then helper
func (mmCreateTable *mAgentPublicServiceServerMockCreateTable) When(ctx context.Context, cp1 *mm_agentv1alpha.CreateTableRequest) *AgentPublicServiceServerMockCreateTableExpectation {
	if mmCreateTable.mock.funcCreateTable != nil {
		mmCreateTable.mock.t.Fatalf("AgentPublicServiceServerMock.CreateTable mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockCreateTableExpectation{
		mock:               mmCreateTable.mock,
		params:             &AgentPublicServiceServerMockCreateTableParams{ctx, cp1},
		expectationOrigins: AgentPublicServiceServerMockCreateTableExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateTable.expectations = append(mmCreateTable.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.CreateTable return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockCreateTableExpectation) Then(cp2 *mm_agentv1alpha.CreateTableResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockCreateTableResults{cp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.CreateTable should be invoked
func (mmCreateTable *mAgentPublicServiceServerMockCreateTable) Times(n uint64) *mAgentPublicServiceServerMockCreateTable {
	if n == 0 {
		mmCreateTable.mock.t.Fatalf("Times of AgentPublicServiceServerMock.CreateTable mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateTable.expectedInvocations, n)
	mmCreateTable.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateTable
}

func (mmCreateTable *mAgentPublicServiceServerMockCreateTable) invocationsDone() bool {
	if len(mmCreateTable.expectations) == 0 && mmCreateTable.defaultExpectation == nil && mmCreateTable.mock.funcCreateTable == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateTable.mock.afterCreateTableCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateTable.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateTable implements mm_agentv1alpha.AgentPublicServiceServer
func (mmCreateTable *AgentPublicServiceServerMock) CreateTable(ctx context.Context, cp1 *mm_agentv1alpha.CreateTableRequest) (cp2 *mm_agentv1alpha.CreateTableResponse, err error) {
	mm_atomic.AddUint64(&mmCreateTable.beforeCreateTableCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateTable.afterCreateTableCounter, 1)

	mmCreateTable.t.Helper()

	if mmCreateTable.inspectFuncCreateTable != nil {
		mmCreateTable.inspectFuncCreateTable(ctx, cp1)
	}

	mm_params := AgentPublicServiceServerMockCreateTableParams{ctx, cp1}

	// Record call args
	mmCreateTable.CreateTableMock.mutex.Lock()
	mmCreateTable.CreateTableMock.callArgs = append(mmCreateTable.CreateTableMock.callArgs, &mm_params)
	mmCreateTable.CreateTableMock.mutex.Unlock()

	for _, e := range mmCreateTable.CreateTableMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp2, e.results.err
		}
	}

	if mmCreateTable.CreateTableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateTable.CreateTableMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateTable.CreateTableMock.defaultExpectation.params
		mm_want_ptrs := mmCreateTable.CreateTableMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockCreateTableParams{ctx, cp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateTable.t.Errorf("AgentPublicServiceServerMock.CreateTable got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateTable.CreateTableMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cp1 != nil && !minimock.Equal(*mm_want_ptrs.cp1, mm_got.cp1) {
				mmCreateTable.t.Errorf("AgentPublicServiceServerMock.CreateTable got unexpected parameter cp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateTable.CreateTableMock.defaultExpectation.expectationOrigins.originCp1, *mm_want_ptrs.cp1, mm_got.cp1, minimock.Diff(*mm_want_ptrs.cp1, mm_got.cp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateTable.t.Errorf("AgentPublicServiceServerMock.CreateTable got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateTable.CreateTableMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateTable.CreateTableMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateTable.t.Fatal("No results are set for the AgentPublicServiceServerMock.CreateTable")
		}
		return (*mm_results).cp2, (*mm_results).err
	}
	if mmCreateTable.funcCreateTable != nil {
		return mmCreateTable.funcCreateTable(ctx, cp1)
	}
	mmCreateTable.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.CreateTable. %v %v", ctx, cp1)
	return
}

// CreateTableAfterCounter returns a count of finished AgentPublicServiceServerMock.CreateTable invocations
func (mmCreateTable *AgentPublicServiceServerMock) CreateTableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateTable.afterCreateTableCounter)
}

// CreateTableBeforeCounter returns a count of AgentPublicServiceServerMock.CreateTable invocations
func (mmCreateTable *AgentPublicServiceServerMock) CreateTableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateTable.beforeCreateTableCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.CreateTable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateTable *mAgentPublicServiceServerMockCreateTable) Calls() []*AgentPublicServiceServerMockCreateTableParams {
	mmCreateTable.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockCreateTableParams, len(mmCreateTable.callArgs))
	copy(argCopy, mmCreateTable.callArgs)

	mmCreateTable.mutex.RUnlock()

	return argCopy
}

// MinimockCreateTableDone returns true if the count of the CreateTable invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockCreateTableDone() bool {
	if m.CreateTableMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateTableMock.invocationsDone()
}

// MinimockCreateTableInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockCreateTableInspect() {
	for _, e := range m.CreateTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.CreateTable at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateTableCounter := mm_atomic.LoadUint64(&m.afterCreateTableCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateTableMock.defaultExpectation != nil && afterCreateTableCounter < 1 {
		if m.CreateTableMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.CreateTable at\n%s", m.CreateTableMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.CreateTable at\n%s with params: %#v", m.CreateTableMock.defaultExpectation.expectationOrigins.origin, *m.CreateTableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateTable != nil && afterCreateTableCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.CreateTable at\n%s", m.funcCreateTableOrigin)
	}

	if !m.CreateTableMock.invocationsDone() && afterCreateTableCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.CreateTable at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateTableMock.expectedInvocations), m.CreateTableMock.expectedInvocationsOrigin, afterCreateTableCounter)
	}
}

type mAgentPublicServiceServerMockDeleteChat struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockDeleteChatExpectation
	expectations       []*AgentPublicServiceServerMockDeleteChatExpectation

	callArgs []*AgentPublicServiceServerMockDeleteChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockDeleteChatExpectation specifies expectation struct of the AgentPublicServiceServer.DeleteChat
type AgentPublicServiceServerMockDeleteChatExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockDeleteChatParams
	paramPtrs          *AgentPublicServiceServerMockDeleteChatParamPtrs
	expectationOrigins AgentPublicServiceServerMockDeleteChatExpectationOrigins
	results            *AgentPublicServiceServerMockDeleteChatResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockDeleteChatParams contains parameters of the AgentPublicServiceServer.DeleteChat
type AgentPublicServiceServerMockDeleteChatParams struct {
	ctx context.Context
	dp1 *mm_agentv1alpha.DeleteChatRequest
}

// AgentPublicServiceServerMockDeleteChatParamPtrs contains pointers to parameters of the AgentPublicServiceServer.DeleteChat
type AgentPublicServiceServerMockDeleteChatParamPtrs struct {
	ctx *context.Context
	dp1 **mm_agentv1alpha.DeleteChatRequest
}

// AgentPublicServiceServerMockDeleteChatResults contains results of the AgentPublicServiceServer.DeleteChat
type AgentPublicServiceServerMockDeleteChatResults struct {
	dp2 *mm_agentv1alpha.DeleteChatResponse
	err error
}

// AgentPublicServiceServerMockDeleteChatOrigins contains origins of expectations of the AgentPublicServiceServer.DeleteChat
type AgentPublicServiceServerMockDeleteChatExpectationOrigins struct {
	origin    string
	originCtx string
	originDp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteChat *mAgentPublicServiceServerMockDeleteChat) Optional() *mAgentPublicServiceServerMockDeleteChat {
	mmDeleteChat.optional = true
	return mmDeleteChat
}

// Expect sets up expected params for AgentPublicServiceServer.DeleteChat
func (mmDeleteChat *mAgentPublicServiceServerMockDeleteChat) Expect(ctx context.Context, dp1 *mm_agentv1alpha.DeleteChatRequest) *mAgentPublicServiceServerMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &AgentPublicServiceServerMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.paramPtrs != nil {
		mmDeleteChat.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteChat mock is already set by ExpectParams functions")
	}

	mmDeleteChat.defaultExpectation.params = &AgentPublicServiceServerMockDeleteChatParams{ctx, dp1}
	mmDeleteChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteChat.expectations {
		if minimock.Equal(e.params, mmDeleteChat.defaultExpectation.params) {
			mmDeleteChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteChat.defaultExpectation.params)
		}
	}

	return mmDeleteChat
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.DeleteChat
func (mmDeleteChat *mAgentPublicServiceServerMockDeleteChat) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &AgentPublicServiceServerMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteChat
}

// ExpectDp1Param2 sets up expected param dp1 for AgentPublicServiceServer.DeleteChat
func (mmDeleteChat *mAgentPublicServiceServerMockDeleteChat) ExpectDp1Param2(dp1 *mm_agentv1alpha.DeleteChatRequest) *mAgentPublicServiceServerMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &AgentPublicServiceServerMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.dp1 = &dp1
	mmDeleteChat.defaultExpectation.expectationOrigins.originDp1 = minimock.CallerInfo(1)

	return mmDeleteChat
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.DeleteChat
func (mmDeleteChat *mAgentPublicServiceServerMockDeleteChat) Inspect(f func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteChatRequest)) *mAgentPublicServiceServerMockDeleteChat {
	if mmDeleteChat.mock.inspectFuncDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.DeleteChat")
	}

	mmDeleteChat.mock.inspectFuncDeleteChat = f

	return mmDeleteChat
}

// Return sets up results that will be returned by AgentPublicServiceServer.DeleteChat
func (mmDeleteChat *mAgentPublicServiceServerMockDeleteChat) Return(dp2 *mm_agentv1alpha.DeleteChatResponse, err error) *AgentPublicServiceServerMock {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &AgentPublicServiceServerMockDeleteChatExpectation{mock: mmDeleteChat.mock}
	}
	mmDeleteChat.defaultExpectation.results = &AgentPublicServiceServerMockDeleteChatResults{dp2, err}
	mmDeleteChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.DeleteChat method
func (mmDeleteChat *mAgentPublicServiceServerMockDeleteChat) Set(f func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteChatRequest) (dp2 *mm_agentv1alpha.DeleteChatResponse, err error)) *AgentPublicServiceServerMock {
	if mmDeleteChat.defaultExpectation != nil {
		mmDeleteChat.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.DeleteChat method")
	}

	if len(mmDeleteChat.expectations) > 0 {
		mmDeleteChat.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.DeleteChat method")
	}

	mmDeleteChat.mock.funcDeleteChat = f
	mmDeleteChat.mock.funcDeleteChatOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// When sets expectation for the AgentPublicServiceServer.DeleteChat which will trigger the result defined by the following
// Then helper
func (mmDeleteChat *mAgentPublicServiceServerMockDeleteChat) When(ctx context.Context, dp1 *mm_agentv1alpha.DeleteChatRequest) *AgentPublicServiceServerMockDeleteChatExpectation {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteChat mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockDeleteChatExpectation{
		mock:               mmDeleteChat.mock,
		params:             &AgentPublicServiceServerMockDeleteChatParams{ctx, dp1},
		expectationOrigins: AgentPublicServiceServerMockDeleteChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteChat.expectations = append(mmDeleteChat.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.DeleteChat return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockDeleteChatExpectation) Then(dp2 *mm_agentv1alpha.DeleteChatResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockDeleteChatResults{dp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.DeleteChat should be invoked
func (mmDeleteChat *mAgentPublicServiceServerMockDeleteChat) Times(n uint64) *mAgentPublicServiceServerMockDeleteChat {
	if n == 0 {
		mmDeleteChat.mock.t.Fatalf("Times of AgentPublicServiceServerMock.DeleteChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteChat.expectedInvocations, n)
	mmDeleteChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteChat
}

func (mmDeleteChat *mAgentPublicServiceServerMockDeleteChat) invocationsDone() bool {
	if len(mmDeleteChat.expectations) == 0 && mmDeleteChat.defaultExpectation == nil && mmDeleteChat.mock.funcDeleteChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteChat.mock.afterDeleteChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteChat implements mm_agentv1alpha.AgentPublicServiceServer
func (mmDeleteChat *AgentPublicServiceServerMock) DeleteChat(ctx context.Context, dp1 *mm_agentv1alpha.DeleteChatRequest) (dp2 *mm_agentv1alpha.DeleteChatResponse, err error) {
	mm_atomic.AddUint64(&mmDeleteChat.beforeDeleteChatCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteChat.afterDeleteChatCounter, 1)

	mmDeleteChat.t.Helper()

	if mmDeleteChat.inspectFuncDeleteChat != nil {
		mmDeleteChat.inspectFuncDeleteChat(ctx, dp1)
	}

	mm_params := AgentPublicServiceServerMockDeleteChatParams{ctx, dp1}

	// Record call args
	mmDeleteChat.DeleteChatMock.mutex.Lock()
	mmDeleteChat.DeleteChatMock.callArgs = append(mmDeleteChat.DeleteChatMock.callArgs, &mm_params)
	mmDeleteChat.DeleteChatMock.mutex.Unlock()

	for _, e := range mmDeleteChat.DeleteChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp2, e.results.err
		}
	}

	if mmDeleteChat.DeleteChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteChat.DeleteChatMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteChat.DeleteChatMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteChat.DeleteChatMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockDeleteChatParams{ctx, dp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteChat.t.Errorf("AgentPublicServiceServerMock.DeleteChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.dp1 != nil && !minimock.Equal(*mm_want_ptrs.dp1, mm_got.dp1) {
				mmDeleteChat.t.Errorf("AgentPublicServiceServerMock.DeleteChat got unexpected parameter dp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originDp1, *mm_want_ptrs.dp1, mm_got.dp1, minimock.Diff(*mm_want_ptrs.dp1, mm_got.dp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteChat.t.Errorf("AgentPublicServiceServerMock.DeleteChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteChat.DeleteChatMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteChat.t.Fatal("No results are set for the AgentPublicServiceServerMock.DeleteChat")
		}
		return (*mm_results).dp2, (*mm_results).err
	}
	if mmDeleteChat.funcDeleteChat != nil {
		return mmDeleteChat.funcDeleteChat(ctx, dp1)
	}
	mmDeleteChat.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.DeleteChat. %v %v", ctx, dp1)
	return
}

// DeleteChatAfterCounter returns a count of finished AgentPublicServiceServerMock.DeleteChat invocations
func (mmDeleteChat *AgentPublicServiceServerMock) DeleteChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.afterDeleteChatCounter)
}

// DeleteChatBeforeCounter returns a count of AgentPublicServiceServerMock.DeleteChat invocations
func (mmDeleteChat *AgentPublicServiceServerMock) DeleteChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.beforeDeleteChatCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.DeleteChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteChat *mAgentPublicServiceServerMockDeleteChat) Calls() []*AgentPublicServiceServerMockDeleteChatParams {
	mmDeleteChat.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockDeleteChatParams, len(mmDeleteChat.callArgs))
	copy(argCopy, mmDeleteChat.callArgs)

	mmDeleteChat.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteChatDone returns true if the count of the DeleteChat invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockDeleteChatDone() bool {
	if m.DeleteChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteChatMock.invocationsDone()
}

// MinimockDeleteChatInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockDeleteChatInspect() {
	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteChatCounter := mm_atomic.LoadUint64(&m.afterDeleteChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteChatMock.defaultExpectation != nil && afterDeleteChatCounter < 1 {
		if m.DeleteChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteChat at\n%s", m.DeleteChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteChat at\n%s with params: %#v", m.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *m.DeleteChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteChat != nil && afterDeleteChatCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteChat at\n%s", m.funcDeleteChatOrigin)
	}

	if !m.DeleteChatMock.invocationsDone() && afterDeleteChatCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.DeleteChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteChatMock.expectedInvocations), m.DeleteChatMock.expectedInvocationsOrigin, afterDeleteChatCounter)
	}
}

type mAgentPublicServiceServerMockDeleteMessage struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockDeleteMessageExpectation
	expectations       []*AgentPublicServiceServerMockDeleteMessageExpectation

	callArgs []*AgentPublicServiceServerMockDeleteMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockDeleteMessageExpectation specifies expectation struct of the AgentPublicServiceServer.DeleteMessage
type AgentPublicServiceServerMockDeleteMessageExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockDeleteMessageParams
	paramPtrs          *AgentPublicServiceServerMockDeleteMessageParamPtrs
	expectationOrigins AgentPublicServiceServerMockDeleteMessageExpectationOrigins
	results            *AgentPublicServiceServerMockDeleteMessageResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockDeleteMessageParams contains parameters of the AgentPublicServiceServer.DeleteMessage
type AgentPublicServiceServerMockDeleteMessageParams struct {
	ctx context.Context
	dp1 *mm_agentv1alpha.DeleteMessageRequest
}

// AgentPublicServiceServerMockDeleteMessageParamPtrs contains pointers to parameters of the AgentPublicServiceServer.DeleteMessage
type AgentPublicServiceServerMockDeleteMessageParamPtrs struct {
	ctx *context.Context
	dp1 **mm_agentv1alpha.DeleteMessageRequest
}

// AgentPublicServiceServerMockDeleteMessageResults contains results of the AgentPublicServiceServer.DeleteMessage
type AgentPublicServiceServerMockDeleteMessageResults struct {
	dp2 *mm_agentv1alpha.DeleteMessageResponse
	err error
}

// AgentPublicServiceServerMockDeleteMessageOrigins contains origins of expectations of the AgentPublicServiceServer.DeleteMessage
type AgentPublicServiceServerMockDeleteMessageExpectationOrigins struct {
	origin    string
	originCtx string
	originDp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteMessage *mAgentPublicServiceServerMockDeleteMessage) Optional() *mAgentPublicServiceServerMockDeleteMessage {
	mmDeleteMessage.optional = true
	return mmDeleteMessage
}

// Expect sets up expected params for AgentPublicServiceServer.DeleteMessage
func (mmDeleteMessage *mAgentPublicServiceServerMockDeleteMessage) Expect(ctx context.Context, dp1 *mm_agentv1alpha.DeleteMessageRequest) *mAgentPublicServiceServerMockDeleteMessage {
	if mmDeleteMessage.mock.funcDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteMessage mock is already set by Set")
	}

	if mmDeleteMessage.defaultExpectation == nil {
		mmDeleteMessage.defaultExpectation = &AgentPublicServiceServerMockDeleteMessageExpectation{}
	}

	if mmDeleteMessage.defaultExpectation.paramPtrs != nil {
		mmDeleteMessage.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteMessage mock is already set by ExpectParams functions")
	}

	mmDeleteMessage.defaultExpectation.params = &AgentPublicServiceServerMockDeleteMessageParams{ctx, dp1}
	mmDeleteMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteMessage.expectations {
		if minimock.Equal(e.params, mmDeleteMessage.defaultExpectation.params) {
			mmDeleteMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteMessage.defaultExpectation.params)
		}
	}

	return mmDeleteMessage
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.DeleteMessage
func (mmDeleteMessage *mAgentPublicServiceServerMockDeleteMessage) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockDeleteMessage {
	if mmDeleteMessage.mock.funcDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteMessage mock is already set by Set")
	}

	if mmDeleteMessage.defaultExpectation == nil {
		mmDeleteMessage.defaultExpectation = &AgentPublicServiceServerMockDeleteMessageExpectation{}
	}

	if mmDeleteMessage.defaultExpectation.params != nil {
		mmDeleteMessage.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteMessage mock is already set by Expect")
	}

	if mmDeleteMessage.defaultExpectation.paramPtrs == nil {
		mmDeleteMessage.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockDeleteMessageParamPtrs{}
	}
	mmDeleteMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteMessage
}

// ExpectDp1Param2 sets up expected param dp1 for AgentPublicServiceServer.DeleteMessage
func (mmDeleteMessage *mAgentPublicServiceServerMockDeleteMessage) ExpectDp1Param2(dp1 *mm_agentv1alpha.DeleteMessageRequest) *mAgentPublicServiceServerMockDeleteMessage {
	if mmDeleteMessage.mock.funcDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteMessage mock is already set by Set")
	}

	if mmDeleteMessage.defaultExpectation == nil {
		mmDeleteMessage.defaultExpectation = &AgentPublicServiceServerMockDeleteMessageExpectation{}
	}

	if mmDeleteMessage.defaultExpectation.params != nil {
		mmDeleteMessage.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteMessage mock is already set by Expect")
	}

	if mmDeleteMessage.defaultExpectation.paramPtrs == nil {
		mmDeleteMessage.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockDeleteMessageParamPtrs{}
	}
	mmDeleteMessage.defaultExpectation.paramPtrs.dp1 = &dp1
	mmDeleteMessage.defaultExpectation.expectationOrigins.originDp1 = minimock.CallerInfo(1)

	return mmDeleteMessage
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.DeleteMessage
func (mmDeleteMessage *mAgentPublicServiceServerMockDeleteMessage) Inspect(f func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteMessageRequest)) *mAgentPublicServiceServerMockDeleteMessage {
	if mmDeleteMessage.mock.inspectFuncDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.DeleteMessage")
	}

	mmDeleteMessage.mock.inspectFuncDeleteMessage = f

	return mmDeleteMessage
}

// Return sets up results that will be returned by AgentPublicServiceServer.DeleteMessage
func (mmDeleteMessage *mAgentPublicServiceServerMockDeleteMessage) Return(dp2 *mm_agentv1alpha.DeleteMessageResponse, err error) *AgentPublicServiceServerMock {
	if mmDeleteMessage.mock.funcDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteMessage mock is already set by Set")
	}

	if mmDeleteMessage.defaultExpectation == nil {
		mmDeleteMessage.defaultExpectation = &AgentPublicServiceServerMockDeleteMessageExpectation{mock: mmDeleteMessage.mock}
	}
	mmDeleteMessage.defaultExpectation.results = &AgentPublicServiceServerMockDeleteMessageResults{dp2, err}
	mmDeleteMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteMessage.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.DeleteMessage method
func (mmDeleteMessage *mAgentPublicServiceServerMockDeleteMessage) Set(f func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteMessageRequest) (dp2 *mm_agentv1alpha.DeleteMessageResponse, err error)) *AgentPublicServiceServerMock {
	if mmDeleteMessage.defaultExpectation != nil {
		mmDeleteMessage.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.DeleteMessage method")
	}

	if len(mmDeleteMessage.expectations) > 0 {
		mmDeleteMessage.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.DeleteMessage method")
	}

	mmDeleteMessage.mock.funcDeleteMessage = f
	mmDeleteMessage.mock.funcDeleteMessageOrigin = minimock.CallerInfo(1)
	return mmDeleteMessage.mock
}

// When sets expectation for the AgentPublicServiceServer.DeleteMessage which will trigger the result defined by the following
// Then helper
func (mmDeleteMessage *mAgentPublicServiceServerMockDeleteMessage) When(ctx context.Context, dp1 *mm_agentv1alpha.DeleteMessageRequest) *AgentPublicServiceServerMockDeleteMessageExpectation {
	if mmDeleteMessage.mock.funcDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteMessage mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockDeleteMessageExpectation{
		mock:               mmDeleteMessage.mock,
		params:             &AgentPublicServiceServerMockDeleteMessageParams{ctx, dp1},
		expectationOrigins: AgentPublicServiceServerMockDeleteMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteMessage.expectations = append(mmDeleteMessage.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.DeleteMessage return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockDeleteMessageExpectation) Then(dp2 *mm_agentv1alpha.DeleteMessageResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockDeleteMessageResults{dp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.DeleteMessage should be invoked
func (mmDeleteMessage *mAgentPublicServiceServerMockDeleteMessage) Times(n uint64) *mAgentPublicServiceServerMockDeleteMessage {
	if n == 0 {
		mmDeleteMessage.mock.t.Fatalf("Times of AgentPublicServiceServerMock.DeleteMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteMessage.expectedInvocations, n)
	mmDeleteMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteMessage
}

func (mmDeleteMessage *mAgentPublicServiceServerMockDeleteMessage) invocationsDone() bool {
	if len(mmDeleteMessage.expectations) == 0 && mmDeleteMessage.defaultExpectation == nil && mmDeleteMessage.mock.funcDeleteMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteMessage.mock.afterDeleteMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteMessage implements mm_agentv1alpha.AgentPublicServiceServer
func (mmDeleteMessage *AgentPublicServiceServerMock) DeleteMessage(ctx context.Context, dp1 *mm_agentv1alpha.DeleteMessageRequest) (dp2 *mm_agentv1alpha.DeleteMessageResponse, err error) {
	mm_atomic.AddUint64(&mmDeleteMessage.beforeDeleteMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteMessage.afterDeleteMessageCounter, 1)

	mmDeleteMessage.t.Helper()

	if mmDeleteMessage.inspectFuncDeleteMessage != nil {
		mmDeleteMessage.inspectFuncDeleteMessage(ctx, dp1)
	}

	mm_params := AgentPublicServiceServerMockDeleteMessageParams{ctx, dp1}

	// Record call args
	mmDeleteMessage.DeleteMessageMock.mutex.Lock()
	mmDeleteMessage.DeleteMessageMock.callArgs = append(mmDeleteMessage.DeleteMessageMock.callArgs, &mm_params)
	mmDeleteMessage.DeleteMessageMock.mutex.Unlock()

	for _, e := range mmDeleteMessage.DeleteMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp2, e.results.err
		}
	}

	if mmDeleteMessage.DeleteMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteMessage.DeleteMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteMessage.DeleteMessageMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteMessage.DeleteMessageMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockDeleteMessageParams{ctx, dp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteMessage.t.Errorf("AgentPublicServiceServerMock.DeleteMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteMessage.DeleteMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.dp1 != nil && !minimock.Equal(*mm_want_ptrs.dp1, mm_got.dp1) {
				mmDeleteMessage.t.Errorf("AgentPublicServiceServerMock.DeleteMessage got unexpected parameter dp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteMessage.DeleteMessageMock.defaultExpectation.expectationOrigins.originDp1, *mm_want_ptrs.dp1, mm_got.dp1, minimock.Diff(*mm_want_ptrs.dp1, mm_got.dp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteMessage.t.Errorf("AgentPublicServiceServerMock.DeleteMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteMessage.DeleteMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteMessage.DeleteMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteMessage.t.Fatal("No results are set for the AgentPublicServiceServerMock.DeleteMessage")
		}
		return (*mm_results).dp2, (*mm_results).err
	}
	if mmDeleteMessage.funcDeleteMessage != nil {
		return mmDeleteMessage.funcDeleteMessage(ctx, dp1)
	}
	mmDeleteMessage.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.DeleteMessage. %v %v", ctx, dp1)
	return
}

// DeleteMessageAfterCounter returns a count of finished AgentPublicServiceServerMock.DeleteMessage invocations
func (mmDeleteMessage *AgentPublicServiceServerMock) DeleteMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteMessage.afterDeleteMessageCounter)
}

// DeleteMessageBeforeCounter returns a count of AgentPublicServiceServerMock.DeleteMessage invocations
func (mmDeleteMessage *AgentPublicServiceServerMock) DeleteMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteMessage.beforeDeleteMessageCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.DeleteMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteMessage *mAgentPublicServiceServerMockDeleteMessage) Calls() []*AgentPublicServiceServerMockDeleteMessageParams {
	mmDeleteMessage.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockDeleteMessageParams, len(mmDeleteMessage.callArgs))
	copy(argCopy, mmDeleteMessage.callArgs)

	mmDeleteMessage.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteMessageDone returns true if the count of the DeleteMessage invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockDeleteMessageDone() bool {
	if m.DeleteMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMessageMock.invocationsDone()
}

// MinimockDeleteMessageInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockDeleteMessageInspect() {
	for _, e := range m.DeleteMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteMessageCounter := mm_atomic.LoadUint64(&m.afterDeleteMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMessageMock.defaultExpectation != nil && afterDeleteMessageCounter < 1 {
		if m.DeleteMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteMessage at\n%s", m.DeleteMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteMessage at\n%s with params: %#v", m.DeleteMessageMock.defaultExpectation.expectationOrigins.origin, *m.DeleteMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteMessage != nil && afterDeleteMessageCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteMessage at\n%s", m.funcDeleteMessageOrigin)
	}

	if !m.DeleteMessageMock.invocationsDone() && afterDeleteMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.DeleteMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMessageMock.expectedInvocations), m.DeleteMessageMock.expectedInvocationsOrigin, afterDeleteMessageCounter)
	}
}

type mAgentPublicServiceServerMockDeleteRow struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockDeleteRowExpectation
	expectations       []*AgentPublicServiceServerMockDeleteRowExpectation

	callArgs []*AgentPublicServiceServerMockDeleteRowParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockDeleteRowExpectation specifies expectation struct of the AgentPublicServiceServer.DeleteRow
type AgentPublicServiceServerMockDeleteRowExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockDeleteRowParams
	paramPtrs          *AgentPublicServiceServerMockDeleteRowParamPtrs
	expectationOrigins AgentPublicServiceServerMockDeleteRowExpectationOrigins
	results            *AgentPublicServiceServerMockDeleteRowResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockDeleteRowParams contains parameters of the AgentPublicServiceServer.DeleteRow
type AgentPublicServiceServerMockDeleteRowParams struct {
	ctx context.Context
	dp1 *mm_agentv1alpha.DeleteRowRequest
}

// AgentPublicServiceServerMockDeleteRowParamPtrs contains pointers to parameters of the AgentPublicServiceServer.DeleteRow
type AgentPublicServiceServerMockDeleteRowParamPtrs struct {
	ctx *context.Context
	dp1 **mm_agentv1alpha.DeleteRowRequest
}

// AgentPublicServiceServerMockDeleteRowResults contains results of the AgentPublicServiceServer.DeleteRow
type AgentPublicServiceServerMockDeleteRowResults struct {
	dp2 *mm_agentv1alpha.DeleteRowResponse
	err error
}

// AgentPublicServiceServerMockDeleteRowOrigins contains origins of expectations of the AgentPublicServiceServer.DeleteRow
type AgentPublicServiceServerMockDeleteRowExpectationOrigins struct {
	origin    string
	originCtx string
	originDp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteRow *mAgentPublicServiceServerMockDeleteRow) Optional() *mAgentPublicServiceServerMockDeleteRow {
	mmDeleteRow.optional = true
	return mmDeleteRow
}

// Expect sets up expected params for AgentPublicServiceServer.DeleteRow
func (mmDeleteRow *mAgentPublicServiceServerMockDeleteRow) Expect(ctx context.Context, dp1 *mm_agentv1alpha.DeleteRowRequest) *mAgentPublicServiceServerMockDeleteRow {
	if mmDeleteRow.mock.funcDeleteRow != nil {
		mmDeleteRow.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRow mock is already set by Set")
	}

	if mmDeleteRow.defaultExpectation == nil {
		mmDeleteRow.defaultExpectation = &AgentPublicServiceServerMockDeleteRowExpectation{}
	}

	if mmDeleteRow.defaultExpectation.paramPtrs != nil {
		mmDeleteRow.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRow mock is already set by ExpectParams functions")
	}

	mmDeleteRow.defaultExpectation.params = &AgentPublicServiceServerMockDeleteRowParams{ctx, dp1}
	mmDeleteRow.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteRow.expectations {
		if minimock.Equal(e.params, mmDeleteRow.defaultExpectation.params) {
			mmDeleteRow.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteRow.defaultExpectation.params)
		}
	}

	return mmDeleteRow
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.DeleteRow
func (mmDeleteRow *mAgentPublicServiceServerMockDeleteRow) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockDeleteRow {
	if mmDeleteRow.mock.funcDeleteRow != nil {
		mmDeleteRow.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRow mock is already set by Set")
	}

	if mmDeleteRow.defaultExpectation == nil {
		mmDeleteRow.defaultExpectation = &AgentPublicServiceServerMockDeleteRowExpectation{}
	}

	if mmDeleteRow.defaultExpectation.params != nil {
		mmDeleteRow.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRow mock is already set by Expect")
	}

	if mmDeleteRow.defaultExpectation.paramPtrs == nil {
		mmDeleteRow.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockDeleteRowParamPtrs{}
	}
	mmDeleteRow.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteRow.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteRow
}

// ExpectDp1Param2 sets up expected param dp1 for AgentPublicServiceServer.DeleteRow
func (mmDeleteRow *mAgentPublicServiceServerMockDeleteRow) ExpectDp1Param2(dp1 *mm_agentv1alpha.DeleteRowRequest) *mAgentPublicServiceServerMockDeleteRow {
	if mmDeleteRow.mock.funcDeleteRow != nil {
		mmDeleteRow.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRow mock is already set by Set")
	}

	if mmDeleteRow.defaultExpectation == nil {
		mmDeleteRow.defaultExpectation = &AgentPublicServiceServerMockDeleteRowExpectation{}
	}

	if mmDeleteRow.defaultExpectation.params != nil {
		mmDeleteRow.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRow mock is already set by Expect")
	}

	if mmDeleteRow.defaultExpectation.paramPtrs == nil {
		mmDeleteRow.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockDeleteRowParamPtrs{}
	}
	mmDeleteRow.defaultExpectation.paramPtrs.dp1 = &dp1
	mmDeleteRow.defaultExpectation.expectationOrigins.originDp1 = minimock.CallerInfo(1)

	return mmDeleteRow
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.DeleteRow
func (mmDeleteRow *mAgentPublicServiceServerMockDeleteRow) Inspect(f func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteRowRequest)) *mAgentPublicServiceServerMockDeleteRow {
	if mmDeleteRow.mock.inspectFuncDeleteRow != nil {
		mmDeleteRow.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.DeleteRow")
	}

	mmDeleteRow.mock.inspectFuncDeleteRow = f

	return mmDeleteRow
}

// Return sets up results that will be returned by AgentPublicServiceServer.DeleteRow
func (mmDeleteRow *mAgentPublicServiceServerMockDeleteRow) Return(dp2 *mm_agentv1alpha.DeleteRowResponse, err error) *AgentPublicServiceServerMock {
	if mmDeleteRow.mock.funcDeleteRow != nil {
		mmDeleteRow.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRow mock is already set by Set")
	}

	if mmDeleteRow.defaultExpectation == nil {
		mmDeleteRow.defaultExpectation = &AgentPublicServiceServerMockDeleteRowExpectation{mock: mmDeleteRow.mock}
	}
	mmDeleteRow.defaultExpectation.results = &AgentPublicServiceServerMockDeleteRowResults{dp2, err}
	mmDeleteRow.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteRow.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.DeleteRow method
func (mmDeleteRow *mAgentPublicServiceServerMockDeleteRow) Set(f func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteRowRequest) (dp2 *mm_agentv1alpha.DeleteRowResponse, err error)) *AgentPublicServiceServerMock {
	if mmDeleteRow.defaultExpectation != nil {
		mmDeleteRow.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.DeleteRow method")
	}

	if len(mmDeleteRow.expectations) > 0 {
		mmDeleteRow.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.DeleteRow method")
	}

	mmDeleteRow.mock.funcDeleteRow = f
	mmDeleteRow.mock.funcDeleteRowOrigin = minimock.CallerInfo(1)
	return mmDeleteRow.mock
}

// When sets expectation for the AgentPublicServiceServer.DeleteRow which will trigger the result defined by the following
// Then helper
func (mmDeleteRow *mAgentPublicServiceServerMockDeleteRow) When(ctx context.Context, dp1 *mm_agentv1alpha.DeleteRowRequest) *AgentPublicServiceServerMockDeleteRowExpectation {
	if mmDeleteRow.mock.funcDeleteRow != nil {
		mmDeleteRow.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRow mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockDeleteRowExpectation{
		mock:               mmDeleteRow.mock,
		params:             &AgentPublicServiceServerMockDeleteRowParams{ctx, dp1},
		expectationOrigins: AgentPublicServiceServerMockDeleteRowExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteRow.expectations = append(mmDeleteRow.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.DeleteRow return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockDeleteRowExpectation) Then(dp2 *mm_agentv1alpha.DeleteRowResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockDeleteRowResults{dp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.DeleteRow should be invoked
func (mmDeleteRow *mAgentPublicServiceServerMockDeleteRow) Times(n uint64) *mAgentPublicServiceServerMockDeleteRow {
	if n == 0 {
		mmDeleteRow.mock.t.Fatalf("Times of AgentPublicServiceServerMock.DeleteRow mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteRow.expectedInvocations, n)
	mmDeleteRow.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteRow
}

func (mmDeleteRow *mAgentPublicServiceServerMockDeleteRow) invocationsDone() bool {
	if len(mmDeleteRow.expectations) == 0 && mmDeleteRow.defaultExpectation == nil && mmDeleteRow.mock.funcDeleteRow == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteRow.mock.afterDeleteRowCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteRow.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteRow implements mm_agentv1alpha.AgentPublicServiceServer
func (mmDeleteRow *AgentPublicServiceServerMock) DeleteRow(ctx context.Context, dp1 *mm_agentv1alpha.DeleteRowRequest) (dp2 *mm_agentv1alpha.DeleteRowResponse, err error) {
	mm_atomic.AddUint64(&mmDeleteRow.beforeDeleteRowCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteRow.afterDeleteRowCounter, 1)

	mmDeleteRow.t.Helper()

	if mmDeleteRow.inspectFuncDeleteRow != nil {
		mmDeleteRow.inspectFuncDeleteRow(ctx, dp1)
	}

	mm_params := AgentPublicServiceServerMockDeleteRowParams{ctx, dp1}

	// Record call args
	mmDeleteRow.DeleteRowMock.mutex.Lock()
	mmDeleteRow.DeleteRowMock.callArgs = append(mmDeleteRow.DeleteRowMock.callArgs, &mm_params)
	mmDeleteRow.DeleteRowMock.mutex.Unlock()

	for _, e := range mmDeleteRow.DeleteRowMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp2, e.results.err
		}
	}

	if mmDeleteRow.DeleteRowMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteRow.DeleteRowMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteRow.DeleteRowMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteRow.DeleteRowMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockDeleteRowParams{ctx, dp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteRow.t.Errorf("AgentPublicServiceServerMock.DeleteRow got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteRow.DeleteRowMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.dp1 != nil && !minimock.Equal(*mm_want_ptrs.dp1, mm_got.dp1) {
				mmDeleteRow.t.Errorf("AgentPublicServiceServerMock.DeleteRow got unexpected parameter dp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteRow.DeleteRowMock.defaultExpectation.expectationOrigins.originDp1, *mm_want_ptrs.dp1, mm_got.dp1, minimock.Diff(*mm_want_ptrs.dp1, mm_got.dp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteRow.t.Errorf("AgentPublicServiceServerMock.DeleteRow got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteRow.DeleteRowMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteRow.DeleteRowMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteRow.t.Fatal("No results are set for the AgentPublicServiceServerMock.DeleteRow")
		}
		return (*mm_results).dp2, (*mm_results).err
	}
	if mmDeleteRow.funcDeleteRow != nil {
		return mmDeleteRow.funcDeleteRow(ctx, dp1)
	}
	mmDeleteRow.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.DeleteRow. %v %v", ctx, dp1)
	return
}

// DeleteRowAfterCounter returns a count of finished AgentPublicServiceServerMock.DeleteRow invocations
func (mmDeleteRow *AgentPublicServiceServerMock) DeleteRowAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteRow.afterDeleteRowCounter)
}

// DeleteRowBeforeCounter returns a count of AgentPublicServiceServerMock.DeleteRow invocations
func (mmDeleteRow *AgentPublicServiceServerMock) DeleteRowBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteRow.beforeDeleteRowCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.DeleteRow.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteRow *mAgentPublicServiceServerMockDeleteRow) Calls() []*AgentPublicServiceServerMockDeleteRowParams {
	mmDeleteRow.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockDeleteRowParams, len(mmDeleteRow.callArgs))
	copy(argCopy, mmDeleteRow.callArgs)

	mmDeleteRow.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteRowDone returns true if the count of the DeleteRow invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockDeleteRowDone() bool {
	if m.DeleteRowMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteRowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteRowMock.invocationsDone()
}

// MinimockDeleteRowInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockDeleteRowInspect() {
	for _, e := range m.DeleteRowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteRow at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteRowCounter := mm_atomic.LoadUint64(&m.afterDeleteRowCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteRowMock.defaultExpectation != nil && afterDeleteRowCounter < 1 {
		if m.DeleteRowMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteRow at\n%s", m.DeleteRowMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteRow at\n%s with params: %#v", m.DeleteRowMock.defaultExpectation.expectationOrigins.origin, *m.DeleteRowMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteRow != nil && afterDeleteRowCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteRow at\n%s", m.funcDeleteRowOrigin)
	}

	if !m.DeleteRowMock.invocationsDone() && afterDeleteRowCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.DeleteRow at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteRowMock.expectedInvocations), m.DeleteRowMock.expectedInvocationsOrigin, afterDeleteRowCounter)
	}
}

type mAgentPublicServiceServerMockDeleteRows struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockDeleteRowsExpectation
	expectations       []*AgentPublicServiceServerMockDeleteRowsExpectation

	callArgs []*AgentPublicServiceServerMockDeleteRowsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockDeleteRowsExpectation specifies expectation struct of the AgentPublicServiceServer.DeleteRows
type AgentPublicServiceServerMockDeleteRowsExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockDeleteRowsParams
	paramPtrs          *AgentPublicServiceServerMockDeleteRowsParamPtrs
	expectationOrigins AgentPublicServiceServerMockDeleteRowsExpectationOrigins
	results            *AgentPublicServiceServerMockDeleteRowsResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockDeleteRowsParams contains parameters of the AgentPublicServiceServer.DeleteRows
type AgentPublicServiceServerMockDeleteRowsParams struct {
	ctx context.Context
	dp1 *mm_agentv1alpha.DeleteRowsRequest
}

// AgentPublicServiceServerMockDeleteRowsParamPtrs contains pointers to parameters of the AgentPublicServiceServer.DeleteRows
type AgentPublicServiceServerMockDeleteRowsParamPtrs struct {
	ctx *context.Context
	dp1 **mm_agentv1alpha.DeleteRowsRequest
}

// AgentPublicServiceServerMockDeleteRowsResults contains results of the AgentPublicServiceServer.DeleteRows
type AgentPublicServiceServerMockDeleteRowsResults struct {
	dp2 *mm_agentv1alpha.DeleteRowsResponse
	err error
}

// AgentPublicServiceServerMockDeleteRowsOrigins contains origins of expectations of the AgentPublicServiceServer.DeleteRows
type AgentPublicServiceServerMockDeleteRowsExpectationOrigins struct {
	origin    string
	originCtx string
	originDp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteRows *mAgentPublicServiceServerMockDeleteRows) Optional() *mAgentPublicServiceServerMockDeleteRows {
	mmDeleteRows.optional = true
	return mmDeleteRows
}

// Expect sets up expected params for AgentPublicServiceServer.DeleteRows
func (mmDeleteRows *mAgentPublicServiceServerMockDeleteRows) Expect(ctx context.Context, dp1 *mm_agentv1alpha.DeleteRowsRequest) *mAgentPublicServiceServerMockDeleteRows {
	if mmDeleteRows.mock.funcDeleteRows != nil {
		mmDeleteRows.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRows mock is already set by Set")
	}

	if mmDeleteRows.defaultExpectation == nil {
		mmDeleteRows.defaultExpectation = &AgentPublicServiceServerMockDeleteRowsExpectation{}
	}

	if mmDeleteRows.defaultExpectation.paramPtrs != nil {
		mmDeleteRows.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRows mock is already set by ExpectParams functions")
	}

	mmDeleteRows.defaultExpectation.params = &AgentPublicServiceServerMockDeleteRowsParams{ctx, dp1}
	mmDeleteRows.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteRows.expectations {
		if minimock.Equal(e.params, mmDeleteRows.defaultExpectation.params) {
			mmDeleteRows.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteRows.defaultExpectation.params)
		}
	}

	return mmDeleteRows
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.DeleteRows
func (mmDeleteRows *mAgentPublicServiceServerMockDeleteRows) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockDeleteRows {
	if mmDeleteRows.mock.funcDeleteRows != nil {
		mmDeleteRows.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRows mock is already set by Set")
	}

	if mmDeleteRows.defaultExpectation == nil {
		mmDeleteRows.defaultExpectation = &AgentPublicServiceServerMockDeleteRowsExpectation{}
	}

	if mmDeleteRows.defaultExpectation.params != nil {
		mmDeleteRows.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRows mock is already set by Expect")
	}

	if mmDeleteRows.defaultExpectation.paramPtrs == nil {
		mmDeleteRows.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockDeleteRowsParamPtrs{}
	}
	mmDeleteRows.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteRows.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteRows
}

// ExpectDp1Param2 sets up expected param dp1 for AgentPublicServiceServer.DeleteRows
func (mmDeleteRows *mAgentPublicServiceServerMockDeleteRows) ExpectDp1Param2(dp1 *mm_agentv1alpha.DeleteRowsRequest) *mAgentPublicServiceServerMockDeleteRows {
	if mmDeleteRows.mock.funcDeleteRows != nil {
		mmDeleteRows.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRows mock is already set by Set")
	}

	if mmDeleteRows.defaultExpectation == nil {
		mmDeleteRows.defaultExpectation = &AgentPublicServiceServerMockDeleteRowsExpectation{}
	}

	if mmDeleteRows.defaultExpectation.params != nil {
		mmDeleteRows.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRows mock is already set by Expect")
	}

	if mmDeleteRows.defaultExpectation.paramPtrs == nil {
		mmDeleteRows.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockDeleteRowsParamPtrs{}
	}
	mmDeleteRows.defaultExpectation.paramPtrs.dp1 = &dp1
	mmDeleteRows.defaultExpectation.expectationOrigins.originDp1 = minimock.CallerInfo(1)

	return mmDeleteRows
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.DeleteRows
func (mmDeleteRows *mAgentPublicServiceServerMockDeleteRows) Inspect(f func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteRowsRequest)) *mAgentPublicServiceServerMockDeleteRows {
	if mmDeleteRows.mock.inspectFuncDeleteRows != nil {
		mmDeleteRows.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.DeleteRows")
	}

	mmDeleteRows.mock.inspectFuncDeleteRows = f

	return mmDeleteRows
}

// Return sets up results that will be returned by AgentPublicServiceServer.DeleteRows
func (mmDeleteRows *mAgentPublicServiceServerMockDeleteRows) Return(dp2 *mm_agentv1alpha.DeleteRowsResponse, err error) *AgentPublicServiceServerMock {
	if mmDeleteRows.mock.funcDeleteRows != nil {
		mmDeleteRows.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRows mock is already set by Set")
	}

	if mmDeleteRows.defaultExpectation == nil {
		mmDeleteRows.defaultExpectation = &AgentPublicServiceServerMockDeleteRowsExpectation{mock: mmDeleteRows.mock}
	}
	mmDeleteRows.defaultExpectation.results = &AgentPublicServiceServerMockDeleteRowsResults{dp2, err}
	mmDeleteRows.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteRows.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.DeleteRows method
func (mmDeleteRows *mAgentPublicServiceServerMockDeleteRows) Set(f func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteRowsRequest) (dp2 *mm_agentv1alpha.DeleteRowsResponse, err error)) *AgentPublicServiceServerMock {
	if mmDeleteRows.defaultExpectation != nil {
		mmDeleteRows.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.DeleteRows method")
	}

	if len(mmDeleteRows.expectations) > 0 {
		mmDeleteRows.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.DeleteRows method")
	}

	mmDeleteRows.mock.funcDeleteRows = f
	mmDeleteRows.mock.funcDeleteRowsOrigin = minimock.CallerInfo(1)
	return mmDeleteRows.mock
}

// When sets expectation for the AgentPublicServiceServer.DeleteRows which will trigger the result defined by the following
// Then helper
func (mmDeleteRows *mAgentPublicServiceServerMockDeleteRows) When(ctx context.Context, dp1 *mm_agentv1alpha.DeleteRowsRequest) *AgentPublicServiceServerMockDeleteRowsExpectation {
	if mmDeleteRows.mock.funcDeleteRows != nil {
		mmDeleteRows.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteRows mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockDeleteRowsExpectation{
		mock:               mmDeleteRows.mock,
		params:             &AgentPublicServiceServerMockDeleteRowsParams{ctx, dp1},
		expectationOrigins: AgentPublicServiceServerMockDeleteRowsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteRows.expectations = append(mmDeleteRows.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.DeleteRows return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockDeleteRowsExpectation) Then(dp2 *mm_agentv1alpha.DeleteRowsResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockDeleteRowsResults{dp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.DeleteRows should be invoked
func (mmDeleteRows *mAgentPublicServiceServerMockDeleteRows) Times(n uint64) *mAgentPublicServiceServerMockDeleteRows {
	if n == 0 {
		mmDeleteRows.mock.t.Fatalf("Times of AgentPublicServiceServerMock.DeleteRows mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteRows.expectedInvocations, n)
	mmDeleteRows.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteRows
}

func (mmDeleteRows *mAgentPublicServiceServerMockDeleteRows) invocationsDone() bool {
	if len(mmDeleteRows.expectations) == 0 && mmDeleteRows.defaultExpectation == nil && mmDeleteRows.mock.funcDeleteRows == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteRows.mock.afterDeleteRowsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteRows.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteRows implements mm_agentv1alpha.AgentPublicServiceServer
func (mmDeleteRows *AgentPublicServiceServerMock) DeleteRows(ctx context.Context, dp1 *mm_agentv1alpha.DeleteRowsRequest) (dp2 *mm_agentv1alpha.DeleteRowsResponse, err error) {
	mm_atomic.AddUint64(&mmDeleteRows.beforeDeleteRowsCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteRows.afterDeleteRowsCounter, 1)

	mmDeleteRows.t.Helper()

	if mmDeleteRows.inspectFuncDeleteRows != nil {
		mmDeleteRows.inspectFuncDeleteRows(ctx, dp1)
	}

	mm_params := AgentPublicServiceServerMockDeleteRowsParams{ctx, dp1}

	// Record call args
	mmDeleteRows.DeleteRowsMock.mutex.Lock()
	mmDeleteRows.DeleteRowsMock.callArgs = append(mmDeleteRows.DeleteRowsMock.callArgs, &mm_params)
	mmDeleteRows.DeleteRowsMock.mutex.Unlock()

	for _, e := range mmDeleteRows.DeleteRowsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp2, e.results.err
		}
	}

	if mmDeleteRows.DeleteRowsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteRows.DeleteRowsMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteRows.DeleteRowsMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteRows.DeleteRowsMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockDeleteRowsParams{ctx, dp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteRows.t.Errorf("AgentPublicServiceServerMock.DeleteRows got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteRows.DeleteRowsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.dp1 != nil && !minimock.Equal(*mm_want_ptrs.dp1, mm_got.dp1) {
				mmDeleteRows.t.Errorf("AgentPublicServiceServerMock.DeleteRows got unexpected parameter dp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteRows.DeleteRowsMock.defaultExpectation.expectationOrigins.originDp1, *mm_want_ptrs.dp1, mm_got.dp1, minimock.Diff(*mm_want_ptrs.dp1, mm_got.dp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteRows.t.Errorf("AgentPublicServiceServerMock.DeleteRows got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteRows.DeleteRowsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteRows.DeleteRowsMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteRows.t.Fatal("No results are set for the AgentPublicServiceServerMock.DeleteRows")
		}
		return (*mm_results).dp2, (*mm_results).err
	}
	if mmDeleteRows.funcDeleteRows != nil {
		return mmDeleteRows.funcDeleteRows(ctx, dp1)
	}
	mmDeleteRows.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.DeleteRows. %v %v", ctx, dp1)
	return
}

// DeleteRowsAfterCounter returns a count of finished AgentPublicServiceServerMock.DeleteRows invocations
func (mmDeleteRows *AgentPublicServiceServerMock) DeleteRowsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteRows.afterDeleteRowsCounter)
}

// DeleteRowsBeforeCounter returns a count of AgentPublicServiceServerMock.DeleteRows invocations
func (mmDeleteRows *AgentPublicServiceServerMock) DeleteRowsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteRows.beforeDeleteRowsCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.DeleteRows.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteRows *mAgentPublicServiceServerMockDeleteRows) Calls() []*AgentPublicServiceServerMockDeleteRowsParams {
	mmDeleteRows.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockDeleteRowsParams, len(mmDeleteRows.callArgs))
	copy(argCopy, mmDeleteRows.callArgs)

	mmDeleteRows.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteRowsDone returns true if the count of the DeleteRows invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockDeleteRowsDone() bool {
	if m.DeleteRowsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteRowsMock.invocationsDone()
}

// MinimockDeleteRowsInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockDeleteRowsInspect() {
	for _, e := range m.DeleteRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteRows at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteRowsCounter := mm_atomic.LoadUint64(&m.afterDeleteRowsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteRowsMock.defaultExpectation != nil && afterDeleteRowsCounter < 1 {
		if m.DeleteRowsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteRows at\n%s", m.DeleteRowsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteRows at\n%s with params: %#v", m.DeleteRowsMock.defaultExpectation.expectationOrigins.origin, *m.DeleteRowsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteRows != nil && afterDeleteRowsCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteRows at\n%s", m.funcDeleteRowsOrigin)
	}

	if !m.DeleteRowsMock.invocationsDone() && afterDeleteRowsCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.DeleteRows at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteRowsMock.expectedInvocations), m.DeleteRowsMock.expectedInvocationsOrigin, afterDeleteRowsCounter)
	}
}

type mAgentPublicServiceServerMockDeleteTable struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockDeleteTableExpectation
	expectations       []*AgentPublicServiceServerMockDeleteTableExpectation

	callArgs []*AgentPublicServiceServerMockDeleteTableParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockDeleteTableExpectation specifies expectation struct of the AgentPublicServiceServer.DeleteTable
type AgentPublicServiceServerMockDeleteTableExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockDeleteTableParams
	paramPtrs          *AgentPublicServiceServerMockDeleteTableParamPtrs
	expectationOrigins AgentPublicServiceServerMockDeleteTableExpectationOrigins
	results            *AgentPublicServiceServerMockDeleteTableResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockDeleteTableParams contains parameters of the AgentPublicServiceServer.DeleteTable
type AgentPublicServiceServerMockDeleteTableParams struct {
	ctx context.Context
	dp1 *mm_agentv1alpha.DeleteTableRequest
}

// AgentPublicServiceServerMockDeleteTableParamPtrs contains pointers to parameters of the AgentPublicServiceServer.DeleteTable
type AgentPublicServiceServerMockDeleteTableParamPtrs struct {
	ctx *context.Context
	dp1 **mm_agentv1alpha.DeleteTableRequest
}

// AgentPublicServiceServerMockDeleteTableResults contains results of the AgentPublicServiceServer.DeleteTable
type AgentPublicServiceServerMockDeleteTableResults struct {
	dp2 *mm_agentv1alpha.DeleteTableResponse
	err error
}

// AgentPublicServiceServerMockDeleteTableOrigins contains origins of expectations of the AgentPublicServiceServer.DeleteTable
type AgentPublicServiceServerMockDeleteTableExpectationOrigins struct {
	origin    string
	originCtx string
	originDp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteTable *mAgentPublicServiceServerMockDeleteTable) Optional() *mAgentPublicServiceServerMockDeleteTable {
	mmDeleteTable.optional = true
	return mmDeleteTable
}

// Expect sets up expected params for AgentPublicServiceServer.DeleteTable
func (mmDeleteTable *mAgentPublicServiceServerMockDeleteTable) Expect(ctx context.Context, dp1 *mm_agentv1alpha.DeleteTableRequest) *mAgentPublicServiceServerMockDeleteTable {
	if mmDeleteTable.mock.funcDeleteTable != nil {
		mmDeleteTable.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteTable mock is already set by Set")
	}

	if mmDeleteTable.defaultExpectation == nil {
		mmDeleteTable.defaultExpectation = &AgentPublicServiceServerMockDeleteTableExpectation{}
	}

	if mmDeleteTable.defaultExpectation.paramPtrs != nil {
		mmDeleteTable.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteTable mock is already set by ExpectParams functions")
	}

	mmDeleteTable.defaultExpectation.params = &AgentPublicServiceServerMockDeleteTableParams{ctx, dp1}
	mmDeleteTable.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteTable.expectations {
		if minimock.Equal(e.params, mmDeleteTable.defaultExpectation.params) {
			mmDeleteTable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteTable.defaultExpectation.params)
		}
	}

	return mmDeleteTable
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.DeleteTable
func (mmDeleteTable *mAgentPublicServiceServerMockDeleteTable) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockDeleteTable {
	if mmDeleteTable.mock.funcDeleteTable != nil {
		mmDeleteTable.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteTable mock is already set by Set")
	}

	if mmDeleteTable.defaultExpectation == nil {
		mmDeleteTable.defaultExpectation = &AgentPublicServiceServerMockDeleteTableExpectation{}
	}

	if mmDeleteTable.defaultExpectation.params != nil {
		mmDeleteTable.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteTable mock is already set by Expect")
	}

	if mmDeleteTable.defaultExpectation.paramPtrs == nil {
		mmDeleteTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockDeleteTableParamPtrs{}
	}
	mmDeleteTable.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteTable.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteTable
}

// ExpectDp1Param2 sets up expected param dp1 for AgentPublicServiceServer.DeleteTable
func (mmDeleteTable *mAgentPublicServiceServerMockDeleteTable) ExpectDp1Param2(dp1 *mm_agentv1alpha.DeleteTableRequest) *mAgentPublicServiceServerMockDeleteTable {
	if mmDeleteTable.mock.funcDeleteTable != nil {
		mmDeleteTable.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteTable mock is already set by Set")
	}

	if mmDeleteTable.defaultExpectation == nil {
		mmDeleteTable.defaultExpectation = &AgentPublicServiceServerMockDeleteTableExpectation{}
	}

	if mmDeleteTable.defaultExpectation.params != nil {
		mmDeleteTable.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteTable mock is already set by Expect")
	}

	if mmDeleteTable.defaultExpectation.paramPtrs == nil {
		mmDeleteTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockDeleteTableParamPtrs{}
	}
	mmDeleteTable.defaultExpectation.paramPtrs.dp1 = &dp1
	mmDeleteTable.defaultExpectation.expectationOrigins.originDp1 = minimock.CallerInfo(1)

	return mmDeleteTable
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.DeleteTable
func (mmDeleteTable *mAgentPublicServiceServerMockDeleteTable) Inspect(f func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteTableRequest)) *mAgentPublicServiceServerMockDeleteTable {
	if mmDeleteTable.mock.inspectFuncDeleteTable != nil {
		mmDeleteTable.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.DeleteTable")
	}

	mmDeleteTable.mock.inspectFuncDeleteTable = f

	return mmDeleteTable
}

// Return sets up results that will be returned by AgentPublicServiceServer.DeleteTable
func (mmDeleteTable *mAgentPublicServiceServerMockDeleteTable) Return(dp2 *mm_agentv1alpha.DeleteTableResponse, err error) *AgentPublicServiceServerMock {
	if mmDeleteTable.mock.funcDeleteTable != nil {
		mmDeleteTable.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteTable mock is already set by Set")
	}

	if mmDeleteTable.defaultExpectation == nil {
		mmDeleteTable.defaultExpectation = &AgentPublicServiceServerMockDeleteTableExpectation{mock: mmDeleteTable.mock}
	}
	mmDeleteTable.defaultExpectation.results = &AgentPublicServiceServerMockDeleteTableResults{dp2, err}
	mmDeleteTable.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteTable.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.DeleteTable method
func (mmDeleteTable *mAgentPublicServiceServerMockDeleteTable) Set(f func(ctx context.Context, dp1 *mm_agentv1alpha.DeleteTableRequest) (dp2 *mm_agentv1alpha.DeleteTableResponse, err error)) *AgentPublicServiceServerMock {
	if mmDeleteTable.defaultExpectation != nil {
		mmDeleteTable.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.DeleteTable method")
	}

	if len(mmDeleteTable.expectations) > 0 {
		mmDeleteTable.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.DeleteTable method")
	}

	mmDeleteTable.mock.funcDeleteTable = f
	mmDeleteTable.mock.funcDeleteTableOrigin = minimock.CallerInfo(1)
	return mmDeleteTable.mock
}

// When sets expectation for the AgentPublicServiceServer.DeleteTable which will trigger the result defined by the following
// Then helper
func (mmDeleteTable *mAgentPublicServiceServerMockDeleteTable) When(ctx context.Context, dp1 *mm_agentv1alpha.DeleteTableRequest) *AgentPublicServiceServerMockDeleteTableExpectation {
	if mmDeleteTable.mock.funcDeleteTable != nil {
		mmDeleteTable.mock.t.Fatalf("AgentPublicServiceServerMock.DeleteTable mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockDeleteTableExpectation{
		mock:               mmDeleteTable.mock,
		params:             &AgentPublicServiceServerMockDeleteTableParams{ctx, dp1},
		expectationOrigins: AgentPublicServiceServerMockDeleteTableExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteTable.expectations = append(mmDeleteTable.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.DeleteTable return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockDeleteTableExpectation) Then(dp2 *mm_agentv1alpha.DeleteTableResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockDeleteTableResults{dp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.DeleteTable should be invoked
func (mmDeleteTable *mAgentPublicServiceServerMockDeleteTable) Times(n uint64) *mAgentPublicServiceServerMockDeleteTable {
	if n == 0 {
		mmDeleteTable.mock.t.Fatalf("Times of AgentPublicServiceServerMock.DeleteTable mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteTable.expectedInvocations, n)
	mmDeleteTable.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteTable
}

func (mmDeleteTable *mAgentPublicServiceServerMockDeleteTable) invocationsDone() bool {
	if len(mmDeleteTable.expectations) == 0 && mmDeleteTable.defaultExpectation == nil && mmDeleteTable.mock.funcDeleteTable == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteTable.mock.afterDeleteTableCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteTable.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteTable implements mm_agentv1alpha.AgentPublicServiceServer
func (mmDeleteTable *AgentPublicServiceServerMock) DeleteTable(ctx context.Context, dp1 *mm_agentv1alpha.DeleteTableRequest) (dp2 *mm_agentv1alpha.DeleteTableResponse, err error) {
	mm_atomic.AddUint64(&mmDeleteTable.beforeDeleteTableCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteTable.afterDeleteTableCounter, 1)

	mmDeleteTable.t.Helper()

	if mmDeleteTable.inspectFuncDeleteTable != nil {
		mmDeleteTable.inspectFuncDeleteTable(ctx, dp1)
	}

	mm_params := AgentPublicServiceServerMockDeleteTableParams{ctx, dp1}

	// Record call args
	mmDeleteTable.DeleteTableMock.mutex.Lock()
	mmDeleteTable.DeleteTableMock.callArgs = append(mmDeleteTable.DeleteTableMock.callArgs, &mm_params)
	mmDeleteTable.DeleteTableMock.mutex.Unlock()

	for _, e := range mmDeleteTable.DeleteTableMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp2, e.results.err
		}
	}

	if mmDeleteTable.DeleteTableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteTable.DeleteTableMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteTable.DeleteTableMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteTable.DeleteTableMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockDeleteTableParams{ctx, dp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteTable.t.Errorf("AgentPublicServiceServerMock.DeleteTable got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteTable.DeleteTableMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.dp1 != nil && !minimock.Equal(*mm_want_ptrs.dp1, mm_got.dp1) {
				mmDeleteTable.t.Errorf("AgentPublicServiceServerMock.DeleteTable got unexpected parameter dp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteTable.DeleteTableMock.defaultExpectation.expectationOrigins.originDp1, *mm_want_ptrs.dp1, mm_got.dp1, minimock.Diff(*mm_want_ptrs.dp1, mm_got.dp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteTable.t.Errorf("AgentPublicServiceServerMock.DeleteTable got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteTable.DeleteTableMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteTable.DeleteTableMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteTable.t.Fatal("No results are set for the AgentPublicServiceServerMock.DeleteTable")
		}
		return (*mm_results).dp2, (*mm_results).err
	}
	if mmDeleteTable.funcDeleteTable != nil {
		return mmDeleteTable.funcDeleteTable(ctx, dp1)
	}
	mmDeleteTable.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.DeleteTable. %v %v", ctx, dp1)
	return
}

// DeleteTableAfterCounter returns a count of finished AgentPublicServiceServerMock.DeleteTable invocations
func (mmDeleteTable *AgentPublicServiceServerMock) DeleteTableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteTable.afterDeleteTableCounter)
}

// DeleteTableBeforeCounter returns a count of AgentPublicServiceServerMock.DeleteTable invocations
func (mmDeleteTable *AgentPublicServiceServerMock) DeleteTableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteTable.beforeDeleteTableCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.DeleteTable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteTable *mAgentPublicServiceServerMockDeleteTable) Calls() []*AgentPublicServiceServerMockDeleteTableParams {
	mmDeleteTable.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockDeleteTableParams, len(mmDeleteTable.callArgs))
	copy(argCopy, mmDeleteTable.callArgs)

	mmDeleteTable.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteTableDone returns true if the count of the DeleteTable invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockDeleteTableDone() bool {
	if m.DeleteTableMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteTableMock.invocationsDone()
}

// MinimockDeleteTableInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockDeleteTableInspect() {
	for _, e := range m.DeleteTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteTable at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteTableCounter := mm_atomic.LoadUint64(&m.afterDeleteTableCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteTableMock.defaultExpectation != nil && afterDeleteTableCounter < 1 {
		if m.DeleteTableMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteTable at\n%s", m.DeleteTableMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteTable at\n%s with params: %#v", m.DeleteTableMock.defaultExpectation.expectationOrigins.origin, *m.DeleteTableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteTable != nil && afterDeleteTableCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.DeleteTable at\n%s", m.funcDeleteTableOrigin)
	}

	if !m.DeleteTableMock.invocationsDone() && afterDeleteTableCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.DeleteTable at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteTableMock.expectedInvocations), m.DeleteTableMock.expectedInvocationsOrigin, afterDeleteTableCounter)
	}
}

type mAgentPublicServiceServerMockExportTable struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockExportTableExpectation
	expectations       []*AgentPublicServiceServerMockExportTableExpectation

	callArgs []*AgentPublicServiceServerMockExportTableParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockExportTableExpectation specifies expectation struct of the AgentPublicServiceServer.ExportTable
type AgentPublicServiceServerMockExportTableExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockExportTableParams
	paramPtrs          *AgentPublicServiceServerMockExportTableParamPtrs
	expectationOrigins AgentPublicServiceServerMockExportTableExpectationOrigins
	results            *AgentPublicServiceServerMockExportTableResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockExportTableParams contains parameters of the AgentPublicServiceServer.ExportTable
type AgentPublicServiceServerMockExportTableParams struct {
	ctx context.Context
	ep1 *mm_agentv1alpha.ExportTableRequest
}

// AgentPublicServiceServerMockExportTableParamPtrs contains pointers to parameters of the AgentPublicServiceServer.ExportTable
type AgentPublicServiceServerMockExportTableParamPtrs struct {
	ctx *context.Context
	ep1 **mm_agentv1alpha.ExportTableRequest
}

// AgentPublicServiceServerMockExportTableResults contains results of the AgentPublicServiceServer.ExportTable
type AgentPublicServiceServerMockExportTableResults struct {
	ep2 *mm_agentv1alpha.ExportTableResponse
	err error
}

// AgentPublicServiceServerMockExportTableOrigins contains origins of expectations of the AgentPublicServiceServer.ExportTable
type AgentPublicServiceServerMockExportTableExpectationOrigins struct {
	origin    string
	originCtx string
	originEp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmExportTable *mAgentPublicServiceServerMockExportTable) Optional() *mAgentPublicServiceServerMockExportTable {
	mmExportTable.optional = true
	return mmExportTable
}

// Expect sets up expected params for AgentPublicServiceServer.ExportTable
func (mmExportTable *mAgentPublicServiceServerMockExportTable) Expect(ctx context.Context, ep1 *mm_agentv1alpha.ExportTableRequest) *mAgentPublicServiceServerMockExportTable {
	if mmExportTable.mock.funcExportTable != nil {
		mmExportTable.mock.t.Fatalf("AgentPublicServiceServerMock.ExportTable mock is already set by Set")
	}

	if mmExportTable.defaultExpectation == nil {
		mmExportTable.defaultExpectation = &AgentPublicServiceServerMockExportTableExpectation{}
	}

	if mmExportTable.defaultExpectation.paramPtrs != nil {
		mmExportTable.mock.t.Fatalf("AgentPublicServiceServerMock.ExportTable mock is already set by ExpectParams functions")
	}

	mmExportTable.defaultExpectation.params = &AgentPublicServiceServerMockExportTableParams{ctx, ep1}
	mmExportTable.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmExportTable.expectations {
		if minimock.Equal(e.params, mmExportTable.defaultExpectation.params) {
			mmExportTable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmExportTable.defaultExpectation.params)
		}
	}

	return mmExportTable
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.ExportTable
func (mmExportTable *mAgentPublicServiceServerMockExportTable) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockExportTable {
	if mmExportTable.mock.funcExportTable != nil {
		mmExportTable.mock.t.Fatalf("AgentPublicServiceServerMock.ExportTable mock is already set by Set")
	}

	if mmExportTable.defaultExpectation == nil {
		mmExportTable.defaultExpectation = &AgentPublicServiceServerMockExportTableExpectation{}
	}

	if mmExportTable.defaultExpectation.params != nil {
		mmExportTable.mock.t.Fatalf("AgentPublicServiceServerMock.ExportTable mock is already set by Expect")
	}

	if mmExportTable.defaultExpectation.paramPtrs == nil {
		mmExportTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockExportTableParamPtrs{}
	}
	mmExportTable.defaultExpectation.paramPtrs.ctx = &ctx
	mmExportTable.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmExportTable
}

// ExpectEp1Param2 sets up expected param ep1 for AgentPublicServiceServer.ExportTable
func (mmExportTable *mAgentPublicServiceServerMockExportTable) ExpectEp1Param2(ep1 *mm_agentv1alpha.ExportTableRequest) *mAgentPublicServiceServerMockExportTable {
	if mmExportTable.mock.funcExportTable != nil {
		mmExportTable.mock.t.Fatalf("AgentPublicServiceServerMock.ExportTable mock is already set by Set")
	}

	if mmExportTable.defaultExpectation == nil {
		mmExportTable.defaultExpectation = &AgentPublicServiceServerMockExportTableExpectation{}
	}

	if mmExportTable.defaultExpectation.params != nil {
		mmExportTable.mock.t.Fatalf("AgentPublicServiceServerMock.ExportTable mock is already set by Expect")
	}

	if mmExportTable.defaultExpectation.paramPtrs == nil {
		mmExportTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockExportTableParamPtrs{}
	}
	mmExportTable.defaultExpectation.paramPtrs.ep1 = &ep1
	mmExportTable.defaultExpectation.expectationOrigins.originEp1 = minimock.CallerInfo(1)

	return mmExportTable
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.ExportTable
func (mmExportTable *mAgentPublicServiceServerMockExportTable) Inspect(f func(ctx context.Context, ep1 *mm_agentv1alpha.ExportTableRequest)) *mAgentPublicServiceServerMockExportTable {
	if mmExportTable.mock.inspectFuncExportTable != nil {
		mmExportTable.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.ExportTable")
	}

	mmExportTable.mock.inspectFuncExportTable = f

	return mmExportTable
}

// Return sets up results that will be returned by AgentPublicServiceServer.ExportTable
func (mmExportTable *mAgentPublicServiceServerMockExportTable) Return(ep2 *mm_agentv1alpha.ExportTableResponse, err error) *AgentPublicServiceServerMock {
	if mmExportTable.mock.funcExportTable != nil {
		mmExportTable.mock.t.Fatalf("AgentPublicServiceServerMock.ExportTable mock is already set by Set")
	}

	if mmExportTable.defaultExpectation == nil {
		mmExportTable.defaultExpectation = &AgentPublicServiceServerMockExportTableExpectation{mock: mmExportTable.mock}
	}
	mmExportTable.defaultExpectation.results = &AgentPublicServiceServerMockExportTableResults{ep2, err}
	mmExportTable.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmExportTable.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.ExportTable method
func (mmExportTable *mAgentPublicServiceServerMockExportTable) Set(f func(ctx context.Context, ep1 *mm_agentv1alpha.ExportTableRequest) (ep2 *mm_agentv1alpha.ExportTableResponse, err error)) *AgentPublicServiceServerMock {
	if mmExportTable.defaultExpectation != nil {
		mmExportTable.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.ExportTable method")
	}

	if len(mmExportTable.expectations) > 0 {
		mmExportTable.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.ExportTable method")
	}

	mmExportTable.mock.funcExportTable = f
	mmExportTable.mock.funcExportTableOrigin = minimock.CallerInfo(1)
	return mmExportTable.mock
}

// When sets expectation for the AgentPublicServiceServer.ExportTable which will trigger the result defined by the following
// Then helper
func (mmExportTable *mAgentPublicServiceServerMockExportTable) When(ctx context.Context, ep1 *mm_agentv1alpha.ExportTableRequest) *AgentPublicServiceServerMockExportTableExpectation {
	if mmExportTable.mock.funcExportTable != nil {
		mmExportTable.mock.t.Fatalf("AgentPublicServiceServerMock.ExportTable mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockExportTableExpectation{
		mock:               mmExportTable.mock,
		params:             &AgentPublicServiceServerMockExportTableParams{ctx, ep1},
		expectationOrigins: AgentPublicServiceServerMockExportTableExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmExportTable.expectations = append(mmExportTable.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.ExportTable return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockExportTableExpectation) Then(ep2 *mm_agentv1alpha.ExportTableResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockExportTableResults{ep2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.ExportTable should be invoked
func (mmExportTable *mAgentPublicServiceServerMockExportTable) Times(n uint64) *mAgentPublicServiceServerMockExportTable {
	if n == 0 {
		mmExportTable.mock.t.Fatalf("Times of AgentPublicServiceServerMock.ExportTable mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmExportTable.expectedInvocations, n)
	mmExportTable.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmExportTable
}

func (mmExportTable *mAgentPublicServiceServerMockExportTable) invocationsDone() bool {
	if len(mmExportTable.expectations) == 0 && mmExportTable.defaultExpectation == nil && mmExportTable.mock.funcExportTable == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmExportTable.mock.afterExportTableCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmExportTable.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ExportTable implements mm_agentv1alpha.AgentPublicServiceServer
func (mmExportTable *AgentPublicServiceServerMock) ExportTable(ctx context.Context, ep1 *mm_agentv1alpha.ExportTableRequest) (ep2 *mm_agentv1alpha.ExportTableResponse, err error) {
	mm_atomic.AddUint64(&mmExportTable.beforeExportTableCounter, 1)
	defer mm_atomic.AddUint64(&mmExportTable.afterExportTableCounter, 1)

	mmExportTable.t.Helper()

	if mmExportTable.inspectFuncExportTable != nil {
		mmExportTable.inspectFuncExportTable(ctx, ep1)
	}

	mm_params := AgentPublicServiceServerMockExportTableParams{ctx, ep1}

	// Record call args
	mmExportTable.ExportTableMock.mutex.Lock()
	mmExportTable.ExportTableMock.callArgs = append(mmExportTable.ExportTableMock.callArgs, &mm_params)
	mmExportTable.ExportTableMock.mutex.Unlock()

	for _, e := range mmExportTable.ExportTableMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep2, e.results.err
		}
	}

	if mmExportTable.ExportTableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmExportTable.ExportTableMock.defaultExpectation.Counter, 1)
		mm_want := mmExportTable.ExportTableMock.defaultExpectation.params
		mm_want_ptrs := mmExportTable.ExportTableMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockExportTableParams{ctx, ep1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmExportTable.t.Errorf("AgentPublicServiceServerMock.ExportTable got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmExportTable.ExportTableMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.ep1 != nil && !minimock.Equal(*mm_want_ptrs.ep1, mm_got.ep1) {
				mmExportTable.t.Errorf("AgentPublicServiceServerMock.ExportTable got unexpected parameter ep1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmExportTable.ExportTableMock.defaultExpectation.expectationOrigins.originEp1, *mm_want_ptrs.ep1, mm_got.ep1, minimock.Diff(*mm_want_ptrs.ep1, mm_got.ep1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmExportTable.t.Errorf("AgentPublicServiceServerMock.ExportTable got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmExportTable.ExportTableMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmExportTable.ExportTableMock.defaultExpectation.results
		if mm_results == nil {
			mmExportTable.t.Fatal("No results are set for the AgentPublicServiceServerMock.ExportTable")
		}
		return (*mm_results).ep2, (*mm_results).err
	}
	if mmExportTable.funcExportTable != nil {
		return mmExportTable.funcExportTable(ctx, ep1)
	}
	mmExportTable.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.ExportTable. %v %v", ctx, ep1)
	return
}

// ExportTableAfterCounter returns a count of finished AgentPublicServiceServerMock.ExportTable invocations
func (mmExportTable *AgentPublicServiceServerMock) ExportTableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExportTable.afterExportTableCounter)
}

// ExportTableBeforeCounter returns a count of AgentPublicServiceServerMock.ExportTable invocations
func (mmExportTable *AgentPublicServiceServerMock) ExportTableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExportTable.beforeExportTableCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.ExportTable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmExportTable *mAgentPublicServiceServerMockExportTable) Calls() []*AgentPublicServiceServerMockExportTableParams {
	mmExportTable.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockExportTableParams, len(mmExportTable.callArgs))
	copy(argCopy, mmExportTable.callArgs)

	mmExportTable.mutex.RUnlock()

	return argCopy
}

// MinimockExportTableDone returns true if the count of the ExportTable invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockExportTableDone() bool {
	if m.ExportTableMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ExportTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ExportTableMock.invocationsDone()
}

// MinimockExportTableInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockExportTableInspect() {
	for _, e := range m.ExportTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ExportTable at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterExportTableCounter := mm_atomic.LoadUint64(&m.afterExportTableCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ExportTableMock.defaultExpectation != nil && afterExportTableCounter < 1 {
		if m.ExportTableMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ExportTable at\n%s", m.ExportTableMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ExportTable at\n%s with params: %#v", m.ExportTableMock.defaultExpectation.expectationOrigins.origin, *m.ExportTableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExportTable != nil && afterExportTableCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.ExportTable at\n%s", m.funcExportTableOrigin)
	}

	if !m.ExportTableMock.invocationsDone() && afterExportTableCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.ExportTable at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ExportTableMock.expectedInvocations), m.ExportTableMock.expectedInvocationsOrigin, afterExportTableCounter)
	}
}

type mAgentPublicServiceServerMockGenerateMockTable struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockGenerateMockTableExpectation
	expectations       []*AgentPublicServiceServerMockGenerateMockTableExpectation

	callArgs []*AgentPublicServiceServerMockGenerateMockTableParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockGenerateMockTableExpectation specifies expectation struct of the AgentPublicServiceServer.GenerateMockTable
type AgentPublicServiceServerMockGenerateMockTableExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockGenerateMockTableParams
	paramPtrs          *AgentPublicServiceServerMockGenerateMockTableParamPtrs
	expectationOrigins AgentPublicServiceServerMockGenerateMockTableExpectationOrigins
	results            *AgentPublicServiceServerMockGenerateMockTableResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockGenerateMockTableParams contains parameters of the AgentPublicServiceServer.GenerateMockTable
type AgentPublicServiceServerMockGenerateMockTableParams struct {
	ctx context.Context
	gp1 *mm_agentv1alpha.GenerateMockTableRequest
}

// AgentPublicServiceServerMockGenerateMockTableParamPtrs contains pointers to parameters of the AgentPublicServiceServer.GenerateMockTable
type AgentPublicServiceServerMockGenerateMockTableParamPtrs struct {
	ctx *context.Context
	gp1 **mm_agentv1alpha.GenerateMockTableRequest
}

// AgentPublicServiceServerMockGenerateMockTableResults contains results of the AgentPublicServiceServer.GenerateMockTable
type AgentPublicServiceServerMockGenerateMockTableResults struct {
	gp2 *mm_agentv1alpha.GenerateMockTableResponse
	err error
}

// AgentPublicServiceServerMockGenerateMockTableOrigins contains origins of expectations of the AgentPublicServiceServer.GenerateMockTable
type AgentPublicServiceServerMockGenerateMockTableExpectationOrigins struct {
	origin    string
	originCtx string
	originGp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGenerateMockTable *mAgentPublicServiceServerMockGenerateMockTable) Optional() *mAgentPublicServiceServerMockGenerateMockTable {
	mmGenerateMockTable.optional = true
	return mmGenerateMockTable
}

// Expect sets up expected params for AgentPublicServiceServer.GenerateMockTable
func (mmGenerateMockTable *mAgentPublicServiceServerMockGenerateMockTable) Expect(ctx context.Context, gp1 *mm_agentv1alpha.GenerateMockTableRequest) *mAgentPublicServiceServerMockGenerateMockTable {
	if mmGenerateMockTable.mock.funcGenerateMockTable != nil {
		mmGenerateMockTable.mock.t.Fatalf("AgentPublicServiceServerMock.GenerateMockTable mock is already set by Set")
	}

	if mmGenerateMockTable.defaultExpectation == nil {
		mmGenerateMockTable.defaultExpectation = &AgentPublicServiceServerMockGenerateMockTableExpectation{}
	}

	if mmGenerateMockTable.defaultExpectation.paramPtrs != nil {
		mmGenerateMockTable.mock.t.Fatalf("AgentPublicServiceServerMock.GenerateMockTable mock is already set by ExpectParams functions")
	}

	mmGenerateMockTable.defaultExpectation.params = &AgentPublicServiceServerMockGenerateMockTableParams{ctx, gp1}
	mmGenerateMockTable.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGenerateMockTable.expectations {
		if minimock.Equal(e.params, mmGenerateMockTable.defaultExpectation.params) {
			mmGenerateMockTable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGenerateMockTable.defaultExpectation.params)
		}
	}

	return mmGenerateMockTable
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.GenerateMockTable
func (mmGenerateMockTable *mAgentPublicServiceServerMockGenerateMockTable) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockGenerateMockTable {
	if mmGenerateMockTable.mock.funcGenerateMockTable != nil {
		mmGenerateMockTable.mock.t.Fatalf("AgentPublicServiceServerMock.GenerateMockTable mock is already set by Set")
	}

	if mmGenerateMockTable.defaultExpectation == nil {
		mmGenerateMockTable.defaultExpectation = &AgentPublicServiceServerMockGenerateMockTableExpectation{}
	}

	if mmGenerateMockTable.defaultExpectation.params != nil {
		mmGenerateMockTable.mock.t.Fatalf("AgentPublicServiceServerMock.GenerateMockTable mock is already set by Expect")
	}

	if mmGenerateMockTable.defaultExpectation.paramPtrs == nil {
		mmGenerateMockTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockGenerateMockTableParamPtrs{}
	}
	mmGenerateMockTable.defaultExpectation.paramPtrs.ctx = &ctx
	mmGenerateMockTable.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGenerateMockTable
}

// ExpectGp1Param2 sets up expected param gp1 for AgentPublicServiceServer.GenerateMockTable
func (mmGenerateMockTable *mAgentPublicServiceServerMockGenerateMockTable) ExpectGp1Param2(gp1 *mm_agentv1alpha.GenerateMockTableRequest) *mAgentPublicServiceServerMockGenerateMockTable {
	if mmGenerateMockTable.mock.funcGenerateMockTable != nil {
		mmGenerateMockTable.mock.t.Fatalf("AgentPublicServiceServerMock.GenerateMockTable mock is already set by Set")
	}

	if mmGenerateMockTable.defaultExpectation == nil {
		mmGenerateMockTable.defaultExpectation = &AgentPublicServiceServerMockGenerateMockTableExpectation{}
	}

	if mmGenerateMockTable.defaultExpectation.params != nil {
		mmGenerateMockTable.mock.t.Fatalf("AgentPublicServiceServerMock.GenerateMockTable mock is already set by Expect")
	}

	if mmGenerateMockTable.defaultExpectation.paramPtrs == nil {
		mmGenerateMockTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockGenerateMockTableParamPtrs{}
	}
	mmGenerateMockTable.defaultExpectation.paramPtrs.gp1 = &gp1
	mmGenerateMockTable.defaultExpectation.expectationOrigins.originGp1 = minimock.CallerInfo(1)

	return mmGenerateMockTable
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.GenerateMockTable
func (mmGenerateMockTable *mAgentPublicServiceServerMockGenerateMockTable) Inspect(f func(ctx context.Context, gp1 *mm_agentv1alpha.GenerateMockTableRequest)) *mAgentPublicServiceServerMockGenerateMockTable {
	if mmGenerateMockTable.mock.inspectFuncGenerateMockTable != nil {
		mmGenerateMockTable.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.GenerateMockTable")
	}

	mmGenerateMockTable.mock.inspectFuncGenerateMockTable = f

	return mmGenerateMockTable
}

// Return sets up results that will be returned by AgentPublicServiceServer.GenerateMockTable
func (mmGenerateMockTable *mAgentPublicServiceServerMockGenerateMockTable) Return(gp2 *mm_agentv1alpha.GenerateMockTableResponse, err error) *AgentPublicServiceServerMock {
	if mmGenerateMockTable.mock.funcGenerateMockTable != nil {
		mmGenerateMockTable.mock.t.Fatalf("AgentPublicServiceServerMock.GenerateMockTable mock is already set by Set")
	}

	if mmGenerateMockTable.defaultExpectation == nil {
		mmGenerateMockTable.defaultExpectation = &AgentPublicServiceServerMockGenerateMockTableExpectation{mock: mmGenerateMockTable.mock}
	}
	mmGenerateMockTable.defaultExpectation.results = &AgentPublicServiceServerMockGenerateMockTableResults{gp2, err}
	mmGenerateMockTable.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGenerateMockTable.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.GenerateMockTable method
func (mmGenerateMockTable *mAgentPublicServiceServerMockGenerateMockTable) Set(f func(ctx context.Context, gp1 *mm_agentv1alpha.GenerateMockTableRequest) (gp2 *mm_agentv1alpha.GenerateMockTableResponse, err error)) *AgentPublicServiceServerMock {
	if mmGenerateMockTable.defaultExpectation != nil {
		mmGenerateMockTable.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.GenerateMockTable method")
	}

	if len(mmGenerateMockTable.expectations) > 0 {
		mmGenerateMockTable.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.GenerateMockTable method")
	}

	mmGenerateMockTable.mock.funcGenerateMockTable = f
	mmGenerateMockTable.mock.funcGenerateMockTableOrigin = minimock.CallerInfo(1)
	return mmGenerateMockTable.mock
}

// When sets expectation for the AgentPublicServiceServer.GenerateMockTable which will trigger the result defined by the following
// Then helper
func (mmGenerateMockTable *mAgentPublicServiceServerMockGenerateMockTable) When(ctx context.Context, gp1 *mm_agentv1alpha.GenerateMockTableRequest) *AgentPublicServiceServerMockGenerateMockTableExpectation {
	if mmGenerateMockTable.mock.funcGenerateMockTable != nil {
		mmGenerateMockTable.mock.t.Fatalf("AgentPublicServiceServerMock.GenerateMockTable mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockGenerateMockTableExpectation{
		mock:               mmGenerateMockTable.mock,
		params:             &AgentPublicServiceServerMockGenerateMockTableParams{ctx, gp1},
		expectationOrigins: AgentPublicServiceServerMockGenerateMockTableExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGenerateMockTable.expectations = append(mmGenerateMockTable.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.GenerateMockTable return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockGenerateMockTableExpectation) Then(gp2 *mm_agentv1alpha.GenerateMockTableResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockGenerateMockTableResults{gp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.GenerateMockTable should be invoked
func (mmGenerateMockTable *mAgentPublicServiceServerMockGenerateMockTable) Times(n uint64) *mAgentPublicServiceServerMockGenerateMockTable {
	if n == 0 {
		mmGenerateMockTable.mock.t.Fatalf("Times of AgentPublicServiceServerMock.GenerateMockTable mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGenerateMockTable.expectedInvocations, n)
	mmGenerateMockTable.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGenerateMockTable
}

func (mmGenerateMockTable *mAgentPublicServiceServerMockGenerateMockTable) invocationsDone() bool {
	if len(mmGenerateMockTable.expectations) == 0 && mmGenerateMockTable.defaultExpectation == nil && mmGenerateMockTable.mock.funcGenerateMockTable == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGenerateMockTable.mock.afterGenerateMockTableCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGenerateMockTable.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GenerateMockTable implements mm_agentv1alpha.AgentPublicServiceServer
func (mmGenerateMockTable *AgentPublicServiceServerMock) GenerateMockTable(ctx context.Context, gp1 *mm_agentv1alpha.GenerateMockTableRequest) (gp2 *mm_agentv1alpha.GenerateMockTableResponse, err error) {
	mm_atomic.AddUint64(&mmGenerateMockTable.beforeGenerateMockTableCounter, 1)
	defer mm_atomic.AddUint64(&mmGenerateMockTable.afterGenerateMockTableCounter, 1)

	mmGenerateMockTable.t.Helper()

	if mmGenerateMockTable.inspectFuncGenerateMockTable != nil {
		mmGenerateMockTable.inspectFuncGenerateMockTable(ctx, gp1)
	}

	mm_params := AgentPublicServiceServerMockGenerateMockTableParams{ctx, gp1}

	// Record call args
	mmGenerateMockTable.GenerateMockTableMock.mutex.Lock()
	mmGenerateMockTable.GenerateMockTableMock.callArgs = append(mmGenerateMockTable.GenerateMockTableMock.callArgs, &mm_params)
	mmGenerateMockTable.GenerateMockTableMock.mutex.Unlock()

	for _, e := range mmGenerateMockTable.GenerateMockTableMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp2, e.results.err
		}
	}

	if mmGenerateMockTable.GenerateMockTableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGenerateMockTable.GenerateMockTableMock.defaultExpectation.Counter, 1)
		mm_want := mmGenerateMockTable.GenerateMockTableMock.defaultExpectation.params
		mm_want_ptrs := mmGenerateMockTable.GenerateMockTableMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockGenerateMockTableParams{ctx, gp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGenerateMockTable.t.Errorf("AgentPublicServiceServerMock.GenerateMockTable got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerateMockTable.GenerateMockTableMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.gp1 != nil && !minimock.Equal(*mm_want_ptrs.gp1, mm_got.gp1) {
				mmGenerateMockTable.t.Errorf("AgentPublicServiceServerMock.GenerateMockTable got unexpected parameter gp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerateMockTable.GenerateMockTableMock.defaultExpectation.expectationOrigins.originGp1, *mm_want_ptrs.gp1, mm_got.gp1, minimock.Diff(*mm_want_ptrs.gp1, mm_got.gp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGenerateMockTable.t.Errorf("AgentPublicServiceServerMock.GenerateMockTable got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGenerateMockTable.GenerateMockTableMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGenerateMockTable.GenerateMockTableMock.defaultExpectation.results
		if mm_results == nil {
			mmGenerateMockTable.t.Fatal("No results are set for the AgentPublicServiceServerMock.GenerateMockTable")
		}
		return (*mm_results).gp2, (*mm_results).err
	}
	if mmGenerateMockTable.funcGenerateMockTable != nil {
		return mmGenerateMockTable.funcGenerateMockTable(ctx, gp1)
	}
	mmGenerateMockTable.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.GenerateMockTable. %v %v", ctx, gp1)
	return
}

// GenerateMockTableAfterCounter returns a count of finished AgentPublicServiceServerMock.GenerateMockTable invocations
func (mmGenerateMockTable *AgentPublicServiceServerMock) GenerateMockTableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateMockTable.afterGenerateMockTableCounter)
}

// GenerateMockTableBeforeCounter returns a count of AgentPublicServiceServerMock.GenerateMockTable invocations
func (mmGenerateMockTable *AgentPublicServiceServerMock) GenerateMockTableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateMockTable.beforeGenerateMockTableCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.GenerateMockTable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGenerateMockTable *mAgentPublicServiceServerMockGenerateMockTable) Calls() []*AgentPublicServiceServerMockGenerateMockTableParams {
	mmGenerateMockTable.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockGenerateMockTableParams, len(mmGenerateMockTable.callArgs))
	copy(argCopy, mmGenerateMockTable.callArgs)

	mmGenerateMockTable.mutex.RUnlock()

	return argCopy
}

// MinimockGenerateMockTableDone returns true if the count of the GenerateMockTable invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockGenerateMockTableDone() bool {
	if m.GenerateMockTableMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GenerateMockTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GenerateMockTableMock.invocationsDone()
}

// MinimockGenerateMockTableInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockGenerateMockTableInspect() {
	for _, e := range m.GenerateMockTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GenerateMockTable at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGenerateMockTableCounter := mm_atomic.LoadUint64(&m.afterGenerateMockTableCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateMockTableMock.defaultExpectation != nil && afterGenerateMockTableCounter < 1 {
		if m.GenerateMockTableMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GenerateMockTable at\n%s", m.GenerateMockTableMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GenerateMockTable at\n%s with params: %#v", m.GenerateMockTableMock.defaultExpectation.expectationOrigins.origin, *m.GenerateMockTableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerateMockTable != nil && afterGenerateMockTableCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.GenerateMockTable at\n%s", m.funcGenerateMockTableOrigin)
	}

	if !m.GenerateMockTableMock.invocationsDone() && afterGenerateMockTableCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.GenerateMockTable at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GenerateMockTableMock.expectedInvocations), m.GenerateMockTableMock.expectedInvocationsOrigin, afterGenerateMockTableCounter)
	}
}

type mAgentPublicServiceServerMockGetChat struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockGetChatExpectation
	expectations       []*AgentPublicServiceServerMockGetChatExpectation

	callArgs []*AgentPublicServiceServerMockGetChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockGetChatExpectation specifies expectation struct of the AgentPublicServiceServer.GetChat
type AgentPublicServiceServerMockGetChatExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockGetChatParams
	paramPtrs          *AgentPublicServiceServerMockGetChatParamPtrs
	expectationOrigins AgentPublicServiceServerMockGetChatExpectationOrigins
	results            *AgentPublicServiceServerMockGetChatResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockGetChatParams contains parameters of the AgentPublicServiceServer.GetChat
type AgentPublicServiceServerMockGetChatParams struct {
	ctx context.Context
	gp1 *mm_agentv1alpha.GetChatRequest
}

// AgentPublicServiceServerMockGetChatParamPtrs contains pointers to parameters of the AgentPublicServiceServer.GetChat
type AgentPublicServiceServerMockGetChatParamPtrs struct {
	ctx *context.Context
	gp1 **mm_agentv1alpha.GetChatRequest
}

// AgentPublicServiceServerMockGetChatResults contains results of the AgentPublicServiceServer.GetChat
type AgentPublicServiceServerMockGetChatResults struct {
	gp2 *mm_agentv1alpha.GetChatResponse
	err error
}

// AgentPublicServiceServerMockGetChatOrigins contains origins of expectations of the AgentPublicServiceServer.GetChat
type AgentPublicServiceServerMockGetChatExpectationOrigins struct {
	origin    string
	originCtx string
	originGp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetChat *mAgentPublicServiceServerMockGetChat) Optional() *mAgentPublicServiceServerMockGetChat {
	mmGetChat.optional = true
	return mmGetChat
}

// Expect sets up expected params for AgentPublicServiceServer.GetChat
func (mmGetChat *mAgentPublicServiceServerMockGetChat) Expect(ctx context.Context, gp1 *mm_agentv1alpha.GetChatRequest) *mAgentPublicServiceServerMockGetChat {
	if mmGetChat.mock.funcGetChat != nil {
		mmGetChat.mock.t.Fatalf("AgentPublicServiceServerMock.GetChat mock is already set by Set")
	}

	if mmGetChat.defaultExpectation == nil {
		mmGetChat.defaultExpectation = &AgentPublicServiceServerMockGetChatExpectation{}
	}

	if mmGetChat.defaultExpectation.paramPtrs != nil {
		mmGetChat.mock.t.Fatalf("AgentPublicServiceServerMock.GetChat mock is already set by ExpectParams functions")
	}

	mmGetChat.defaultExpectation.params = &AgentPublicServiceServerMockGetChatParams{ctx, gp1}
	mmGetChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetChat.expectations {
		if minimock.Equal(e.params, mmGetChat.defaultExpectation.params) {
			mmGetChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetChat.defaultExpectation.params)
		}
	}

	return mmGetChat
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.GetChat
func (mmGetChat *mAgentPublicServiceServerMockGetChat) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockGetChat {
	if mmGetChat.mock.funcGetChat != nil {
		mmGetChat.mock.t.Fatalf("AgentPublicServiceServerMock.GetChat mock is already set by Set")
	}

	if mmGetChat.defaultExpectation == nil {
		mmGetChat.defaultExpectation = &AgentPublicServiceServerMockGetChatExpectation{}
	}

	if mmGetChat.defaultExpectation.params != nil {
		mmGetChat.mock.t.Fatalf("AgentPublicServiceServerMock.GetChat mock is already set by Expect")
	}

	if mmGetChat.defaultExpectation.paramPtrs == nil {
		mmGetChat.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockGetChatParamPtrs{}
	}
	mmGetChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetChat
}

// ExpectGp1Param2 sets up expected param gp1 for AgentPublicServiceServer.GetChat
func (mmGetChat *mAgentPublicServiceServerMockGetChat) ExpectGp1Param2(gp1 *mm_agentv1alpha.GetChatRequest) *mAgentPublicServiceServerMockGetChat {
	if mmGetChat.mock.funcGetChat != nil {
		mmGetChat.mock.t.Fatalf("AgentPublicServiceServerMock.GetChat mock is already set by Set")
	}

	if mmGetChat.defaultExpectation == nil {
		mmGetChat.defaultExpectation = &AgentPublicServiceServerMockGetChatExpectation{}
	}

	if mmGetChat.defaultExpectation.params != nil {
		mmGetChat.mock.t.Fatalf("AgentPublicServiceServerMock.GetChat mock is already set by Expect")
	}

	if mmGetChat.defaultExpectation.paramPtrs == nil {
		mmGetChat.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockGetChatParamPtrs{}
	}
	mmGetChat.defaultExpectation.paramPtrs.gp1 = &gp1
	mmGetChat.defaultExpectation.expectationOrigins.originGp1 = minimock.CallerInfo(1)

	return mmGetChat
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.GetChat
func (mmGetChat *mAgentPublicServiceServerMockGetChat) Inspect(f func(ctx context.Context, gp1 *mm_agentv1alpha.GetChatRequest)) *mAgentPublicServiceServerMockGetChat {
	if mmGetChat.mock.inspectFuncGetChat != nil {
		mmGetChat.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.GetChat")
	}

	mmGetChat.mock.inspectFuncGetChat = f

	return mmGetChat
}

// Return sets up results that will be returned by AgentPublicServiceServer.GetChat
func (mmGetChat *mAgentPublicServiceServerMockGetChat) Return(gp2 *mm_agentv1alpha.GetChatResponse, err error) *AgentPublicServiceServerMock {
	if mmGetChat.mock.funcGetChat != nil {
		mmGetChat.mock.t.Fatalf("AgentPublicServiceServerMock.GetChat mock is already set by Set")
	}

	if mmGetChat.defaultExpectation == nil {
		mmGetChat.defaultExpectation = &AgentPublicServiceServerMockGetChatExpectation{mock: mmGetChat.mock}
	}
	mmGetChat.defaultExpectation.results = &AgentPublicServiceServerMockGetChatResults{gp2, err}
	mmGetChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetChat.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.GetChat method
func (mmGetChat *mAgentPublicServiceServerMockGetChat) Set(f func(ctx context.Context, gp1 *mm_agentv1alpha.GetChatRequest) (gp2 *mm_agentv1alpha.GetChatResponse, err error)) *AgentPublicServiceServerMock {
	if mmGetChat.defaultExpectation != nil {
		mmGetChat.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.GetChat method")
	}

	if len(mmGetChat.expectations) > 0 {
		mmGetChat.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.GetChat method")
	}

	mmGetChat.mock.funcGetChat = f
	mmGetChat.mock.funcGetChatOrigin = minimock.CallerInfo(1)
	return mmGetChat.mock
}

// When sets expectation for the AgentPublicServiceServer.GetChat which will trigger the result defined by the following
// Then helper
func (mmGetChat *mAgentPublicServiceServerMockGetChat) When(ctx context.Context, gp1 *mm_agentv1alpha.GetChatRequest) *AgentPublicServiceServerMockGetChatExpectation {
	if mmGetChat.mock.funcGetChat != nil {
		mmGetChat.mock.t.Fatalf("AgentPublicServiceServerMock.GetChat mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockGetChatExpectation{
		mock:               mmGetChat.mock,
		params:             &AgentPublicServiceServerMockGetChatParams{ctx, gp1},
		expectationOrigins: AgentPublicServiceServerMockGetChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetChat.expectations = append(mmGetChat.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.GetChat return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockGetChatExpectation) Then(gp2 *mm_agentv1alpha.GetChatResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockGetChatResults{gp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.GetChat should be invoked
func (mmGetChat *mAgentPublicServiceServerMockGetChat) Times(n uint64) *mAgentPublicServiceServerMockGetChat {
	if n == 0 {
		mmGetChat.mock.t.Fatalf("Times of AgentPublicServiceServerMock.GetChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetChat.expectedInvocations, n)
	mmGetChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetChat
}

func (mmGetChat *mAgentPublicServiceServerMockGetChat) invocationsDone() bool {
	if len(mmGetChat.expectations) == 0 && mmGetChat.defaultExpectation == nil && mmGetChat.mock.funcGetChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetChat.mock.afterGetChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetChat implements mm_agentv1alpha.AgentPublicServiceServer
func (mmGetChat *AgentPublicServiceServerMock) GetChat(ctx context.Context, gp1 *mm_agentv1alpha.GetChatRequest) (gp2 *mm_agentv1alpha.GetChatResponse, err error) {
	mm_atomic.AddUint64(&mmGetChat.beforeGetChatCounter, 1)
	defer mm_atomic.AddUint64(&mmGetChat.afterGetChatCounter, 1)

	mmGetChat.t.Helper()

	if mmGetChat.inspectFuncGetChat != nil {
		mmGetChat.inspectFuncGetChat(ctx, gp1)
	}

	mm_params := AgentPublicServiceServerMockGetChatParams{ctx, gp1}

	// Record call args
	mmGetChat.GetChatMock.mutex.Lock()
	mmGetChat.GetChatMock.callArgs = append(mmGetChat.GetChatMock.callArgs, &mm_params)
	mmGetChat.GetChatMock.mutex.Unlock()

	for _, e := range mmGetChat.GetChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp2, e.results.err
		}
	}

	if mmGetChat.GetChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetChat.GetChatMock.defaultExpectation.Counter, 1)
		mm_want := mmGetChat.GetChatMock.defaultExpectation.params
		mm_want_ptrs := mmGetChat.GetChatMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockGetChatParams{ctx, gp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetChat.t.Errorf("AgentPublicServiceServerMock.GetChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetChat.GetChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.gp1 != nil && !minimock.Equal(*mm_want_ptrs.gp1, mm_got.gp1) {
				mmGetChat.t.Errorf("AgentPublicServiceServerMock.GetChat got unexpected parameter gp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetChat.GetChatMock.defaultExpectation.expectationOrigins.originGp1, *mm_want_ptrs.gp1, mm_got.gp1, minimock.Diff(*mm_want_ptrs.gp1, mm_got.gp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetChat.t.Errorf("AgentPublicServiceServerMock.GetChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetChat.GetChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetChat.GetChatMock.defaultExpectation.results
		if mm_results == nil {
			mmGetChat.t.Fatal("No results are set for the AgentPublicServiceServerMock.GetChat")
		}
		return (*mm_results).gp2, (*mm_results).err
	}
	if mmGetChat.funcGetChat != nil {
		return mmGetChat.funcGetChat(ctx, gp1)
	}
	mmGetChat.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.GetChat. %v %v", ctx, gp1)
	return
}

// GetChatAfterCounter returns a count of finished AgentPublicServiceServerMock.GetChat invocations
func (mmGetChat *AgentPublicServiceServerMock) GetChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChat.afterGetChatCounter)
}

// GetChatBeforeCounter returns a count of AgentPublicServiceServerMock.GetChat invocations
func (mmGetChat *AgentPublicServiceServerMock) GetChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChat.beforeGetChatCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.GetChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetChat *mAgentPublicServiceServerMockGetChat) Calls() []*AgentPublicServiceServerMockGetChatParams {
	mmGetChat.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockGetChatParams, len(mmGetChat.callArgs))
	copy(argCopy, mmGetChat.callArgs)

	mmGetChat.mutex.RUnlock()

	return argCopy
}

// MinimockGetChatDone returns true if the count of the GetChat invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockGetChatDone() bool {
	if m.GetChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetChatMock.invocationsDone()
}

// MinimockGetChatInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockGetChatInspect() {
	for _, e := range m.GetChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetChatCounter := mm_atomic.LoadUint64(&m.afterGetChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatMock.defaultExpectation != nil && afterGetChatCounter < 1 {
		if m.GetChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetChat at\n%s", m.GetChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetChat at\n%s with params: %#v", m.GetChatMock.defaultExpectation.expectationOrigins.origin, *m.GetChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChat != nil && afterGetChatCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetChat at\n%s", m.funcGetChatOrigin)
	}

	if !m.GetChatMock.invocationsDone() && afterGetChatCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.GetChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetChatMock.expectedInvocations), m.GetChatMock.expectedInvocationsOrigin, afterGetChatCounter)
	}
}

type mAgentPublicServiceServerMockGetColumnDefinitions struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockGetColumnDefinitionsExpectation
	expectations       []*AgentPublicServiceServerMockGetColumnDefinitionsExpectation

	callArgs []*AgentPublicServiceServerMockGetColumnDefinitionsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockGetColumnDefinitionsExpectation specifies expectation struct of the AgentPublicServiceServer.GetColumnDefinitions
type AgentPublicServiceServerMockGetColumnDefinitionsExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockGetColumnDefinitionsParams
	paramPtrs          *AgentPublicServiceServerMockGetColumnDefinitionsParamPtrs
	expectationOrigins AgentPublicServiceServerMockGetColumnDefinitionsExpectationOrigins
	results            *AgentPublicServiceServerMockGetColumnDefinitionsResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockGetColumnDefinitionsParams contains parameters of the AgentPublicServiceServer.GetColumnDefinitions
type AgentPublicServiceServerMockGetColumnDefinitionsParams struct {
	ctx context.Context
	gp1 *mm_agentv1alpha.GetColumnDefinitionsRequest
}

// AgentPublicServiceServerMockGetColumnDefinitionsParamPtrs contains pointers to parameters of the AgentPublicServiceServer.GetColumnDefinitions
type AgentPublicServiceServerMockGetColumnDefinitionsParamPtrs struct {
	ctx *context.Context
	gp1 **mm_agentv1alpha.GetColumnDefinitionsRequest
}

// AgentPublicServiceServerMockGetColumnDefinitionsResults contains results of the AgentPublicServiceServer.GetColumnDefinitions
type AgentPublicServiceServerMockGetColumnDefinitionsResults struct {
	gp2 *mm_agentv1alpha.GetColumnDefinitionsResponse
	err error
}

// AgentPublicServiceServerMockGetColumnDefinitionsOrigins contains origins of expectations of the AgentPublicServiceServer.GetColumnDefinitions
type AgentPublicServiceServerMockGetColumnDefinitionsExpectationOrigins struct {
	origin    string
	originCtx string
	originGp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetColumnDefinitions *mAgentPublicServiceServerMockGetColumnDefinitions) Optional() *mAgentPublicServiceServerMockGetColumnDefinitions {
	mmGetColumnDefinitions.optional = true
	return mmGetColumnDefinitions
}

// Expect sets up expected params for AgentPublicServiceServer.GetColumnDefinitions
func (mmGetColumnDefinitions *mAgentPublicServiceServerMockGetColumnDefinitions) Expect(ctx context.Context, gp1 *mm_agentv1alpha.GetColumnDefinitionsRequest) *mAgentPublicServiceServerMockGetColumnDefinitions {
	if mmGetColumnDefinitions.mock.funcGetColumnDefinitions != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.GetColumnDefinitions mock is already set by Set")
	}

	if mmGetColumnDefinitions.defaultExpectation == nil {
		mmGetColumnDefinitions.defaultExpectation = &AgentPublicServiceServerMockGetColumnDefinitionsExpectation{}
	}

	if mmGetColumnDefinitions.defaultExpectation.paramPtrs != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.GetColumnDefinitions mock is already set by ExpectParams functions")
	}

	mmGetColumnDefinitions.defaultExpectation.params = &AgentPublicServiceServerMockGetColumnDefinitionsParams{ctx, gp1}
	mmGetColumnDefinitions.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetColumnDefinitions.expectations {
		if minimock.Equal(e.params, mmGetColumnDefinitions.defaultExpectation.params) {
			mmGetColumnDefinitions.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetColumnDefinitions.defaultExpectation.params)
		}
	}

	return mmGetColumnDefinitions
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.GetColumnDefinitions
func (mmGetColumnDefinitions *mAgentPublicServiceServerMockGetColumnDefinitions) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockGetColumnDefinitions {
	if mmGetColumnDefinitions.mock.funcGetColumnDefinitions != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.GetColumnDefinitions mock is already set by Set")
	}

	if mmGetColumnDefinitions.defaultExpectation == nil {
		mmGetColumnDefinitions.defaultExpectation = &AgentPublicServiceServerMockGetColumnDefinitionsExpectation{}
	}

	if mmGetColumnDefinitions.defaultExpectation.params != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.GetColumnDefinitions mock is already set by Expect")
	}

	if mmGetColumnDefinitions.defaultExpectation.paramPtrs == nil {
		mmGetColumnDefinitions.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockGetColumnDefinitionsParamPtrs{}
	}
	mmGetColumnDefinitions.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetColumnDefinitions.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetColumnDefinitions
}

// ExpectGp1Param2 sets up expected param gp1 for AgentPublicServiceServer.GetColumnDefinitions
func (mmGetColumnDefinitions *mAgentPublicServiceServerMockGetColumnDefinitions) ExpectGp1Param2(gp1 *mm_agentv1alpha.GetColumnDefinitionsRequest) *mAgentPublicServiceServerMockGetColumnDefinitions {
	if mmGetColumnDefinitions.mock.funcGetColumnDefinitions != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.GetColumnDefinitions mock is already set by Set")
	}

	if mmGetColumnDefinitions.defaultExpectation == nil {
		mmGetColumnDefinitions.defaultExpectation = &AgentPublicServiceServerMockGetColumnDefinitionsExpectation{}
	}

	if mmGetColumnDefinitions.defaultExpectation.params != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.GetColumnDefinitions mock is already set by Expect")
	}

	if mmGetColumnDefinitions.defaultExpectation.paramPtrs == nil {
		mmGetColumnDefinitions.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockGetColumnDefinitionsParamPtrs{}
	}
	mmGetColumnDefinitions.defaultExpectation.paramPtrs.gp1 = &gp1
	mmGetColumnDefinitions.defaultExpectation.expectationOrigins.originGp1 = minimock.CallerInfo(1)

	return mmGetColumnDefinitions
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.GetColumnDefinitions
func (mmGetColumnDefinitions *mAgentPublicServiceServerMockGetColumnDefinitions) Inspect(f func(ctx context.Context, gp1 *mm_agentv1alpha.GetColumnDefinitionsRequest)) *mAgentPublicServiceServerMockGetColumnDefinitions {
	if mmGetColumnDefinitions.mock.inspectFuncGetColumnDefinitions != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.GetColumnDefinitions")
	}

	mmGetColumnDefinitions.mock.inspectFuncGetColumnDefinitions = f

	return mmGetColumnDefinitions
}

// Return sets up results that will be returned by AgentPublicServiceServer.GetColumnDefinitions
func (mmGetColumnDefinitions *mAgentPublicServiceServerMockGetColumnDefinitions) Return(gp2 *mm_agentv1alpha.GetColumnDefinitionsResponse, err error) *AgentPublicServiceServerMock {
	if mmGetColumnDefinitions.mock.funcGetColumnDefinitions != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.GetColumnDefinitions mock is already set by Set")
	}

	if mmGetColumnDefinitions.defaultExpectation == nil {
		mmGetColumnDefinitions.defaultExpectation = &AgentPublicServiceServerMockGetColumnDefinitionsExpectation{mock: mmGetColumnDefinitions.mock}
	}
	mmGetColumnDefinitions.defaultExpectation.results = &AgentPublicServiceServerMockGetColumnDefinitionsResults{gp2, err}
	mmGetColumnDefinitions.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetColumnDefinitions.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.GetColumnDefinitions method
func (mmGetColumnDefinitions *mAgentPublicServiceServerMockGetColumnDefinitions) Set(f func(ctx context.Context, gp1 *mm_agentv1alpha.GetColumnDefinitionsRequest) (gp2 *mm_agentv1alpha.GetColumnDefinitionsResponse, err error)) *AgentPublicServiceServerMock {
	if mmGetColumnDefinitions.defaultExpectation != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.GetColumnDefinitions method")
	}

	if len(mmGetColumnDefinitions.expectations) > 0 {
		mmGetColumnDefinitions.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.GetColumnDefinitions method")
	}

	mmGetColumnDefinitions.mock.funcGetColumnDefinitions = f
	mmGetColumnDefinitions.mock.funcGetColumnDefinitionsOrigin = minimock.CallerInfo(1)
	return mmGetColumnDefinitions.mock
}

// When sets expectation for the AgentPublicServiceServer.GetColumnDefinitions which will trigger the result defined by the following
// Then helper
func (mmGetColumnDefinitions *mAgentPublicServiceServerMockGetColumnDefinitions) When(ctx context.Context, gp1 *mm_agentv1alpha.GetColumnDefinitionsRequest) *AgentPublicServiceServerMockGetColumnDefinitionsExpectation {
	if mmGetColumnDefinitions.mock.funcGetColumnDefinitions != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.GetColumnDefinitions mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockGetColumnDefinitionsExpectation{
		mock:               mmGetColumnDefinitions.mock,
		params:             &AgentPublicServiceServerMockGetColumnDefinitionsParams{ctx, gp1},
		expectationOrigins: AgentPublicServiceServerMockGetColumnDefinitionsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetColumnDefinitions.expectations = append(mmGetColumnDefinitions.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.GetColumnDefinitions return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockGetColumnDefinitionsExpectation) Then(gp2 *mm_agentv1alpha.GetColumnDefinitionsResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockGetColumnDefinitionsResults{gp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.GetColumnDefinitions should be invoked
func (mmGetColumnDefinitions *mAgentPublicServiceServerMockGetColumnDefinitions) Times(n uint64) *mAgentPublicServiceServerMockGetColumnDefinitions {
	if n == 0 {
		mmGetColumnDefinitions.mock.t.Fatalf("Times of AgentPublicServiceServerMock.GetColumnDefinitions mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetColumnDefinitions.expectedInvocations, n)
	mmGetColumnDefinitions.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetColumnDefinitions
}

func (mmGetColumnDefinitions *mAgentPublicServiceServerMockGetColumnDefinitions) invocationsDone() bool {
	if len(mmGetColumnDefinitions.expectations) == 0 && mmGetColumnDefinitions.defaultExpectation == nil && mmGetColumnDefinitions.mock.funcGetColumnDefinitions == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetColumnDefinitions.mock.afterGetColumnDefinitionsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetColumnDefinitions.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetColumnDefinitions implements mm_agentv1alpha.AgentPublicServiceServer
func (mmGetColumnDefinitions *AgentPublicServiceServerMock) GetColumnDefinitions(ctx context.Context, gp1 *mm_agentv1alpha.GetColumnDefinitionsRequest) (gp2 *mm_agentv1alpha.GetColumnDefinitionsResponse, err error) {
	mm_atomic.AddUint64(&mmGetColumnDefinitions.beforeGetColumnDefinitionsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetColumnDefinitions.afterGetColumnDefinitionsCounter, 1)

	mmGetColumnDefinitions.t.Helper()

	if mmGetColumnDefinitions.inspectFuncGetColumnDefinitions != nil {
		mmGetColumnDefinitions.inspectFuncGetColumnDefinitions(ctx, gp1)
	}

	mm_params := AgentPublicServiceServerMockGetColumnDefinitionsParams{ctx, gp1}

	// Record call args
	mmGetColumnDefinitions.GetColumnDefinitionsMock.mutex.Lock()
	mmGetColumnDefinitions.GetColumnDefinitionsMock.callArgs = append(mmGetColumnDefinitions.GetColumnDefinitionsMock.callArgs, &mm_params)
	mmGetColumnDefinitions.GetColumnDefinitionsMock.mutex.Unlock()

	for _, e := range mmGetColumnDefinitions.GetColumnDefinitionsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp2, e.results.err
		}
	}

	if mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation.params
		mm_want_ptrs := mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockGetColumnDefinitionsParams{ctx, gp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetColumnDefinitions.t.Errorf("AgentPublicServiceServerMock.GetColumnDefinitions got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.gp1 != nil && !minimock.Equal(*mm_want_ptrs.gp1, mm_got.gp1) {
				mmGetColumnDefinitions.t.Errorf("AgentPublicServiceServerMock.GetColumnDefinitions got unexpected parameter gp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation.expectationOrigins.originGp1, *mm_want_ptrs.gp1, mm_got.gp1, minimock.Diff(*mm_want_ptrs.gp1, mm_got.gp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetColumnDefinitions.t.Errorf("AgentPublicServiceServerMock.GetColumnDefinitions got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetColumnDefinitions.t.Fatal("No results are set for the AgentPublicServiceServerMock.GetColumnDefinitions")
		}
		return (*mm_results).gp2, (*mm_results).err
	}
	if mmGetColumnDefinitions.funcGetColumnDefinitions != nil {
		return mmGetColumnDefinitions.funcGetColumnDefinitions(ctx, gp1)
	}
	mmGetColumnDefinitions.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.GetColumnDefinitions. %v %v", ctx, gp1)
	return
}

// GetColumnDefinitionsAfterCounter returns a count of finished AgentPublicServiceServerMock.GetColumnDefinitions invocations
func (mmGetColumnDefinitions *AgentPublicServiceServerMock) GetColumnDefinitionsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetColumnDefinitions.afterGetColumnDefinitionsCounter)
}

// GetColumnDefinitionsBeforeCounter returns a count of AgentPublicServiceServerMock.GetColumnDefinitions invocations
func (mmGetColumnDefinitions *AgentPublicServiceServerMock) GetColumnDefinitionsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetColumnDefinitions.beforeGetColumnDefinitionsCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.GetColumnDefinitions.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetColumnDefinitions *mAgentPublicServiceServerMockGetColumnDefinitions) Calls() []*AgentPublicServiceServerMockGetColumnDefinitionsParams {
	mmGetColumnDefinitions.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockGetColumnDefinitionsParams, len(mmGetColumnDefinitions.callArgs))
	copy(argCopy, mmGetColumnDefinitions.callArgs)

	mmGetColumnDefinitions.mutex.RUnlock()

	return argCopy
}

// MinimockGetColumnDefinitionsDone returns true if the count of the GetColumnDefinitions invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockGetColumnDefinitionsDone() bool {
	if m.GetColumnDefinitionsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetColumnDefinitionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetColumnDefinitionsMock.invocationsDone()
}

// MinimockGetColumnDefinitionsInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockGetColumnDefinitionsInspect() {
	for _, e := range m.GetColumnDefinitionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetColumnDefinitions at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetColumnDefinitionsCounter := mm_atomic.LoadUint64(&m.afterGetColumnDefinitionsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetColumnDefinitionsMock.defaultExpectation != nil && afterGetColumnDefinitionsCounter < 1 {
		if m.GetColumnDefinitionsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetColumnDefinitions at\n%s", m.GetColumnDefinitionsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetColumnDefinitions at\n%s with params: %#v", m.GetColumnDefinitionsMock.defaultExpectation.expectationOrigins.origin, *m.GetColumnDefinitionsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetColumnDefinitions != nil && afterGetColumnDefinitionsCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetColumnDefinitions at\n%s", m.funcGetColumnDefinitionsOrigin)
	}

	if !m.GetColumnDefinitionsMock.invocationsDone() && afterGetColumnDefinitionsCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.GetColumnDefinitions at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetColumnDefinitionsMock.expectedInvocations), m.GetColumnDefinitionsMock.expectedInvocationsOrigin, afterGetColumnDefinitionsCounter)
	}
}

type mAgentPublicServiceServerMockGetTable struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockGetTableExpectation
	expectations       []*AgentPublicServiceServerMockGetTableExpectation

	callArgs []*AgentPublicServiceServerMockGetTableParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockGetTableExpectation specifies expectation struct of the AgentPublicServiceServer.GetTable
type AgentPublicServiceServerMockGetTableExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockGetTableParams
	paramPtrs          *AgentPublicServiceServerMockGetTableParamPtrs
	expectationOrigins AgentPublicServiceServerMockGetTableExpectationOrigins
	results            *AgentPublicServiceServerMockGetTableResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockGetTableParams contains parameters of the AgentPublicServiceServer.GetTable
type AgentPublicServiceServerMockGetTableParams struct {
	ctx context.Context
	gp1 *mm_agentv1alpha.GetTableRequest
}

// AgentPublicServiceServerMockGetTableParamPtrs contains pointers to parameters of the AgentPublicServiceServer.GetTable
type AgentPublicServiceServerMockGetTableParamPtrs struct {
	ctx *context.Context
	gp1 **mm_agentv1alpha.GetTableRequest
}

// AgentPublicServiceServerMockGetTableResults contains results of the AgentPublicServiceServer.GetTable
type AgentPublicServiceServerMockGetTableResults struct {
	gp2 *mm_agentv1alpha.GetTableResponse
	err error
}

// AgentPublicServiceServerMockGetTableOrigins contains origins of expectations of the AgentPublicServiceServer.GetTable
type AgentPublicServiceServerMockGetTableExpectationOrigins struct {
	origin    string
	originCtx string
	originGp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetTable *mAgentPublicServiceServerMockGetTable) Optional() *mAgentPublicServiceServerMockGetTable {
	mmGetTable.optional = true
	return mmGetTable
}

// Expect sets up expected params for AgentPublicServiceServer.GetTable
func (mmGetTable *mAgentPublicServiceServerMockGetTable) Expect(ctx context.Context, gp1 *mm_agentv1alpha.GetTableRequest) *mAgentPublicServiceServerMockGetTable {
	if mmGetTable.mock.funcGetTable != nil {
		mmGetTable.mock.t.Fatalf("AgentPublicServiceServerMock.GetTable mock is already set by Set")
	}

	if mmGetTable.defaultExpectation == nil {
		mmGetTable.defaultExpectation = &AgentPublicServiceServerMockGetTableExpectation{}
	}

	if mmGetTable.defaultExpectation.paramPtrs != nil {
		mmGetTable.mock.t.Fatalf("AgentPublicServiceServerMock.GetTable mock is already set by ExpectParams functions")
	}

	mmGetTable.defaultExpectation.params = &AgentPublicServiceServerMockGetTableParams{ctx, gp1}
	mmGetTable.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetTable.expectations {
		if minimock.Equal(e.params, mmGetTable.defaultExpectation.params) {
			mmGetTable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetTable.defaultExpectation.params)
		}
	}

	return mmGetTable
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.GetTable
func (mmGetTable *mAgentPublicServiceServerMockGetTable) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockGetTable {
	if mmGetTable.mock.funcGetTable != nil {
		mmGetTable.mock.t.Fatalf("AgentPublicServiceServerMock.GetTable mock is already set by Set")
	}

	if mmGetTable.defaultExpectation == nil {
		mmGetTable.defaultExpectation = &AgentPublicServiceServerMockGetTableExpectation{}
	}

	if mmGetTable.defaultExpectation.params != nil {
		mmGetTable.mock.t.Fatalf("AgentPublicServiceServerMock.GetTable mock is already set by Expect")
	}

	if mmGetTable.defaultExpectation.paramPtrs == nil {
		mmGetTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockGetTableParamPtrs{}
	}
	mmGetTable.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetTable.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetTable
}

// ExpectGp1Param2 sets up expected param gp1 for AgentPublicServiceServer.GetTable
func (mmGetTable *mAgentPublicServiceServerMockGetTable) ExpectGp1Param2(gp1 *mm_agentv1alpha.GetTableRequest) *mAgentPublicServiceServerMockGetTable {
	if mmGetTable.mock.funcGetTable != nil {
		mmGetTable.mock.t.Fatalf("AgentPublicServiceServerMock.GetTable mock is already set by Set")
	}

	if mmGetTable.defaultExpectation == nil {
		mmGetTable.defaultExpectation = &AgentPublicServiceServerMockGetTableExpectation{}
	}

	if mmGetTable.defaultExpectation.params != nil {
		mmGetTable.mock.t.Fatalf("AgentPublicServiceServerMock.GetTable mock is already set by Expect")
	}

	if mmGetTable.defaultExpectation.paramPtrs == nil {
		mmGetTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockGetTableParamPtrs{}
	}
	mmGetTable.defaultExpectation.paramPtrs.gp1 = &gp1
	mmGetTable.defaultExpectation.expectationOrigins.originGp1 = minimock.CallerInfo(1)

	return mmGetTable
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.GetTable
func (mmGetTable *mAgentPublicServiceServerMockGetTable) Inspect(f func(ctx context.Context, gp1 *mm_agentv1alpha.GetTableRequest)) *mAgentPublicServiceServerMockGetTable {
	if mmGetTable.mock.inspectFuncGetTable != nil {
		mmGetTable.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.GetTable")
	}

	mmGetTable.mock.inspectFuncGetTable = f

	return mmGetTable
}

// Return sets up results that will be returned by AgentPublicServiceServer.GetTable
func (mmGetTable *mAgentPublicServiceServerMockGetTable) Return(gp2 *mm_agentv1alpha.GetTableResponse, err error) *AgentPublicServiceServerMock {
	if mmGetTable.mock.funcGetTable != nil {
		mmGetTable.mock.t.Fatalf("AgentPublicServiceServerMock.GetTable mock is already set by Set")
	}

	if mmGetTable.defaultExpectation == nil {
		mmGetTable.defaultExpectation = &AgentPublicServiceServerMockGetTableExpectation{mock: mmGetTable.mock}
	}
	mmGetTable.defaultExpectation.results = &AgentPublicServiceServerMockGetTableResults{gp2, err}
	mmGetTable.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetTable.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.GetTable method
func (mmGetTable *mAgentPublicServiceServerMockGetTable) Set(f func(ctx context.Context, gp1 *mm_agentv1alpha.GetTableRequest) (gp2 *mm_agentv1alpha.GetTableResponse, err error)) *AgentPublicServiceServerMock {
	if mmGetTable.defaultExpectation != nil {
		mmGetTable.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.GetTable method")
	}

	if len(mmGetTable.expectations) > 0 {
		mmGetTable.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.GetTable method")
	}

	mmGetTable.mock.funcGetTable = f
	mmGetTable.mock.funcGetTableOrigin = minimock.CallerInfo(1)
	return mmGetTable.mock
}

// When sets expectation for the AgentPublicServiceServer.GetTable which will trigger the result defined by the following
// Then helper
func (mmGetTable *mAgentPublicServiceServerMockGetTable) When(ctx context.Context, gp1 *mm_agentv1alpha.GetTableRequest) *AgentPublicServiceServerMockGetTableExpectation {
	if mmGetTable.mock.funcGetTable != nil {
		mmGetTable.mock.t.Fatalf("AgentPublicServiceServerMock.GetTable mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockGetTableExpectation{
		mock:               mmGetTable.mock,
		params:             &AgentPublicServiceServerMockGetTableParams{ctx, gp1},
		expectationOrigins: AgentPublicServiceServerMockGetTableExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetTable.expectations = append(mmGetTable.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.GetTable return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockGetTableExpectation) Then(gp2 *mm_agentv1alpha.GetTableResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockGetTableResults{gp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.GetTable should be invoked
func (mmGetTable *mAgentPublicServiceServerMockGetTable) Times(n uint64) *mAgentPublicServiceServerMockGetTable {
	if n == 0 {
		mmGetTable.mock.t.Fatalf("Times of AgentPublicServiceServerMock.GetTable mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetTable.expectedInvocations, n)
	mmGetTable.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetTable
}

func (mmGetTable *mAgentPublicServiceServerMockGetTable) invocationsDone() bool {
	if len(mmGetTable.expectations) == 0 && mmGetTable.defaultExpectation == nil && mmGetTable.mock.funcGetTable == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetTable.mock.afterGetTableCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetTable.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetTable implements mm_agentv1alpha.AgentPublicServiceServer
func (mmGetTable *AgentPublicServiceServerMock) GetTable(ctx context.Context, gp1 *mm_agentv1alpha.GetTableRequest) (gp2 *mm_agentv1alpha.GetTableResponse, err error) {
	mm_atomic.AddUint64(&mmGetTable.beforeGetTableCounter, 1)
	defer mm_atomic.AddUint64(&mmGetTable.afterGetTableCounter, 1)

	mmGetTable.t.Helper()

	if mmGetTable.inspectFuncGetTable != nil {
		mmGetTable.inspectFuncGetTable(ctx, gp1)
	}

	mm_params := AgentPublicServiceServerMockGetTableParams{ctx, gp1}

	// Record call args
	mmGetTable.GetTableMock.mutex.Lock()
	mmGetTable.GetTableMock.callArgs = append(mmGetTable.GetTableMock.callArgs, &mm_params)
	mmGetTable.GetTableMock.mutex.Unlock()

	for _, e := range mmGetTable.GetTableMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp2, e.results.err
		}
	}

	if mmGetTable.GetTableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetTable.GetTableMock.defaultExpectation.Counter, 1)
		mm_want := mmGetTable.GetTableMock.defaultExpectation.params
		mm_want_ptrs := mmGetTable.GetTableMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockGetTableParams{ctx, gp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetTable.t.Errorf("AgentPublicServiceServerMock.GetTable got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetTable.GetTableMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.gp1 != nil && !minimock.Equal(*mm_want_ptrs.gp1, mm_got.gp1) {
				mmGetTable.t.Errorf("AgentPublicServiceServerMock.GetTable got unexpected parameter gp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetTable.GetTableMock.defaultExpectation.expectationOrigins.originGp1, *mm_want_ptrs.gp1, mm_got.gp1, minimock.Diff(*mm_want_ptrs.gp1, mm_got.gp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetTable.t.Errorf("AgentPublicServiceServerMock.GetTable got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetTable.GetTableMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetTable.GetTableMock.defaultExpectation.results
		if mm_results == nil {
			mmGetTable.t.Fatal("No results are set for the AgentPublicServiceServerMock.GetTable")
		}
		return (*mm_results).gp2, (*mm_results).err
	}
	if mmGetTable.funcGetTable != nil {
		return mmGetTable.funcGetTable(ctx, gp1)
	}
	mmGetTable.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.GetTable. %v %v", ctx, gp1)
	return
}

// GetTableAfterCounter returns a count of finished AgentPublicServiceServerMock.GetTable invocations
func (mmGetTable *AgentPublicServiceServerMock) GetTableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTable.afterGetTableCounter)
}

// GetTableBeforeCounter returns a count of AgentPublicServiceServerMock.GetTable invocations
func (mmGetTable *AgentPublicServiceServerMock) GetTableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTable.beforeGetTableCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.GetTable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetTable *mAgentPublicServiceServerMockGetTable) Calls() []*AgentPublicServiceServerMockGetTableParams {
	mmGetTable.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockGetTableParams, len(mmGetTable.callArgs))
	copy(argCopy, mmGetTable.callArgs)

	mmGetTable.mutex.RUnlock()

	return argCopy
}

// MinimockGetTableDone returns true if the count of the GetTable invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockGetTableDone() bool {
	if m.GetTableMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetTableMock.invocationsDone()
}

// MinimockGetTableInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockGetTableInspect() {
	for _, e := range m.GetTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetTable at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetTableCounter := mm_atomic.LoadUint64(&m.afterGetTableCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetTableMock.defaultExpectation != nil && afterGetTableCounter < 1 {
		if m.GetTableMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetTable at\n%s", m.GetTableMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetTable at\n%s with params: %#v", m.GetTableMock.defaultExpectation.expectationOrigins.origin, *m.GetTableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTable != nil && afterGetTableCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetTable at\n%s", m.funcGetTableOrigin)
	}

	if !m.GetTableMock.invocationsDone() && afterGetTableCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.GetTable at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetTableMock.expectedInvocations), m.GetTableMock.expectedInvocationsOrigin, afterGetTableCounter)
	}
}

type mAgentPublicServiceServerMockGetTableEvents struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockGetTableEventsExpectation
	expectations       []*AgentPublicServiceServerMockGetTableEventsExpectation

	callArgs []*AgentPublicServiceServerMockGetTableEventsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockGetTableEventsExpectation specifies expectation struct of the AgentPublicServiceServer.GetTableEvents
type AgentPublicServiceServerMockGetTableEventsExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockGetTableEventsParams
	paramPtrs          *AgentPublicServiceServerMockGetTableEventsParamPtrs
	expectationOrigins AgentPublicServiceServerMockGetTableEventsExpectationOrigins
	results            *AgentPublicServiceServerMockGetTableEventsResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockGetTableEventsParams contains parameters of the AgentPublicServiceServer.GetTableEvents
type AgentPublicServiceServerMockGetTableEventsParams struct {
	gp1 *mm_agentv1alpha.GetTableEventsRequest
	a1  mm_agentv1alpha.AgentPublicService_GetTableEventsServer
}

// AgentPublicServiceServerMockGetTableEventsParamPtrs contains pointers to parameters of the AgentPublicServiceServer.GetTableEvents
type AgentPublicServiceServerMockGetTableEventsParamPtrs struct {
	gp1 **mm_agentv1alpha.GetTableEventsRequest
	a1  *mm_agentv1alpha.AgentPublicService_GetTableEventsServer
}

// AgentPublicServiceServerMockGetTableEventsResults contains results of the AgentPublicServiceServer.GetTableEvents
type AgentPublicServiceServerMockGetTableEventsResults struct {
	err error
}

// AgentPublicServiceServerMockGetTableEventsOrigins contains origins of expectations of the AgentPublicServiceServer.GetTableEvents
type AgentPublicServiceServerMockGetTableEventsExpectationOrigins struct {
	origin    string
	originGp1 string
	originA1  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetTableEvents *mAgentPublicServiceServerMockGetTableEvents) Optional() *mAgentPublicServiceServerMockGetTableEvents {
	mmGetTableEvents.optional = true
	return mmGetTableEvents
}

// Expect sets up expected params for AgentPublicServiceServer.GetTableEvents
func (mmGetTableEvents *mAgentPublicServiceServerMockGetTableEvents) Expect(gp1 *mm_agentv1alpha.GetTableEventsRequest, a1 mm_agentv1alpha.AgentPublicService_GetTableEventsServer) *mAgentPublicServiceServerMockGetTableEvents {
	if mmGetTableEvents.mock.funcGetTableEvents != nil {
		mmGetTableEvents.mock.t.Fatalf("AgentPublicServiceServerMock.GetTableEvents mock is already set by Set")
	}

	if mmGetTableEvents.defaultExpectation == nil {
		mmGetTableEvents.defaultExpectation = &AgentPublicServiceServerMockGetTableEventsExpectation{}
	}

	if mmGetTableEvents.defaultExpectation.paramPtrs != nil {
		mmGetTableEvents.mock.t.Fatalf("AgentPublicServiceServerMock.GetTableEvents mock is already set by ExpectParams functions")
	}

	mmGetTableEvents.defaultExpectation.params = &AgentPublicServiceServerMockGetTableEventsParams{gp1, a1}
	mmGetTableEvents.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetTableEvents.expectations {
		if minimock.Equal(e.params, mmGetTableEvents.defaultExpectation.params) {
			mmGetTableEvents.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetTableEvents.defaultExpectation.params)
		}
	}

	return mmGetTableEvents
}

// ExpectGp1Param1 sets up expected param gp1 for AgentPublicServiceServer.GetTableEvents
func (mmGetTableEvents *mAgentPublicServiceServerMockGetTableEvents) ExpectGp1Param1(gp1 *mm_agentv1alpha.GetTableEventsRequest) *mAgentPublicServiceServerMockGetTableEvents {
	if mmGetTableEvents.mock.funcGetTableEvents != nil {
		mmGetTableEvents.mock.t.Fatalf("AgentPublicServiceServerMock.GetTableEvents mock is already set by Set")
	}

	if mmGetTableEvents.defaultExpectation == nil {
		mmGetTableEvents.defaultExpectation = &AgentPublicServiceServerMockGetTableEventsExpectation{}
	}

	if mmGetTableEvents.defaultExpectation.params != nil {
		mmGetTableEvents.mock.t.Fatalf("AgentPublicServiceServerMock.GetTableEvents mock is already set by Expect")
	}

	if mmGetTableEvents.defaultExpectation.paramPtrs == nil {
		mmGetTableEvents.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockGetTableEventsParamPtrs{}
	}
	mmGetTableEvents.defaultExpectation.paramPtrs.gp1 = &gp1
	mmGetTableEvents.defaultExpectation.expectationOrigins.originGp1 = minimock.CallerInfo(1)

	return mmGetTableEvents
}

// ExpectA1Param2 sets up expected param a1 for AgentPublicServiceServer.GetTableEvents
func (mmGetTableEvents *mAgentPublicServiceServerMockGetTableEvents) ExpectA1Param2(a1 mm_agentv1alpha.AgentPublicService_GetTableEventsServer) *mAgentPublicServiceServerMockGetTableEvents {
	if mmGetTableEvents.mock.funcGetTableEvents != nil {
		mmGetTableEvents.mock.t.Fatalf("AgentPublicServiceServerMock.GetTableEvents mock is already set by Set")
	}

	if mmGetTableEvents.defaultExpectation == nil {
		mmGetTableEvents.defaultExpectation = &AgentPublicServiceServerMockGetTableEventsExpectation{}
	}

	if mmGetTableEvents.defaultExpectation.params != nil {
		mmGetTableEvents.mock.t.Fatalf("AgentPublicServiceServerMock.GetTableEvents mock is already set by Expect")
	}

	if mmGetTableEvents.defaultExpectation.paramPtrs == nil {
		mmGetTableEvents.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockGetTableEventsParamPtrs{}
	}
	mmGetTableEvents.defaultExpectation.paramPtrs.a1 = &a1
	mmGetTableEvents.defaultExpectation.expectationOrigins.originA1 = minimock.CallerInfo(1)

	return mmGetTableEvents
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.GetTableEvents
func (mmGetTableEvents *mAgentPublicServiceServerMockGetTableEvents) Inspect(f func(gp1 *mm_agentv1alpha.GetTableEventsRequest, a1 mm_agentv1alpha.AgentPublicService_GetTableEventsServer)) *mAgentPublicServiceServerMockGetTableEvents {
	if mmGetTableEvents.mock.inspectFuncGetTableEvents != nil {
		mmGetTableEvents.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.GetTableEvents")
	}

	mmGetTableEvents.mock.inspectFuncGetTableEvents = f

	return mmGetTableEvents
}

// Return sets up results that will be returned by AgentPublicServiceServer.GetTableEvents
func (mmGetTableEvents *mAgentPublicServiceServerMockGetTableEvents) Return(err error) *AgentPublicServiceServerMock {
	if mmGetTableEvents.mock.funcGetTableEvents != nil {
		mmGetTableEvents.mock.t.Fatalf("AgentPublicServiceServerMock.GetTableEvents mock is already set by Set")
	}

	if mmGetTableEvents.defaultExpectation == nil {
		mmGetTableEvents.defaultExpectation = &AgentPublicServiceServerMockGetTableEventsExpectation{mock: mmGetTableEvents.mock}
	}
	mmGetTableEvents.defaultExpectation.results = &AgentPublicServiceServerMockGetTableEventsResults{err}
	mmGetTableEvents.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetTableEvents.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.GetTableEvents method
func (mmGetTableEvents *mAgentPublicServiceServerMockGetTableEvents) Set(f func(gp1 *mm_agentv1alpha.GetTableEventsRequest, a1 mm_agentv1alpha.AgentPublicService_GetTableEventsServer) (err error)) *AgentPublicServiceServerMock {
	if mmGetTableEvents.defaultExpectation != nil {
		mmGetTableEvents.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.GetTableEvents method")
	}

	if len(mmGetTableEvents.expectations) > 0 {
		mmGetTableEvents.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.GetTableEvents method")
	}

	mmGetTableEvents.mock.funcGetTableEvents = f
	mmGetTableEvents.mock.funcGetTableEventsOrigin = minimock.CallerInfo(1)
	return mmGetTableEvents.mock
}

// When sets expectation for the AgentPublicServiceServer.GetTableEvents which will trigger the result defined by the following
// Then helper
func (mmGetTableEvents *mAgentPublicServiceServerMockGetTableEvents) When(gp1 *mm_agentv1alpha.GetTableEventsRequest, a1 mm_agentv1alpha.AgentPublicService_GetTableEventsServer) *AgentPublicServiceServerMockGetTableEventsExpectation {
	if mmGetTableEvents.mock.funcGetTableEvents != nil {
		mmGetTableEvents.mock.t.Fatalf("AgentPublicServiceServerMock.GetTableEvents mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockGetTableEventsExpectation{
		mock:               mmGetTableEvents.mock,
		params:             &AgentPublicServiceServerMockGetTableEventsParams{gp1, a1},
		expectationOrigins: AgentPublicServiceServerMockGetTableEventsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetTableEvents.expectations = append(mmGetTableEvents.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.GetTableEvents return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockGetTableEventsExpectation) Then(err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockGetTableEventsResults{err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.GetTableEvents should be invoked
func (mmGetTableEvents *mAgentPublicServiceServerMockGetTableEvents) Times(n uint64) *mAgentPublicServiceServerMockGetTableEvents {
	if n == 0 {
		mmGetTableEvents.mock.t.Fatalf("Times of AgentPublicServiceServerMock.GetTableEvents mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetTableEvents.expectedInvocations, n)
	mmGetTableEvents.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetTableEvents
}

func (mmGetTableEvents *mAgentPublicServiceServerMockGetTableEvents) invocationsDone() bool {
	if len(mmGetTableEvents.expectations) == 0 && mmGetTableEvents.defaultExpectation == nil && mmGetTableEvents.mock.funcGetTableEvents == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetTableEvents.mock.afterGetTableEventsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetTableEvents.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetTableEvents implements mm_agentv1alpha.AgentPublicServiceServer
func (mmGetTableEvents *AgentPublicServiceServerMock) GetTableEvents(gp1 *mm_agentv1alpha.GetTableEventsRequest, a1 mm_agentv1alpha.AgentPublicService_GetTableEventsServer) (err error) {
	mm_atomic.AddUint64(&mmGetTableEvents.beforeGetTableEventsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetTableEvents.afterGetTableEventsCounter, 1)

	mmGetTableEvents.t.Helper()

	if mmGetTableEvents.inspectFuncGetTableEvents != nil {
		mmGetTableEvents.inspectFuncGetTableEvents(gp1, a1)
	}

	mm_params := AgentPublicServiceServerMockGetTableEventsParams{gp1, a1}

	// Record call args
	mmGetTableEvents.GetTableEventsMock.mutex.Lock()
	mmGetTableEvents.GetTableEventsMock.callArgs = append(mmGetTableEvents.GetTableEventsMock.callArgs, &mm_params)
	mmGetTableEvents.GetTableEventsMock.mutex.Unlock()

	for _, e := range mmGetTableEvents.GetTableEventsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmGetTableEvents.GetTableEventsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetTableEvents.GetTableEventsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetTableEvents.GetTableEventsMock.defaultExpectation.params
		mm_want_ptrs := mmGetTableEvents.GetTableEventsMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockGetTableEventsParams{gp1, a1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.gp1 != nil && !minimock.Equal(*mm_want_ptrs.gp1, mm_got.gp1) {
				mmGetTableEvents.t.Errorf("AgentPublicServiceServerMock.GetTableEvents got unexpected parameter gp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetTableEvents.GetTableEventsMock.defaultExpectation.expectationOrigins.originGp1, *mm_want_ptrs.gp1, mm_got.gp1, minimock.Diff(*mm_want_ptrs.gp1, mm_got.gp1))
			}

			if mm_want_ptrs.a1 != nil && !minimock.Equal(*mm_want_ptrs.a1, mm_got.a1) {
				mmGetTableEvents.t.Errorf("AgentPublicServiceServerMock.GetTableEvents got unexpected parameter a1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetTableEvents.GetTableEventsMock.defaultExpectation.expectationOrigins.originA1, *mm_want_ptrs.a1, mm_got.a1, minimock.Diff(*mm_want_ptrs.a1, mm_got.a1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetTableEvents.t.Errorf("AgentPublicServiceServerMock.GetTableEvents got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetTableEvents.GetTableEventsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetTableEvents.GetTableEventsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetTableEvents.t.Fatal("No results are set for the AgentPublicServiceServerMock.GetTableEvents")
		}
		return (*mm_results).err
	}
	if mmGetTableEvents.funcGetTableEvents != nil {
		return mmGetTableEvents.funcGetTableEvents(gp1, a1)
	}
	mmGetTableEvents.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.GetTableEvents. %v %v", gp1, a1)
	return
}

// GetTableEventsAfterCounter returns a count of finished AgentPublicServiceServerMock.GetTableEvents invocations
func (mmGetTableEvents *AgentPublicServiceServerMock) GetTableEventsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTableEvents.afterGetTableEventsCounter)
}

// GetTableEventsBeforeCounter returns a count of AgentPublicServiceServerMock.GetTableEvents invocations
func (mmGetTableEvents *AgentPublicServiceServerMock) GetTableEventsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTableEvents.beforeGetTableEventsCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.GetTableEvents.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetTableEvents *mAgentPublicServiceServerMockGetTableEvents) Calls() []*AgentPublicServiceServerMockGetTableEventsParams {
	mmGetTableEvents.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockGetTableEventsParams, len(mmGetTableEvents.callArgs))
	copy(argCopy, mmGetTableEvents.callArgs)

	mmGetTableEvents.mutex.RUnlock()

	return argCopy
}

// MinimockGetTableEventsDone returns true if the count of the GetTableEvents invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockGetTableEventsDone() bool {
	if m.GetTableEventsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetTableEventsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetTableEventsMock.invocationsDone()
}

// MinimockGetTableEventsInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockGetTableEventsInspect() {
	for _, e := range m.GetTableEventsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetTableEvents at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetTableEventsCounter := mm_atomic.LoadUint64(&m.afterGetTableEventsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetTableEventsMock.defaultExpectation != nil && afterGetTableEventsCounter < 1 {
		if m.GetTableEventsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetTableEvents at\n%s", m.GetTableEventsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetTableEvents at\n%s with params: %#v", m.GetTableEventsMock.defaultExpectation.expectationOrigins.origin, *m.GetTableEventsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTableEvents != nil && afterGetTableEventsCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.GetTableEvents at\n%s", m.funcGetTableEventsOrigin)
	}

	if !m.GetTableEventsMock.invocationsDone() && afterGetTableEventsCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.GetTableEvents at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetTableEventsMock.expectedInvocations), m.GetTableEventsMock.expectedInvocationsOrigin, afterGetTableEventsCounter)
	}
}

type mAgentPublicServiceServerMockInsertRow struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockInsertRowExpectation
	expectations       []*AgentPublicServiceServerMockInsertRowExpectation

	callArgs []*AgentPublicServiceServerMockInsertRowParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockInsertRowExpectation specifies expectation struct of the AgentPublicServiceServer.InsertRow
type AgentPublicServiceServerMockInsertRowExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockInsertRowParams
	paramPtrs          *AgentPublicServiceServerMockInsertRowParamPtrs
	expectationOrigins AgentPublicServiceServerMockInsertRowExpectationOrigins
	results            *AgentPublicServiceServerMockInsertRowResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockInsertRowParams contains parameters of the AgentPublicServiceServer.InsertRow
type AgentPublicServiceServerMockInsertRowParams struct {
	ctx context.Context
	ip1 *mm_agentv1alpha.InsertRowRequest
}

// AgentPublicServiceServerMockInsertRowParamPtrs contains pointers to parameters of the AgentPublicServiceServer.InsertRow
type AgentPublicServiceServerMockInsertRowParamPtrs struct {
	ctx *context.Context
	ip1 **mm_agentv1alpha.InsertRowRequest
}

// AgentPublicServiceServerMockInsertRowResults contains results of the AgentPublicServiceServer.InsertRow
type AgentPublicServiceServerMockInsertRowResults struct {
	ip2 *mm_agentv1alpha.InsertRowResponse
	err error
}

// AgentPublicServiceServerMockInsertRowOrigins contains origins of expectations of the AgentPublicServiceServer.InsertRow
type AgentPublicServiceServerMockInsertRowExpectationOrigins struct {
	origin    string
	originCtx string
	originIp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmInsertRow *mAgentPublicServiceServerMockInsertRow) Optional() *mAgentPublicServiceServerMockInsertRow {
	mmInsertRow.optional = true
	return mmInsertRow
}

// Expect sets up expected params for AgentPublicServiceServer.InsertRow
func (mmInsertRow *mAgentPublicServiceServerMockInsertRow) Expect(ctx context.Context, ip1 *mm_agentv1alpha.InsertRowRequest) *mAgentPublicServiceServerMockInsertRow {
	if mmInsertRow.mock.funcInsertRow != nil {
		mmInsertRow.mock.t.Fatalf("AgentPublicServiceServerMock.InsertRow mock is already set by Set")
	}

	if mmInsertRow.defaultExpectation == nil {
		mmInsertRow.defaultExpectation = &AgentPublicServiceServerMockInsertRowExpectation{}
	}

	if mmInsertRow.defaultExpectation.paramPtrs != nil {
		mmInsertRow.mock.t.Fatalf("AgentPublicServiceServerMock.InsertRow mock is already set by ExpectParams functions")
	}

	mmInsertRow.defaultExpectation.params = &AgentPublicServiceServerMockInsertRowParams{ctx, ip1}
	mmInsertRow.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmInsertRow.expectations {
		if minimock.Equal(e.params, mmInsertRow.defaultExpectation.params) {
			mmInsertRow.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInsertRow.defaultExpectation.params)
		}
	}

	return mmInsertRow
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.InsertRow
func (mmInsertRow *mAgentPublicServiceServerMockInsertRow) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockInsertRow {
	if mmInsertRow.mock.funcInsertRow != nil {
		mmInsertRow.mock.t.Fatalf("AgentPublicServiceServerMock.InsertRow mock is already set by Set")
	}

	if mmInsertRow.defaultExpectation == nil {
		mmInsertRow.defaultExpectation = &AgentPublicServiceServerMockInsertRowExpectation{}
	}

	if mmInsertRow.defaultExpectation.params != nil {
		mmInsertRow.mock.t.Fatalf("AgentPublicServiceServerMock.InsertRow mock is already set by Expect")
	}

	if mmInsertRow.defaultExpectation.paramPtrs == nil {
		mmInsertRow.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockInsertRowParamPtrs{}
	}
	mmInsertRow.defaultExpectation.paramPtrs.ctx = &ctx
	mmInsertRow.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmInsertRow
}

// ExpectIp1Param2 sets up expected param ip1 for AgentPublicServiceServer.InsertRow
func (mmInsertRow *mAgentPublicServiceServerMockInsertRow) ExpectIp1Param2(ip1 *mm_agentv1alpha.InsertRowRequest) *mAgentPublicServiceServerMockInsertRow {
	if mmInsertRow.mock.funcInsertRow != nil {
		mmInsertRow.mock.t.Fatalf("AgentPublicServiceServerMock.InsertRow mock is already set by Set")
	}

	if mmInsertRow.defaultExpectation == nil {
		mmInsertRow.defaultExpectation = &AgentPublicServiceServerMockInsertRowExpectation{}
	}

	if mmInsertRow.defaultExpectation.params != nil {
		mmInsertRow.mock.t.Fatalf("AgentPublicServiceServerMock.InsertRow mock is already set by Expect")
	}

	if mmInsertRow.defaultExpectation.paramPtrs == nil {
		mmInsertRow.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockInsertRowParamPtrs{}
	}
	mmInsertRow.defaultExpectation.paramPtrs.ip1 = &ip1
	mmInsertRow.defaultExpectation.expectationOrigins.originIp1 = minimock.CallerInfo(1)

	return mmInsertRow
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.InsertRow
func (mmInsertRow *mAgentPublicServiceServerMockInsertRow) Inspect(f func(ctx context.Context, ip1 *mm_agentv1alpha.InsertRowRequest)) *mAgentPublicServiceServerMockInsertRow {
	if mmInsertRow.mock.inspectFuncInsertRow != nil {
		mmInsertRow.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.InsertRow")
	}

	mmInsertRow.mock.inspectFuncInsertRow = f

	return mmInsertRow
}

// Return sets up results that will be returned by AgentPublicServiceServer.InsertRow
func (mmInsertRow *mAgentPublicServiceServerMockInsertRow) Return(ip2 *mm_agentv1alpha.InsertRowResponse, err error) *AgentPublicServiceServerMock {
	if mmInsertRow.mock.funcInsertRow != nil {
		mmInsertRow.mock.t.Fatalf("AgentPublicServiceServerMock.InsertRow mock is already set by Set")
	}

	if mmInsertRow.defaultExpectation == nil {
		mmInsertRow.defaultExpectation = &AgentPublicServiceServerMockInsertRowExpectation{mock: mmInsertRow.mock}
	}
	mmInsertRow.defaultExpectation.results = &AgentPublicServiceServerMockInsertRowResults{ip2, err}
	mmInsertRow.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmInsertRow.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.InsertRow method
func (mmInsertRow *mAgentPublicServiceServerMockInsertRow) Set(f func(ctx context.Context, ip1 *mm_agentv1alpha.InsertRowRequest) (ip2 *mm_agentv1alpha.InsertRowResponse, err error)) *AgentPublicServiceServerMock {
	if mmInsertRow.defaultExpectation != nil {
		mmInsertRow.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.InsertRow method")
	}

	if len(mmInsertRow.expectations) > 0 {
		mmInsertRow.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.InsertRow method")
	}

	mmInsertRow.mock.funcInsertRow = f
	mmInsertRow.mock.funcInsertRowOrigin = minimock.CallerInfo(1)
	return mmInsertRow.mock
}

// When sets expectation for the AgentPublicServiceServer.InsertRow which will trigger the result defined by the following
// Then helper
func (mmInsertRow *mAgentPublicServiceServerMockInsertRow) When(ctx context.Context, ip1 *mm_agentv1alpha.InsertRowRequest) *AgentPublicServiceServerMockInsertRowExpectation {
	if mmInsertRow.mock.funcInsertRow != nil {
		mmInsertRow.mock.t.Fatalf("AgentPublicServiceServerMock.InsertRow mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockInsertRowExpectation{
		mock:               mmInsertRow.mock,
		params:             &AgentPublicServiceServerMockInsertRowParams{ctx, ip1},
		expectationOrigins: AgentPublicServiceServerMockInsertRowExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmInsertRow.expectations = append(mmInsertRow.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.InsertRow return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockInsertRowExpectation) Then(ip2 *mm_agentv1alpha.InsertRowResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockInsertRowResults{ip2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.InsertRow should be invoked
func (mmInsertRow *mAgentPublicServiceServerMockInsertRow) Times(n uint64) *mAgentPublicServiceServerMockInsertRow {
	if n == 0 {
		mmInsertRow.mock.t.Fatalf("Times of AgentPublicServiceServerMock.InsertRow mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmInsertRow.expectedInvocations, n)
	mmInsertRow.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmInsertRow
}

func (mmInsertRow *mAgentPublicServiceServerMockInsertRow) invocationsDone() bool {
	if len(mmInsertRow.expectations) == 0 && mmInsertRow.defaultExpectation == nil && mmInsertRow.mock.funcInsertRow == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmInsertRow.mock.afterInsertRowCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmInsertRow.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// InsertRow implements mm_agentv1alpha.AgentPublicServiceServer
func (mmInsertRow *AgentPublicServiceServerMock) InsertRow(ctx context.Context, ip1 *mm_agentv1alpha.InsertRowRequest) (ip2 *mm_agentv1alpha.InsertRowResponse, err error) {
	mm_atomic.AddUint64(&mmInsertRow.beforeInsertRowCounter, 1)
	defer mm_atomic.AddUint64(&mmInsertRow.afterInsertRowCounter, 1)

	mmInsertRow.t.Helper()

	if mmInsertRow.inspectFuncInsertRow != nil {
		mmInsertRow.inspectFuncInsertRow(ctx, ip1)
	}

	mm_params := AgentPublicServiceServerMockInsertRowParams{ctx, ip1}

	// Record call args
	mmInsertRow.InsertRowMock.mutex.Lock()
	mmInsertRow.InsertRowMock.callArgs = append(mmInsertRow.InsertRowMock.callArgs, &mm_params)
	mmInsertRow.InsertRowMock.mutex.Unlock()

	for _, e := range mmInsertRow.InsertRowMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ip2, e.results.err
		}
	}

	if mmInsertRow.InsertRowMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInsertRow.InsertRowMock.defaultExpectation.Counter, 1)
		mm_want := mmInsertRow.InsertRowMock.defaultExpectation.params
		mm_want_ptrs := mmInsertRow.InsertRowMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockInsertRowParams{ctx, ip1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmInsertRow.t.Errorf("AgentPublicServiceServerMock.InsertRow got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmInsertRow.InsertRowMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.ip1 != nil && !minimock.Equal(*mm_want_ptrs.ip1, mm_got.ip1) {
				mmInsertRow.t.Errorf("AgentPublicServiceServerMock.InsertRow got unexpected parameter ip1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmInsertRow.InsertRowMock.defaultExpectation.expectationOrigins.originIp1, *mm_want_ptrs.ip1, mm_got.ip1, minimock.Diff(*mm_want_ptrs.ip1, mm_got.ip1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInsertRow.t.Errorf("AgentPublicServiceServerMock.InsertRow got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmInsertRow.InsertRowMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInsertRow.InsertRowMock.defaultExpectation.results
		if mm_results == nil {
			mmInsertRow.t.Fatal("No results are set for the AgentPublicServiceServerMock.InsertRow")
		}
		return (*mm_results).ip2, (*mm_results).err
	}
	if mmInsertRow.funcInsertRow != nil {
		return mmInsertRow.funcInsertRow(ctx, ip1)
	}
	mmInsertRow.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.InsertRow. %v %v", ctx, ip1)
	return
}

// InsertRowAfterCounter returns a count of finished AgentPublicServiceServerMock.InsertRow invocations
func (mmInsertRow *AgentPublicServiceServerMock) InsertRowAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsertRow.afterInsertRowCounter)
}

// InsertRowBeforeCounter returns a count of AgentPublicServiceServerMock.InsertRow invocations
func (mmInsertRow *AgentPublicServiceServerMock) InsertRowBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsertRow.beforeInsertRowCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.InsertRow.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInsertRow *mAgentPublicServiceServerMockInsertRow) Calls() []*AgentPublicServiceServerMockInsertRowParams {
	mmInsertRow.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockInsertRowParams, len(mmInsertRow.callArgs))
	copy(argCopy, mmInsertRow.callArgs)

	mmInsertRow.mutex.RUnlock()

	return argCopy
}

// MinimockInsertRowDone returns true if the count of the InsertRow invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockInsertRowDone() bool {
	if m.InsertRowMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.InsertRowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.InsertRowMock.invocationsDone()
}

// MinimockInsertRowInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockInsertRowInspect() {
	for _, e := range m.InsertRowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.InsertRow at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterInsertRowCounter := mm_atomic.LoadUint64(&m.afterInsertRowCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.InsertRowMock.defaultExpectation != nil && afterInsertRowCounter < 1 {
		if m.InsertRowMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.InsertRow at\n%s", m.InsertRowMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.InsertRow at\n%s with params: %#v", m.InsertRowMock.defaultExpectation.expectationOrigins.origin, *m.InsertRowMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsertRow != nil && afterInsertRowCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.InsertRow at\n%s", m.funcInsertRowOrigin)
	}

	if !m.InsertRowMock.invocationsDone() && afterInsertRowCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.InsertRow at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.InsertRowMock.expectedInvocations), m.InsertRowMock.expectedInvocationsOrigin, afterInsertRowCounter)
	}
}

type mAgentPublicServiceServerMockListChatTables struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockListChatTablesExpectation
	expectations       []*AgentPublicServiceServerMockListChatTablesExpectation

	callArgs []*AgentPublicServiceServerMockListChatTablesParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockListChatTablesExpectation specifies expectation struct of the AgentPublicServiceServer.ListChatTables
type AgentPublicServiceServerMockListChatTablesExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockListChatTablesParams
	paramPtrs          *AgentPublicServiceServerMockListChatTablesParamPtrs
	expectationOrigins AgentPublicServiceServerMockListChatTablesExpectationOrigins
	results            *AgentPublicServiceServerMockListChatTablesResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockListChatTablesParams contains parameters of the AgentPublicServiceServer.ListChatTables
type AgentPublicServiceServerMockListChatTablesParams struct {
	ctx context.Context
	lp1 *mm_agentv1alpha.ListChatTablesRequest
}

// AgentPublicServiceServerMockListChatTablesParamPtrs contains pointers to parameters of the AgentPublicServiceServer.ListChatTables
type AgentPublicServiceServerMockListChatTablesParamPtrs struct {
	ctx *context.Context
	lp1 **mm_agentv1alpha.ListChatTablesRequest
}

// AgentPublicServiceServerMockListChatTablesResults contains results of the AgentPublicServiceServer.ListChatTables
type AgentPublicServiceServerMockListChatTablesResults struct {
	lp2 *mm_agentv1alpha.ListChatTablesResponse
	err error
}

// AgentPublicServiceServerMockListChatTablesOrigins contains origins of expectations of the AgentPublicServiceServer.ListChatTables
type AgentPublicServiceServerMockListChatTablesExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListChatTables *mAgentPublicServiceServerMockListChatTables) Optional() *mAgentPublicServiceServerMockListChatTables {
	mmListChatTables.optional = true
	return mmListChatTables
}

// Expect sets up expected params for AgentPublicServiceServer.ListChatTables
func (mmListChatTables *mAgentPublicServiceServerMockListChatTables) Expect(ctx context.Context, lp1 *mm_agentv1alpha.ListChatTablesRequest) *mAgentPublicServiceServerMockListChatTables {
	if mmListChatTables.mock.funcListChatTables != nil {
		mmListChatTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListChatTables mock is already set by Set")
	}

	if mmListChatTables.defaultExpectation == nil {
		mmListChatTables.defaultExpectation = &AgentPublicServiceServerMockListChatTablesExpectation{}
	}

	if mmListChatTables.defaultExpectation.paramPtrs != nil {
		mmListChatTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListChatTables mock is already set by ExpectParams functions")
	}

	mmListChatTables.defaultExpectation.params = &AgentPublicServiceServerMockListChatTablesParams{ctx, lp1}
	mmListChatTables.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListChatTables.expectations {
		if minimock.Equal(e.params, mmListChatTables.defaultExpectation.params) {
			mmListChatTables.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListChatTables.defaultExpectation.params)
		}
	}

	return mmListChatTables
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.ListChatTables
func (mmListChatTables *mAgentPublicServiceServerMockListChatTables) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockListChatTables {
	if mmListChatTables.mock.funcListChatTables != nil {
		mmListChatTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListChatTables mock is already set by Set")
	}

	if mmListChatTables.defaultExpectation == nil {
		mmListChatTables.defaultExpectation = &AgentPublicServiceServerMockListChatTablesExpectation{}
	}

	if mmListChatTables.defaultExpectation.params != nil {
		mmListChatTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListChatTables mock is already set by Expect")
	}

	if mmListChatTables.defaultExpectation.paramPtrs == nil {
		mmListChatTables.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockListChatTablesParamPtrs{}
	}
	mmListChatTables.defaultExpectation.paramPtrs.ctx = &ctx
	mmListChatTables.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListChatTables
}

// ExpectLp1Param2 sets up expected param lp1 for AgentPublicServiceServer.ListChatTables
func (mmListChatTables *mAgentPublicServiceServerMockListChatTables) ExpectLp1Param2(lp1 *mm_agentv1alpha.ListChatTablesRequest) *mAgentPublicServiceServerMockListChatTables {
	if mmListChatTables.mock.funcListChatTables != nil {
		mmListChatTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListChatTables mock is already set by Set")
	}

	if mmListChatTables.defaultExpectation == nil {
		mmListChatTables.defaultExpectation = &AgentPublicServiceServerMockListChatTablesExpectation{}
	}

	if mmListChatTables.defaultExpectation.params != nil {
		mmListChatTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListChatTables mock is already set by Expect")
	}

	if mmListChatTables.defaultExpectation.paramPtrs == nil {
		mmListChatTables.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockListChatTablesParamPtrs{}
	}
	mmListChatTables.defaultExpectation.paramPtrs.lp1 = &lp1
	mmListChatTables.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmListChatTables
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.ListChatTables
func (mmListChatTables *mAgentPublicServiceServerMockListChatTables) Inspect(f func(ctx context.Context, lp1 *mm_agentv1alpha.ListChatTablesRequest)) *mAgentPublicServiceServerMockListChatTables {
	if mmListChatTables.mock.inspectFuncListChatTables != nil {
		mmListChatTables.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.ListChatTables")
	}

	mmListChatTables.mock.inspectFuncListChatTables = f

	return mmListChatTables
}

// Return sets up results that will be returned by AgentPublicServiceServer.ListChatTables
func (mmListChatTables *mAgentPublicServiceServerMockListChatTables) Return(lp2 *mm_agentv1alpha.ListChatTablesResponse, err error) *AgentPublicServiceServerMock {
	if mmListChatTables.mock.funcListChatTables != nil {
		mmListChatTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListChatTables mock is already set by Set")
	}

	if mmListChatTables.defaultExpectation == nil {
		mmListChatTables.defaultExpectation = &AgentPublicServiceServerMockListChatTablesExpectation{mock: mmListChatTables.mock}
	}
	mmListChatTables.defaultExpectation.results = &AgentPublicServiceServerMockListChatTablesResults{lp2, err}
	mmListChatTables.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListChatTables.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.ListChatTables method
func (mmListChatTables *mAgentPublicServiceServerMockListChatTables) Set(f func(ctx context.Context, lp1 *mm_agentv1alpha.ListChatTablesRequest) (lp2 *mm_agentv1alpha.ListChatTablesResponse, err error)) *AgentPublicServiceServerMock {
	if mmListChatTables.defaultExpectation != nil {
		mmListChatTables.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.ListChatTables method")
	}

	if len(mmListChatTables.expectations) > 0 {
		mmListChatTables.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.ListChatTables method")
	}

	mmListChatTables.mock.funcListChatTables = f
	mmListChatTables.mock.funcListChatTablesOrigin = minimock.CallerInfo(1)
	return mmListChatTables.mock
}

// When sets expectation for the AgentPublicServiceServer.ListChatTables which will trigger the result defined by the following
// Then helper
func (mmListChatTables *mAgentPublicServiceServerMockListChatTables) When(ctx context.Context, lp1 *mm_agentv1alpha.ListChatTablesRequest) *AgentPublicServiceServerMockListChatTablesExpectation {
	if mmListChatTables.mock.funcListChatTables != nil {
		mmListChatTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListChatTables mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockListChatTablesExpectation{
		mock:               mmListChatTables.mock,
		params:             &AgentPublicServiceServerMockListChatTablesParams{ctx, lp1},
		expectationOrigins: AgentPublicServiceServerMockListChatTablesExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListChatTables.expectations = append(mmListChatTables.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.ListChatTables return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockListChatTablesExpectation) Then(lp2 *mm_agentv1alpha.ListChatTablesResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockListChatTablesResults{lp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.ListChatTables should be invoked
func (mmListChatTables *mAgentPublicServiceServerMockListChatTables) Times(n uint64) *mAgentPublicServiceServerMockListChatTables {
	if n == 0 {
		mmListChatTables.mock.t.Fatalf("Times of AgentPublicServiceServerMock.ListChatTables mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListChatTables.expectedInvocations, n)
	mmListChatTables.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListChatTables
}

func (mmListChatTables *mAgentPublicServiceServerMockListChatTables) invocationsDone() bool {
	if len(mmListChatTables.expectations) == 0 && mmListChatTables.defaultExpectation == nil && mmListChatTables.mock.funcListChatTables == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListChatTables.mock.afterListChatTablesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListChatTables.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListChatTables implements mm_agentv1alpha.AgentPublicServiceServer
func (mmListChatTables *AgentPublicServiceServerMock) ListChatTables(ctx context.Context, lp1 *mm_agentv1alpha.ListChatTablesRequest) (lp2 *mm_agentv1alpha.ListChatTablesResponse, err error) {
	mm_atomic.AddUint64(&mmListChatTables.beforeListChatTablesCounter, 1)
	defer mm_atomic.AddUint64(&mmListChatTables.afterListChatTablesCounter, 1)

	mmListChatTables.t.Helper()

	if mmListChatTables.inspectFuncListChatTables != nil {
		mmListChatTables.inspectFuncListChatTables(ctx, lp1)
	}

	mm_params := AgentPublicServiceServerMockListChatTablesParams{ctx, lp1}

	// Record call args
	mmListChatTables.ListChatTablesMock.mutex.Lock()
	mmListChatTables.ListChatTablesMock.callArgs = append(mmListChatTables.ListChatTablesMock.callArgs, &mm_params)
	mmListChatTables.ListChatTablesMock.mutex.Unlock()

	for _, e := range mmListChatTables.ListChatTablesMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmListChatTables.ListChatTablesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListChatTables.ListChatTablesMock.defaultExpectation.Counter, 1)
		mm_want := mmListChatTables.ListChatTablesMock.defaultExpectation.params
		mm_want_ptrs := mmListChatTables.ListChatTablesMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockListChatTablesParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListChatTables.t.Errorf("AgentPublicServiceServerMock.ListChatTables got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListChatTables.ListChatTablesMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmListChatTables.t.Errorf("AgentPublicServiceServerMock.ListChatTables got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListChatTables.ListChatTablesMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListChatTables.t.Errorf("AgentPublicServiceServerMock.ListChatTables got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListChatTables.ListChatTablesMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListChatTables.ListChatTablesMock.defaultExpectation.results
		if mm_results == nil {
			mmListChatTables.t.Fatal("No results are set for the AgentPublicServiceServerMock.ListChatTables")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmListChatTables.funcListChatTables != nil {
		return mmListChatTables.funcListChatTables(ctx, lp1)
	}
	mmListChatTables.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.ListChatTables. %v %v", ctx, lp1)
	return
}

// ListChatTablesAfterCounter returns a count of finished AgentPublicServiceServerMock.ListChatTables invocations
func (mmListChatTables *AgentPublicServiceServerMock) ListChatTablesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListChatTables.afterListChatTablesCounter)
}

// ListChatTablesBeforeCounter returns a count of AgentPublicServiceServerMock.ListChatTables invocations
func (mmListChatTables *AgentPublicServiceServerMock) ListChatTablesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListChatTables.beforeListChatTablesCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.ListChatTables.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListChatTables *mAgentPublicServiceServerMockListChatTables) Calls() []*AgentPublicServiceServerMockListChatTablesParams {
	mmListChatTables.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockListChatTablesParams, len(mmListChatTables.callArgs))
	copy(argCopy, mmListChatTables.callArgs)

	mmListChatTables.mutex.RUnlock()

	return argCopy
}

// MinimockListChatTablesDone returns true if the count of the ListChatTables invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockListChatTablesDone() bool {
	if m.ListChatTablesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListChatTablesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListChatTablesMock.invocationsDone()
}

// MinimockListChatTablesInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockListChatTablesInspect() {
	for _, e := range m.ListChatTablesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListChatTables at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListChatTablesCounter := mm_atomic.LoadUint64(&m.afterListChatTablesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListChatTablesMock.defaultExpectation != nil && afterListChatTablesCounter < 1 {
		if m.ListChatTablesMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListChatTables at\n%s", m.ListChatTablesMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListChatTables at\n%s with params: %#v", m.ListChatTablesMock.defaultExpectation.expectationOrigins.origin, *m.ListChatTablesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListChatTables != nil && afterListChatTablesCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListChatTables at\n%s", m.funcListChatTablesOrigin)
	}

	if !m.ListChatTablesMock.invocationsDone() && afterListChatTablesCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.ListChatTables at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListChatTablesMock.expectedInvocations), m.ListChatTablesMock.expectedInvocationsOrigin, afterListChatTablesCounter)
	}
}

type mAgentPublicServiceServerMockListChats struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockListChatsExpectation
	expectations       []*AgentPublicServiceServerMockListChatsExpectation

	callArgs []*AgentPublicServiceServerMockListChatsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockListChatsExpectation specifies expectation struct of the AgentPublicServiceServer.ListChats
type AgentPublicServiceServerMockListChatsExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockListChatsParams
	paramPtrs          *AgentPublicServiceServerMockListChatsParamPtrs
	expectationOrigins AgentPublicServiceServerMockListChatsExpectationOrigins
	results            *AgentPublicServiceServerMockListChatsResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockListChatsParams contains parameters of the AgentPublicServiceServer.ListChats
type AgentPublicServiceServerMockListChatsParams struct {
	ctx context.Context
	lp1 *mm_agentv1alpha.ListChatsRequest
}

// AgentPublicServiceServerMockListChatsParamPtrs contains pointers to parameters of the AgentPublicServiceServer.ListChats
type AgentPublicServiceServerMockListChatsParamPtrs struct {
	ctx *context.Context
	lp1 **mm_agentv1alpha.ListChatsRequest
}

// AgentPublicServiceServerMockListChatsResults contains results of the AgentPublicServiceServer.ListChats
type AgentPublicServiceServerMockListChatsResults struct {
	lp2 *mm_agentv1alpha.ListChatsResponse
	err error
}

// AgentPublicServiceServerMockListChatsOrigins contains origins of expectations of the AgentPublicServiceServer.ListChats
type AgentPublicServiceServerMockListChatsExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListChats *mAgentPublicServiceServerMockListChats) Optional() *mAgentPublicServiceServerMockListChats {
	mmListChats.optional = true
	return mmListChats
}

// Expect sets up expected params for AgentPublicServiceServer.ListChats
func (mmListChats *mAgentPublicServiceServerMockListChats) Expect(ctx context.Context, lp1 *mm_agentv1alpha.ListChatsRequest) *mAgentPublicServiceServerMockListChats {
	if mmListChats.mock.funcListChats != nil {
		mmListChats.mock.t.Fatalf("AgentPublicServiceServerMock.ListChats mock is already set by Set")
	}

	if mmListChats.defaultExpectation == nil {
		mmListChats.defaultExpectation = &AgentPublicServiceServerMockListChatsExpectation{}
	}

	if mmListChats.defaultExpectation.paramPtrs != nil {
		mmListChats.mock.t.Fatalf("AgentPublicServiceServerMock.ListChats mock is already set by ExpectParams functions")
	}

	mmListChats.defaultExpectation.params = &AgentPublicServiceServerMockListChatsParams{ctx, lp1}
	mmListChats.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListChats.expectations {
		if minimock.Equal(e.params, mmListChats.defaultExpectation.params) {
			mmListChats.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListChats.defaultExpectation.params)
		}
	}

	return mmListChats
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.ListChats
func (mmListChats *mAgentPublicServiceServerMockListChats) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockListChats {
	if mmListChats.mock.funcListChats != nil {
		mmListChats.mock.t.Fatalf("AgentPublicServiceServerMock.ListChats mock is already set by Set")
	}

	if mmListChats.defaultExpectation == nil {
		mmListChats.defaultExpectation = &AgentPublicServiceServerMockListChatsExpectation{}
	}

	if mmListChats.defaultExpectation.params != nil {
		mmListChats.mock.t.Fatalf("AgentPublicServiceServerMock.ListChats mock is already set by Expect")
	}

	if mmListChats.defaultExpectation.paramPtrs == nil {
		mmListChats.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockListChatsParamPtrs{}
	}
	mmListChats.defaultExpectation.paramPtrs.ctx = &ctx
	mmListChats.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListChats
}

// ExpectLp1Param2 sets up expected param lp1 for AgentPublicServiceServer.ListChats
func (mmListChats *mAgentPublicServiceServerMockListChats) ExpectLp1Param2(lp1 *mm_agentv1alpha.ListChatsRequest) *mAgentPublicServiceServerMockListChats {
	if mmListChats.mock.funcListChats != nil {
		mmListChats.mock.t.Fatalf("AgentPublicServiceServerMock.ListChats mock is already set by Set")
	}

	if mmListChats.defaultExpectation == nil {
		mmListChats.defaultExpectation = &AgentPublicServiceServerMockListChatsExpectation{}
	}

	if mmListChats.defaultExpectation.params != nil {
		mmListChats.mock.t.Fatalf("AgentPublicServiceServerMock.ListChats mock is already set by Expect")
	}

	if mmListChats.defaultExpectation.paramPtrs == nil {
		mmListChats.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockListChatsParamPtrs{}
	}
	mmListChats.defaultExpectation.paramPtrs.lp1 = &lp1
	mmListChats.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmListChats
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.ListChats
func (mmListChats *mAgentPublicServiceServerMockListChats) Inspect(f func(ctx context.Context, lp1 *mm_agentv1alpha.ListChatsRequest)) *mAgentPublicServiceServerMockListChats {
	if mmListChats.mock.inspectFuncListChats != nil {
		mmListChats.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.ListChats")
	}

	mmListChats.mock.inspectFuncListChats = f

	return mmListChats
}

// Return sets up results that will be returned by AgentPublicServiceServer.ListChats
func (mmListChats *mAgentPublicServiceServerMockListChats) Return(lp2 *mm_agentv1alpha.ListChatsResponse, err error) *AgentPublicServiceServerMock {
	if mmListChats.mock.funcListChats != nil {
		mmListChats.mock.t.Fatalf("AgentPublicServiceServerMock.ListChats mock is already set by Set")
	}

	if mmListChats.defaultExpectation == nil {
		mmListChats.defaultExpectation = &AgentPublicServiceServerMockListChatsExpectation{mock: mmListChats.mock}
	}
	mmListChats.defaultExpectation.results = &AgentPublicServiceServerMockListChatsResults{lp2, err}
	mmListChats.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListChats.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.ListChats method
func (mmListChats *mAgentPublicServiceServerMockListChats) Set(f func(ctx context.Context, lp1 *mm_agentv1alpha.ListChatsRequest) (lp2 *mm_agentv1alpha.ListChatsResponse, err error)) *AgentPublicServiceServerMock {
	if mmListChats.defaultExpectation != nil {
		mmListChats.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.ListChats method")
	}

	if len(mmListChats.expectations) > 0 {
		mmListChats.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.ListChats method")
	}

	mmListChats.mock.funcListChats = f
	mmListChats.mock.funcListChatsOrigin = minimock.CallerInfo(1)
	return mmListChats.mock
}

// When sets expectation for the AgentPublicServiceServer.ListChats which will trigger the result defined by the following
// Then helper
func (mmListChats *mAgentPublicServiceServerMockListChats) When(ctx context.Context, lp1 *mm_agentv1alpha.ListChatsRequest) *AgentPublicServiceServerMockListChatsExpectation {
	if mmListChats.mock.funcListChats != nil {
		mmListChats.mock.t.Fatalf("AgentPublicServiceServerMock.ListChats mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockListChatsExpectation{
		mock:               mmListChats.mock,
		params:             &AgentPublicServiceServerMockListChatsParams{ctx, lp1},
		expectationOrigins: AgentPublicServiceServerMockListChatsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListChats.expectations = append(mmListChats.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.ListChats return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockListChatsExpectation) Then(lp2 *mm_agentv1alpha.ListChatsResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockListChatsResults{lp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.ListChats should be invoked
func (mmListChats *mAgentPublicServiceServerMockListChats) Times(n uint64) *mAgentPublicServiceServerMockListChats {
	if n == 0 {
		mmListChats.mock.t.Fatalf("Times of AgentPublicServiceServerMock.ListChats mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListChats.expectedInvocations, n)
	mmListChats.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListChats
}

func (mmListChats *mAgentPublicServiceServerMockListChats) invocationsDone() bool {
	if len(mmListChats.expectations) == 0 && mmListChats.defaultExpectation == nil && mmListChats.mock.funcListChats == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListChats.mock.afterListChatsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListChats.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListChats implements mm_agentv1alpha.AgentPublicServiceServer
func (mmListChats *AgentPublicServiceServerMock) ListChats(ctx context.Context, lp1 *mm_agentv1alpha.ListChatsRequest) (lp2 *mm_agentv1alpha.ListChatsResponse, err error) {
	mm_atomic.AddUint64(&mmListChats.beforeListChatsCounter, 1)
	defer mm_atomic.AddUint64(&mmListChats.afterListChatsCounter, 1)

	mmListChats.t.Helper()

	if mmListChats.inspectFuncListChats != nil {
		mmListChats.inspectFuncListChats(ctx, lp1)
	}

	mm_params := AgentPublicServiceServerMockListChatsParams{ctx, lp1}

	// Record call args
	mmListChats.ListChatsMock.mutex.Lock()
	mmListChats.ListChatsMock.callArgs = append(mmListChats.ListChatsMock.callArgs, &mm_params)
	mmListChats.ListChatsMock.mutex.Unlock()

	for _, e := range mmListChats.ListChatsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmListChats.ListChatsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListChats.ListChatsMock.defaultExpectation.Counter, 1)
		mm_want := mmListChats.ListChatsMock.defaultExpectation.params
		mm_want_ptrs := mmListChats.ListChatsMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockListChatsParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListChats.t.Errorf("AgentPublicServiceServerMock.ListChats got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListChats.ListChatsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmListChats.t.Errorf("AgentPublicServiceServerMock.ListChats got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListChats.ListChatsMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListChats.t.Errorf("AgentPublicServiceServerMock.ListChats got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListChats.ListChatsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListChats.ListChatsMock.defaultExpectation.results
		if mm_results == nil {
			mmListChats.t.Fatal("No results are set for the AgentPublicServiceServerMock.ListChats")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmListChats.funcListChats != nil {
		return mmListChats.funcListChats(ctx, lp1)
	}
	mmListChats.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.ListChats. %v %v", ctx, lp1)
	return
}

// ListChatsAfterCounter returns a count of finished AgentPublicServiceServerMock.ListChats invocations
func (mmListChats *AgentPublicServiceServerMock) ListChatsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListChats.afterListChatsCounter)
}

// ListChatsBeforeCounter returns a count of AgentPublicServiceServerMock.ListChats invocations
func (mmListChats *AgentPublicServiceServerMock) ListChatsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListChats.beforeListChatsCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.ListChats.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListChats *mAgentPublicServiceServerMockListChats) Calls() []*AgentPublicServiceServerMockListChatsParams {
	mmListChats.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockListChatsParams, len(mmListChats.callArgs))
	copy(argCopy, mmListChats.callArgs)

	mmListChats.mutex.RUnlock()

	return argCopy
}

// MinimockListChatsDone returns true if the count of the ListChats invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockListChatsDone() bool {
	if m.ListChatsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListChatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListChatsMock.invocationsDone()
}

// MinimockListChatsInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockListChatsInspect() {
	for _, e := range m.ListChatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListChats at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListChatsCounter := mm_atomic.LoadUint64(&m.afterListChatsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListChatsMock.defaultExpectation != nil && afterListChatsCounter < 1 {
		if m.ListChatsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListChats at\n%s", m.ListChatsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListChats at\n%s with params: %#v", m.ListChatsMock.defaultExpectation.expectationOrigins.origin, *m.ListChatsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListChats != nil && afterListChatsCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListChats at\n%s", m.funcListChatsOrigin)
	}

	if !m.ListChatsMock.invocationsDone() && afterListChatsCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.ListChats at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListChatsMock.expectedInvocations), m.ListChatsMock.expectedInvocationsOrigin, afterListChatsCounter)
	}
}

type mAgentPublicServiceServerMockListMessages struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockListMessagesExpectation
	expectations       []*AgentPublicServiceServerMockListMessagesExpectation

	callArgs []*AgentPublicServiceServerMockListMessagesParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockListMessagesExpectation specifies expectation struct of the AgentPublicServiceServer.ListMessages
type AgentPublicServiceServerMockListMessagesExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockListMessagesParams
	paramPtrs          *AgentPublicServiceServerMockListMessagesParamPtrs
	expectationOrigins AgentPublicServiceServerMockListMessagesExpectationOrigins
	results            *AgentPublicServiceServerMockListMessagesResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockListMessagesParams contains parameters of the AgentPublicServiceServer.ListMessages
type AgentPublicServiceServerMockListMessagesParams struct {
	ctx context.Context
	lp1 *mm_agentv1alpha.ListMessagesRequest
}

// AgentPublicServiceServerMockListMessagesParamPtrs contains pointers to parameters of the AgentPublicServiceServer.ListMessages
type AgentPublicServiceServerMockListMessagesParamPtrs struct {
	ctx *context.Context
	lp1 **mm_agentv1alpha.ListMessagesRequest
}

// AgentPublicServiceServerMockListMessagesResults contains results of the AgentPublicServiceServer.ListMessages
type AgentPublicServiceServerMockListMessagesResults struct {
	lp2 *mm_agentv1alpha.ListMessagesResponse
	err error
}

// AgentPublicServiceServerMockListMessagesOrigins contains origins of expectations of the AgentPublicServiceServer.ListMessages
type AgentPublicServiceServerMockListMessagesExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListMessages *mAgentPublicServiceServerMockListMessages) Optional() *mAgentPublicServiceServerMockListMessages {
	mmListMessages.optional = true
	return mmListMessages
}

// Expect sets up expected params for AgentPublicServiceServer.ListMessages
func (mmListMessages *mAgentPublicServiceServerMockListMessages) Expect(ctx context.Context, lp1 *mm_agentv1alpha.ListMessagesRequest) *mAgentPublicServiceServerMockListMessages {
	if mmListMessages.mock.funcListMessages != nil {
		mmListMessages.mock.t.Fatalf("AgentPublicServiceServerMock.ListMessages mock is already set by Set")
	}

	if mmListMessages.defaultExpectation == nil {
		mmListMessages.defaultExpectation = &AgentPublicServiceServerMockListMessagesExpectation{}
	}

	if mmListMessages.defaultExpectation.paramPtrs != nil {
		mmListMessages.mock.t.Fatalf("AgentPublicServiceServerMock.ListMessages mock is already set by ExpectParams functions")
	}

	mmListMessages.defaultExpectation.params = &AgentPublicServiceServerMockListMessagesParams{ctx, lp1}
	mmListMessages.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListMessages.expectations {
		if minimock.Equal(e.params, mmListMessages.defaultExpectation.params) {
			mmListMessages.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListMessages.defaultExpectation.params)
		}
	}

	return mmListMessages
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.ListMessages
func (mmListMessages *mAgentPublicServiceServerMockListMessages) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockListMessages {
	if mmListMessages.mock.funcListMessages != nil {
		mmListMessages.mock.t.Fatalf("AgentPublicServiceServerMock.ListMessages mock is already set by Set")
	}

	if mmListMessages.defaultExpectation == nil {
		mmListMessages.defaultExpectation = &AgentPublicServiceServerMockListMessagesExpectation{}
	}

	if mmListMessages.defaultExpectation.params != nil {
		mmListMessages.mock.t.Fatalf("AgentPublicServiceServerMock.ListMessages mock is already set by Expect")
	}

	if mmListMessages.defaultExpectation.paramPtrs == nil {
		mmListMessages.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockListMessagesParamPtrs{}
	}
	mmListMessages.defaultExpectation.paramPtrs.ctx = &ctx
	mmListMessages.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListMessages
}

// ExpectLp1Param2 sets up expected param lp1 for AgentPublicServiceServer.ListMessages
func (mmListMessages *mAgentPublicServiceServerMockListMessages) ExpectLp1Param2(lp1 *mm_agentv1alpha.ListMessagesRequest) *mAgentPublicServiceServerMockListMessages {
	if mmListMessages.mock.funcListMessages != nil {
		mmListMessages.mock.t.Fatalf("AgentPublicServiceServerMock.ListMessages mock is already set by Set")
	}

	if mmListMessages.defaultExpectation == nil {
		mmListMessages.defaultExpectation = &AgentPublicServiceServerMockListMessagesExpectation{}
	}

	if mmListMessages.defaultExpectation.params != nil {
		mmListMessages.mock.t.Fatalf("AgentPublicServiceServerMock.ListMessages mock is already set by Expect")
	}

	if mmListMessages.defaultExpectation.paramPtrs == nil {
		mmListMessages.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockListMessagesParamPtrs{}
	}
	mmListMessages.defaultExpectation.paramPtrs.lp1 = &lp1
	mmListMessages.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmListMessages
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.ListMessages
func (mmListMessages *mAgentPublicServiceServerMockListMessages) Inspect(f func(ctx context.Context, lp1 *mm_agentv1alpha.ListMessagesRequest)) *mAgentPublicServiceServerMockListMessages {
	if mmListMessages.mock.inspectFuncListMessages != nil {
		mmListMessages.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.ListMessages")
	}

	mmListMessages.mock.inspectFuncListMessages = f

	return mmListMessages
}

// Return sets up results that will be returned by AgentPublicServiceServer.ListMessages
func (mmListMessages *mAgentPublicServiceServerMockListMessages) Return(lp2 *mm_agentv1alpha.ListMessagesResponse, err error) *AgentPublicServiceServerMock {
	if mmListMessages.mock.funcListMessages != nil {
		mmListMessages.mock.t.Fatalf("AgentPublicServiceServerMock.ListMessages mock is already set by Set")
	}

	if mmListMessages.defaultExpectation == nil {
		mmListMessages.defaultExpectation = &AgentPublicServiceServerMockListMessagesExpectation{mock: mmListMessages.mock}
	}
	mmListMessages.defaultExpectation.results = &AgentPublicServiceServerMockListMessagesResults{lp2, err}
	mmListMessages.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListMessages.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.ListMessages method
func (mmListMessages *mAgentPublicServiceServerMockListMessages) Set(f func(ctx context.Context, lp1 *mm_agentv1alpha.ListMessagesRequest) (lp2 *mm_agentv1alpha.ListMessagesResponse, err error)) *AgentPublicServiceServerMock {
	if mmListMessages.defaultExpectation != nil {
		mmListMessages.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.ListMessages method")
	}

	if len(mmListMessages.expectations) > 0 {
		mmListMessages.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.ListMessages method")
	}

	mmListMessages.mock.funcListMessages = f
	mmListMessages.mock.funcListMessagesOrigin = minimock.CallerInfo(1)
	return mmListMessages.mock
}

// When sets expectation for the AgentPublicServiceServer.ListMessages which will trigger the result defined by the following
// Then helper
func (mmListMessages *mAgentPublicServiceServerMockListMessages) When(ctx context.Context, lp1 *mm_agentv1alpha.ListMessagesRequest) *AgentPublicServiceServerMockListMessagesExpectation {
	if mmListMessages.mock.funcListMessages != nil {
		mmListMessages.mock.t.Fatalf("AgentPublicServiceServerMock.ListMessages mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockListMessagesExpectation{
		mock:               mmListMessages.mock,
		params:             &AgentPublicServiceServerMockListMessagesParams{ctx, lp1},
		expectationOrigins: AgentPublicServiceServerMockListMessagesExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListMessages.expectations = append(mmListMessages.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.ListMessages return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockListMessagesExpectation) Then(lp2 *mm_agentv1alpha.ListMessagesResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockListMessagesResults{lp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.ListMessages should be invoked
func (mmListMessages *mAgentPublicServiceServerMockListMessages) Times(n uint64) *mAgentPublicServiceServerMockListMessages {
	if n == 0 {
		mmListMessages.mock.t.Fatalf("Times of AgentPublicServiceServerMock.ListMessages mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListMessages.expectedInvocations, n)
	mmListMessages.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListMessages
}

func (mmListMessages *mAgentPublicServiceServerMockListMessages) invocationsDone() bool {
	if len(mmListMessages.expectations) == 0 && mmListMessages.defaultExpectation == nil && mmListMessages.mock.funcListMessages == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListMessages.mock.afterListMessagesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListMessages.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListMessages implements mm_agentv1alpha.AgentPublicServiceServer
func (mmListMessages *AgentPublicServiceServerMock) ListMessages(ctx context.Context, lp1 *mm_agentv1alpha.ListMessagesRequest) (lp2 *mm_agentv1alpha.ListMessagesResponse, err error) {
	mm_atomic.AddUint64(&mmListMessages.beforeListMessagesCounter, 1)
	defer mm_atomic.AddUint64(&mmListMessages.afterListMessagesCounter, 1)

	mmListMessages.t.Helper()

	if mmListMessages.inspectFuncListMessages != nil {
		mmListMessages.inspectFuncListMessages(ctx, lp1)
	}

	mm_params := AgentPublicServiceServerMockListMessagesParams{ctx, lp1}

	// Record call args
	mmListMessages.ListMessagesMock.mutex.Lock()
	mmListMessages.ListMessagesMock.callArgs = append(mmListMessages.ListMessagesMock.callArgs, &mm_params)
	mmListMessages.ListMessagesMock.mutex.Unlock()

	for _, e := range mmListMessages.ListMessagesMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmListMessages.ListMessagesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListMessages.ListMessagesMock.defaultExpectation.Counter, 1)
		mm_want := mmListMessages.ListMessagesMock.defaultExpectation.params
		mm_want_ptrs := mmListMessages.ListMessagesMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockListMessagesParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListMessages.t.Errorf("AgentPublicServiceServerMock.ListMessages got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListMessages.ListMessagesMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmListMessages.t.Errorf("AgentPublicServiceServerMock.ListMessages got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListMessages.ListMessagesMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListMessages.t.Errorf("AgentPublicServiceServerMock.ListMessages got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListMessages.ListMessagesMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListMessages.ListMessagesMock.defaultExpectation.results
		if mm_results == nil {
			mmListMessages.t.Fatal("No results are set for the AgentPublicServiceServerMock.ListMessages")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmListMessages.funcListMessages != nil {
		return mmListMessages.funcListMessages(ctx, lp1)
	}
	mmListMessages.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.ListMessages. %v %v", ctx, lp1)
	return
}

// ListMessagesAfterCounter returns a count of finished AgentPublicServiceServerMock.ListMessages invocations
func (mmListMessages *AgentPublicServiceServerMock) ListMessagesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListMessages.afterListMessagesCounter)
}

// ListMessagesBeforeCounter returns a count of AgentPublicServiceServerMock.ListMessages invocations
func (mmListMessages *AgentPublicServiceServerMock) ListMessagesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListMessages.beforeListMessagesCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.ListMessages.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListMessages *mAgentPublicServiceServerMockListMessages) Calls() []*AgentPublicServiceServerMockListMessagesParams {
	mmListMessages.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockListMessagesParams, len(mmListMessages.callArgs))
	copy(argCopy, mmListMessages.callArgs)

	mmListMessages.mutex.RUnlock()

	return argCopy
}

// MinimockListMessagesDone returns true if the count of the ListMessages invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockListMessagesDone() bool {
	if m.ListMessagesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListMessagesMock.invocationsDone()
}

// MinimockListMessagesInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockListMessagesInspect() {
	for _, e := range m.ListMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListMessages at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListMessagesCounter := mm_atomic.LoadUint64(&m.afterListMessagesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListMessagesMock.defaultExpectation != nil && afterListMessagesCounter < 1 {
		if m.ListMessagesMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListMessages at\n%s", m.ListMessagesMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListMessages at\n%s with params: %#v", m.ListMessagesMock.defaultExpectation.expectationOrigins.origin, *m.ListMessagesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListMessages != nil && afterListMessagesCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListMessages at\n%s", m.funcListMessagesOrigin)
	}

	if !m.ListMessagesMock.invocationsDone() && afterListMessagesCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.ListMessages at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListMessagesMock.expectedInvocations), m.ListMessagesMock.expectedInvocationsOrigin, afterListMessagesCounter)
	}
}

type mAgentPublicServiceServerMockListRows struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockListRowsExpectation
	expectations       []*AgentPublicServiceServerMockListRowsExpectation

	callArgs []*AgentPublicServiceServerMockListRowsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockListRowsExpectation specifies expectation struct of the AgentPublicServiceServer.ListRows
type AgentPublicServiceServerMockListRowsExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockListRowsParams
	paramPtrs          *AgentPublicServiceServerMockListRowsParamPtrs
	expectationOrigins AgentPublicServiceServerMockListRowsExpectationOrigins
	results            *AgentPublicServiceServerMockListRowsResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockListRowsParams contains parameters of the AgentPublicServiceServer.ListRows
type AgentPublicServiceServerMockListRowsParams struct {
	ctx context.Context
	lp1 *mm_agentv1alpha.ListRowsRequest
}

// AgentPublicServiceServerMockListRowsParamPtrs contains pointers to parameters of the AgentPublicServiceServer.ListRows
type AgentPublicServiceServerMockListRowsParamPtrs struct {
	ctx *context.Context
	lp1 **mm_agentv1alpha.ListRowsRequest
}

// AgentPublicServiceServerMockListRowsResults contains results of the AgentPublicServiceServer.ListRows
type AgentPublicServiceServerMockListRowsResults struct {
	lp2 *mm_agentv1alpha.ListRowsResponse
	err error
}

// AgentPublicServiceServerMockListRowsOrigins contains origins of expectations of the AgentPublicServiceServer.ListRows
type AgentPublicServiceServerMockListRowsExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListRows *mAgentPublicServiceServerMockListRows) Optional() *mAgentPublicServiceServerMockListRows {
	mmListRows.optional = true
	return mmListRows
}

// Expect sets up expected params for AgentPublicServiceServer.ListRows
func (mmListRows *mAgentPublicServiceServerMockListRows) Expect(ctx context.Context, lp1 *mm_agentv1alpha.ListRowsRequest) *mAgentPublicServiceServerMockListRows {
	if mmListRows.mock.funcListRows != nil {
		mmListRows.mock.t.Fatalf("AgentPublicServiceServerMock.ListRows mock is already set by Set")
	}

	if mmListRows.defaultExpectation == nil {
		mmListRows.defaultExpectation = &AgentPublicServiceServerMockListRowsExpectation{}
	}

	if mmListRows.defaultExpectation.paramPtrs != nil {
		mmListRows.mock.t.Fatalf("AgentPublicServiceServerMock.ListRows mock is already set by ExpectParams functions")
	}

	mmListRows.defaultExpectation.params = &AgentPublicServiceServerMockListRowsParams{ctx, lp1}
	mmListRows.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListRows.expectations {
		if minimock.Equal(e.params, mmListRows.defaultExpectation.params) {
			mmListRows.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListRows.defaultExpectation.params)
		}
	}

	return mmListRows
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.ListRows
func (mmListRows *mAgentPublicServiceServerMockListRows) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockListRows {
	if mmListRows.mock.funcListRows != nil {
		mmListRows.mock.t.Fatalf("AgentPublicServiceServerMock.ListRows mock is already set by Set")
	}

	if mmListRows.defaultExpectation == nil {
		mmListRows.defaultExpectation = &AgentPublicServiceServerMockListRowsExpectation{}
	}

	if mmListRows.defaultExpectation.params != nil {
		mmListRows.mock.t.Fatalf("AgentPublicServiceServerMock.ListRows mock is already set by Expect")
	}

	if mmListRows.defaultExpectation.paramPtrs == nil {
		mmListRows.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockListRowsParamPtrs{}
	}
	mmListRows.defaultExpectation.paramPtrs.ctx = &ctx
	mmListRows.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListRows
}

// ExpectLp1Param2 sets up expected param lp1 for AgentPublicServiceServer.ListRows
func (mmListRows *mAgentPublicServiceServerMockListRows) ExpectLp1Param2(lp1 *mm_agentv1alpha.ListRowsRequest) *mAgentPublicServiceServerMockListRows {
	if mmListRows.mock.funcListRows != nil {
		mmListRows.mock.t.Fatalf("AgentPublicServiceServerMock.ListRows mock is already set by Set")
	}

	if mmListRows.defaultExpectation == nil {
		mmListRows.defaultExpectation = &AgentPublicServiceServerMockListRowsExpectation{}
	}

	if mmListRows.defaultExpectation.params != nil {
		mmListRows.mock.t.Fatalf("AgentPublicServiceServerMock.ListRows mock is already set by Expect")
	}

	if mmListRows.defaultExpectation.paramPtrs == nil {
		mmListRows.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockListRowsParamPtrs{}
	}
	mmListRows.defaultExpectation.paramPtrs.lp1 = &lp1
	mmListRows.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmListRows
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.ListRows
func (mmListRows *mAgentPublicServiceServerMockListRows) Inspect(f func(ctx context.Context, lp1 *mm_agentv1alpha.ListRowsRequest)) *mAgentPublicServiceServerMockListRows {
	if mmListRows.mock.inspectFuncListRows != nil {
		mmListRows.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.ListRows")
	}

	mmListRows.mock.inspectFuncListRows = f

	return mmListRows
}

// Return sets up results that will be returned by AgentPublicServiceServer.ListRows
func (mmListRows *mAgentPublicServiceServerMockListRows) Return(lp2 *mm_agentv1alpha.ListRowsResponse, err error) *AgentPublicServiceServerMock {
	if mmListRows.mock.funcListRows != nil {
		mmListRows.mock.t.Fatalf("AgentPublicServiceServerMock.ListRows mock is already set by Set")
	}

	if mmListRows.defaultExpectation == nil {
		mmListRows.defaultExpectation = &AgentPublicServiceServerMockListRowsExpectation{mock: mmListRows.mock}
	}
	mmListRows.defaultExpectation.results = &AgentPublicServiceServerMockListRowsResults{lp2, err}
	mmListRows.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListRows.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.ListRows method
func (mmListRows *mAgentPublicServiceServerMockListRows) Set(f func(ctx context.Context, lp1 *mm_agentv1alpha.ListRowsRequest) (lp2 *mm_agentv1alpha.ListRowsResponse, err error)) *AgentPublicServiceServerMock {
	if mmListRows.defaultExpectation != nil {
		mmListRows.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.ListRows method")
	}

	if len(mmListRows.expectations) > 0 {
		mmListRows.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.ListRows method")
	}

	mmListRows.mock.funcListRows = f
	mmListRows.mock.funcListRowsOrigin = minimock.CallerInfo(1)
	return mmListRows.mock
}

// When sets expectation for the AgentPublicServiceServer.ListRows which will trigger the result defined by the following
// Then helper
func (mmListRows *mAgentPublicServiceServerMockListRows) When(ctx context.Context, lp1 *mm_agentv1alpha.ListRowsRequest) *AgentPublicServiceServerMockListRowsExpectation {
	if mmListRows.mock.funcListRows != nil {
		mmListRows.mock.t.Fatalf("AgentPublicServiceServerMock.ListRows mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockListRowsExpectation{
		mock:               mmListRows.mock,
		params:             &AgentPublicServiceServerMockListRowsParams{ctx, lp1},
		expectationOrigins: AgentPublicServiceServerMockListRowsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListRows.expectations = append(mmListRows.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.ListRows return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockListRowsExpectation) Then(lp2 *mm_agentv1alpha.ListRowsResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockListRowsResults{lp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.ListRows should be invoked
func (mmListRows *mAgentPublicServiceServerMockListRows) Times(n uint64) *mAgentPublicServiceServerMockListRows {
	if n == 0 {
		mmListRows.mock.t.Fatalf("Times of AgentPublicServiceServerMock.ListRows mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListRows.expectedInvocations, n)
	mmListRows.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListRows
}

func (mmListRows *mAgentPublicServiceServerMockListRows) invocationsDone() bool {
	if len(mmListRows.expectations) == 0 && mmListRows.defaultExpectation == nil && mmListRows.mock.funcListRows == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListRows.mock.afterListRowsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListRows.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListRows implements mm_agentv1alpha.AgentPublicServiceServer
func (mmListRows *AgentPublicServiceServerMock) ListRows(ctx context.Context, lp1 *mm_agentv1alpha.ListRowsRequest) (lp2 *mm_agentv1alpha.ListRowsResponse, err error) {
	mm_atomic.AddUint64(&mmListRows.beforeListRowsCounter, 1)
	defer mm_atomic.AddUint64(&mmListRows.afterListRowsCounter, 1)

	mmListRows.t.Helper()

	if mmListRows.inspectFuncListRows != nil {
		mmListRows.inspectFuncListRows(ctx, lp1)
	}

	mm_params := AgentPublicServiceServerMockListRowsParams{ctx, lp1}

	// Record call args
	mmListRows.ListRowsMock.mutex.Lock()
	mmListRows.ListRowsMock.callArgs = append(mmListRows.ListRowsMock.callArgs, &mm_params)
	mmListRows.ListRowsMock.mutex.Unlock()

	for _, e := range mmListRows.ListRowsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmListRows.ListRowsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListRows.ListRowsMock.defaultExpectation.Counter, 1)
		mm_want := mmListRows.ListRowsMock.defaultExpectation.params
		mm_want_ptrs := mmListRows.ListRowsMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockListRowsParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListRows.t.Errorf("AgentPublicServiceServerMock.ListRows got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListRows.ListRowsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmListRows.t.Errorf("AgentPublicServiceServerMock.ListRows got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListRows.ListRowsMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListRows.t.Errorf("AgentPublicServiceServerMock.ListRows got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListRows.ListRowsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListRows.ListRowsMock.defaultExpectation.results
		if mm_results == nil {
			mmListRows.t.Fatal("No results are set for the AgentPublicServiceServerMock.ListRows")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmListRows.funcListRows != nil {
		return mmListRows.funcListRows(ctx, lp1)
	}
	mmListRows.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.ListRows. %v %v", ctx, lp1)
	return
}

// ListRowsAfterCounter returns a count of finished AgentPublicServiceServerMock.ListRows invocations
func (mmListRows *AgentPublicServiceServerMock) ListRowsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListRows.afterListRowsCounter)
}

// ListRowsBeforeCounter returns a count of AgentPublicServiceServerMock.ListRows invocations
func (mmListRows *AgentPublicServiceServerMock) ListRowsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListRows.beforeListRowsCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.ListRows.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListRows *mAgentPublicServiceServerMockListRows) Calls() []*AgentPublicServiceServerMockListRowsParams {
	mmListRows.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockListRowsParams, len(mmListRows.callArgs))
	copy(argCopy, mmListRows.callArgs)

	mmListRows.mutex.RUnlock()

	return argCopy
}

// MinimockListRowsDone returns true if the count of the ListRows invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockListRowsDone() bool {
	if m.ListRowsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListRowsMock.invocationsDone()
}

// MinimockListRowsInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockListRowsInspect() {
	for _, e := range m.ListRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListRows at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListRowsCounter := mm_atomic.LoadUint64(&m.afterListRowsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListRowsMock.defaultExpectation != nil && afterListRowsCounter < 1 {
		if m.ListRowsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListRows at\n%s", m.ListRowsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListRows at\n%s with params: %#v", m.ListRowsMock.defaultExpectation.expectationOrigins.origin, *m.ListRowsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListRows != nil && afterListRowsCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListRows at\n%s", m.funcListRowsOrigin)
	}

	if !m.ListRowsMock.invocationsDone() && afterListRowsCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.ListRows at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListRowsMock.expectedInvocations), m.ListRowsMock.expectedInvocationsOrigin, afterListRowsCounter)
	}
}

type mAgentPublicServiceServerMockListTables struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockListTablesExpectation
	expectations       []*AgentPublicServiceServerMockListTablesExpectation

	callArgs []*AgentPublicServiceServerMockListTablesParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockListTablesExpectation specifies expectation struct of the AgentPublicServiceServer.ListTables
type AgentPublicServiceServerMockListTablesExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockListTablesParams
	paramPtrs          *AgentPublicServiceServerMockListTablesParamPtrs
	expectationOrigins AgentPublicServiceServerMockListTablesExpectationOrigins
	results            *AgentPublicServiceServerMockListTablesResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockListTablesParams contains parameters of the AgentPublicServiceServer.ListTables
type AgentPublicServiceServerMockListTablesParams struct {
	ctx context.Context
	lp1 *mm_agentv1alpha.ListTablesRequest
}

// AgentPublicServiceServerMockListTablesParamPtrs contains pointers to parameters of the AgentPublicServiceServer.ListTables
type AgentPublicServiceServerMockListTablesParamPtrs struct {
	ctx *context.Context
	lp1 **mm_agentv1alpha.ListTablesRequest
}

// AgentPublicServiceServerMockListTablesResults contains results of the AgentPublicServiceServer.ListTables
type AgentPublicServiceServerMockListTablesResults struct {
	lp2 *mm_agentv1alpha.ListTablesResponse
	err error
}

// AgentPublicServiceServerMockListTablesOrigins contains origins of expectations of the AgentPublicServiceServer.ListTables
type AgentPublicServiceServerMockListTablesExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListTables *mAgentPublicServiceServerMockListTables) Optional() *mAgentPublicServiceServerMockListTables {
	mmListTables.optional = true
	return mmListTables
}

// Expect sets up expected params for AgentPublicServiceServer.ListTables
func (mmListTables *mAgentPublicServiceServerMockListTables) Expect(ctx context.Context, lp1 *mm_agentv1alpha.ListTablesRequest) *mAgentPublicServiceServerMockListTables {
	if mmListTables.mock.funcListTables != nil {
		mmListTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListTables mock is already set by Set")
	}

	if mmListTables.defaultExpectation == nil {
		mmListTables.defaultExpectation = &AgentPublicServiceServerMockListTablesExpectation{}
	}

	if mmListTables.defaultExpectation.paramPtrs != nil {
		mmListTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListTables mock is already set by ExpectParams functions")
	}

	mmListTables.defaultExpectation.params = &AgentPublicServiceServerMockListTablesParams{ctx, lp1}
	mmListTables.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListTables.expectations {
		if minimock.Equal(e.params, mmListTables.defaultExpectation.params) {
			mmListTables.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListTables.defaultExpectation.params)
		}
	}

	return mmListTables
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.ListTables
func (mmListTables *mAgentPublicServiceServerMockListTables) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockListTables {
	if mmListTables.mock.funcListTables != nil {
		mmListTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListTables mock is already set by Set")
	}

	if mmListTables.defaultExpectation == nil {
		mmListTables.defaultExpectation = &AgentPublicServiceServerMockListTablesExpectation{}
	}

	if mmListTables.defaultExpectation.params != nil {
		mmListTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListTables mock is already set by Expect")
	}

	if mmListTables.defaultExpectation.paramPtrs == nil {
		mmListTables.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockListTablesParamPtrs{}
	}
	mmListTables.defaultExpectation.paramPtrs.ctx = &ctx
	mmListTables.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListTables
}

// ExpectLp1Param2 sets up expected param lp1 for AgentPublicServiceServer.ListTables
func (mmListTables *mAgentPublicServiceServerMockListTables) ExpectLp1Param2(lp1 *mm_agentv1alpha.ListTablesRequest) *mAgentPublicServiceServerMockListTables {
	if mmListTables.mock.funcListTables != nil {
		mmListTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListTables mock is already set by Set")
	}

	if mmListTables.defaultExpectation == nil {
		mmListTables.defaultExpectation = &AgentPublicServiceServerMockListTablesExpectation{}
	}

	if mmListTables.defaultExpectation.params != nil {
		mmListTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListTables mock is already set by Expect")
	}

	if mmListTables.defaultExpectation.paramPtrs == nil {
		mmListTables.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockListTablesParamPtrs{}
	}
	mmListTables.defaultExpectation.paramPtrs.lp1 = &lp1
	mmListTables.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmListTables
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.ListTables
func (mmListTables *mAgentPublicServiceServerMockListTables) Inspect(f func(ctx context.Context, lp1 *mm_agentv1alpha.ListTablesRequest)) *mAgentPublicServiceServerMockListTables {
	if mmListTables.mock.inspectFuncListTables != nil {
		mmListTables.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.ListTables")
	}

	mmListTables.mock.inspectFuncListTables = f

	return mmListTables
}

// Return sets up results that will be returned by AgentPublicServiceServer.ListTables
func (mmListTables *mAgentPublicServiceServerMockListTables) Return(lp2 *mm_agentv1alpha.ListTablesResponse, err error) *AgentPublicServiceServerMock {
	if mmListTables.mock.funcListTables != nil {
		mmListTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListTables mock is already set by Set")
	}

	if mmListTables.defaultExpectation == nil {
		mmListTables.defaultExpectation = &AgentPublicServiceServerMockListTablesExpectation{mock: mmListTables.mock}
	}
	mmListTables.defaultExpectation.results = &AgentPublicServiceServerMockListTablesResults{lp2, err}
	mmListTables.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListTables.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.ListTables method
func (mmListTables *mAgentPublicServiceServerMockListTables) Set(f func(ctx context.Context, lp1 *mm_agentv1alpha.ListTablesRequest) (lp2 *mm_agentv1alpha.ListTablesResponse, err error)) *AgentPublicServiceServerMock {
	if mmListTables.defaultExpectation != nil {
		mmListTables.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.ListTables method")
	}

	if len(mmListTables.expectations) > 0 {
		mmListTables.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.ListTables method")
	}

	mmListTables.mock.funcListTables = f
	mmListTables.mock.funcListTablesOrigin = minimock.CallerInfo(1)
	return mmListTables.mock
}

// When sets expectation for the AgentPublicServiceServer.ListTables which will trigger the result defined by the following
// Then helper
func (mmListTables *mAgentPublicServiceServerMockListTables) When(ctx context.Context, lp1 *mm_agentv1alpha.ListTablesRequest) *AgentPublicServiceServerMockListTablesExpectation {
	if mmListTables.mock.funcListTables != nil {
		mmListTables.mock.t.Fatalf("AgentPublicServiceServerMock.ListTables mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockListTablesExpectation{
		mock:               mmListTables.mock,
		params:             &AgentPublicServiceServerMockListTablesParams{ctx, lp1},
		expectationOrigins: AgentPublicServiceServerMockListTablesExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListTables.expectations = append(mmListTables.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.ListTables return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockListTablesExpectation) Then(lp2 *mm_agentv1alpha.ListTablesResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockListTablesResults{lp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.ListTables should be invoked
func (mmListTables *mAgentPublicServiceServerMockListTables) Times(n uint64) *mAgentPublicServiceServerMockListTables {
	if n == 0 {
		mmListTables.mock.t.Fatalf("Times of AgentPublicServiceServerMock.ListTables mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListTables.expectedInvocations, n)
	mmListTables.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListTables
}

func (mmListTables *mAgentPublicServiceServerMockListTables) invocationsDone() bool {
	if len(mmListTables.expectations) == 0 && mmListTables.defaultExpectation == nil && mmListTables.mock.funcListTables == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListTables.mock.afterListTablesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListTables.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListTables implements mm_agentv1alpha.AgentPublicServiceServer
func (mmListTables *AgentPublicServiceServerMock) ListTables(ctx context.Context, lp1 *mm_agentv1alpha.ListTablesRequest) (lp2 *mm_agentv1alpha.ListTablesResponse, err error) {
	mm_atomic.AddUint64(&mmListTables.beforeListTablesCounter, 1)
	defer mm_atomic.AddUint64(&mmListTables.afterListTablesCounter, 1)

	mmListTables.t.Helper()

	if mmListTables.inspectFuncListTables != nil {
		mmListTables.inspectFuncListTables(ctx, lp1)
	}

	mm_params := AgentPublicServiceServerMockListTablesParams{ctx, lp1}

	// Record call args
	mmListTables.ListTablesMock.mutex.Lock()
	mmListTables.ListTablesMock.callArgs = append(mmListTables.ListTablesMock.callArgs, &mm_params)
	mmListTables.ListTablesMock.mutex.Unlock()

	for _, e := range mmListTables.ListTablesMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmListTables.ListTablesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListTables.ListTablesMock.defaultExpectation.Counter, 1)
		mm_want := mmListTables.ListTablesMock.defaultExpectation.params
		mm_want_ptrs := mmListTables.ListTablesMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockListTablesParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListTables.t.Errorf("AgentPublicServiceServerMock.ListTables got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListTables.ListTablesMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmListTables.t.Errorf("AgentPublicServiceServerMock.ListTables got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListTables.ListTablesMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListTables.t.Errorf("AgentPublicServiceServerMock.ListTables got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListTables.ListTablesMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListTables.ListTablesMock.defaultExpectation.results
		if mm_results == nil {
			mmListTables.t.Fatal("No results are set for the AgentPublicServiceServerMock.ListTables")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmListTables.funcListTables != nil {
		return mmListTables.funcListTables(ctx, lp1)
	}
	mmListTables.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.ListTables. %v %v", ctx, lp1)
	return
}

// ListTablesAfterCounter returns a count of finished AgentPublicServiceServerMock.ListTables invocations
func (mmListTables *AgentPublicServiceServerMock) ListTablesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListTables.afterListTablesCounter)
}

// ListTablesBeforeCounter returns a count of AgentPublicServiceServerMock.ListTables invocations
func (mmListTables *AgentPublicServiceServerMock) ListTablesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListTables.beforeListTablesCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.ListTables.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListTables *mAgentPublicServiceServerMockListTables) Calls() []*AgentPublicServiceServerMockListTablesParams {
	mmListTables.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockListTablesParams, len(mmListTables.callArgs))
	copy(argCopy, mmListTables.callArgs)

	mmListTables.mutex.RUnlock()

	return argCopy
}

// MinimockListTablesDone returns true if the count of the ListTables invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockListTablesDone() bool {
	if m.ListTablesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListTablesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListTablesMock.invocationsDone()
}

// MinimockListTablesInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockListTablesInspect() {
	for _, e := range m.ListTablesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListTables at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListTablesCounter := mm_atomic.LoadUint64(&m.afterListTablesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListTablesMock.defaultExpectation != nil && afterListTablesCounter < 1 {
		if m.ListTablesMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListTables at\n%s", m.ListTablesMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListTables at\n%s with params: %#v", m.ListTablesMock.defaultExpectation.expectationOrigins.origin, *m.ListTablesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListTables != nil && afterListTablesCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.ListTables at\n%s", m.funcListTablesOrigin)
	}

	if !m.ListTablesMock.invocationsDone() && afterListTablesCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.ListTables at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListTablesMock.expectedInvocations), m.ListTablesMock.expectedInvocationsOrigin, afterListTablesCounter)
	}
}

type mAgentPublicServiceServerMockLiveness struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockLivenessExpectation
	expectations       []*AgentPublicServiceServerMockLivenessExpectation

	callArgs []*AgentPublicServiceServerMockLivenessParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockLivenessExpectation specifies expectation struct of the AgentPublicServiceServer.Liveness
type AgentPublicServiceServerMockLivenessExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockLivenessParams
	paramPtrs          *AgentPublicServiceServerMockLivenessParamPtrs
	expectationOrigins AgentPublicServiceServerMockLivenessExpectationOrigins
	results            *AgentPublicServiceServerMockLivenessResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockLivenessParams contains parameters of the AgentPublicServiceServer.Liveness
type AgentPublicServiceServerMockLivenessParams struct {
	ctx context.Context
	lp1 *mm_agentv1alpha.LivenessRequest
}

// AgentPublicServiceServerMockLivenessParamPtrs contains pointers to parameters of the AgentPublicServiceServer.Liveness
type AgentPublicServiceServerMockLivenessParamPtrs struct {
	ctx *context.Context
	lp1 **mm_agentv1alpha.LivenessRequest
}

// AgentPublicServiceServerMockLivenessResults contains results of the AgentPublicServiceServer.Liveness
type AgentPublicServiceServerMockLivenessResults struct {
	lp2 *mm_agentv1alpha.LivenessResponse
	err error
}

// AgentPublicServiceServerMockLivenessOrigins contains origins of expectations of the AgentPublicServiceServer.Liveness
type AgentPublicServiceServerMockLivenessExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmLiveness *mAgentPublicServiceServerMockLiveness) Optional() *mAgentPublicServiceServerMockLiveness {
	mmLiveness.optional = true
	return mmLiveness
}

// Expect sets up expected params for AgentPublicServiceServer.Liveness
func (mmLiveness *mAgentPublicServiceServerMockLiveness) Expect(ctx context.Context, lp1 *mm_agentv1alpha.LivenessRequest) *mAgentPublicServiceServerMockLiveness {
	if mmLiveness.mock.funcLiveness != nil {
		mmLiveness.mock.t.Fatalf("AgentPublicServiceServerMock.Liveness mock is already set by Set")
	}

	if mmLiveness.defaultExpectation == nil {
		mmLiveness.defaultExpectation = &AgentPublicServiceServerMockLivenessExpectation{}
	}

	if mmLiveness.defaultExpectation.paramPtrs != nil {
		mmLiveness.mock.t.Fatalf("AgentPublicServiceServerMock.Liveness mock is already set by ExpectParams functions")
	}

	mmLiveness.defaultExpectation.params = &AgentPublicServiceServerMockLivenessParams{ctx, lp1}
	mmLiveness.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmLiveness.expectations {
		if minimock.Equal(e.params, mmLiveness.defaultExpectation.params) {
			mmLiveness.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLiveness.defaultExpectation.params)
		}
	}

	return mmLiveness
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.Liveness
func (mmLiveness *mAgentPublicServiceServerMockLiveness) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockLiveness {
	if mmLiveness.mock.funcLiveness != nil {
		mmLiveness.mock.t.Fatalf("AgentPublicServiceServerMock.Liveness mock is already set by Set")
	}

	if mmLiveness.defaultExpectation == nil {
		mmLiveness.defaultExpectation = &AgentPublicServiceServerMockLivenessExpectation{}
	}

	if mmLiveness.defaultExpectation.params != nil {
		mmLiveness.mock.t.Fatalf("AgentPublicServiceServerMock.Liveness mock is already set by Expect")
	}

	if mmLiveness.defaultExpectation.paramPtrs == nil {
		mmLiveness.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockLivenessParamPtrs{}
	}
	mmLiveness.defaultExpectation.paramPtrs.ctx = &ctx
	mmLiveness.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmLiveness
}

// ExpectLp1Param2 sets up expected param lp1 for AgentPublicServiceServer.Liveness
func (mmLiveness *mAgentPublicServiceServerMockLiveness) ExpectLp1Param2(lp1 *mm_agentv1alpha.LivenessRequest) *mAgentPublicServiceServerMockLiveness {
	if mmLiveness.mock.funcLiveness != nil {
		mmLiveness.mock.t.Fatalf("AgentPublicServiceServerMock.Liveness mock is already set by Set")
	}

	if mmLiveness.defaultExpectation == nil {
		mmLiveness.defaultExpectation = &AgentPublicServiceServerMockLivenessExpectation{}
	}

	if mmLiveness.defaultExpectation.params != nil {
		mmLiveness.mock.t.Fatalf("AgentPublicServiceServerMock.Liveness mock is already set by Expect")
	}

	if mmLiveness.defaultExpectation.paramPtrs == nil {
		mmLiveness.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockLivenessParamPtrs{}
	}
	mmLiveness.defaultExpectation.paramPtrs.lp1 = &lp1
	mmLiveness.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmLiveness
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.Liveness
func (mmLiveness *mAgentPublicServiceServerMockLiveness) Inspect(f func(ctx context.Context, lp1 *mm_agentv1alpha.LivenessRequest)) *mAgentPublicServiceServerMockLiveness {
	if mmLiveness.mock.inspectFuncLiveness != nil {
		mmLiveness.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.Liveness")
	}

	mmLiveness.mock.inspectFuncLiveness = f

	return mmLiveness
}

// Return sets up results that will be returned by AgentPublicServiceServer.Liveness
func (mmLiveness *mAgentPublicServiceServerMockLiveness) Return(lp2 *mm_agentv1alpha.LivenessResponse, err error) *AgentPublicServiceServerMock {
	if mmLiveness.mock.funcLiveness != nil {
		mmLiveness.mock.t.Fatalf("AgentPublicServiceServerMock.Liveness mock is already set by Set")
	}

	if mmLiveness.defaultExpectation == nil {
		mmLiveness.defaultExpectation = &AgentPublicServiceServerMockLivenessExpectation{mock: mmLiveness.mock}
	}
	mmLiveness.defaultExpectation.results = &AgentPublicServiceServerMockLivenessResults{lp2, err}
	mmLiveness.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmLiveness.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.Liveness method
func (mmLiveness *mAgentPublicServiceServerMockLiveness) Set(f func(ctx context.Context, lp1 *mm_agentv1alpha.LivenessRequest) (lp2 *mm_agentv1alpha.LivenessResponse, err error)) *AgentPublicServiceServerMock {
	if mmLiveness.defaultExpectation != nil {
		mmLiveness.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.Liveness method")
	}

	if len(mmLiveness.expectations) > 0 {
		mmLiveness.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.Liveness method")
	}

	mmLiveness.mock.funcLiveness = f
	mmLiveness.mock.funcLivenessOrigin = minimock.CallerInfo(1)
	return mmLiveness.mock
}

// When sets expectation for the AgentPublicServiceServer.Liveness which will trigger the result defined by the following
// Then helper
func (mmLiveness *mAgentPublicServiceServerMockLiveness) When(ctx context.Context, lp1 *mm_agentv1alpha.LivenessRequest) *AgentPublicServiceServerMockLivenessExpectation {
	if mmLiveness.mock.funcLiveness != nil {
		mmLiveness.mock.t.Fatalf("AgentPublicServiceServerMock.Liveness mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockLivenessExpectation{
		mock:               mmLiveness.mock,
		params:             &AgentPublicServiceServerMockLivenessParams{ctx, lp1},
		expectationOrigins: AgentPublicServiceServerMockLivenessExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmLiveness.expectations = append(mmLiveness.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.Liveness return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockLivenessExpectation) Then(lp2 *mm_agentv1alpha.LivenessResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockLivenessResults{lp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.Liveness should be invoked
func (mmLiveness *mAgentPublicServiceServerMockLiveness) Times(n uint64) *mAgentPublicServiceServerMockLiveness {
	if n == 0 {
		mmLiveness.mock.t.Fatalf("Times of AgentPublicServiceServerMock.Liveness mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmLiveness.expectedInvocations, n)
	mmLiveness.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmLiveness
}

func (mmLiveness *mAgentPublicServiceServerMockLiveness) invocationsDone() bool {
	if len(mmLiveness.expectations) == 0 && mmLiveness.defaultExpectation == nil && mmLiveness.mock.funcLiveness == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmLiveness.mock.afterLivenessCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmLiveness.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Liveness implements mm_agentv1alpha.AgentPublicServiceServer
func (mmLiveness *AgentPublicServiceServerMock) Liveness(ctx context.Context, lp1 *mm_agentv1alpha.LivenessRequest) (lp2 *mm_agentv1alpha.LivenessResponse, err error) {
	mm_atomic.AddUint64(&mmLiveness.beforeLivenessCounter, 1)
	defer mm_atomic.AddUint64(&mmLiveness.afterLivenessCounter, 1)

	mmLiveness.t.Helper()

	if mmLiveness.inspectFuncLiveness != nil {
		mmLiveness.inspectFuncLiveness(ctx, lp1)
	}

	mm_params := AgentPublicServiceServerMockLivenessParams{ctx, lp1}

	// Record call args
	mmLiveness.LivenessMock.mutex.Lock()
	mmLiveness.LivenessMock.callArgs = append(mmLiveness.LivenessMock.callArgs, &mm_params)
	mmLiveness.LivenessMock.mutex.Unlock()

	for _, e := range mmLiveness.LivenessMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmLiveness.LivenessMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLiveness.LivenessMock.defaultExpectation.Counter, 1)
		mm_want := mmLiveness.LivenessMock.defaultExpectation.params
		mm_want_ptrs := mmLiveness.LivenessMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockLivenessParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmLiveness.t.Errorf("AgentPublicServiceServerMock.Liveness got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLiveness.LivenessMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmLiveness.t.Errorf("AgentPublicServiceServerMock.Liveness got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLiveness.LivenessMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLiveness.t.Errorf("AgentPublicServiceServerMock.Liveness got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmLiveness.LivenessMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLiveness.LivenessMock.defaultExpectation.results
		if mm_results == nil {
			mmLiveness.t.Fatal("No results are set for the AgentPublicServiceServerMock.Liveness")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmLiveness.funcLiveness != nil {
		return mmLiveness.funcLiveness(ctx, lp1)
	}
	mmLiveness.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.Liveness. %v %v", ctx, lp1)
	return
}

// LivenessAfterCounter returns a count of finished AgentPublicServiceServerMock.Liveness invocations
func (mmLiveness *AgentPublicServiceServerMock) LivenessAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLiveness.afterLivenessCounter)
}

// LivenessBeforeCounter returns a count of AgentPublicServiceServerMock.Liveness invocations
func (mmLiveness *AgentPublicServiceServerMock) LivenessBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLiveness.beforeLivenessCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.Liveness.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLiveness *mAgentPublicServiceServerMockLiveness) Calls() []*AgentPublicServiceServerMockLivenessParams {
	mmLiveness.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockLivenessParams, len(mmLiveness.callArgs))
	copy(argCopy, mmLiveness.callArgs)

	mmLiveness.mutex.RUnlock()

	return argCopy
}

// MinimockLivenessDone returns true if the count of the Liveness invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockLivenessDone() bool {
	if m.LivenessMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.LivenessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.LivenessMock.invocationsDone()
}

// MinimockLivenessInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockLivenessInspect() {
	for _, e := range m.LivenessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.Liveness at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterLivenessCounter := mm_atomic.LoadUint64(&m.afterLivenessCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.LivenessMock.defaultExpectation != nil && afterLivenessCounter < 1 {
		if m.LivenessMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.Liveness at\n%s", m.LivenessMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.Liveness at\n%s with params: %#v", m.LivenessMock.defaultExpectation.expectationOrigins.origin, *m.LivenessMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLiveness != nil && afterLivenessCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.Liveness at\n%s", m.funcLivenessOrigin)
	}

	if !m.LivenessMock.invocationsDone() && afterLivenessCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.Liveness at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.LivenessMock.expectedInvocations), m.LivenessMock.expectedInvocationsOrigin, afterLivenessCounter)
	}
}

type mAgentPublicServiceServerMockMoveRows struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockMoveRowsExpectation
	expectations       []*AgentPublicServiceServerMockMoveRowsExpectation

	callArgs []*AgentPublicServiceServerMockMoveRowsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockMoveRowsExpectation specifies expectation struct of the AgentPublicServiceServer.MoveRows
type AgentPublicServiceServerMockMoveRowsExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockMoveRowsParams
	paramPtrs          *AgentPublicServiceServerMockMoveRowsParamPtrs
	expectationOrigins AgentPublicServiceServerMockMoveRowsExpectationOrigins
	results            *AgentPublicServiceServerMockMoveRowsResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockMoveRowsParams contains parameters of the AgentPublicServiceServer.MoveRows
type AgentPublicServiceServerMockMoveRowsParams struct {
	ctx context.Context
	mp1 *mm_agentv1alpha.MoveRowsRequest
}

// AgentPublicServiceServerMockMoveRowsParamPtrs contains pointers to parameters of the AgentPublicServiceServer.MoveRows
type AgentPublicServiceServerMockMoveRowsParamPtrs struct {
	ctx *context.Context
	mp1 **mm_agentv1alpha.MoveRowsRequest
}

// AgentPublicServiceServerMockMoveRowsResults contains results of the AgentPublicServiceServer.MoveRows
type AgentPublicServiceServerMockMoveRowsResults struct {
	mp2 *mm_agentv1alpha.MoveRowsResponse
	err error
}

// AgentPublicServiceServerMockMoveRowsOrigins contains origins of expectations of the AgentPublicServiceServer.MoveRows
type AgentPublicServiceServerMockMoveRowsExpectationOrigins struct {
	origin    string
	originCtx string
	originMp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmMoveRows *mAgentPublicServiceServerMockMoveRows) Optional() *mAgentPublicServiceServerMockMoveRows {
	mmMoveRows.optional = true
	return mmMoveRows
}

// Expect sets up expected params for AgentPublicServiceServer.MoveRows
func (mmMoveRows *mAgentPublicServiceServerMockMoveRows) Expect(ctx context.Context, mp1 *mm_agentv1alpha.MoveRowsRequest) *mAgentPublicServiceServerMockMoveRows {
	if mmMoveRows.mock.funcMoveRows != nil {
		mmMoveRows.mock.t.Fatalf("AgentPublicServiceServerMock.MoveRows mock is already set by Set")
	}

	if mmMoveRows.defaultExpectation == nil {
		mmMoveRows.defaultExpectation = &AgentPublicServiceServerMockMoveRowsExpectation{}
	}

	if mmMoveRows.defaultExpectation.paramPtrs != nil {
		mmMoveRows.mock.t.Fatalf("AgentPublicServiceServerMock.MoveRows mock is already set by ExpectParams functions")
	}

	mmMoveRows.defaultExpectation.params = &AgentPublicServiceServerMockMoveRowsParams{ctx, mp1}
	mmMoveRows.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmMoveRows.expectations {
		if minimock.Equal(e.params, mmMoveRows.defaultExpectation.params) {
			mmMoveRows.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmMoveRows.defaultExpectation.params)
		}
	}

	return mmMoveRows
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.MoveRows
func (mmMoveRows *mAgentPublicServiceServerMockMoveRows) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockMoveRows {
	if mmMoveRows.mock.funcMoveRows != nil {
		mmMoveRows.mock.t.Fatalf("AgentPublicServiceServerMock.MoveRows mock is already set by Set")
	}

	if mmMoveRows.defaultExpectation == nil {
		mmMoveRows.defaultExpectation = &AgentPublicServiceServerMockMoveRowsExpectation{}
	}

	if mmMoveRows.defaultExpectation.params != nil {
		mmMoveRows.mock.t.Fatalf("AgentPublicServiceServerMock.MoveRows mock is already set by Expect")
	}

	if mmMoveRows.defaultExpectation.paramPtrs == nil {
		mmMoveRows.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockMoveRowsParamPtrs{}
	}
	mmMoveRows.defaultExpectation.paramPtrs.ctx = &ctx
	mmMoveRows.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmMoveRows
}

// ExpectMp1Param2 sets up expected param mp1 for AgentPublicServiceServer.MoveRows
func (mmMoveRows *mAgentPublicServiceServerMockMoveRows) ExpectMp1Param2(mp1 *mm_agentv1alpha.MoveRowsRequest) *mAgentPublicServiceServerMockMoveRows {
	if mmMoveRows.mock.funcMoveRows != nil {
		mmMoveRows.mock.t.Fatalf("AgentPublicServiceServerMock.MoveRows mock is already set by Set")
	}

	if mmMoveRows.defaultExpectation == nil {
		mmMoveRows.defaultExpectation = &AgentPublicServiceServerMockMoveRowsExpectation{}
	}

	if mmMoveRows.defaultExpectation.params != nil {
		mmMoveRows.mock.t.Fatalf("AgentPublicServiceServerMock.MoveRows mock is already set by Expect")
	}

	if mmMoveRows.defaultExpectation.paramPtrs == nil {
		mmMoveRows.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockMoveRowsParamPtrs{}
	}
	mmMoveRows.defaultExpectation.paramPtrs.mp1 = &mp1
	mmMoveRows.defaultExpectation.expectationOrigins.originMp1 = minimock.CallerInfo(1)

	return mmMoveRows
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.MoveRows
func (mmMoveRows *mAgentPublicServiceServerMockMoveRows) Inspect(f func(ctx context.Context, mp1 *mm_agentv1alpha.MoveRowsRequest)) *mAgentPublicServiceServerMockMoveRows {
	if mmMoveRows.mock.inspectFuncMoveRows != nil {
		mmMoveRows.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.MoveRows")
	}

	mmMoveRows.mock.inspectFuncMoveRows = f

	return mmMoveRows
}

// Return sets up results that will be returned by AgentPublicServiceServer.MoveRows
func (mmMoveRows *mAgentPublicServiceServerMockMoveRows) Return(mp2 *mm_agentv1alpha.MoveRowsResponse, err error) *AgentPublicServiceServerMock {
	if mmMoveRows.mock.funcMoveRows != nil {
		mmMoveRows.mock.t.Fatalf("AgentPublicServiceServerMock.MoveRows mock is already set by Set")
	}

	if mmMoveRows.defaultExpectation == nil {
		mmMoveRows.defaultExpectation = &AgentPublicServiceServerMockMoveRowsExpectation{mock: mmMoveRows.mock}
	}
	mmMoveRows.defaultExpectation.results = &AgentPublicServiceServerMockMoveRowsResults{mp2, err}
	mmMoveRows.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmMoveRows.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.MoveRows method
func (mmMoveRows *mAgentPublicServiceServerMockMoveRows) Set(f func(ctx context.Context, mp1 *mm_agentv1alpha.MoveRowsRequest) (mp2 *mm_agentv1alpha.MoveRowsResponse, err error)) *AgentPublicServiceServerMock {
	if mmMoveRows.defaultExpectation != nil {
		mmMoveRows.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.MoveRows method")
	}

	if len(mmMoveRows.expectations) > 0 {
		mmMoveRows.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.MoveRows method")
	}

	mmMoveRows.mock.funcMoveRows = f
	mmMoveRows.mock.funcMoveRowsOrigin = minimock.CallerInfo(1)
	return mmMoveRows.mock
}

// When sets expectation for the AgentPublicServiceServer.MoveRows which will trigger the result defined by the following
// Then helper
func (mmMoveRows *mAgentPublicServiceServerMockMoveRows) When(ctx context.Context, mp1 *mm_agentv1alpha.MoveRowsRequest) *AgentPublicServiceServerMockMoveRowsExpectation {
	if mmMoveRows.mock.funcMoveRows != nil {
		mmMoveRows.mock.t.Fatalf("AgentPublicServiceServerMock.MoveRows mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockMoveRowsExpectation{
		mock:               mmMoveRows.mock,
		params:             &AgentPublicServiceServerMockMoveRowsParams{ctx, mp1},
		expectationOrigins: AgentPublicServiceServerMockMoveRowsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmMoveRows.expectations = append(mmMoveRows.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.MoveRows return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockMoveRowsExpectation) Then(mp2 *mm_agentv1alpha.MoveRowsResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockMoveRowsResults{mp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.MoveRows should be invoked
func (mmMoveRows *mAgentPublicServiceServerMockMoveRows) Times(n uint64) *mAgentPublicServiceServerMockMoveRows {
	if n == 0 {
		mmMoveRows.mock.t.Fatalf("Times of AgentPublicServiceServerMock.MoveRows mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmMoveRows.expectedInvocations, n)
	mmMoveRows.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmMoveRows
}

func (mmMoveRows *mAgentPublicServiceServerMockMoveRows) invocationsDone() bool {
	if len(mmMoveRows.expectations) == 0 && mmMoveRows.defaultExpectation == nil && mmMoveRows.mock.funcMoveRows == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmMoveRows.mock.afterMoveRowsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmMoveRows.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// MoveRows implements mm_agentv1alpha.AgentPublicServiceServer
func (mmMoveRows *AgentPublicServiceServerMock) MoveRows(ctx context.Context, mp1 *mm_agentv1alpha.MoveRowsRequest) (mp2 *mm_agentv1alpha.MoveRowsResponse, err error) {
	mm_atomic.AddUint64(&mmMoveRows.beforeMoveRowsCounter, 1)
	defer mm_atomic.AddUint64(&mmMoveRows.afterMoveRowsCounter, 1)

	mmMoveRows.t.Helper()

	if mmMoveRows.inspectFuncMoveRows != nil {
		mmMoveRows.inspectFuncMoveRows(ctx, mp1)
	}

	mm_params := AgentPublicServiceServerMockMoveRowsParams{ctx, mp1}

	// Record call args
	mmMoveRows.MoveRowsMock.mutex.Lock()
	mmMoveRows.MoveRowsMock.callArgs = append(mmMoveRows.MoveRowsMock.callArgs, &mm_params)
	mmMoveRows.MoveRowsMock.mutex.Unlock()

	for _, e := range mmMoveRows.MoveRowsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.mp2, e.results.err
		}
	}

	if mmMoveRows.MoveRowsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmMoveRows.MoveRowsMock.defaultExpectation.Counter, 1)
		mm_want := mmMoveRows.MoveRowsMock.defaultExpectation.params
		mm_want_ptrs := mmMoveRows.MoveRowsMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockMoveRowsParams{ctx, mp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmMoveRows.t.Errorf("AgentPublicServiceServerMock.MoveRows got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmMoveRows.MoveRowsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.mp1 != nil && !minimock.Equal(*mm_want_ptrs.mp1, mm_got.mp1) {
				mmMoveRows.t.Errorf("AgentPublicServiceServerMock.MoveRows got unexpected parameter mp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmMoveRows.MoveRowsMock.defaultExpectation.expectationOrigins.originMp1, *mm_want_ptrs.mp1, mm_got.mp1, minimock.Diff(*mm_want_ptrs.mp1, mm_got.mp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmMoveRows.t.Errorf("AgentPublicServiceServerMock.MoveRows got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmMoveRows.MoveRowsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmMoveRows.MoveRowsMock.defaultExpectation.results
		if mm_results == nil {
			mmMoveRows.t.Fatal("No results are set for the AgentPublicServiceServerMock.MoveRows")
		}
		return (*mm_results).mp2, (*mm_results).err
	}
	if mmMoveRows.funcMoveRows != nil {
		return mmMoveRows.funcMoveRows(ctx, mp1)
	}
	mmMoveRows.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.MoveRows. %v %v", ctx, mp1)
	return
}

// MoveRowsAfterCounter returns a count of finished AgentPublicServiceServerMock.MoveRows invocations
func (mmMoveRows *AgentPublicServiceServerMock) MoveRowsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMoveRows.afterMoveRowsCounter)
}

// MoveRowsBeforeCounter returns a count of AgentPublicServiceServerMock.MoveRows invocations
func (mmMoveRows *AgentPublicServiceServerMock) MoveRowsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMoveRows.beforeMoveRowsCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.MoveRows.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmMoveRows *mAgentPublicServiceServerMockMoveRows) Calls() []*AgentPublicServiceServerMockMoveRowsParams {
	mmMoveRows.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockMoveRowsParams, len(mmMoveRows.callArgs))
	copy(argCopy, mmMoveRows.callArgs)

	mmMoveRows.mutex.RUnlock()

	return argCopy
}

// MinimockMoveRowsDone returns true if the count of the MoveRows invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockMoveRowsDone() bool {
	if m.MoveRowsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.MoveRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.MoveRowsMock.invocationsDone()
}

// MinimockMoveRowsInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockMoveRowsInspect() {
	for _, e := range m.MoveRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.MoveRows at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterMoveRowsCounter := mm_atomic.LoadUint64(&m.afterMoveRowsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.MoveRowsMock.defaultExpectation != nil && afterMoveRowsCounter < 1 {
		if m.MoveRowsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.MoveRows at\n%s", m.MoveRowsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.MoveRows at\n%s with params: %#v", m.MoveRowsMock.defaultExpectation.expectationOrigins.origin, *m.MoveRowsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMoveRows != nil && afterMoveRowsCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.MoveRows at\n%s", m.funcMoveRowsOrigin)
	}

	if !m.MoveRowsMock.invocationsDone() && afterMoveRowsCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.MoveRows at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.MoveRowsMock.expectedInvocations), m.MoveRowsMock.expectedInvocationsOrigin, afterMoveRowsCounter)
	}
}

type mAgentPublicServiceServerMockReadiness struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockReadinessExpectation
	expectations       []*AgentPublicServiceServerMockReadinessExpectation

	callArgs []*AgentPublicServiceServerMockReadinessParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockReadinessExpectation specifies expectation struct of the AgentPublicServiceServer.Readiness
type AgentPublicServiceServerMockReadinessExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockReadinessParams
	paramPtrs          *AgentPublicServiceServerMockReadinessParamPtrs
	expectationOrigins AgentPublicServiceServerMockReadinessExpectationOrigins
	results            *AgentPublicServiceServerMockReadinessResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockReadinessParams contains parameters of the AgentPublicServiceServer.Readiness
type AgentPublicServiceServerMockReadinessParams struct {
	ctx context.Context
	rp1 *mm_agentv1alpha.ReadinessRequest
}

// AgentPublicServiceServerMockReadinessParamPtrs contains pointers to parameters of the AgentPublicServiceServer.Readiness
type AgentPublicServiceServerMockReadinessParamPtrs struct {
	ctx *context.Context
	rp1 **mm_agentv1alpha.ReadinessRequest
}

// AgentPublicServiceServerMockReadinessResults contains results of the AgentPublicServiceServer.Readiness
type AgentPublicServiceServerMockReadinessResults struct {
	rp2 *mm_agentv1alpha.ReadinessResponse
	err error
}

// AgentPublicServiceServerMockReadinessOrigins contains origins of expectations of the AgentPublicServiceServer.Readiness
type AgentPublicServiceServerMockReadinessExpectationOrigins struct {
	origin    string
	originCtx string
	originRp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReadiness *mAgentPublicServiceServerMockReadiness) Optional() *mAgentPublicServiceServerMockReadiness {
	mmReadiness.optional = true
	return mmReadiness
}

// Expect sets up expected params for AgentPublicServiceServer.Readiness
func (mmReadiness *mAgentPublicServiceServerMockReadiness) Expect(ctx context.Context, rp1 *mm_agentv1alpha.ReadinessRequest) *mAgentPublicServiceServerMockReadiness {
	if mmReadiness.mock.funcReadiness != nil {
		mmReadiness.mock.t.Fatalf("AgentPublicServiceServerMock.Readiness mock is already set by Set")
	}

	if mmReadiness.defaultExpectation == nil {
		mmReadiness.defaultExpectation = &AgentPublicServiceServerMockReadinessExpectation{}
	}

	if mmReadiness.defaultExpectation.paramPtrs != nil {
		mmReadiness.mock.t.Fatalf("AgentPublicServiceServerMock.Readiness mock is already set by ExpectParams functions")
	}

	mmReadiness.defaultExpectation.params = &AgentPublicServiceServerMockReadinessParams{ctx, rp1}
	mmReadiness.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmReadiness.expectations {
		if minimock.Equal(e.params, mmReadiness.defaultExpectation.params) {
			mmReadiness.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReadiness.defaultExpectation.params)
		}
	}

	return mmReadiness
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.Readiness
func (mmReadiness *mAgentPublicServiceServerMockReadiness) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockReadiness {
	if mmReadiness.mock.funcReadiness != nil {
		mmReadiness.mock.t.Fatalf("AgentPublicServiceServerMock.Readiness mock is already set by Set")
	}

	if mmReadiness.defaultExpectation == nil {
		mmReadiness.defaultExpectation = &AgentPublicServiceServerMockReadinessExpectation{}
	}

	if mmReadiness.defaultExpectation.params != nil {
		mmReadiness.mock.t.Fatalf("AgentPublicServiceServerMock.Readiness mock is already set by Expect")
	}

	if mmReadiness.defaultExpectation.paramPtrs == nil {
		mmReadiness.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockReadinessParamPtrs{}
	}
	mmReadiness.defaultExpectation.paramPtrs.ctx = &ctx
	mmReadiness.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmReadiness
}

// ExpectRp1Param2 sets up expected param rp1 for AgentPublicServiceServer.Readiness
func (mmReadiness *mAgentPublicServiceServerMockReadiness) ExpectRp1Param2(rp1 *mm_agentv1alpha.ReadinessRequest) *mAgentPublicServiceServerMockReadiness {
	if mmReadiness.mock.funcReadiness != nil {
		mmReadiness.mock.t.Fatalf("AgentPublicServiceServerMock.Readiness mock is already set by Set")
	}

	if mmReadiness.defaultExpectation == nil {
		mmReadiness.defaultExpectation = &AgentPublicServiceServerMockReadinessExpectation{}
	}

	if mmReadiness.defaultExpectation.params != nil {
		mmReadiness.mock.t.Fatalf("AgentPublicServiceServerMock.Readiness mock is already set by Expect")
	}

	if mmReadiness.defaultExpectation.paramPtrs == nil {
		mmReadiness.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockReadinessParamPtrs{}
	}
	mmReadiness.defaultExpectation.paramPtrs.rp1 = &rp1
	mmReadiness.defaultExpectation.expectationOrigins.originRp1 = minimock.CallerInfo(1)

	return mmReadiness
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.Readiness
func (mmReadiness *mAgentPublicServiceServerMockReadiness) Inspect(f func(ctx context.Context, rp1 *mm_agentv1alpha.ReadinessRequest)) *mAgentPublicServiceServerMockReadiness {
	if mmReadiness.mock.inspectFuncReadiness != nil {
		mmReadiness.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.Readiness")
	}

	mmReadiness.mock.inspectFuncReadiness = f

	return mmReadiness
}

// Return sets up results that will be returned by AgentPublicServiceServer.Readiness
func (mmReadiness *mAgentPublicServiceServerMockReadiness) Return(rp2 *mm_agentv1alpha.ReadinessResponse, err error) *AgentPublicServiceServerMock {
	if mmReadiness.mock.funcReadiness != nil {
		mmReadiness.mock.t.Fatalf("AgentPublicServiceServerMock.Readiness mock is already set by Set")
	}

	if mmReadiness.defaultExpectation == nil {
		mmReadiness.defaultExpectation = &AgentPublicServiceServerMockReadinessExpectation{mock: mmReadiness.mock}
	}
	mmReadiness.defaultExpectation.results = &AgentPublicServiceServerMockReadinessResults{rp2, err}
	mmReadiness.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmReadiness.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.Readiness method
func (mmReadiness *mAgentPublicServiceServerMockReadiness) Set(f func(ctx context.Context, rp1 *mm_agentv1alpha.ReadinessRequest) (rp2 *mm_agentv1alpha.ReadinessResponse, err error)) *AgentPublicServiceServerMock {
	if mmReadiness.defaultExpectation != nil {
		mmReadiness.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.Readiness method")
	}

	if len(mmReadiness.expectations) > 0 {
		mmReadiness.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.Readiness method")
	}

	mmReadiness.mock.funcReadiness = f
	mmReadiness.mock.funcReadinessOrigin = minimock.CallerInfo(1)
	return mmReadiness.mock
}

// When sets expectation for the AgentPublicServiceServer.Readiness which will trigger the result defined by the following
// Then helper
func (mmReadiness *mAgentPublicServiceServerMockReadiness) When(ctx context.Context, rp1 *mm_agentv1alpha.ReadinessRequest) *AgentPublicServiceServerMockReadinessExpectation {
	if mmReadiness.mock.funcReadiness != nil {
		mmReadiness.mock.t.Fatalf("AgentPublicServiceServerMock.Readiness mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockReadinessExpectation{
		mock:               mmReadiness.mock,
		params:             &AgentPublicServiceServerMockReadinessParams{ctx, rp1},
		expectationOrigins: AgentPublicServiceServerMockReadinessExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmReadiness.expectations = append(mmReadiness.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.Readiness return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockReadinessExpectation) Then(rp2 *mm_agentv1alpha.ReadinessResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockReadinessResults{rp2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.Readiness should be invoked
func (mmReadiness *mAgentPublicServiceServerMockReadiness) Times(n uint64) *mAgentPublicServiceServerMockReadiness {
	if n == 0 {
		mmReadiness.mock.t.Fatalf("Times of AgentPublicServiceServerMock.Readiness mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReadiness.expectedInvocations, n)
	mmReadiness.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmReadiness
}

func (mmReadiness *mAgentPublicServiceServerMockReadiness) invocationsDone() bool {
	if len(mmReadiness.expectations) == 0 && mmReadiness.defaultExpectation == nil && mmReadiness.mock.funcReadiness == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReadiness.mock.afterReadinessCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReadiness.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Readiness implements mm_agentv1alpha.AgentPublicServiceServer
func (mmReadiness *AgentPublicServiceServerMock) Readiness(ctx context.Context, rp1 *mm_agentv1alpha.ReadinessRequest) (rp2 *mm_agentv1alpha.ReadinessResponse, err error) {
	mm_atomic.AddUint64(&mmReadiness.beforeReadinessCounter, 1)
	defer mm_atomic.AddUint64(&mmReadiness.afterReadinessCounter, 1)

	mmReadiness.t.Helper()

	if mmReadiness.inspectFuncReadiness != nil {
		mmReadiness.inspectFuncReadiness(ctx, rp1)
	}

	mm_params := AgentPublicServiceServerMockReadinessParams{ctx, rp1}

	// Record call args
	mmReadiness.ReadinessMock.mutex.Lock()
	mmReadiness.ReadinessMock.callArgs = append(mmReadiness.ReadinessMock.callArgs, &mm_params)
	mmReadiness.ReadinessMock.mutex.Unlock()

	for _, e := range mmReadiness.ReadinessMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp2, e.results.err
		}
	}

	if mmReadiness.ReadinessMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReadiness.ReadinessMock.defaultExpectation.Counter, 1)
		mm_want := mmReadiness.ReadinessMock.defaultExpectation.params
		mm_want_ptrs := mmReadiness.ReadinessMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockReadinessParams{ctx, rp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReadiness.t.Errorf("AgentPublicServiceServerMock.Readiness got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReadiness.ReadinessMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.rp1 != nil && !minimock.Equal(*mm_want_ptrs.rp1, mm_got.rp1) {
				mmReadiness.t.Errorf("AgentPublicServiceServerMock.Readiness got unexpected parameter rp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReadiness.ReadinessMock.defaultExpectation.expectationOrigins.originRp1, *mm_want_ptrs.rp1, mm_got.rp1, minimock.Diff(*mm_want_ptrs.rp1, mm_got.rp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReadiness.t.Errorf("AgentPublicServiceServerMock.Readiness got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmReadiness.ReadinessMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReadiness.ReadinessMock.defaultExpectation.results
		if mm_results == nil {
			mmReadiness.t.Fatal("No results are set for the AgentPublicServiceServerMock.Readiness")
		}
		return (*mm_results).rp2, (*mm_results).err
	}
	if mmReadiness.funcReadiness != nil {
		return mmReadiness.funcReadiness(ctx, rp1)
	}
	mmReadiness.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.Readiness. %v %v", ctx, rp1)
	return
}

// ReadinessAfterCounter returns a count of finished AgentPublicServiceServerMock.Readiness invocations
func (mmReadiness *AgentPublicServiceServerMock) ReadinessAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReadiness.afterReadinessCounter)
}

// ReadinessBeforeCounter returns a count of AgentPublicServiceServerMock.Readiness invocations
func (mmReadiness *AgentPublicServiceServerMock) ReadinessBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReadiness.beforeReadinessCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.Readiness.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReadiness *mAgentPublicServiceServerMockReadiness) Calls() []*AgentPublicServiceServerMockReadinessParams {
	mmReadiness.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockReadinessParams, len(mmReadiness.callArgs))
	copy(argCopy, mmReadiness.callArgs)

	mmReadiness.mutex.RUnlock()

	return argCopy
}

// MinimockReadinessDone returns true if the count of the Readiness invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockReadinessDone() bool {
	if m.ReadinessMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReadinessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReadinessMock.invocationsDone()
}

// MinimockReadinessInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockReadinessInspect() {
	for _, e := range m.ReadinessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.Readiness at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterReadinessCounter := mm_atomic.LoadUint64(&m.afterReadinessCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReadinessMock.defaultExpectation != nil && afterReadinessCounter < 1 {
		if m.ReadinessMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.Readiness at\n%s", m.ReadinessMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.Readiness at\n%s with params: %#v", m.ReadinessMock.defaultExpectation.expectationOrigins.origin, *m.ReadinessMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReadiness != nil && afterReadinessCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.Readiness at\n%s", m.funcReadinessOrigin)
	}

	if !m.ReadinessMock.invocationsDone() && afterReadinessCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.Readiness at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ReadinessMock.expectedInvocations), m.ReadinessMock.expectedInvocationsOrigin, afterReadinessCounter)
	}
}

type mAgentPublicServiceServerMockUnbindChatTable struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockUnbindChatTableExpectation
	expectations       []*AgentPublicServiceServerMockUnbindChatTableExpectation

	callArgs []*AgentPublicServiceServerMockUnbindChatTableParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockUnbindChatTableExpectation specifies expectation struct of the AgentPublicServiceServer.UnbindChatTable
type AgentPublicServiceServerMockUnbindChatTableExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockUnbindChatTableParams
	paramPtrs          *AgentPublicServiceServerMockUnbindChatTableParamPtrs
	expectationOrigins AgentPublicServiceServerMockUnbindChatTableExpectationOrigins
	results            *AgentPublicServiceServerMockUnbindChatTableResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockUnbindChatTableParams contains parameters of the AgentPublicServiceServer.UnbindChatTable
type AgentPublicServiceServerMockUnbindChatTableParams struct {
	ctx context.Context
	up1 *mm_agentv1alpha.UnbindChatTableRequest
}

// AgentPublicServiceServerMockUnbindChatTableParamPtrs contains pointers to parameters of the AgentPublicServiceServer.UnbindChatTable
type AgentPublicServiceServerMockUnbindChatTableParamPtrs struct {
	ctx *context.Context
	up1 **mm_agentv1alpha.UnbindChatTableRequest
}

// AgentPublicServiceServerMockUnbindChatTableResults contains results of the AgentPublicServiceServer.UnbindChatTable
type AgentPublicServiceServerMockUnbindChatTableResults struct {
	up2 *mm_agentv1alpha.UnbindChatTableResponse
	err error
}

// AgentPublicServiceServerMockUnbindChatTableOrigins contains origins of expectations of the AgentPublicServiceServer.UnbindChatTable
type AgentPublicServiceServerMockUnbindChatTableExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUnbindChatTable *mAgentPublicServiceServerMockUnbindChatTable) Optional() *mAgentPublicServiceServerMockUnbindChatTable {
	mmUnbindChatTable.optional = true
	return mmUnbindChatTable
}

// Expect sets up expected params for AgentPublicServiceServer.UnbindChatTable
func (mmUnbindChatTable *mAgentPublicServiceServerMockUnbindChatTable) Expect(ctx context.Context, up1 *mm_agentv1alpha.UnbindChatTableRequest) *mAgentPublicServiceServerMockUnbindChatTable {
	if mmUnbindChatTable.mock.funcUnbindChatTable != nil {
		mmUnbindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.UnbindChatTable mock is already set by Set")
	}

	if mmUnbindChatTable.defaultExpectation == nil {
		mmUnbindChatTable.defaultExpectation = &AgentPublicServiceServerMockUnbindChatTableExpectation{}
	}

	if mmUnbindChatTable.defaultExpectation.paramPtrs != nil {
		mmUnbindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.UnbindChatTable mock is already set by ExpectParams functions")
	}

	mmUnbindChatTable.defaultExpectation.params = &AgentPublicServiceServerMockUnbindChatTableParams{ctx, up1}
	mmUnbindChatTable.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUnbindChatTable.expectations {
		if minimock.Equal(e.params, mmUnbindChatTable.defaultExpectation.params) {
			mmUnbindChatTable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUnbindChatTable.defaultExpectation.params)
		}
	}

	return mmUnbindChatTable
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.UnbindChatTable
func (mmUnbindChatTable *mAgentPublicServiceServerMockUnbindChatTable) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockUnbindChatTable {
	if mmUnbindChatTable.mock.funcUnbindChatTable != nil {
		mmUnbindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.UnbindChatTable mock is already set by Set")
	}

	if mmUnbindChatTable.defaultExpectation == nil {
		mmUnbindChatTable.defaultExpectation = &AgentPublicServiceServerMockUnbindChatTableExpectation{}
	}

	if mmUnbindChatTable.defaultExpectation.params != nil {
		mmUnbindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.UnbindChatTable mock is already set by Expect")
	}

	if mmUnbindChatTable.defaultExpectation.paramPtrs == nil {
		mmUnbindChatTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockUnbindChatTableParamPtrs{}
	}
	mmUnbindChatTable.defaultExpectation.paramPtrs.ctx = &ctx
	mmUnbindChatTable.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUnbindChatTable
}

// ExpectUp1Param2 sets up expected param up1 for AgentPublicServiceServer.UnbindChatTable
func (mmUnbindChatTable *mAgentPublicServiceServerMockUnbindChatTable) ExpectUp1Param2(up1 *mm_agentv1alpha.UnbindChatTableRequest) *mAgentPublicServiceServerMockUnbindChatTable {
	if mmUnbindChatTable.mock.funcUnbindChatTable != nil {
		mmUnbindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.UnbindChatTable mock is already set by Set")
	}

	if mmUnbindChatTable.defaultExpectation == nil {
		mmUnbindChatTable.defaultExpectation = &AgentPublicServiceServerMockUnbindChatTableExpectation{}
	}

	if mmUnbindChatTable.defaultExpectation.params != nil {
		mmUnbindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.UnbindChatTable mock is already set by Expect")
	}

	if mmUnbindChatTable.defaultExpectation.paramPtrs == nil {
		mmUnbindChatTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockUnbindChatTableParamPtrs{}
	}
	mmUnbindChatTable.defaultExpectation.paramPtrs.up1 = &up1
	mmUnbindChatTable.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUnbindChatTable
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.UnbindChatTable
func (mmUnbindChatTable *mAgentPublicServiceServerMockUnbindChatTable) Inspect(f func(ctx context.Context, up1 *mm_agentv1alpha.UnbindChatTableRequest)) *mAgentPublicServiceServerMockUnbindChatTable {
	if mmUnbindChatTable.mock.inspectFuncUnbindChatTable != nil {
		mmUnbindChatTable.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.UnbindChatTable")
	}

	mmUnbindChatTable.mock.inspectFuncUnbindChatTable = f

	return mmUnbindChatTable
}

// Return sets up results that will be returned by AgentPublicServiceServer.UnbindChatTable
func (mmUnbindChatTable *mAgentPublicServiceServerMockUnbindChatTable) Return(up2 *mm_agentv1alpha.UnbindChatTableResponse, err error) *AgentPublicServiceServerMock {
	if mmUnbindChatTable.mock.funcUnbindChatTable != nil {
		mmUnbindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.UnbindChatTable mock is already set by Set")
	}

	if mmUnbindChatTable.defaultExpectation == nil {
		mmUnbindChatTable.defaultExpectation = &AgentPublicServiceServerMockUnbindChatTableExpectation{mock: mmUnbindChatTable.mock}
	}
	mmUnbindChatTable.defaultExpectation.results = &AgentPublicServiceServerMockUnbindChatTableResults{up2, err}
	mmUnbindChatTable.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUnbindChatTable.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.UnbindChatTable method
func (mmUnbindChatTable *mAgentPublicServiceServerMockUnbindChatTable) Set(f func(ctx context.Context, up1 *mm_agentv1alpha.UnbindChatTableRequest) (up2 *mm_agentv1alpha.UnbindChatTableResponse, err error)) *AgentPublicServiceServerMock {
	if mmUnbindChatTable.defaultExpectation != nil {
		mmUnbindChatTable.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.UnbindChatTable method")
	}

	if len(mmUnbindChatTable.expectations) > 0 {
		mmUnbindChatTable.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.UnbindChatTable method")
	}

	mmUnbindChatTable.mock.funcUnbindChatTable = f
	mmUnbindChatTable.mock.funcUnbindChatTableOrigin = minimock.CallerInfo(1)
	return mmUnbindChatTable.mock
}

// When sets expectation for the AgentPublicServiceServer.UnbindChatTable which will trigger the result defined by the following
// Then helper
func (mmUnbindChatTable *mAgentPublicServiceServerMockUnbindChatTable) When(ctx context.Context, up1 *mm_agentv1alpha.UnbindChatTableRequest) *AgentPublicServiceServerMockUnbindChatTableExpectation {
	if mmUnbindChatTable.mock.funcUnbindChatTable != nil {
		mmUnbindChatTable.mock.t.Fatalf("AgentPublicServiceServerMock.UnbindChatTable mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockUnbindChatTableExpectation{
		mock:               mmUnbindChatTable.mock,
		params:             &AgentPublicServiceServerMockUnbindChatTableParams{ctx, up1},
		expectationOrigins: AgentPublicServiceServerMockUnbindChatTableExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUnbindChatTable.expectations = append(mmUnbindChatTable.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.UnbindChatTable return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockUnbindChatTableExpectation) Then(up2 *mm_agentv1alpha.UnbindChatTableResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockUnbindChatTableResults{up2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.UnbindChatTable should be invoked
func (mmUnbindChatTable *mAgentPublicServiceServerMockUnbindChatTable) Times(n uint64) *mAgentPublicServiceServerMockUnbindChatTable {
	if n == 0 {
		mmUnbindChatTable.mock.t.Fatalf("Times of AgentPublicServiceServerMock.UnbindChatTable mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUnbindChatTable.expectedInvocations, n)
	mmUnbindChatTable.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUnbindChatTable
}

func (mmUnbindChatTable *mAgentPublicServiceServerMockUnbindChatTable) invocationsDone() bool {
	if len(mmUnbindChatTable.expectations) == 0 && mmUnbindChatTable.defaultExpectation == nil && mmUnbindChatTable.mock.funcUnbindChatTable == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUnbindChatTable.mock.afterUnbindChatTableCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUnbindChatTable.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UnbindChatTable implements mm_agentv1alpha.AgentPublicServiceServer
func (mmUnbindChatTable *AgentPublicServiceServerMock) UnbindChatTable(ctx context.Context, up1 *mm_agentv1alpha.UnbindChatTableRequest) (up2 *mm_agentv1alpha.UnbindChatTableResponse, err error) {
	mm_atomic.AddUint64(&mmUnbindChatTable.beforeUnbindChatTableCounter, 1)
	defer mm_atomic.AddUint64(&mmUnbindChatTable.afterUnbindChatTableCounter, 1)

	mmUnbindChatTable.t.Helper()

	if mmUnbindChatTable.inspectFuncUnbindChatTable != nil {
		mmUnbindChatTable.inspectFuncUnbindChatTable(ctx, up1)
	}

	mm_params := AgentPublicServiceServerMockUnbindChatTableParams{ctx, up1}

	// Record call args
	mmUnbindChatTable.UnbindChatTableMock.mutex.Lock()
	mmUnbindChatTable.UnbindChatTableMock.callArgs = append(mmUnbindChatTable.UnbindChatTableMock.callArgs, &mm_params)
	mmUnbindChatTable.UnbindChatTableMock.mutex.Unlock()

	for _, e := range mmUnbindChatTable.UnbindChatTableMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUnbindChatTable.UnbindChatTableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUnbindChatTable.UnbindChatTableMock.defaultExpectation.Counter, 1)
		mm_want := mmUnbindChatTable.UnbindChatTableMock.defaultExpectation.params
		mm_want_ptrs := mmUnbindChatTable.UnbindChatTableMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockUnbindChatTableParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUnbindChatTable.t.Errorf("AgentPublicServiceServerMock.UnbindChatTable got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUnbindChatTable.UnbindChatTableMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUnbindChatTable.t.Errorf("AgentPublicServiceServerMock.UnbindChatTable got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUnbindChatTable.UnbindChatTableMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUnbindChatTable.t.Errorf("AgentPublicServiceServerMock.UnbindChatTable got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUnbindChatTable.UnbindChatTableMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUnbindChatTable.UnbindChatTableMock.defaultExpectation.results
		if mm_results == nil {
			mmUnbindChatTable.t.Fatal("No results are set for the AgentPublicServiceServerMock.UnbindChatTable")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUnbindChatTable.funcUnbindChatTable != nil {
		return mmUnbindChatTable.funcUnbindChatTable(ctx, up1)
	}
	mmUnbindChatTable.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.UnbindChatTable. %v %v", ctx, up1)
	return
}

// UnbindChatTableAfterCounter returns a count of finished AgentPublicServiceServerMock.UnbindChatTable invocations
func (mmUnbindChatTable *AgentPublicServiceServerMock) UnbindChatTableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUnbindChatTable.afterUnbindChatTableCounter)
}

// UnbindChatTableBeforeCounter returns a count of AgentPublicServiceServerMock.UnbindChatTable invocations
func (mmUnbindChatTable *AgentPublicServiceServerMock) UnbindChatTableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUnbindChatTable.beforeUnbindChatTableCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.UnbindChatTable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUnbindChatTable *mAgentPublicServiceServerMockUnbindChatTable) Calls() []*AgentPublicServiceServerMockUnbindChatTableParams {
	mmUnbindChatTable.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockUnbindChatTableParams, len(mmUnbindChatTable.callArgs))
	copy(argCopy, mmUnbindChatTable.callArgs)

	mmUnbindChatTable.mutex.RUnlock()

	return argCopy
}

// MinimockUnbindChatTableDone returns true if the count of the UnbindChatTable invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockUnbindChatTableDone() bool {
	if m.UnbindChatTableMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UnbindChatTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UnbindChatTableMock.invocationsDone()
}

// MinimockUnbindChatTableInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockUnbindChatTableInspect() {
	for _, e := range m.UnbindChatTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UnbindChatTable at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUnbindChatTableCounter := mm_atomic.LoadUint64(&m.afterUnbindChatTableCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UnbindChatTableMock.defaultExpectation != nil && afterUnbindChatTableCounter < 1 {
		if m.UnbindChatTableMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UnbindChatTable at\n%s", m.UnbindChatTableMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UnbindChatTable at\n%s with params: %#v", m.UnbindChatTableMock.defaultExpectation.expectationOrigins.origin, *m.UnbindChatTableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUnbindChatTable != nil && afterUnbindChatTableCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.UnbindChatTable at\n%s", m.funcUnbindChatTableOrigin)
	}

	if !m.UnbindChatTableMock.invocationsDone() && afterUnbindChatTableCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.UnbindChatTable at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UnbindChatTableMock.expectedInvocations), m.UnbindChatTableMock.expectedInvocationsOrigin, afterUnbindChatTableCounter)
	}
}

type mAgentPublicServiceServerMockUpdateChat struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockUpdateChatExpectation
	expectations       []*AgentPublicServiceServerMockUpdateChatExpectation

	callArgs []*AgentPublicServiceServerMockUpdateChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockUpdateChatExpectation specifies expectation struct of the AgentPublicServiceServer.UpdateChat
type AgentPublicServiceServerMockUpdateChatExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockUpdateChatParams
	paramPtrs          *AgentPublicServiceServerMockUpdateChatParamPtrs
	expectationOrigins AgentPublicServiceServerMockUpdateChatExpectationOrigins
	results            *AgentPublicServiceServerMockUpdateChatResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockUpdateChatParams contains parameters of the AgentPublicServiceServer.UpdateChat
type AgentPublicServiceServerMockUpdateChatParams struct {
	ctx context.Context
	up1 *mm_agentv1alpha.UpdateChatRequest
}

// AgentPublicServiceServerMockUpdateChatParamPtrs contains pointers to parameters of the AgentPublicServiceServer.UpdateChat
type AgentPublicServiceServerMockUpdateChatParamPtrs struct {
	ctx *context.Context
	up1 **mm_agentv1alpha.UpdateChatRequest
}

// AgentPublicServiceServerMockUpdateChatResults contains results of the AgentPublicServiceServer.UpdateChat
type AgentPublicServiceServerMockUpdateChatResults struct {
	up2 *mm_agentv1alpha.UpdateChatResponse
	err error
}

// AgentPublicServiceServerMockUpdateChatOrigins contains origins of expectations of the AgentPublicServiceServer.UpdateChat
type AgentPublicServiceServerMockUpdateChatExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateChat *mAgentPublicServiceServerMockUpdateChat) Optional() *mAgentPublicServiceServerMockUpdateChat {
	mmUpdateChat.optional = true
	return mmUpdateChat
}

// Expect sets up expected params for AgentPublicServiceServer.UpdateChat
func (mmUpdateChat *mAgentPublicServiceServerMockUpdateChat) Expect(ctx context.Context, up1 *mm_agentv1alpha.UpdateChatRequest) *mAgentPublicServiceServerMockUpdateChat {
	if mmUpdateChat.mock.funcUpdateChat != nil {
		mmUpdateChat.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateChat mock is already set by Set")
	}

	if mmUpdateChat.defaultExpectation == nil {
		mmUpdateChat.defaultExpectation = &AgentPublicServiceServerMockUpdateChatExpectation{}
	}

	if mmUpdateChat.defaultExpectation.paramPtrs != nil {
		mmUpdateChat.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateChat mock is already set by ExpectParams functions")
	}

	mmUpdateChat.defaultExpectation.params = &AgentPublicServiceServerMockUpdateChatParams{ctx, up1}
	mmUpdateChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateChat.expectations {
		if minimock.Equal(e.params, mmUpdateChat.defaultExpectation.params) {
			mmUpdateChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateChat.defaultExpectation.params)
		}
	}

	return mmUpdateChat
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.UpdateChat
func (mmUpdateChat *mAgentPublicServiceServerMockUpdateChat) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockUpdateChat {
	if mmUpdateChat.mock.funcUpdateChat != nil {
		mmUpdateChat.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateChat mock is already set by Set")
	}

	if mmUpdateChat.defaultExpectation == nil {
		mmUpdateChat.defaultExpectation = &AgentPublicServiceServerMockUpdateChatExpectation{}
	}

	if mmUpdateChat.defaultExpectation.params != nil {
		mmUpdateChat.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateChat mock is already set by Expect")
	}

	if mmUpdateChat.defaultExpectation.paramPtrs == nil {
		mmUpdateChat.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockUpdateChatParamPtrs{}
	}
	mmUpdateChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateChat
}

// ExpectUp1Param2 sets up expected param up1 for AgentPublicServiceServer.UpdateChat
func (mmUpdateChat *mAgentPublicServiceServerMockUpdateChat) ExpectUp1Param2(up1 *mm_agentv1alpha.UpdateChatRequest) *mAgentPublicServiceServerMockUpdateChat {
	if mmUpdateChat.mock.funcUpdateChat != nil {
		mmUpdateChat.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateChat mock is already set by Set")
	}

	if mmUpdateChat.defaultExpectation == nil {
		mmUpdateChat.defaultExpectation = &AgentPublicServiceServerMockUpdateChatExpectation{}
	}

	if mmUpdateChat.defaultExpectation.params != nil {
		mmUpdateChat.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateChat mock is already set by Expect")
	}

	if mmUpdateChat.defaultExpectation.paramPtrs == nil {
		mmUpdateChat.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockUpdateChatParamPtrs{}
	}
	mmUpdateChat.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateChat.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateChat
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.UpdateChat
func (mmUpdateChat *mAgentPublicServiceServerMockUpdateChat) Inspect(f func(ctx context.Context, up1 *mm_agentv1alpha.UpdateChatRequest)) *mAgentPublicServiceServerMockUpdateChat {
	if mmUpdateChat.mock.inspectFuncUpdateChat != nil {
		mmUpdateChat.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.UpdateChat")
	}

	mmUpdateChat.mock.inspectFuncUpdateChat = f

	return mmUpdateChat
}

// Return sets up results that will be returned by AgentPublicServiceServer.UpdateChat
func (mmUpdateChat *mAgentPublicServiceServerMockUpdateChat) Return(up2 *mm_agentv1alpha.UpdateChatResponse, err error) *AgentPublicServiceServerMock {
	if mmUpdateChat.mock.funcUpdateChat != nil {
		mmUpdateChat.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateChat mock is already set by Set")
	}

	if mmUpdateChat.defaultExpectation == nil {
		mmUpdateChat.defaultExpectation = &AgentPublicServiceServerMockUpdateChatExpectation{mock: mmUpdateChat.mock}
	}
	mmUpdateChat.defaultExpectation.results = &AgentPublicServiceServerMockUpdateChatResults{up2, err}
	mmUpdateChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateChat.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.UpdateChat method
func (mmUpdateChat *mAgentPublicServiceServerMockUpdateChat) Set(f func(ctx context.Context, up1 *mm_agentv1alpha.UpdateChatRequest) (up2 *mm_agentv1alpha.UpdateChatResponse, err error)) *AgentPublicServiceServerMock {
	if mmUpdateChat.defaultExpectation != nil {
		mmUpdateChat.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.UpdateChat method")
	}

	if len(mmUpdateChat.expectations) > 0 {
		mmUpdateChat.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.UpdateChat method")
	}

	mmUpdateChat.mock.funcUpdateChat = f
	mmUpdateChat.mock.funcUpdateChatOrigin = minimock.CallerInfo(1)
	return mmUpdateChat.mock
}

// When sets expectation for the AgentPublicServiceServer.UpdateChat which will trigger the result defined by the following
// Then helper
func (mmUpdateChat *mAgentPublicServiceServerMockUpdateChat) When(ctx context.Context, up1 *mm_agentv1alpha.UpdateChatRequest) *AgentPublicServiceServerMockUpdateChatExpectation {
	if mmUpdateChat.mock.funcUpdateChat != nil {
		mmUpdateChat.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateChat mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockUpdateChatExpectation{
		mock:               mmUpdateChat.mock,
		params:             &AgentPublicServiceServerMockUpdateChatParams{ctx, up1},
		expectationOrigins: AgentPublicServiceServerMockUpdateChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateChat.expectations = append(mmUpdateChat.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.UpdateChat return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockUpdateChatExpectation) Then(up2 *mm_agentv1alpha.UpdateChatResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockUpdateChatResults{up2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.UpdateChat should be invoked
func (mmUpdateChat *mAgentPublicServiceServerMockUpdateChat) Times(n uint64) *mAgentPublicServiceServerMockUpdateChat {
	if n == 0 {
		mmUpdateChat.mock.t.Fatalf("Times of AgentPublicServiceServerMock.UpdateChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateChat.expectedInvocations, n)
	mmUpdateChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateChat
}

func (mmUpdateChat *mAgentPublicServiceServerMockUpdateChat) invocationsDone() bool {
	if len(mmUpdateChat.expectations) == 0 && mmUpdateChat.defaultExpectation == nil && mmUpdateChat.mock.funcUpdateChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateChat.mock.afterUpdateChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateChat implements mm_agentv1alpha.AgentPublicServiceServer
func (mmUpdateChat *AgentPublicServiceServerMock) UpdateChat(ctx context.Context, up1 *mm_agentv1alpha.UpdateChatRequest) (up2 *mm_agentv1alpha.UpdateChatResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateChat.beforeUpdateChatCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateChat.afterUpdateChatCounter, 1)

	mmUpdateChat.t.Helper()

	if mmUpdateChat.inspectFuncUpdateChat != nil {
		mmUpdateChat.inspectFuncUpdateChat(ctx, up1)
	}

	mm_params := AgentPublicServiceServerMockUpdateChatParams{ctx, up1}

	// Record call args
	mmUpdateChat.UpdateChatMock.mutex.Lock()
	mmUpdateChat.UpdateChatMock.callArgs = append(mmUpdateChat.UpdateChatMock.callArgs, &mm_params)
	mmUpdateChat.UpdateChatMock.mutex.Unlock()

	for _, e := range mmUpdateChat.UpdateChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateChat.UpdateChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateChat.UpdateChatMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateChat.UpdateChatMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateChat.UpdateChatMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockUpdateChatParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateChat.t.Errorf("AgentPublicServiceServerMock.UpdateChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateChat.UpdateChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateChat.t.Errorf("AgentPublicServiceServerMock.UpdateChat got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateChat.UpdateChatMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateChat.t.Errorf("AgentPublicServiceServerMock.UpdateChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateChat.UpdateChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateChat.UpdateChatMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateChat.t.Fatal("No results are set for the AgentPublicServiceServerMock.UpdateChat")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateChat.funcUpdateChat != nil {
		return mmUpdateChat.funcUpdateChat(ctx, up1)
	}
	mmUpdateChat.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.UpdateChat. %v %v", ctx, up1)
	return
}

// UpdateChatAfterCounter returns a count of finished AgentPublicServiceServerMock.UpdateChat invocations
func (mmUpdateChat *AgentPublicServiceServerMock) UpdateChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateChat.afterUpdateChatCounter)
}

// UpdateChatBeforeCounter returns a count of AgentPublicServiceServerMock.UpdateChat invocations
func (mmUpdateChat *AgentPublicServiceServerMock) UpdateChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateChat.beforeUpdateChatCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.UpdateChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateChat *mAgentPublicServiceServerMockUpdateChat) Calls() []*AgentPublicServiceServerMockUpdateChatParams {
	mmUpdateChat.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockUpdateChatParams, len(mmUpdateChat.callArgs))
	copy(argCopy, mmUpdateChat.callArgs)

	mmUpdateChat.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateChatDone returns true if the count of the UpdateChat invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockUpdateChatDone() bool {
	if m.UpdateChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateChatMock.invocationsDone()
}

// MinimockUpdateChatInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockUpdateChatInspect() {
	for _, e := range m.UpdateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateChatCounter := mm_atomic.LoadUint64(&m.afterUpdateChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateChatMock.defaultExpectation != nil && afterUpdateChatCounter < 1 {
		if m.UpdateChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateChat at\n%s", m.UpdateChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateChat at\n%s with params: %#v", m.UpdateChatMock.defaultExpectation.expectationOrigins.origin, *m.UpdateChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateChat != nil && afterUpdateChatCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateChat at\n%s", m.funcUpdateChatOrigin)
	}

	if !m.UpdateChatMock.invocationsDone() && afterUpdateChatCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.UpdateChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateChatMock.expectedInvocations), m.UpdateChatMock.expectedInvocationsOrigin, afterUpdateChatCounter)
	}
}

type mAgentPublicServiceServerMockUpdateColumnDefinitions struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockUpdateColumnDefinitionsExpectation
	expectations       []*AgentPublicServiceServerMockUpdateColumnDefinitionsExpectation

	callArgs []*AgentPublicServiceServerMockUpdateColumnDefinitionsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockUpdateColumnDefinitionsExpectation specifies expectation struct of the AgentPublicServiceServer.UpdateColumnDefinitions
type AgentPublicServiceServerMockUpdateColumnDefinitionsExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockUpdateColumnDefinitionsParams
	paramPtrs          *AgentPublicServiceServerMockUpdateColumnDefinitionsParamPtrs
	expectationOrigins AgentPublicServiceServerMockUpdateColumnDefinitionsExpectationOrigins
	results            *AgentPublicServiceServerMockUpdateColumnDefinitionsResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockUpdateColumnDefinitionsParams contains parameters of the AgentPublicServiceServer.UpdateColumnDefinitions
type AgentPublicServiceServerMockUpdateColumnDefinitionsParams struct {
	ctx context.Context
	up1 *mm_agentv1alpha.UpdateColumnDefinitionsRequest
}

// AgentPublicServiceServerMockUpdateColumnDefinitionsParamPtrs contains pointers to parameters of the AgentPublicServiceServer.UpdateColumnDefinitions
type AgentPublicServiceServerMockUpdateColumnDefinitionsParamPtrs struct {
	ctx *context.Context
	up1 **mm_agentv1alpha.UpdateColumnDefinitionsRequest
}

// AgentPublicServiceServerMockUpdateColumnDefinitionsResults contains results of the AgentPublicServiceServer.UpdateColumnDefinitions
type AgentPublicServiceServerMockUpdateColumnDefinitionsResults struct {
	up2 *mm_agentv1alpha.UpdateColumnDefinitionsResponse
	err error
}

// AgentPublicServiceServerMockUpdateColumnDefinitionsOrigins contains origins of expectations of the AgentPublicServiceServer.UpdateColumnDefinitions
type AgentPublicServiceServerMockUpdateColumnDefinitionsExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateColumnDefinitions *mAgentPublicServiceServerMockUpdateColumnDefinitions) Optional() *mAgentPublicServiceServerMockUpdateColumnDefinitions {
	mmUpdateColumnDefinitions.optional = true
	return mmUpdateColumnDefinitions
}

// Expect sets up expected params for AgentPublicServiceServer.UpdateColumnDefinitions
func (mmUpdateColumnDefinitions *mAgentPublicServiceServerMockUpdateColumnDefinitions) Expect(ctx context.Context, up1 *mm_agentv1alpha.UpdateColumnDefinitionsRequest) *mAgentPublicServiceServerMockUpdateColumnDefinitions {
	if mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitions != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateColumnDefinitions mock is already set by Set")
	}

	if mmUpdateColumnDefinitions.defaultExpectation == nil {
		mmUpdateColumnDefinitions.defaultExpectation = &AgentPublicServiceServerMockUpdateColumnDefinitionsExpectation{}
	}

	if mmUpdateColumnDefinitions.defaultExpectation.paramPtrs != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateColumnDefinitions mock is already set by ExpectParams functions")
	}

	mmUpdateColumnDefinitions.defaultExpectation.params = &AgentPublicServiceServerMockUpdateColumnDefinitionsParams{ctx, up1}
	mmUpdateColumnDefinitions.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateColumnDefinitions.expectations {
		if minimock.Equal(e.params, mmUpdateColumnDefinitions.defaultExpectation.params) {
			mmUpdateColumnDefinitions.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateColumnDefinitions.defaultExpectation.params)
		}
	}

	return mmUpdateColumnDefinitions
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.UpdateColumnDefinitions
func (mmUpdateColumnDefinitions *mAgentPublicServiceServerMockUpdateColumnDefinitions) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockUpdateColumnDefinitions {
	if mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitions != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateColumnDefinitions mock is already set by Set")
	}

	if mmUpdateColumnDefinitions.defaultExpectation == nil {
		mmUpdateColumnDefinitions.defaultExpectation = &AgentPublicServiceServerMockUpdateColumnDefinitionsExpectation{}
	}

	if mmUpdateColumnDefinitions.defaultExpectation.params != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateColumnDefinitions mock is already set by Expect")
	}

	if mmUpdateColumnDefinitions.defaultExpectation.paramPtrs == nil {
		mmUpdateColumnDefinitions.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockUpdateColumnDefinitionsParamPtrs{}
	}
	mmUpdateColumnDefinitions.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateColumnDefinitions.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateColumnDefinitions
}

// ExpectUp1Param2 sets up expected param up1 for AgentPublicServiceServer.UpdateColumnDefinitions
func (mmUpdateColumnDefinitions *mAgentPublicServiceServerMockUpdateColumnDefinitions) ExpectUp1Param2(up1 *mm_agentv1alpha.UpdateColumnDefinitionsRequest) *mAgentPublicServiceServerMockUpdateColumnDefinitions {
	if mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitions != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateColumnDefinitions mock is already set by Set")
	}

	if mmUpdateColumnDefinitions.defaultExpectation == nil {
		mmUpdateColumnDefinitions.defaultExpectation = &AgentPublicServiceServerMockUpdateColumnDefinitionsExpectation{}
	}

	if mmUpdateColumnDefinitions.defaultExpectation.params != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateColumnDefinitions mock is already set by Expect")
	}

	if mmUpdateColumnDefinitions.defaultExpectation.paramPtrs == nil {
		mmUpdateColumnDefinitions.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockUpdateColumnDefinitionsParamPtrs{}
	}
	mmUpdateColumnDefinitions.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateColumnDefinitions.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateColumnDefinitions
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.UpdateColumnDefinitions
func (mmUpdateColumnDefinitions *mAgentPublicServiceServerMockUpdateColumnDefinitions) Inspect(f func(ctx context.Context, up1 *mm_agentv1alpha.UpdateColumnDefinitionsRequest)) *mAgentPublicServiceServerMockUpdateColumnDefinitions {
	if mmUpdateColumnDefinitions.mock.inspectFuncUpdateColumnDefinitions != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.UpdateColumnDefinitions")
	}

	mmUpdateColumnDefinitions.mock.inspectFuncUpdateColumnDefinitions = f

	return mmUpdateColumnDefinitions
}

// Return sets up results that will be returned by AgentPublicServiceServer.UpdateColumnDefinitions
func (mmUpdateColumnDefinitions *mAgentPublicServiceServerMockUpdateColumnDefinitions) Return(up2 *mm_agentv1alpha.UpdateColumnDefinitionsResponse, err error) *AgentPublicServiceServerMock {
	if mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitions != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateColumnDefinitions mock is already set by Set")
	}

	if mmUpdateColumnDefinitions.defaultExpectation == nil {
		mmUpdateColumnDefinitions.defaultExpectation = &AgentPublicServiceServerMockUpdateColumnDefinitionsExpectation{mock: mmUpdateColumnDefinitions.mock}
	}
	mmUpdateColumnDefinitions.defaultExpectation.results = &AgentPublicServiceServerMockUpdateColumnDefinitionsResults{up2, err}
	mmUpdateColumnDefinitions.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateColumnDefinitions.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.UpdateColumnDefinitions method
func (mmUpdateColumnDefinitions *mAgentPublicServiceServerMockUpdateColumnDefinitions) Set(f func(ctx context.Context, up1 *mm_agentv1alpha.UpdateColumnDefinitionsRequest) (up2 *mm_agentv1alpha.UpdateColumnDefinitionsResponse, err error)) *AgentPublicServiceServerMock {
	if mmUpdateColumnDefinitions.defaultExpectation != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.UpdateColumnDefinitions method")
	}

	if len(mmUpdateColumnDefinitions.expectations) > 0 {
		mmUpdateColumnDefinitions.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.UpdateColumnDefinitions method")
	}

	mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitions = f
	mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitionsOrigin = minimock.CallerInfo(1)
	return mmUpdateColumnDefinitions.mock
}

// When sets expectation for the AgentPublicServiceServer.UpdateColumnDefinitions which will trigger the result defined by the following
// Then helper
func (mmUpdateColumnDefinitions *mAgentPublicServiceServerMockUpdateColumnDefinitions) When(ctx context.Context, up1 *mm_agentv1alpha.UpdateColumnDefinitionsRequest) *AgentPublicServiceServerMockUpdateColumnDefinitionsExpectation {
	if mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitions != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateColumnDefinitions mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockUpdateColumnDefinitionsExpectation{
		mock:               mmUpdateColumnDefinitions.mock,
		params:             &AgentPublicServiceServerMockUpdateColumnDefinitionsParams{ctx, up1},
		expectationOrigins: AgentPublicServiceServerMockUpdateColumnDefinitionsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateColumnDefinitions.expectations = append(mmUpdateColumnDefinitions.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.UpdateColumnDefinitions return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockUpdateColumnDefinitionsExpectation) Then(up2 *mm_agentv1alpha.UpdateColumnDefinitionsResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockUpdateColumnDefinitionsResults{up2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.UpdateColumnDefinitions should be invoked
func (mmUpdateColumnDefinitions *mAgentPublicServiceServerMockUpdateColumnDefinitions) Times(n uint64) *mAgentPublicServiceServerMockUpdateColumnDefinitions {
	if n == 0 {
		mmUpdateColumnDefinitions.mock.t.Fatalf("Times of AgentPublicServiceServerMock.UpdateColumnDefinitions mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateColumnDefinitions.expectedInvocations, n)
	mmUpdateColumnDefinitions.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateColumnDefinitions
}

func (mmUpdateColumnDefinitions *mAgentPublicServiceServerMockUpdateColumnDefinitions) invocationsDone() bool {
	if len(mmUpdateColumnDefinitions.expectations) == 0 && mmUpdateColumnDefinitions.defaultExpectation == nil && mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitions == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateColumnDefinitions.mock.afterUpdateColumnDefinitionsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateColumnDefinitions.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateColumnDefinitions implements mm_agentv1alpha.AgentPublicServiceServer
func (mmUpdateColumnDefinitions *AgentPublicServiceServerMock) UpdateColumnDefinitions(ctx context.Context, up1 *mm_agentv1alpha.UpdateColumnDefinitionsRequest) (up2 *mm_agentv1alpha.UpdateColumnDefinitionsResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateColumnDefinitions.beforeUpdateColumnDefinitionsCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateColumnDefinitions.afterUpdateColumnDefinitionsCounter, 1)

	mmUpdateColumnDefinitions.t.Helper()

	if mmUpdateColumnDefinitions.inspectFuncUpdateColumnDefinitions != nil {
		mmUpdateColumnDefinitions.inspectFuncUpdateColumnDefinitions(ctx, up1)
	}

	mm_params := AgentPublicServiceServerMockUpdateColumnDefinitionsParams{ctx, up1}

	// Record call args
	mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.mutex.Lock()
	mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.callArgs = append(mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.callArgs, &mm_params)
	mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.mutex.Unlock()

	for _, e := range mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockUpdateColumnDefinitionsParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateColumnDefinitions.t.Errorf("AgentPublicServiceServerMock.UpdateColumnDefinitions got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateColumnDefinitions.t.Errorf("AgentPublicServiceServerMock.UpdateColumnDefinitions got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateColumnDefinitions.t.Errorf("AgentPublicServiceServerMock.UpdateColumnDefinitions got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateColumnDefinitions.t.Fatal("No results are set for the AgentPublicServiceServerMock.UpdateColumnDefinitions")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateColumnDefinitions.funcUpdateColumnDefinitions != nil {
		return mmUpdateColumnDefinitions.funcUpdateColumnDefinitions(ctx, up1)
	}
	mmUpdateColumnDefinitions.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.UpdateColumnDefinitions. %v %v", ctx, up1)
	return
}

// UpdateColumnDefinitionsAfterCounter returns a count of finished AgentPublicServiceServerMock.UpdateColumnDefinitions invocations
func (mmUpdateColumnDefinitions *AgentPublicServiceServerMock) UpdateColumnDefinitionsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateColumnDefinitions.afterUpdateColumnDefinitionsCounter)
}

// UpdateColumnDefinitionsBeforeCounter returns a count of AgentPublicServiceServerMock.UpdateColumnDefinitions invocations
func (mmUpdateColumnDefinitions *AgentPublicServiceServerMock) UpdateColumnDefinitionsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateColumnDefinitions.beforeUpdateColumnDefinitionsCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.UpdateColumnDefinitions.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateColumnDefinitions *mAgentPublicServiceServerMockUpdateColumnDefinitions) Calls() []*AgentPublicServiceServerMockUpdateColumnDefinitionsParams {
	mmUpdateColumnDefinitions.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockUpdateColumnDefinitionsParams, len(mmUpdateColumnDefinitions.callArgs))
	copy(argCopy, mmUpdateColumnDefinitions.callArgs)

	mmUpdateColumnDefinitions.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateColumnDefinitionsDone returns true if the count of the UpdateColumnDefinitions invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockUpdateColumnDefinitionsDone() bool {
	if m.UpdateColumnDefinitionsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateColumnDefinitionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateColumnDefinitionsMock.invocationsDone()
}

// MinimockUpdateColumnDefinitionsInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockUpdateColumnDefinitionsInspect() {
	for _, e := range m.UpdateColumnDefinitionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateColumnDefinitions at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateColumnDefinitionsCounter := mm_atomic.LoadUint64(&m.afterUpdateColumnDefinitionsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateColumnDefinitionsMock.defaultExpectation != nil && afterUpdateColumnDefinitionsCounter < 1 {
		if m.UpdateColumnDefinitionsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateColumnDefinitions at\n%s", m.UpdateColumnDefinitionsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateColumnDefinitions at\n%s with params: %#v", m.UpdateColumnDefinitionsMock.defaultExpectation.expectationOrigins.origin, *m.UpdateColumnDefinitionsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateColumnDefinitions != nil && afterUpdateColumnDefinitionsCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateColumnDefinitions at\n%s", m.funcUpdateColumnDefinitionsOrigin)
	}

	if !m.UpdateColumnDefinitionsMock.invocationsDone() && afterUpdateColumnDefinitionsCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.UpdateColumnDefinitions at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateColumnDefinitionsMock.expectedInvocations), m.UpdateColumnDefinitionsMock.expectedInvocationsOrigin, afterUpdateColumnDefinitionsCounter)
	}
}

type mAgentPublicServiceServerMockUpdateMessage struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockUpdateMessageExpectation
	expectations       []*AgentPublicServiceServerMockUpdateMessageExpectation

	callArgs []*AgentPublicServiceServerMockUpdateMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockUpdateMessageExpectation specifies expectation struct of the AgentPublicServiceServer.UpdateMessage
type AgentPublicServiceServerMockUpdateMessageExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockUpdateMessageParams
	paramPtrs          *AgentPublicServiceServerMockUpdateMessageParamPtrs
	expectationOrigins AgentPublicServiceServerMockUpdateMessageExpectationOrigins
	results            *AgentPublicServiceServerMockUpdateMessageResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockUpdateMessageParams contains parameters of the AgentPublicServiceServer.UpdateMessage
type AgentPublicServiceServerMockUpdateMessageParams struct {
	ctx context.Context
	up1 *mm_agentv1alpha.UpdateMessageRequest
}

// AgentPublicServiceServerMockUpdateMessageParamPtrs contains pointers to parameters of the AgentPublicServiceServer.UpdateMessage
type AgentPublicServiceServerMockUpdateMessageParamPtrs struct {
	ctx *context.Context
	up1 **mm_agentv1alpha.UpdateMessageRequest
}

// AgentPublicServiceServerMockUpdateMessageResults contains results of the AgentPublicServiceServer.UpdateMessage
type AgentPublicServiceServerMockUpdateMessageResults struct {
	up2 *mm_agentv1alpha.UpdateMessageResponse
	err error
}

// AgentPublicServiceServerMockUpdateMessageOrigins contains origins of expectations of the AgentPublicServiceServer.UpdateMessage
type AgentPublicServiceServerMockUpdateMessageExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateMessage *mAgentPublicServiceServerMockUpdateMessage) Optional() *mAgentPublicServiceServerMockUpdateMessage {
	mmUpdateMessage.optional = true
	return mmUpdateMessage
}

// Expect sets up expected params for AgentPublicServiceServer.UpdateMessage
func (mmUpdateMessage *mAgentPublicServiceServerMockUpdateMessage) Expect(ctx context.Context, up1 *mm_agentv1alpha.UpdateMessageRequest) *mAgentPublicServiceServerMockUpdateMessage {
	if mmUpdateMessage.mock.funcUpdateMessage != nil {
		mmUpdateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateMessage mock is already set by Set")
	}

	if mmUpdateMessage.defaultExpectation == nil {
		mmUpdateMessage.defaultExpectation = &AgentPublicServiceServerMockUpdateMessageExpectation{}
	}

	if mmUpdateMessage.defaultExpectation.paramPtrs != nil {
		mmUpdateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateMessage mock is already set by ExpectParams functions")
	}

	mmUpdateMessage.defaultExpectation.params = &AgentPublicServiceServerMockUpdateMessageParams{ctx, up1}
	mmUpdateMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateMessage.expectations {
		if minimock.Equal(e.params, mmUpdateMessage.defaultExpectation.params) {
			mmUpdateMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateMessage.defaultExpectation.params)
		}
	}

	return mmUpdateMessage
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.UpdateMessage
func (mmUpdateMessage *mAgentPublicServiceServerMockUpdateMessage) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockUpdateMessage {
	if mmUpdateMessage.mock.funcUpdateMessage != nil {
		mmUpdateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateMessage mock is already set by Set")
	}

	if mmUpdateMessage.defaultExpectation == nil {
		mmUpdateMessage.defaultExpectation = &AgentPublicServiceServerMockUpdateMessageExpectation{}
	}

	if mmUpdateMessage.defaultExpectation.params != nil {
		mmUpdateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateMessage mock is already set by Expect")
	}

	if mmUpdateMessage.defaultExpectation.paramPtrs == nil {
		mmUpdateMessage.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockUpdateMessageParamPtrs{}
	}
	mmUpdateMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateMessage
}

// ExpectUp1Param2 sets up expected param up1 for AgentPublicServiceServer.UpdateMessage
func (mmUpdateMessage *mAgentPublicServiceServerMockUpdateMessage) ExpectUp1Param2(up1 *mm_agentv1alpha.UpdateMessageRequest) *mAgentPublicServiceServerMockUpdateMessage {
	if mmUpdateMessage.mock.funcUpdateMessage != nil {
		mmUpdateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateMessage mock is already set by Set")
	}

	if mmUpdateMessage.defaultExpectation == nil {
		mmUpdateMessage.defaultExpectation = &AgentPublicServiceServerMockUpdateMessageExpectation{}
	}

	if mmUpdateMessage.defaultExpectation.params != nil {
		mmUpdateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateMessage mock is already set by Expect")
	}

	if mmUpdateMessage.defaultExpectation.paramPtrs == nil {
		mmUpdateMessage.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockUpdateMessageParamPtrs{}
	}
	mmUpdateMessage.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateMessage.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateMessage
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.UpdateMessage
func (mmUpdateMessage *mAgentPublicServiceServerMockUpdateMessage) Inspect(f func(ctx context.Context, up1 *mm_agentv1alpha.UpdateMessageRequest)) *mAgentPublicServiceServerMockUpdateMessage {
	if mmUpdateMessage.mock.inspectFuncUpdateMessage != nil {
		mmUpdateMessage.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.UpdateMessage")
	}

	mmUpdateMessage.mock.inspectFuncUpdateMessage = f

	return mmUpdateMessage
}

// Return sets up results that will be returned by AgentPublicServiceServer.UpdateMessage
func (mmUpdateMessage *mAgentPublicServiceServerMockUpdateMessage) Return(up2 *mm_agentv1alpha.UpdateMessageResponse, err error) *AgentPublicServiceServerMock {
	if mmUpdateMessage.mock.funcUpdateMessage != nil {
		mmUpdateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateMessage mock is already set by Set")
	}

	if mmUpdateMessage.defaultExpectation == nil {
		mmUpdateMessage.defaultExpectation = &AgentPublicServiceServerMockUpdateMessageExpectation{mock: mmUpdateMessage.mock}
	}
	mmUpdateMessage.defaultExpectation.results = &AgentPublicServiceServerMockUpdateMessageResults{up2, err}
	mmUpdateMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateMessage.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.UpdateMessage method
func (mmUpdateMessage *mAgentPublicServiceServerMockUpdateMessage) Set(f func(ctx context.Context, up1 *mm_agentv1alpha.UpdateMessageRequest) (up2 *mm_agentv1alpha.UpdateMessageResponse, err error)) *AgentPublicServiceServerMock {
	if mmUpdateMessage.defaultExpectation != nil {
		mmUpdateMessage.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.UpdateMessage method")
	}

	if len(mmUpdateMessage.expectations) > 0 {
		mmUpdateMessage.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.UpdateMessage method")
	}

	mmUpdateMessage.mock.funcUpdateMessage = f
	mmUpdateMessage.mock.funcUpdateMessageOrigin = minimock.CallerInfo(1)
	return mmUpdateMessage.mock
}

// When sets expectation for the AgentPublicServiceServer.UpdateMessage which will trigger the result defined by the following
// Then helper
func (mmUpdateMessage *mAgentPublicServiceServerMockUpdateMessage) When(ctx context.Context, up1 *mm_agentv1alpha.UpdateMessageRequest) *AgentPublicServiceServerMockUpdateMessageExpectation {
	if mmUpdateMessage.mock.funcUpdateMessage != nil {
		mmUpdateMessage.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateMessage mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockUpdateMessageExpectation{
		mock:               mmUpdateMessage.mock,
		params:             &AgentPublicServiceServerMockUpdateMessageParams{ctx, up1},
		expectationOrigins: AgentPublicServiceServerMockUpdateMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateMessage.expectations = append(mmUpdateMessage.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.UpdateMessage return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockUpdateMessageExpectation) Then(up2 *mm_agentv1alpha.UpdateMessageResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockUpdateMessageResults{up2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.UpdateMessage should be invoked
func (mmUpdateMessage *mAgentPublicServiceServerMockUpdateMessage) Times(n uint64) *mAgentPublicServiceServerMockUpdateMessage {
	if n == 0 {
		mmUpdateMessage.mock.t.Fatalf("Times of AgentPublicServiceServerMock.UpdateMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateMessage.expectedInvocations, n)
	mmUpdateMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateMessage
}

func (mmUpdateMessage *mAgentPublicServiceServerMockUpdateMessage) invocationsDone() bool {
	if len(mmUpdateMessage.expectations) == 0 && mmUpdateMessage.defaultExpectation == nil && mmUpdateMessage.mock.funcUpdateMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateMessage.mock.afterUpdateMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateMessage implements mm_agentv1alpha.AgentPublicServiceServer
func (mmUpdateMessage *AgentPublicServiceServerMock) UpdateMessage(ctx context.Context, up1 *mm_agentv1alpha.UpdateMessageRequest) (up2 *mm_agentv1alpha.UpdateMessageResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateMessage.beforeUpdateMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateMessage.afterUpdateMessageCounter, 1)

	mmUpdateMessage.t.Helper()

	if mmUpdateMessage.inspectFuncUpdateMessage != nil {
		mmUpdateMessage.inspectFuncUpdateMessage(ctx, up1)
	}

	mm_params := AgentPublicServiceServerMockUpdateMessageParams{ctx, up1}

	// Record call args
	mmUpdateMessage.UpdateMessageMock.mutex.Lock()
	mmUpdateMessage.UpdateMessageMock.callArgs = append(mmUpdateMessage.UpdateMessageMock.callArgs, &mm_params)
	mmUpdateMessage.UpdateMessageMock.mutex.Unlock()

	for _, e := range mmUpdateMessage.UpdateMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateMessage.UpdateMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateMessage.UpdateMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateMessage.UpdateMessageMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateMessage.UpdateMessageMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockUpdateMessageParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateMessage.t.Errorf("AgentPublicServiceServerMock.UpdateMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateMessage.UpdateMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateMessage.t.Errorf("AgentPublicServiceServerMock.UpdateMessage got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateMessage.UpdateMessageMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateMessage.t.Errorf("AgentPublicServiceServerMock.UpdateMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateMessage.UpdateMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateMessage.UpdateMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateMessage.t.Fatal("No results are set for the AgentPublicServiceServerMock.UpdateMessage")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateMessage.funcUpdateMessage != nil {
		return mmUpdateMessage.funcUpdateMessage(ctx, up1)
	}
	mmUpdateMessage.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.UpdateMessage. %v %v", ctx, up1)
	return
}

// UpdateMessageAfterCounter returns a count of finished AgentPublicServiceServerMock.UpdateMessage invocations
func (mmUpdateMessage *AgentPublicServiceServerMock) UpdateMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateMessage.afterUpdateMessageCounter)
}

// UpdateMessageBeforeCounter returns a count of AgentPublicServiceServerMock.UpdateMessage invocations
func (mmUpdateMessage *AgentPublicServiceServerMock) UpdateMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateMessage.beforeUpdateMessageCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.UpdateMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateMessage *mAgentPublicServiceServerMockUpdateMessage) Calls() []*AgentPublicServiceServerMockUpdateMessageParams {
	mmUpdateMessage.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockUpdateMessageParams, len(mmUpdateMessage.callArgs))
	copy(argCopy, mmUpdateMessage.callArgs)

	mmUpdateMessage.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateMessageDone returns true if the count of the UpdateMessage invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockUpdateMessageDone() bool {
	if m.UpdateMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateMessageMock.invocationsDone()
}

// MinimockUpdateMessageInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockUpdateMessageInspect() {
	for _, e := range m.UpdateMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateMessageCounter := mm_atomic.LoadUint64(&m.afterUpdateMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMessageMock.defaultExpectation != nil && afterUpdateMessageCounter < 1 {
		if m.UpdateMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateMessage at\n%s", m.UpdateMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateMessage at\n%s with params: %#v", m.UpdateMessageMock.defaultExpectation.expectationOrigins.origin, *m.UpdateMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateMessage != nil && afterUpdateMessageCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateMessage at\n%s", m.funcUpdateMessageOrigin)
	}

	if !m.UpdateMessageMock.invocationsDone() && afterUpdateMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.UpdateMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateMessageMock.expectedInvocations), m.UpdateMessageMock.expectedInvocationsOrigin, afterUpdateMessageCounter)
	}
}

type mAgentPublicServiceServerMockUpdateRow struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockUpdateRowExpectation
	expectations       []*AgentPublicServiceServerMockUpdateRowExpectation

	callArgs []*AgentPublicServiceServerMockUpdateRowParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockUpdateRowExpectation specifies expectation struct of the AgentPublicServiceServer.UpdateRow
type AgentPublicServiceServerMockUpdateRowExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockUpdateRowParams
	paramPtrs          *AgentPublicServiceServerMockUpdateRowParamPtrs
	expectationOrigins AgentPublicServiceServerMockUpdateRowExpectationOrigins
	results            *AgentPublicServiceServerMockUpdateRowResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockUpdateRowParams contains parameters of the AgentPublicServiceServer.UpdateRow
type AgentPublicServiceServerMockUpdateRowParams struct {
	ctx context.Context
	up1 *mm_agentv1alpha.UpdateRowRequest
}

// AgentPublicServiceServerMockUpdateRowParamPtrs contains pointers to parameters of the AgentPublicServiceServer.UpdateRow
type AgentPublicServiceServerMockUpdateRowParamPtrs struct {
	ctx *context.Context
	up1 **mm_agentv1alpha.UpdateRowRequest
}

// AgentPublicServiceServerMockUpdateRowResults contains results of the AgentPublicServiceServer.UpdateRow
type AgentPublicServiceServerMockUpdateRowResults struct {
	up2 *mm_agentv1alpha.UpdateRowResponse
	err error
}

// AgentPublicServiceServerMockUpdateRowOrigins contains origins of expectations of the AgentPublicServiceServer.UpdateRow
type AgentPublicServiceServerMockUpdateRowExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateRow *mAgentPublicServiceServerMockUpdateRow) Optional() *mAgentPublicServiceServerMockUpdateRow {
	mmUpdateRow.optional = true
	return mmUpdateRow
}

// Expect sets up expected params for AgentPublicServiceServer.UpdateRow
func (mmUpdateRow *mAgentPublicServiceServerMockUpdateRow) Expect(ctx context.Context, up1 *mm_agentv1alpha.UpdateRowRequest) *mAgentPublicServiceServerMockUpdateRow {
	if mmUpdateRow.mock.funcUpdateRow != nil {
		mmUpdateRow.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRow mock is already set by Set")
	}

	if mmUpdateRow.defaultExpectation == nil {
		mmUpdateRow.defaultExpectation = &AgentPublicServiceServerMockUpdateRowExpectation{}
	}

	if mmUpdateRow.defaultExpectation.paramPtrs != nil {
		mmUpdateRow.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRow mock is already set by ExpectParams functions")
	}

	mmUpdateRow.defaultExpectation.params = &AgentPublicServiceServerMockUpdateRowParams{ctx, up1}
	mmUpdateRow.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateRow.expectations {
		if minimock.Equal(e.params, mmUpdateRow.defaultExpectation.params) {
			mmUpdateRow.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateRow.defaultExpectation.params)
		}
	}

	return mmUpdateRow
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.UpdateRow
func (mmUpdateRow *mAgentPublicServiceServerMockUpdateRow) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockUpdateRow {
	if mmUpdateRow.mock.funcUpdateRow != nil {
		mmUpdateRow.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRow mock is already set by Set")
	}

	if mmUpdateRow.defaultExpectation == nil {
		mmUpdateRow.defaultExpectation = &AgentPublicServiceServerMockUpdateRowExpectation{}
	}

	if mmUpdateRow.defaultExpectation.params != nil {
		mmUpdateRow.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRow mock is already set by Expect")
	}

	if mmUpdateRow.defaultExpectation.paramPtrs == nil {
		mmUpdateRow.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockUpdateRowParamPtrs{}
	}
	mmUpdateRow.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateRow.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateRow
}

// ExpectUp1Param2 sets up expected param up1 for AgentPublicServiceServer.UpdateRow
func (mmUpdateRow *mAgentPublicServiceServerMockUpdateRow) ExpectUp1Param2(up1 *mm_agentv1alpha.UpdateRowRequest) *mAgentPublicServiceServerMockUpdateRow {
	if mmUpdateRow.mock.funcUpdateRow != nil {
		mmUpdateRow.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRow mock is already set by Set")
	}

	if mmUpdateRow.defaultExpectation == nil {
		mmUpdateRow.defaultExpectation = &AgentPublicServiceServerMockUpdateRowExpectation{}
	}

	if mmUpdateRow.defaultExpectation.params != nil {
		mmUpdateRow.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRow mock is already set by Expect")
	}

	if mmUpdateRow.defaultExpectation.paramPtrs == nil {
		mmUpdateRow.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockUpdateRowParamPtrs{}
	}
	mmUpdateRow.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateRow.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateRow
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.UpdateRow
func (mmUpdateRow *mAgentPublicServiceServerMockUpdateRow) Inspect(f func(ctx context.Context, up1 *mm_agentv1alpha.UpdateRowRequest)) *mAgentPublicServiceServerMockUpdateRow {
	if mmUpdateRow.mock.inspectFuncUpdateRow != nil {
		mmUpdateRow.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.UpdateRow")
	}

	mmUpdateRow.mock.inspectFuncUpdateRow = f

	return mmUpdateRow
}

// Return sets up results that will be returned by AgentPublicServiceServer.UpdateRow
func (mmUpdateRow *mAgentPublicServiceServerMockUpdateRow) Return(up2 *mm_agentv1alpha.UpdateRowResponse, err error) *AgentPublicServiceServerMock {
	if mmUpdateRow.mock.funcUpdateRow != nil {
		mmUpdateRow.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRow mock is already set by Set")
	}

	if mmUpdateRow.defaultExpectation == nil {
		mmUpdateRow.defaultExpectation = &AgentPublicServiceServerMockUpdateRowExpectation{mock: mmUpdateRow.mock}
	}
	mmUpdateRow.defaultExpectation.results = &AgentPublicServiceServerMockUpdateRowResults{up2, err}
	mmUpdateRow.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateRow.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.UpdateRow method
func (mmUpdateRow *mAgentPublicServiceServerMockUpdateRow) Set(f func(ctx context.Context, up1 *mm_agentv1alpha.UpdateRowRequest) (up2 *mm_agentv1alpha.UpdateRowResponse, err error)) *AgentPublicServiceServerMock {
	if mmUpdateRow.defaultExpectation != nil {
		mmUpdateRow.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.UpdateRow method")
	}

	if len(mmUpdateRow.expectations) > 0 {
		mmUpdateRow.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.UpdateRow method")
	}

	mmUpdateRow.mock.funcUpdateRow = f
	mmUpdateRow.mock.funcUpdateRowOrigin = minimock.CallerInfo(1)
	return mmUpdateRow.mock
}

// When sets expectation for the AgentPublicServiceServer.UpdateRow which will trigger the result defined by the following
// Then helper
func (mmUpdateRow *mAgentPublicServiceServerMockUpdateRow) When(ctx context.Context, up1 *mm_agentv1alpha.UpdateRowRequest) *AgentPublicServiceServerMockUpdateRowExpectation {
	if mmUpdateRow.mock.funcUpdateRow != nil {
		mmUpdateRow.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRow mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockUpdateRowExpectation{
		mock:               mmUpdateRow.mock,
		params:             &AgentPublicServiceServerMockUpdateRowParams{ctx, up1},
		expectationOrigins: AgentPublicServiceServerMockUpdateRowExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateRow.expectations = append(mmUpdateRow.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.UpdateRow return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockUpdateRowExpectation) Then(up2 *mm_agentv1alpha.UpdateRowResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockUpdateRowResults{up2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.UpdateRow should be invoked
func (mmUpdateRow *mAgentPublicServiceServerMockUpdateRow) Times(n uint64) *mAgentPublicServiceServerMockUpdateRow {
	if n == 0 {
		mmUpdateRow.mock.t.Fatalf("Times of AgentPublicServiceServerMock.UpdateRow mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateRow.expectedInvocations, n)
	mmUpdateRow.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateRow
}

func (mmUpdateRow *mAgentPublicServiceServerMockUpdateRow) invocationsDone() bool {
	if len(mmUpdateRow.expectations) == 0 && mmUpdateRow.defaultExpectation == nil && mmUpdateRow.mock.funcUpdateRow == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateRow.mock.afterUpdateRowCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateRow.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateRow implements mm_agentv1alpha.AgentPublicServiceServer
func (mmUpdateRow *AgentPublicServiceServerMock) UpdateRow(ctx context.Context, up1 *mm_agentv1alpha.UpdateRowRequest) (up2 *mm_agentv1alpha.UpdateRowResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateRow.beforeUpdateRowCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateRow.afterUpdateRowCounter, 1)

	mmUpdateRow.t.Helper()

	if mmUpdateRow.inspectFuncUpdateRow != nil {
		mmUpdateRow.inspectFuncUpdateRow(ctx, up1)
	}

	mm_params := AgentPublicServiceServerMockUpdateRowParams{ctx, up1}

	// Record call args
	mmUpdateRow.UpdateRowMock.mutex.Lock()
	mmUpdateRow.UpdateRowMock.callArgs = append(mmUpdateRow.UpdateRowMock.callArgs, &mm_params)
	mmUpdateRow.UpdateRowMock.mutex.Unlock()

	for _, e := range mmUpdateRow.UpdateRowMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateRow.UpdateRowMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateRow.UpdateRowMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateRow.UpdateRowMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateRow.UpdateRowMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockUpdateRowParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateRow.t.Errorf("AgentPublicServiceServerMock.UpdateRow got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateRow.UpdateRowMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateRow.t.Errorf("AgentPublicServiceServerMock.UpdateRow got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateRow.UpdateRowMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateRow.t.Errorf("AgentPublicServiceServerMock.UpdateRow got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateRow.UpdateRowMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateRow.UpdateRowMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateRow.t.Fatal("No results are set for the AgentPublicServiceServerMock.UpdateRow")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateRow.funcUpdateRow != nil {
		return mmUpdateRow.funcUpdateRow(ctx, up1)
	}
	mmUpdateRow.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.UpdateRow. %v %v", ctx, up1)
	return
}

// UpdateRowAfterCounter returns a count of finished AgentPublicServiceServerMock.UpdateRow invocations
func (mmUpdateRow *AgentPublicServiceServerMock) UpdateRowAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateRow.afterUpdateRowCounter)
}

// UpdateRowBeforeCounter returns a count of AgentPublicServiceServerMock.UpdateRow invocations
func (mmUpdateRow *AgentPublicServiceServerMock) UpdateRowBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateRow.beforeUpdateRowCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.UpdateRow.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateRow *mAgentPublicServiceServerMockUpdateRow) Calls() []*AgentPublicServiceServerMockUpdateRowParams {
	mmUpdateRow.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockUpdateRowParams, len(mmUpdateRow.callArgs))
	copy(argCopy, mmUpdateRow.callArgs)

	mmUpdateRow.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateRowDone returns true if the count of the UpdateRow invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockUpdateRowDone() bool {
	if m.UpdateRowMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateRowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateRowMock.invocationsDone()
}

// MinimockUpdateRowInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockUpdateRowInspect() {
	for _, e := range m.UpdateRowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateRow at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateRowCounter := mm_atomic.LoadUint64(&m.afterUpdateRowCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateRowMock.defaultExpectation != nil && afterUpdateRowCounter < 1 {
		if m.UpdateRowMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateRow at\n%s", m.UpdateRowMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateRow at\n%s with params: %#v", m.UpdateRowMock.defaultExpectation.expectationOrigins.origin, *m.UpdateRowMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateRow != nil && afterUpdateRowCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateRow at\n%s", m.funcUpdateRowOrigin)
	}

	if !m.UpdateRowMock.invocationsDone() && afterUpdateRowCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.UpdateRow at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateRowMock.expectedInvocations), m.UpdateRowMock.expectedInvocationsOrigin, afterUpdateRowCounter)
	}
}

type mAgentPublicServiceServerMockUpdateRows struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockUpdateRowsExpectation
	expectations       []*AgentPublicServiceServerMockUpdateRowsExpectation

	callArgs []*AgentPublicServiceServerMockUpdateRowsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockUpdateRowsExpectation specifies expectation struct of the AgentPublicServiceServer.UpdateRows
type AgentPublicServiceServerMockUpdateRowsExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockUpdateRowsParams
	paramPtrs          *AgentPublicServiceServerMockUpdateRowsParamPtrs
	expectationOrigins AgentPublicServiceServerMockUpdateRowsExpectationOrigins
	results            *AgentPublicServiceServerMockUpdateRowsResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockUpdateRowsParams contains parameters of the AgentPublicServiceServer.UpdateRows
type AgentPublicServiceServerMockUpdateRowsParams struct {
	ctx context.Context
	up1 *mm_agentv1alpha.UpdateRowsRequest
}

// AgentPublicServiceServerMockUpdateRowsParamPtrs contains pointers to parameters of the AgentPublicServiceServer.UpdateRows
type AgentPublicServiceServerMockUpdateRowsParamPtrs struct {
	ctx *context.Context
	up1 **mm_agentv1alpha.UpdateRowsRequest
}

// AgentPublicServiceServerMockUpdateRowsResults contains results of the AgentPublicServiceServer.UpdateRows
type AgentPublicServiceServerMockUpdateRowsResults struct {
	up2 *mm_agentv1alpha.UpdateRowsResponse
	err error
}

// AgentPublicServiceServerMockUpdateRowsOrigins contains origins of expectations of the AgentPublicServiceServer.UpdateRows
type AgentPublicServiceServerMockUpdateRowsExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateRows *mAgentPublicServiceServerMockUpdateRows) Optional() *mAgentPublicServiceServerMockUpdateRows {
	mmUpdateRows.optional = true
	return mmUpdateRows
}

// Expect sets up expected params for AgentPublicServiceServer.UpdateRows
func (mmUpdateRows *mAgentPublicServiceServerMockUpdateRows) Expect(ctx context.Context, up1 *mm_agentv1alpha.UpdateRowsRequest) *mAgentPublicServiceServerMockUpdateRows {
	if mmUpdateRows.mock.funcUpdateRows != nil {
		mmUpdateRows.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRows mock is already set by Set")
	}

	if mmUpdateRows.defaultExpectation == nil {
		mmUpdateRows.defaultExpectation = &AgentPublicServiceServerMockUpdateRowsExpectation{}
	}

	if mmUpdateRows.defaultExpectation.paramPtrs != nil {
		mmUpdateRows.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRows mock is already set by ExpectParams functions")
	}

	mmUpdateRows.defaultExpectation.params = &AgentPublicServiceServerMockUpdateRowsParams{ctx, up1}
	mmUpdateRows.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateRows.expectations {
		if minimock.Equal(e.params, mmUpdateRows.defaultExpectation.params) {
			mmUpdateRows.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateRows.defaultExpectation.params)
		}
	}

	return mmUpdateRows
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.UpdateRows
func (mmUpdateRows *mAgentPublicServiceServerMockUpdateRows) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockUpdateRows {
	if mmUpdateRows.mock.funcUpdateRows != nil {
		mmUpdateRows.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRows mock is already set by Set")
	}

	if mmUpdateRows.defaultExpectation == nil {
		mmUpdateRows.defaultExpectation = &AgentPublicServiceServerMockUpdateRowsExpectation{}
	}

	if mmUpdateRows.defaultExpectation.params != nil {
		mmUpdateRows.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRows mock is already set by Expect")
	}

	if mmUpdateRows.defaultExpectation.paramPtrs == nil {
		mmUpdateRows.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockUpdateRowsParamPtrs{}
	}
	mmUpdateRows.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateRows.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateRows
}

// ExpectUp1Param2 sets up expected param up1 for AgentPublicServiceServer.UpdateRows
func (mmUpdateRows *mAgentPublicServiceServerMockUpdateRows) ExpectUp1Param2(up1 *mm_agentv1alpha.UpdateRowsRequest) *mAgentPublicServiceServerMockUpdateRows {
	if mmUpdateRows.mock.funcUpdateRows != nil {
		mmUpdateRows.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRows mock is already set by Set")
	}

	if mmUpdateRows.defaultExpectation == nil {
		mmUpdateRows.defaultExpectation = &AgentPublicServiceServerMockUpdateRowsExpectation{}
	}

	if mmUpdateRows.defaultExpectation.params != nil {
		mmUpdateRows.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRows mock is already set by Expect")
	}

	if mmUpdateRows.defaultExpectation.paramPtrs == nil {
		mmUpdateRows.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockUpdateRowsParamPtrs{}
	}
	mmUpdateRows.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateRows.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateRows
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.UpdateRows
func (mmUpdateRows *mAgentPublicServiceServerMockUpdateRows) Inspect(f func(ctx context.Context, up1 *mm_agentv1alpha.UpdateRowsRequest)) *mAgentPublicServiceServerMockUpdateRows {
	if mmUpdateRows.mock.inspectFuncUpdateRows != nil {
		mmUpdateRows.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.UpdateRows")
	}

	mmUpdateRows.mock.inspectFuncUpdateRows = f

	return mmUpdateRows
}

// Return sets up results that will be returned by AgentPublicServiceServer.UpdateRows
func (mmUpdateRows *mAgentPublicServiceServerMockUpdateRows) Return(up2 *mm_agentv1alpha.UpdateRowsResponse, err error) *AgentPublicServiceServerMock {
	if mmUpdateRows.mock.funcUpdateRows != nil {
		mmUpdateRows.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRows mock is already set by Set")
	}

	if mmUpdateRows.defaultExpectation == nil {
		mmUpdateRows.defaultExpectation = &AgentPublicServiceServerMockUpdateRowsExpectation{mock: mmUpdateRows.mock}
	}
	mmUpdateRows.defaultExpectation.results = &AgentPublicServiceServerMockUpdateRowsResults{up2, err}
	mmUpdateRows.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateRows.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.UpdateRows method
func (mmUpdateRows *mAgentPublicServiceServerMockUpdateRows) Set(f func(ctx context.Context, up1 *mm_agentv1alpha.UpdateRowsRequest) (up2 *mm_agentv1alpha.UpdateRowsResponse, err error)) *AgentPublicServiceServerMock {
	if mmUpdateRows.defaultExpectation != nil {
		mmUpdateRows.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.UpdateRows method")
	}

	if len(mmUpdateRows.expectations) > 0 {
		mmUpdateRows.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.UpdateRows method")
	}

	mmUpdateRows.mock.funcUpdateRows = f
	mmUpdateRows.mock.funcUpdateRowsOrigin = minimock.CallerInfo(1)
	return mmUpdateRows.mock
}

// When sets expectation for the AgentPublicServiceServer.UpdateRows which will trigger the result defined by the following
// Then helper
func (mmUpdateRows *mAgentPublicServiceServerMockUpdateRows) When(ctx context.Context, up1 *mm_agentv1alpha.UpdateRowsRequest) *AgentPublicServiceServerMockUpdateRowsExpectation {
	if mmUpdateRows.mock.funcUpdateRows != nil {
		mmUpdateRows.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateRows mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockUpdateRowsExpectation{
		mock:               mmUpdateRows.mock,
		params:             &AgentPublicServiceServerMockUpdateRowsParams{ctx, up1},
		expectationOrigins: AgentPublicServiceServerMockUpdateRowsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateRows.expectations = append(mmUpdateRows.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.UpdateRows return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockUpdateRowsExpectation) Then(up2 *mm_agentv1alpha.UpdateRowsResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockUpdateRowsResults{up2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.UpdateRows should be invoked
func (mmUpdateRows *mAgentPublicServiceServerMockUpdateRows) Times(n uint64) *mAgentPublicServiceServerMockUpdateRows {
	if n == 0 {
		mmUpdateRows.mock.t.Fatalf("Times of AgentPublicServiceServerMock.UpdateRows mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateRows.expectedInvocations, n)
	mmUpdateRows.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateRows
}

func (mmUpdateRows *mAgentPublicServiceServerMockUpdateRows) invocationsDone() bool {
	if len(mmUpdateRows.expectations) == 0 && mmUpdateRows.defaultExpectation == nil && mmUpdateRows.mock.funcUpdateRows == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateRows.mock.afterUpdateRowsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateRows.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateRows implements mm_agentv1alpha.AgentPublicServiceServer
func (mmUpdateRows *AgentPublicServiceServerMock) UpdateRows(ctx context.Context, up1 *mm_agentv1alpha.UpdateRowsRequest) (up2 *mm_agentv1alpha.UpdateRowsResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateRows.beforeUpdateRowsCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateRows.afterUpdateRowsCounter, 1)

	mmUpdateRows.t.Helper()

	if mmUpdateRows.inspectFuncUpdateRows != nil {
		mmUpdateRows.inspectFuncUpdateRows(ctx, up1)
	}

	mm_params := AgentPublicServiceServerMockUpdateRowsParams{ctx, up1}

	// Record call args
	mmUpdateRows.UpdateRowsMock.mutex.Lock()
	mmUpdateRows.UpdateRowsMock.callArgs = append(mmUpdateRows.UpdateRowsMock.callArgs, &mm_params)
	mmUpdateRows.UpdateRowsMock.mutex.Unlock()

	for _, e := range mmUpdateRows.UpdateRowsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateRows.UpdateRowsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateRows.UpdateRowsMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateRows.UpdateRowsMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateRows.UpdateRowsMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockUpdateRowsParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateRows.t.Errorf("AgentPublicServiceServerMock.UpdateRows got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateRows.UpdateRowsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateRows.t.Errorf("AgentPublicServiceServerMock.UpdateRows got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateRows.UpdateRowsMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateRows.t.Errorf("AgentPublicServiceServerMock.UpdateRows got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateRows.UpdateRowsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateRows.UpdateRowsMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateRows.t.Fatal("No results are set for the AgentPublicServiceServerMock.UpdateRows")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateRows.funcUpdateRows != nil {
		return mmUpdateRows.funcUpdateRows(ctx, up1)
	}
	mmUpdateRows.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.UpdateRows. %v %v", ctx, up1)
	return
}

// UpdateRowsAfterCounter returns a count of finished AgentPublicServiceServerMock.UpdateRows invocations
func (mmUpdateRows *AgentPublicServiceServerMock) UpdateRowsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateRows.afterUpdateRowsCounter)
}

// UpdateRowsBeforeCounter returns a count of AgentPublicServiceServerMock.UpdateRows invocations
func (mmUpdateRows *AgentPublicServiceServerMock) UpdateRowsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateRows.beforeUpdateRowsCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.UpdateRows.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateRows *mAgentPublicServiceServerMockUpdateRows) Calls() []*AgentPublicServiceServerMockUpdateRowsParams {
	mmUpdateRows.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockUpdateRowsParams, len(mmUpdateRows.callArgs))
	copy(argCopy, mmUpdateRows.callArgs)

	mmUpdateRows.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateRowsDone returns true if the count of the UpdateRows invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockUpdateRowsDone() bool {
	if m.UpdateRowsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateRowsMock.invocationsDone()
}

// MinimockUpdateRowsInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockUpdateRowsInspect() {
	for _, e := range m.UpdateRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateRows at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateRowsCounter := mm_atomic.LoadUint64(&m.afterUpdateRowsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateRowsMock.defaultExpectation != nil && afterUpdateRowsCounter < 1 {
		if m.UpdateRowsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateRows at\n%s", m.UpdateRowsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateRows at\n%s with params: %#v", m.UpdateRowsMock.defaultExpectation.expectationOrigins.origin, *m.UpdateRowsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateRows != nil && afterUpdateRowsCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateRows at\n%s", m.funcUpdateRowsOrigin)
	}

	if !m.UpdateRowsMock.invocationsDone() && afterUpdateRowsCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.UpdateRows at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateRowsMock.expectedInvocations), m.UpdateRowsMock.expectedInvocationsOrigin, afterUpdateRowsCounter)
	}
}

type mAgentPublicServiceServerMockUpdateTable struct {
	optional           bool
	mock               *AgentPublicServiceServerMock
	defaultExpectation *AgentPublicServiceServerMockUpdateTableExpectation
	expectations       []*AgentPublicServiceServerMockUpdateTableExpectation

	callArgs []*AgentPublicServiceServerMockUpdateTableParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AgentPublicServiceServerMockUpdateTableExpectation specifies expectation struct of the AgentPublicServiceServer.UpdateTable
type AgentPublicServiceServerMockUpdateTableExpectation struct {
	mock               *AgentPublicServiceServerMock
	params             *AgentPublicServiceServerMockUpdateTableParams
	paramPtrs          *AgentPublicServiceServerMockUpdateTableParamPtrs
	expectationOrigins AgentPublicServiceServerMockUpdateTableExpectationOrigins
	results            *AgentPublicServiceServerMockUpdateTableResults
	returnOrigin       string
	Counter            uint64
}

// AgentPublicServiceServerMockUpdateTableParams contains parameters of the AgentPublicServiceServer.UpdateTable
type AgentPublicServiceServerMockUpdateTableParams struct {
	ctx context.Context
	up1 *mm_agentv1alpha.UpdateTableRequest
}

// AgentPublicServiceServerMockUpdateTableParamPtrs contains pointers to parameters of the AgentPublicServiceServer.UpdateTable
type AgentPublicServiceServerMockUpdateTableParamPtrs struct {
	ctx *context.Context
	up1 **mm_agentv1alpha.UpdateTableRequest
}

// AgentPublicServiceServerMockUpdateTableResults contains results of the AgentPublicServiceServer.UpdateTable
type AgentPublicServiceServerMockUpdateTableResults struct {
	up2 *mm_agentv1alpha.UpdateTableResponse
	err error
}

// AgentPublicServiceServerMockUpdateTableOrigins contains origins of expectations of the AgentPublicServiceServer.UpdateTable
type AgentPublicServiceServerMockUpdateTableExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateTable *mAgentPublicServiceServerMockUpdateTable) Optional() *mAgentPublicServiceServerMockUpdateTable {
	mmUpdateTable.optional = true
	return mmUpdateTable
}

// Expect sets up expected params for AgentPublicServiceServer.UpdateTable
func (mmUpdateTable *mAgentPublicServiceServerMockUpdateTable) Expect(ctx context.Context, up1 *mm_agentv1alpha.UpdateTableRequest) *mAgentPublicServiceServerMockUpdateTable {
	if mmUpdateTable.mock.funcUpdateTable != nil {
		mmUpdateTable.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateTable mock is already set by Set")
	}

	if mmUpdateTable.defaultExpectation == nil {
		mmUpdateTable.defaultExpectation = &AgentPublicServiceServerMockUpdateTableExpectation{}
	}

	if mmUpdateTable.defaultExpectation.paramPtrs != nil {
		mmUpdateTable.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateTable mock is already set by ExpectParams functions")
	}

	mmUpdateTable.defaultExpectation.params = &AgentPublicServiceServerMockUpdateTableParams{ctx, up1}
	mmUpdateTable.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateTable.expectations {
		if minimock.Equal(e.params, mmUpdateTable.defaultExpectation.params) {
			mmUpdateTable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateTable.defaultExpectation.params)
		}
	}

	return mmUpdateTable
}

// ExpectCtxParam1 sets up expected param ctx for AgentPublicServiceServer.UpdateTable
func (mmUpdateTable *mAgentPublicServiceServerMockUpdateTable) ExpectCtxParam1(ctx context.Context) *mAgentPublicServiceServerMockUpdateTable {
	if mmUpdateTable.mock.funcUpdateTable != nil {
		mmUpdateTable.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateTable mock is already set by Set")
	}

	if mmUpdateTable.defaultExpectation == nil {
		mmUpdateTable.defaultExpectation = &AgentPublicServiceServerMockUpdateTableExpectation{}
	}

	if mmUpdateTable.defaultExpectation.params != nil {
		mmUpdateTable.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateTable mock is already set by Expect")
	}

	if mmUpdateTable.defaultExpectation.paramPtrs == nil {
		mmUpdateTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockUpdateTableParamPtrs{}
	}
	mmUpdateTable.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateTable.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateTable
}

// ExpectUp1Param2 sets up expected param up1 for AgentPublicServiceServer.UpdateTable
func (mmUpdateTable *mAgentPublicServiceServerMockUpdateTable) ExpectUp1Param2(up1 *mm_agentv1alpha.UpdateTableRequest) *mAgentPublicServiceServerMockUpdateTable {
	if mmUpdateTable.mock.funcUpdateTable != nil {
		mmUpdateTable.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateTable mock is already set by Set")
	}

	if mmUpdateTable.defaultExpectation == nil {
		mmUpdateTable.defaultExpectation = &AgentPublicServiceServerMockUpdateTableExpectation{}
	}

	if mmUpdateTable.defaultExpectation.params != nil {
		mmUpdateTable.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateTable mock is already set by Expect")
	}

	if mmUpdateTable.defaultExpectation.paramPtrs == nil {
		mmUpdateTable.defaultExpectation.paramPtrs = &AgentPublicServiceServerMockUpdateTableParamPtrs{}
	}
	mmUpdateTable.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateTable.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateTable
}

// Inspect accepts an inspector function that has same arguments as the AgentPublicServiceServer.UpdateTable
func (mmUpdateTable *mAgentPublicServiceServerMockUpdateTable) Inspect(f func(ctx context.Context, up1 *mm_agentv1alpha.UpdateTableRequest)) *mAgentPublicServiceServerMockUpdateTable {
	if mmUpdateTable.mock.inspectFuncUpdateTable != nil {
		mmUpdateTable.mock.t.Fatalf("Inspect function is already set for AgentPublicServiceServerMock.UpdateTable")
	}

	mmUpdateTable.mock.inspectFuncUpdateTable = f

	return mmUpdateTable
}

// Return sets up results that will be returned by AgentPublicServiceServer.UpdateTable
func (mmUpdateTable *mAgentPublicServiceServerMockUpdateTable) Return(up2 *mm_agentv1alpha.UpdateTableResponse, err error) *AgentPublicServiceServerMock {
	if mmUpdateTable.mock.funcUpdateTable != nil {
		mmUpdateTable.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateTable mock is already set by Set")
	}

	if mmUpdateTable.defaultExpectation == nil {
		mmUpdateTable.defaultExpectation = &AgentPublicServiceServerMockUpdateTableExpectation{mock: mmUpdateTable.mock}
	}
	mmUpdateTable.defaultExpectation.results = &AgentPublicServiceServerMockUpdateTableResults{up2, err}
	mmUpdateTable.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateTable.mock
}

// Set uses given function f to mock the AgentPublicServiceServer.UpdateTable method
func (mmUpdateTable *mAgentPublicServiceServerMockUpdateTable) Set(f func(ctx context.Context, up1 *mm_agentv1alpha.UpdateTableRequest) (up2 *mm_agentv1alpha.UpdateTableResponse, err error)) *AgentPublicServiceServerMock {
	if mmUpdateTable.defaultExpectation != nil {
		mmUpdateTable.mock.t.Fatalf("Default expectation is already set for the AgentPublicServiceServer.UpdateTable method")
	}

	if len(mmUpdateTable.expectations) > 0 {
		mmUpdateTable.mock.t.Fatalf("Some expectations are already set for the AgentPublicServiceServer.UpdateTable method")
	}

	mmUpdateTable.mock.funcUpdateTable = f
	mmUpdateTable.mock.funcUpdateTableOrigin = minimock.CallerInfo(1)
	return mmUpdateTable.mock
}

// When sets expectation for the AgentPublicServiceServer.UpdateTable which will trigger the result defined by the following
// Then helper
func (mmUpdateTable *mAgentPublicServiceServerMockUpdateTable) When(ctx context.Context, up1 *mm_agentv1alpha.UpdateTableRequest) *AgentPublicServiceServerMockUpdateTableExpectation {
	if mmUpdateTable.mock.funcUpdateTable != nil {
		mmUpdateTable.mock.t.Fatalf("AgentPublicServiceServerMock.UpdateTable mock is already set by Set")
	}

	expectation := &AgentPublicServiceServerMockUpdateTableExpectation{
		mock:               mmUpdateTable.mock,
		params:             &AgentPublicServiceServerMockUpdateTableParams{ctx, up1},
		expectationOrigins: AgentPublicServiceServerMockUpdateTableExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateTable.expectations = append(mmUpdateTable.expectations, expectation)
	return expectation
}

// Then sets up AgentPublicServiceServer.UpdateTable return parameters for the expectation previously defined by the When method
func (e *AgentPublicServiceServerMockUpdateTableExpectation) Then(up2 *mm_agentv1alpha.UpdateTableResponse, err error) *AgentPublicServiceServerMock {
	e.results = &AgentPublicServiceServerMockUpdateTableResults{up2, err}
	return e.mock
}

// Times sets number of times AgentPublicServiceServer.UpdateTable should be invoked
func (mmUpdateTable *mAgentPublicServiceServerMockUpdateTable) Times(n uint64) *mAgentPublicServiceServerMockUpdateTable {
	if n == 0 {
		mmUpdateTable.mock.t.Fatalf("Times of AgentPublicServiceServerMock.UpdateTable mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateTable.expectedInvocations, n)
	mmUpdateTable.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateTable
}

func (mmUpdateTable *mAgentPublicServiceServerMockUpdateTable) invocationsDone() bool {
	if len(mmUpdateTable.expectations) == 0 && mmUpdateTable.defaultExpectation == nil && mmUpdateTable.mock.funcUpdateTable == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateTable.mock.afterUpdateTableCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateTable.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateTable implements mm_agentv1alpha.AgentPublicServiceServer
func (mmUpdateTable *AgentPublicServiceServerMock) UpdateTable(ctx context.Context, up1 *mm_agentv1alpha.UpdateTableRequest) (up2 *mm_agentv1alpha.UpdateTableResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateTable.beforeUpdateTableCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateTable.afterUpdateTableCounter, 1)

	mmUpdateTable.t.Helper()

	if mmUpdateTable.inspectFuncUpdateTable != nil {
		mmUpdateTable.inspectFuncUpdateTable(ctx, up1)
	}

	mm_params := AgentPublicServiceServerMockUpdateTableParams{ctx, up1}

	// Record call args
	mmUpdateTable.UpdateTableMock.mutex.Lock()
	mmUpdateTable.UpdateTableMock.callArgs = append(mmUpdateTable.UpdateTableMock.callArgs, &mm_params)
	mmUpdateTable.UpdateTableMock.mutex.Unlock()

	for _, e := range mmUpdateTable.UpdateTableMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateTable.UpdateTableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateTable.UpdateTableMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateTable.UpdateTableMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateTable.UpdateTableMock.defaultExpectation.paramPtrs

		mm_got := AgentPublicServiceServerMockUpdateTableParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateTable.t.Errorf("AgentPublicServiceServerMock.UpdateTable got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateTable.UpdateTableMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateTable.t.Errorf("AgentPublicServiceServerMock.UpdateTable got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateTable.UpdateTableMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateTable.t.Errorf("AgentPublicServiceServerMock.UpdateTable got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateTable.UpdateTableMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateTable.UpdateTableMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateTable.t.Fatal("No results are set for the AgentPublicServiceServerMock.UpdateTable")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateTable.funcUpdateTable != nil {
		return mmUpdateTable.funcUpdateTable(ctx, up1)
	}
	mmUpdateTable.t.Fatalf("Unexpected call to AgentPublicServiceServerMock.UpdateTable. %v %v", ctx, up1)
	return
}

// UpdateTableAfterCounter returns a count of finished AgentPublicServiceServerMock.UpdateTable invocations
func (mmUpdateTable *AgentPublicServiceServerMock) UpdateTableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateTable.afterUpdateTableCounter)
}

// UpdateTableBeforeCounter returns a count of AgentPublicServiceServerMock.UpdateTable invocations
func (mmUpdateTable *AgentPublicServiceServerMock) UpdateTableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateTable.beforeUpdateTableCounter)
}

// Calls returns a list of arguments used in each call to AgentPublicServiceServerMock.UpdateTable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateTable *mAgentPublicServiceServerMockUpdateTable) Calls() []*AgentPublicServiceServerMockUpdateTableParams {
	mmUpdateTable.mutex.RLock()

	argCopy := make([]*AgentPublicServiceServerMockUpdateTableParams, len(mmUpdateTable.callArgs))
	copy(argCopy, mmUpdateTable.callArgs)

	mmUpdateTable.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateTableDone returns true if the count of the UpdateTable invocations corresponds
// the number of defined expectations
func (m *AgentPublicServiceServerMock) MinimockUpdateTableDone() bool {
	if m.UpdateTableMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateTableMock.invocationsDone()
}

// MinimockUpdateTableInspect logs each unmet expectation
func (m *AgentPublicServiceServerMock) MinimockUpdateTableInspect() {
	for _, e := range m.UpdateTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateTable at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateTableCounter := mm_atomic.LoadUint64(&m.afterUpdateTableCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateTableMock.defaultExpectation != nil && afterUpdateTableCounter < 1 {
		if m.UpdateTableMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateTable at\n%s", m.UpdateTableMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateTable at\n%s with params: %#v", m.UpdateTableMock.defaultExpectation.expectationOrigins.origin, *m.UpdateTableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateTable != nil && afterUpdateTableCounter < 1 {
		m.t.Errorf("Expected call to AgentPublicServiceServerMock.UpdateTable at\n%s", m.funcUpdateTableOrigin)
	}

	if !m.UpdateTableMock.invocationsDone() && afterUpdateTableCounter > 0 {
		m.t.Errorf("Expected %d calls to AgentPublicServiceServerMock.UpdateTable at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateTableMock.expectedInvocations), m.UpdateTableMock.expectedInvocationsOrigin, afterUpdateTableCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AgentPublicServiceServerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockBindChatTableInspect()

			m.MinimockChatInspect()

			m.MinimockCreateChatInspect()

			m.MinimockCreateMessageInspect()

			m.MinimockCreateTableInspect()

			m.MinimockDeleteChatInspect()

			m.MinimockDeleteMessageInspect()

			m.MinimockDeleteRowInspect()

			m.MinimockDeleteRowsInspect()

			m.MinimockDeleteTableInspect()

			m.MinimockExportTableInspect()

			m.MinimockGenerateMockTableInspect()

			m.MinimockGetChatInspect()

			m.MinimockGetColumnDefinitionsInspect()

			m.MinimockGetTableInspect()

			m.MinimockGetTableEventsInspect()

			m.MinimockInsertRowInspect()

			m.MinimockListChatTablesInspect()

			m.MinimockListChatsInspect()

			m.MinimockListMessagesInspect()

			m.MinimockListRowsInspect()

			m.MinimockListTablesInspect()

			m.MinimockLivenessInspect()

			m.MinimockMoveRowsInspect()

			m.MinimockReadinessInspect()

			m.MinimockUnbindChatTableInspect()

			m.MinimockUpdateChatInspect()

			m.MinimockUpdateColumnDefinitionsInspect()

			m.MinimockUpdateMessageInspect()

			m.MinimockUpdateRowInspect()

			m.MinimockUpdateRowsInspect()

			m.MinimockUpdateTableInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AgentPublicServiceServerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AgentPublicServiceServerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockBindChatTableDone() &&
		m.MinimockChatDone() &&
		m.MinimockCreateChatDone() &&
		m.MinimockCreateMessageDone() &&
		m.MinimockCreateTableDone() &&
		m.MinimockDeleteChatDone() &&
		m.MinimockDeleteMessageDone() &&
		m.MinimockDeleteRowDone() &&
		m.MinimockDeleteRowsDone() &&
		m.MinimockDeleteTableDone() &&
		m.MinimockExportTableDone() &&
		m.MinimockGenerateMockTableDone() &&
		m.MinimockGetChatDone() &&
		m.MinimockGetColumnDefinitionsDone() &&
		m.MinimockGetTableDone() &&
		m.MinimockGetTableEventsDone() &&
		m.MinimockInsertRowDone() &&
		m.MinimockListChatTablesDone() &&
		m.MinimockListChatsDone() &&
		m.MinimockListMessagesDone() &&
		m.MinimockListRowsDone() &&
		m.MinimockListTablesDone() &&
		m.MinimockLivenessDone() &&
		m.MinimockMoveRowsDone() &&
		m.MinimockReadinessDone() &&
		m.MinimockUnbindChatTableDone() &&
		m.MinimockUpdateChatDone() &&
		m.MinimockUpdateColumnDefinitionsDone() &&
		m.MinimockUpdateMessageDone() &&
		m.MinimockUpdateRowDone() &&
		m.MinimockUpdateRowsDone() &&
		m.MinimockUpdateTableDone()
}
