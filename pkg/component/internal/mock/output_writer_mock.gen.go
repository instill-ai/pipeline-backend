// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"google.golang.org/protobuf/types/known/structpb"
)

// OutputWriterMock implements mm_base.OutputWriter
type OutputWriterMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcWrite          func(ctx context.Context, output *structpb.Struct) (err error)
	funcWriteOrigin    string
	inspectFuncWrite   func(ctx context.Context, output *structpb.Struct)
	afterWriteCounter  uint64
	beforeWriteCounter uint64
	WriteMock          mOutputWriterMockWrite

	funcWriteData          func(ctx context.Context, output any) (err error)
	funcWriteDataOrigin    string
	inspectFuncWriteData   func(ctx context.Context, output any)
	afterWriteDataCounter  uint64
	beforeWriteDataCounter uint64
	WriteDataMock          mOutputWriterMockWriteData
}

// NewOutputWriterMock returns a mock for mm_base.OutputWriter
func NewOutputWriterMock(t minimock.Tester) *OutputWriterMock {
	m := &OutputWriterMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.WriteMock = mOutputWriterMockWrite{mock: m}
	m.WriteMock.callArgs = []*OutputWriterMockWriteParams{}

	m.WriteDataMock = mOutputWriterMockWriteData{mock: m}
	m.WriteDataMock.callArgs = []*OutputWriterMockWriteDataParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOutputWriterMockWrite struct {
	optional           bool
	mock               *OutputWriterMock
	defaultExpectation *OutputWriterMockWriteExpectation
	expectations       []*OutputWriterMockWriteExpectation

	callArgs []*OutputWriterMockWriteParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OutputWriterMockWriteExpectation specifies expectation struct of the OutputWriter.Write
type OutputWriterMockWriteExpectation struct {
	mock               *OutputWriterMock
	params             *OutputWriterMockWriteParams
	paramPtrs          *OutputWriterMockWriteParamPtrs
	expectationOrigins OutputWriterMockWriteExpectationOrigins
	results            *OutputWriterMockWriteResults
	returnOrigin       string
	Counter            uint64
}

// OutputWriterMockWriteParams contains parameters of the OutputWriter.Write
type OutputWriterMockWriteParams struct {
	ctx    context.Context
	output *structpb.Struct
}

// OutputWriterMockWriteParamPtrs contains pointers to parameters of the OutputWriter.Write
type OutputWriterMockWriteParamPtrs struct {
	ctx    *context.Context
	output **structpb.Struct
}

// OutputWriterMockWriteResults contains results of the OutputWriter.Write
type OutputWriterMockWriteResults struct {
	err error
}

// OutputWriterMockWriteOrigins contains origins of expectations of the OutputWriter.Write
type OutputWriterMockWriteExpectationOrigins struct {
	origin       string
	originCtx    string
	originOutput string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmWrite *mOutputWriterMockWrite) Optional() *mOutputWriterMockWrite {
	mmWrite.optional = true
	return mmWrite
}

// Expect sets up expected params for OutputWriter.Write
func (mmWrite *mOutputWriterMockWrite) Expect(ctx context.Context, output *structpb.Struct) *mOutputWriterMockWrite {
	if mmWrite.mock.funcWrite != nil {
		mmWrite.mock.t.Fatalf("OutputWriterMock.Write mock is already set by Set")
	}

	if mmWrite.defaultExpectation == nil {
		mmWrite.defaultExpectation = &OutputWriterMockWriteExpectation{}
	}

	if mmWrite.defaultExpectation.paramPtrs != nil {
		mmWrite.mock.t.Fatalf("OutputWriterMock.Write mock is already set by ExpectParams functions")
	}

	mmWrite.defaultExpectation.params = &OutputWriterMockWriteParams{ctx, output}
	mmWrite.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmWrite.expectations {
		if minimock.Equal(e.params, mmWrite.defaultExpectation.params) {
			mmWrite.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmWrite.defaultExpectation.params)
		}
	}

	return mmWrite
}

// ExpectCtxParam1 sets up expected param ctx for OutputWriter.Write
func (mmWrite *mOutputWriterMockWrite) ExpectCtxParam1(ctx context.Context) *mOutputWriterMockWrite {
	if mmWrite.mock.funcWrite != nil {
		mmWrite.mock.t.Fatalf("OutputWriterMock.Write mock is already set by Set")
	}

	if mmWrite.defaultExpectation == nil {
		mmWrite.defaultExpectation = &OutputWriterMockWriteExpectation{}
	}

	if mmWrite.defaultExpectation.params != nil {
		mmWrite.mock.t.Fatalf("OutputWriterMock.Write mock is already set by Expect")
	}

	if mmWrite.defaultExpectation.paramPtrs == nil {
		mmWrite.defaultExpectation.paramPtrs = &OutputWriterMockWriteParamPtrs{}
	}
	mmWrite.defaultExpectation.paramPtrs.ctx = &ctx
	mmWrite.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmWrite
}

// ExpectOutputParam2 sets up expected param output for OutputWriter.Write
func (mmWrite *mOutputWriterMockWrite) ExpectOutputParam2(output *structpb.Struct) *mOutputWriterMockWrite {
	if mmWrite.mock.funcWrite != nil {
		mmWrite.mock.t.Fatalf("OutputWriterMock.Write mock is already set by Set")
	}

	if mmWrite.defaultExpectation == nil {
		mmWrite.defaultExpectation = &OutputWriterMockWriteExpectation{}
	}

	if mmWrite.defaultExpectation.params != nil {
		mmWrite.mock.t.Fatalf("OutputWriterMock.Write mock is already set by Expect")
	}

	if mmWrite.defaultExpectation.paramPtrs == nil {
		mmWrite.defaultExpectation.paramPtrs = &OutputWriterMockWriteParamPtrs{}
	}
	mmWrite.defaultExpectation.paramPtrs.output = &output
	mmWrite.defaultExpectation.expectationOrigins.originOutput = minimock.CallerInfo(1)

	return mmWrite
}

// Inspect accepts an inspector function that has same arguments as the OutputWriter.Write
func (mmWrite *mOutputWriterMockWrite) Inspect(f func(ctx context.Context, output *structpb.Struct)) *mOutputWriterMockWrite {
	if mmWrite.mock.inspectFuncWrite != nil {
		mmWrite.mock.t.Fatalf("Inspect function is already set for OutputWriterMock.Write")
	}

	mmWrite.mock.inspectFuncWrite = f

	return mmWrite
}

// Return sets up results that will be returned by OutputWriter.Write
func (mmWrite *mOutputWriterMockWrite) Return(err error) *OutputWriterMock {
	if mmWrite.mock.funcWrite != nil {
		mmWrite.mock.t.Fatalf("OutputWriterMock.Write mock is already set by Set")
	}

	if mmWrite.defaultExpectation == nil {
		mmWrite.defaultExpectation = &OutputWriterMockWriteExpectation{mock: mmWrite.mock}
	}
	mmWrite.defaultExpectation.results = &OutputWriterMockWriteResults{err}
	mmWrite.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmWrite.mock
}

// Set uses given function f to mock the OutputWriter.Write method
func (mmWrite *mOutputWriterMockWrite) Set(f func(ctx context.Context, output *structpb.Struct) (err error)) *OutputWriterMock {
	if mmWrite.defaultExpectation != nil {
		mmWrite.mock.t.Fatalf("Default expectation is already set for the OutputWriter.Write method")
	}

	if len(mmWrite.expectations) > 0 {
		mmWrite.mock.t.Fatalf("Some expectations are already set for the OutputWriter.Write method")
	}

	mmWrite.mock.funcWrite = f
	mmWrite.mock.funcWriteOrigin = minimock.CallerInfo(1)
	return mmWrite.mock
}

// When sets expectation for the OutputWriter.Write which will trigger the result defined by the following
// Then helper
func (mmWrite *mOutputWriterMockWrite) When(ctx context.Context, output *structpb.Struct) *OutputWriterMockWriteExpectation {
	if mmWrite.mock.funcWrite != nil {
		mmWrite.mock.t.Fatalf("OutputWriterMock.Write mock is already set by Set")
	}

	expectation := &OutputWriterMockWriteExpectation{
		mock:               mmWrite.mock,
		params:             &OutputWriterMockWriteParams{ctx, output},
		expectationOrigins: OutputWriterMockWriteExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmWrite.expectations = append(mmWrite.expectations, expectation)
	return expectation
}

// Then sets up OutputWriter.Write return parameters for the expectation previously defined by the When method
func (e *OutputWriterMockWriteExpectation) Then(err error) *OutputWriterMock {
	e.results = &OutputWriterMockWriteResults{err}
	return e.mock
}

// Times sets number of times OutputWriter.Write should be invoked
func (mmWrite *mOutputWriterMockWrite) Times(n uint64) *mOutputWriterMockWrite {
	if n == 0 {
		mmWrite.mock.t.Fatalf("Times of OutputWriterMock.Write mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmWrite.expectedInvocations, n)
	mmWrite.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmWrite
}

func (mmWrite *mOutputWriterMockWrite) invocationsDone() bool {
	if len(mmWrite.expectations) == 0 && mmWrite.defaultExpectation == nil && mmWrite.mock.funcWrite == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmWrite.mock.afterWriteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmWrite.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Write implements mm_base.OutputWriter
func (mmWrite *OutputWriterMock) Write(ctx context.Context, output *structpb.Struct) (err error) {
	mm_atomic.AddUint64(&mmWrite.beforeWriteCounter, 1)
	defer mm_atomic.AddUint64(&mmWrite.afterWriteCounter, 1)

	mmWrite.t.Helper()

	if mmWrite.inspectFuncWrite != nil {
		mmWrite.inspectFuncWrite(ctx, output)
	}

	mm_params := OutputWriterMockWriteParams{ctx, output}

	// Record call args
	mmWrite.WriteMock.mutex.Lock()
	mmWrite.WriteMock.callArgs = append(mmWrite.WriteMock.callArgs, &mm_params)
	mmWrite.WriteMock.mutex.Unlock()

	for _, e := range mmWrite.WriteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmWrite.WriteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmWrite.WriteMock.defaultExpectation.Counter, 1)
		mm_want := mmWrite.WriteMock.defaultExpectation.params
		mm_want_ptrs := mmWrite.WriteMock.defaultExpectation.paramPtrs

		mm_got := OutputWriterMockWriteParams{ctx, output}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmWrite.t.Errorf("OutputWriterMock.Write got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWrite.WriteMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.output != nil && !minimock.Equal(*mm_want_ptrs.output, mm_got.output) {
				mmWrite.t.Errorf("OutputWriterMock.Write got unexpected parameter output, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWrite.WriteMock.defaultExpectation.expectationOrigins.originOutput, *mm_want_ptrs.output, mm_got.output, minimock.Diff(*mm_want_ptrs.output, mm_got.output))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmWrite.t.Errorf("OutputWriterMock.Write got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmWrite.WriteMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmWrite.WriteMock.defaultExpectation.results
		if mm_results == nil {
			mmWrite.t.Fatal("No results are set for the OutputWriterMock.Write")
		}
		return (*mm_results).err
	}
	if mmWrite.funcWrite != nil {
		return mmWrite.funcWrite(ctx, output)
	}
	mmWrite.t.Fatalf("Unexpected call to OutputWriterMock.Write. %v %v", ctx, output)
	return
}

// WriteAfterCounter returns a count of finished OutputWriterMock.Write invocations
func (mmWrite *OutputWriterMock) WriteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWrite.afterWriteCounter)
}

// WriteBeforeCounter returns a count of OutputWriterMock.Write invocations
func (mmWrite *OutputWriterMock) WriteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWrite.beforeWriteCounter)
}

// Calls returns a list of arguments used in each call to OutputWriterMock.Write.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmWrite *mOutputWriterMockWrite) Calls() []*OutputWriterMockWriteParams {
	mmWrite.mutex.RLock()

	argCopy := make([]*OutputWriterMockWriteParams, len(mmWrite.callArgs))
	copy(argCopy, mmWrite.callArgs)

	mmWrite.mutex.RUnlock()

	return argCopy
}

// MinimockWriteDone returns true if the count of the Write invocations corresponds
// the number of defined expectations
func (m *OutputWriterMock) MinimockWriteDone() bool {
	if m.WriteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.WriteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.WriteMock.invocationsDone()
}

// MinimockWriteInspect logs each unmet expectation
func (m *OutputWriterMock) MinimockWriteInspect() {
	for _, e := range m.WriteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OutputWriterMock.Write at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterWriteCounter := mm_atomic.LoadUint64(&m.afterWriteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.WriteMock.defaultExpectation != nil && afterWriteCounter < 1 {
		if m.WriteMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OutputWriterMock.Write at\n%s", m.WriteMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OutputWriterMock.Write at\n%s with params: %#v", m.WriteMock.defaultExpectation.expectationOrigins.origin, *m.WriteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWrite != nil && afterWriteCounter < 1 {
		m.t.Errorf("Expected call to OutputWriterMock.Write at\n%s", m.funcWriteOrigin)
	}

	if !m.WriteMock.invocationsDone() && afterWriteCounter > 0 {
		m.t.Errorf("Expected %d calls to OutputWriterMock.Write at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.WriteMock.expectedInvocations), m.WriteMock.expectedInvocationsOrigin, afterWriteCounter)
	}
}

type mOutputWriterMockWriteData struct {
	optional           bool
	mock               *OutputWriterMock
	defaultExpectation *OutputWriterMockWriteDataExpectation
	expectations       []*OutputWriterMockWriteDataExpectation

	callArgs []*OutputWriterMockWriteDataParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OutputWriterMockWriteDataExpectation specifies expectation struct of the OutputWriter.WriteData
type OutputWriterMockWriteDataExpectation struct {
	mock               *OutputWriterMock
	params             *OutputWriterMockWriteDataParams
	paramPtrs          *OutputWriterMockWriteDataParamPtrs
	expectationOrigins OutputWriterMockWriteDataExpectationOrigins
	results            *OutputWriterMockWriteDataResults
	returnOrigin       string
	Counter            uint64
}

// OutputWriterMockWriteDataParams contains parameters of the OutputWriter.WriteData
type OutputWriterMockWriteDataParams struct {
	ctx    context.Context
	output any
}

// OutputWriterMockWriteDataParamPtrs contains pointers to parameters of the OutputWriter.WriteData
type OutputWriterMockWriteDataParamPtrs struct {
	ctx    *context.Context
	output *any
}

// OutputWriterMockWriteDataResults contains results of the OutputWriter.WriteData
type OutputWriterMockWriteDataResults struct {
	err error
}

// OutputWriterMockWriteDataOrigins contains origins of expectations of the OutputWriter.WriteData
type OutputWriterMockWriteDataExpectationOrigins struct {
	origin       string
	originCtx    string
	originOutput string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmWriteData *mOutputWriterMockWriteData) Optional() *mOutputWriterMockWriteData {
	mmWriteData.optional = true
	return mmWriteData
}

// Expect sets up expected params for OutputWriter.WriteData
func (mmWriteData *mOutputWriterMockWriteData) Expect(ctx context.Context, output any) *mOutputWriterMockWriteData {
	if mmWriteData.mock.funcWriteData != nil {
		mmWriteData.mock.t.Fatalf("OutputWriterMock.WriteData mock is already set by Set")
	}

	if mmWriteData.defaultExpectation == nil {
		mmWriteData.defaultExpectation = &OutputWriterMockWriteDataExpectation{}
	}

	if mmWriteData.defaultExpectation.paramPtrs != nil {
		mmWriteData.mock.t.Fatalf("OutputWriterMock.WriteData mock is already set by ExpectParams functions")
	}

	mmWriteData.defaultExpectation.params = &OutputWriterMockWriteDataParams{ctx, output}
	mmWriteData.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmWriteData.expectations {
		if minimock.Equal(e.params, mmWriteData.defaultExpectation.params) {
			mmWriteData.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmWriteData.defaultExpectation.params)
		}
	}

	return mmWriteData
}

// ExpectCtxParam1 sets up expected param ctx for OutputWriter.WriteData
func (mmWriteData *mOutputWriterMockWriteData) ExpectCtxParam1(ctx context.Context) *mOutputWriterMockWriteData {
	if mmWriteData.mock.funcWriteData != nil {
		mmWriteData.mock.t.Fatalf("OutputWriterMock.WriteData mock is already set by Set")
	}

	if mmWriteData.defaultExpectation == nil {
		mmWriteData.defaultExpectation = &OutputWriterMockWriteDataExpectation{}
	}

	if mmWriteData.defaultExpectation.params != nil {
		mmWriteData.mock.t.Fatalf("OutputWriterMock.WriteData mock is already set by Expect")
	}

	if mmWriteData.defaultExpectation.paramPtrs == nil {
		mmWriteData.defaultExpectation.paramPtrs = &OutputWriterMockWriteDataParamPtrs{}
	}
	mmWriteData.defaultExpectation.paramPtrs.ctx = &ctx
	mmWriteData.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmWriteData
}

// ExpectOutputParam2 sets up expected param output for OutputWriter.WriteData
func (mmWriteData *mOutputWriterMockWriteData) ExpectOutputParam2(output any) *mOutputWriterMockWriteData {
	if mmWriteData.mock.funcWriteData != nil {
		mmWriteData.mock.t.Fatalf("OutputWriterMock.WriteData mock is already set by Set")
	}

	if mmWriteData.defaultExpectation == nil {
		mmWriteData.defaultExpectation = &OutputWriterMockWriteDataExpectation{}
	}

	if mmWriteData.defaultExpectation.params != nil {
		mmWriteData.mock.t.Fatalf("OutputWriterMock.WriteData mock is already set by Expect")
	}

	if mmWriteData.defaultExpectation.paramPtrs == nil {
		mmWriteData.defaultExpectation.paramPtrs = &OutputWriterMockWriteDataParamPtrs{}
	}
	mmWriteData.defaultExpectation.paramPtrs.output = &output
	mmWriteData.defaultExpectation.expectationOrigins.originOutput = minimock.CallerInfo(1)

	return mmWriteData
}

// Inspect accepts an inspector function that has same arguments as the OutputWriter.WriteData
func (mmWriteData *mOutputWriterMockWriteData) Inspect(f func(ctx context.Context, output any)) *mOutputWriterMockWriteData {
	if mmWriteData.mock.inspectFuncWriteData != nil {
		mmWriteData.mock.t.Fatalf("Inspect function is already set for OutputWriterMock.WriteData")
	}

	mmWriteData.mock.inspectFuncWriteData = f

	return mmWriteData
}

// Return sets up results that will be returned by OutputWriter.WriteData
func (mmWriteData *mOutputWriterMockWriteData) Return(err error) *OutputWriterMock {
	if mmWriteData.mock.funcWriteData != nil {
		mmWriteData.mock.t.Fatalf("OutputWriterMock.WriteData mock is already set by Set")
	}

	if mmWriteData.defaultExpectation == nil {
		mmWriteData.defaultExpectation = &OutputWriterMockWriteDataExpectation{mock: mmWriteData.mock}
	}
	mmWriteData.defaultExpectation.results = &OutputWriterMockWriteDataResults{err}
	mmWriteData.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmWriteData.mock
}

// Set uses given function f to mock the OutputWriter.WriteData method
func (mmWriteData *mOutputWriterMockWriteData) Set(f func(ctx context.Context, output any) (err error)) *OutputWriterMock {
	if mmWriteData.defaultExpectation != nil {
		mmWriteData.mock.t.Fatalf("Default expectation is already set for the OutputWriter.WriteData method")
	}

	if len(mmWriteData.expectations) > 0 {
		mmWriteData.mock.t.Fatalf("Some expectations are already set for the OutputWriter.WriteData method")
	}

	mmWriteData.mock.funcWriteData = f
	mmWriteData.mock.funcWriteDataOrigin = minimock.CallerInfo(1)
	return mmWriteData.mock
}

// When sets expectation for the OutputWriter.WriteData which will trigger the result defined by the following
// Then helper
func (mmWriteData *mOutputWriterMockWriteData) When(ctx context.Context, output any) *OutputWriterMockWriteDataExpectation {
	if mmWriteData.mock.funcWriteData != nil {
		mmWriteData.mock.t.Fatalf("OutputWriterMock.WriteData mock is already set by Set")
	}

	expectation := &OutputWriterMockWriteDataExpectation{
		mock:               mmWriteData.mock,
		params:             &OutputWriterMockWriteDataParams{ctx, output},
		expectationOrigins: OutputWriterMockWriteDataExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmWriteData.expectations = append(mmWriteData.expectations, expectation)
	return expectation
}

// Then sets up OutputWriter.WriteData return parameters for the expectation previously defined by the When method
func (e *OutputWriterMockWriteDataExpectation) Then(err error) *OutputWriterMock {
	e.results = &OutputWriterMockWriteDataResults{err}
	return e.mock
}

// Times sets number of times OutputWriter.WriteData should be invoked
func (mmWriteData *mOutputWriterMockWriteData) Times(n uint64) *mOutputWriterMockWriteData {
	if n == 0 {
		mmWriteData.mock.t.Fatalf("Times of OutputWriterMock.WriteData mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmWriteData.expectedInvocations, n)
	mmWriteData.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmWriteData
}

func (mmWriteData *mOutputWriterMockWriteData) invocationsDone() bool {
	if len(mmWriteData.expectations) == 0 && mmWriteData.defaultExpectation == nil && mmWriteData.mock.funcWriteData == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmWriteData.mock.afterWriteDataCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmWriteData.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// WriteData implements mm_base.OutputWriter
func (mmWriteData *OutputWriterMock) WriteData(ctx context.Context, output any) (err error) {
	mm_atomic.AddUint64(&mmWriteData.beforeWriteDataCounter, 1)
	defer mm_atomic.AddUint64(&mmWriteData.afterWriteDataCounter, 1)

	mmWriteData.t.Helper()

	if mmWriteData.inspectFuncWriteData != nil {
		mmWriteData.inspectFuncWriteData(ctx, output)
	}

	mm_params := OutputWriterMockWriteDataParams{ctx, output}

	// Record call args
	mmWriteData.WriteDataMock.mutex.Lock()
	mmWriteData.WriteDataMock.callArgs = append(mmWriteData.WriteDataMock.callArgs, &mm_params)
	mmWriteData.WriteDataMock.mutex.Unlock()

	for _, e := range mmWriteData.WriteDataMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmWriteData.WriteDataMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmWriteData.WriteDataMock.defaultExpectation.Counter, 1)
		mm_want := mmWriteData.WriteDataMock.defaultExpectation.params
		mm_want_ptrs := mmWriteData.WriteDataMock.defaultExpectation.paramPtrs

		mm_got := OutputWriterMockWriteDataParams{ctx, output}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmWriteData.t.Errorf("OutputWriterMock.WriteData got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWriteData.WriteDataMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.output != nil && !minimock.Equal(*mm_want_ptrs.output, mm_got.output) {
				mmWriteData.t.Errorf("OutputWriterMock.WriteData got unexpected parameter output, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWriteData.WriteDataMock.defaultExpectation.expectationOrigins.originOutput, *mm_want_ptrs.output, mm_got.output, minimock.Diff(*mm_want_ptrs.output, mm_got.output))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmWriteData.t.Errorf("OutputWriterMock.WriteData got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmWriteData.WriteDataMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmWriteData.WriteDataMock.defaultExpectation.results
		if mm_results == nil {
			mmWriteData.t.Fatal("No results are set for the OutputWriterMock.WriteData")
		}
		return (*mm_results).err
	}
	if mmWriteData.funcWriteData != nil {
		return mmWriteData.funcWriteData(ctx, output)
	}
	mmWriteData.t.Fatalf("Unexpected call to OutputWriterMock.WriteData. %v %v", ctx, output)
	return
}

// WriteDataAfterCounter returns a count of finished OutputWriterMock.WriteData invocations
func (mmWriteData *OutputWriterMock) WriteDataAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWriteData.afterWriteDataCounter)
}

// WriteDataBeforeCounter returns a count of OutputWriterMock.WriteData invocations
func (mmWriteData *OutputWriterMock) WriteDataBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWriteData.beforeWriteDataCounter)
}

// Calls returns a list of arguments used in each call to OutputWriterMock.WriteData.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmWriteData *mOutputWriterMockWriteData) Calls() []*OutputWriterMockWriteDataParams {
	mmWriteData.mutex.RLock()

	argCopy := make([]*OutputWriterMockWriteDataParams, len(mmWriteData.callArgs))
	copy(argCopy, mmWriteData.callArgs)

	mmWriteData.mutex.RUnlock()

	return argCopy
}

// MinimockWriteDataDone returns true if the count of the WriteData invocations corresponds
// the number of defined expectations
func (m *OutputWriterMock) MinimockWriteDataDone() bool {
	if m.WriteDataMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.WriteDataMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.WriteDataMock.invocationsDone()
}

// MinimockWriteDataInspect logs each unmet expectation
func (m *OutputWriterMock) MinimockWriteDataInspect() {
	for _, e := range m.WriteDataMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OutputWriterMock.WriteData at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterWriteDataCounter := mm_atomic.LoadUint64(&m.afterWriteDataCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.WriteDataMock.defaultExpectation != nil && afterWriteDataCounter < 1 {
		if m.WriteDataMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OutputWriterMock.WriteData at\n%s", m.WriteDataMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OutputWriterMock.WriteData at\n%s with params: %#v", m.WriteDataMock.defaultExpectation.expectationOrigins.origin, *m.WriteDataMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWriteData != nil && afterWriteDataCounter < 1 {
		m.t.Errorf("Expected call to OutputWriterMock.WriteData at\n%s", m.funcWriteDataOrigin)
	}

	if !m.WriteDataMock.invocationsDone() && afterWriteDataCounter > 0 {
		m.t.Errorf("Expected %d calls to OutputWriterMock.WriteData at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.WriteDataMock.expectedInvocations), m.WriteDataMock.expectedInvocationsOrigin, afterWriteDataCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OutputWriterMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockWriteInspect()

			m.MinimockWriteDataInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OutputWriterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OutputWriterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockWriteDone() &&
		m.MinimockWriteDataDone()
}
