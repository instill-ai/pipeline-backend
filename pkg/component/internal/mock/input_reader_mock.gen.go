// Code generated by http://github.com/gojuno/minimock (v3.3.13). DO NOT EDIT.

package mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"google.golang.org/protobuf/types/known/structpb"
)

// InputReaderMock implements base.InputReader
type InputReaderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcRead          func(ctx context.Context) (input *structpb.Struct, err error)
	inspectFuncRead   func(ctx context.Context)
	afterReadCounter  uint64
	beforeReadCounter uint64
	ReadMock          mInputReaderMockRead
}

// NewInputReaderMock returns a mock for base.InputReader
func NewInputReaderMock(t minimock.Tester) *InputReaderMock {
	m := &InputReaderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ReadMock = mInputReaderMockRead{mock: m}
	m.ReadMock.callArgs = []*InputReaderMockReadParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mInputReaderMockRead struct {
	optional           bool
	mock               *InputReaderMock
	defaultExpectation *InputReaderMockReadExpectation
	expectations       []*InputReaderMockReadExpectation

	callArgs []*InputReaderMockReadParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// InputReaderMockReadExpectation specifies expectation struct of the InputReader.Read
type InputReaderMockReadExpectation struct {
	mock      *InputReaderMock
	params    *InputReaderMockReadParams
	paramPtrs *InputReaderMockReadParamPtrs
	results   *InputReaderMockReadResults
	Counter   uint64
}

// InputReaderMockReadParams contains parameters of the InputReader.Read
type InputReaderMockReadParams struct {
	ctx context.Context
}

// InputReaderMockReadParamPtrs contains pointers to parameters of the InputReader.Read
type InputReaderMockReadParamPtrs struct {
	ctx *context.Context
}

// InputReaderMockReadResults contains results of the InputReader.Read
type InputReaderMockReadResults struct {
	input *structpb.Struct
	err   error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRead *mInputReaderMockRead) Optional() *mInputReaderMockRead {
	mmRead.optional = true
	return mmRead
}

// Expect sets up expected params for InputReader.Read
func (mmRead *mInputReaderMockRead) Expect(ctx context.Context) *mInputReaderMockRead {
	if mmRead.mock.funcRead != nil {
		mmRead.mock.t.Fatalf("InputReaderMock.Read mock is already set by Set")
	}

	if mmRead.defaultExpectation == nil {
		mmRead.defaultExpectation = &InputReaderMockReadExpectation{}
	}

	if mmRead.defaultExpectation.paramPtrs != nil {
		mmRead.mock.t.Fatalf("InputReaderMock.Read mock is already set by ExpectParams functions")
	}

	mmRead.defaultExpectation.params = &InputReaderMockReadParams{ctx}
	for _, e := range mmRead.expectations {
		if minimock.Equal(e.params, mmRead.defaultExpectation.params) {
			mmRead.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRead.defaultExpectation.params)
		}
	}

	return mmRead
}

// ExpectCtxParam1 sets up expected param ctx for InputReader.Read
func (mmRead *mInputReaderMockRead) ExpectCtxParam1(ctx context.Context) *mInputReaderMockRead {
	if mmRead.mock.funcRead != nil {
		mmRead.mock.t.Fatalf("InputReaderMock.Read mock is already set by Set")
	}

	if mmRead.defaultExpectation == nil {
		mmRead.defaultExpectation = &InputReaderMockReadExpectation{}
	}

	if mmRead.defaultExpectation.params != nil {
		mmRead.mock.t.Fatalf("InputReaderMock.Read mock is already set by Expect")
	}

	if mmRead.defaultExpectation.paramPtrs == nil {
		mmRead.defaultExpectation.paramPtrs = &InputReaderMockReadParamPtrs{}
	}
	mmRead.defaultExpectation.paramPtrs.ctx = &ctx

	return mmRead
}

// Inspect accepts an inspector function that has same arguments as the InputReader.Read
func (mmRead *mInputReaderMockRead) Inspect(f func(ctx context.Context)) *mInputReaderMockRead {
	if mmRead.mock.inspectFuncRead != nil {
		mmRead.mock.t.Fatalf("Inspect function is already set for InputReaderMock.Read")
	}

	mmRead.mock.inspectFuncRead = f

	return mmRead
}

// Return sets up results that will be returned by InputReader.Read
func (mmRead *mInputReaderMockRead) Return(input *structpb.Struct, err error) *InputReaderMock {
	if mmRead.mock.funcRead != nil {
		mmRead.mock.t.Fatalf("InputReaderMock.Read mock is already set by Set")
	}

	if mmRead.defaultExpectation == nil {
		mmRead.defaultExpectation = &InputReaderMockReadExpectation{mock: mmRead.mock}
	}
	mmRead.defaultExpectation.results = &InputReaderMockReadResults{input, err}
	return mmRead.mock
}

// Set uses given function f to mock the InputReader.Read method
func (mmRead *mInputReaderMockRead) Set(f func(ctx context.Context) (input *structpb.Struct, err error)) *InputReaderMock {
	if mmRead.defaultExpectation != nil {
		mmRead.mock.t.Fatalf("Default expectation is already set for the InputReader.Read method")
	}

	if len(mmRead.expectations) > 0 {
		mmRead.mock.t.Fatalf("Some expectations are already set for the InputReader.Read method")
	}

	mmRead.mock.funcRead = f
	return mmRead.mock
}

// When sets expectation for the InputReader.Read which will trigger the result defined by the following
// Then helper
func (mmRead *mInputReaderMockRead) When(ctx context.Context) *InputReaderMockReadExpectation {
	if mmRead.mock.funcRead != nil {
		mmRead.mock.t.Fatalf("InputReaderMock.Read mock is already set by Set")
	}

	expectation := &InputReaderMockReadExpectation{
		mock:   mmRead.mock,
		params: &InputReaderMockReadParams{ctx},
	}
	mmRead.expectations = append(mmRead.expectations, expectation)
	return expectation
}

// Then sets up InputReader.Read return parameters for the expectation previously defined by the When method
func (e *InputReaderMockReadExpectation) Then(input *structpb.Struct, err error) *InputReaderMock {
	e.results = &InputReaderMockReadResults{input, err}
	return e.mock
}

// Times sets number of times InputReader.Read should be invoked
func (mmRead *mInputReaderMockRead) Times(n uint64) *mInputReaderMockRead {
	if n == 0 {
		mmRead.mock.t.Fatalf("Times of InputReaderMock.Read mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRead.expectedInvocations, n)
	return mmRead
}

func (mmRead *mInputReaderMockRead) invocationsDone() bool {
	if len(mmRead.expectations) == 0 && mmRead.defaultExpectation == nil && mmRead.mock.funcRead == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRead.mock.afterReadCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRead.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Read implements base.InputReader
func (mmRead *InputReaderMock) Read(ctx context.Context) (input *structpb.Struct, err error) {
	mm_atomic.AddUint64(&mmRead.beforeReadCounter, 1)
	defer mm_atomic.AddUint64(&mmRead.afterReadCounter, 1)

	if mmRead.inspectFuncRead != nil {
		mmRead.inspectFuncRead(ctx)
	}

	mm_params := InputReaderMockReadParams{ctx}

	// Record call args
	mmRead.ReadMock.mutex.Lock()
	mmRead.ReadMock.callArgs = append(mmRead.ReadMock.callArgs, &mm_params)
	mmRead.ReadMock.mutex.Unlock()

	for _, e := range mmRead.ReadMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.input, e.results.err
		}
	}

	if mmRead.ReadMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRead.ReadMock.defaultExpectation.Counter, 1)
		mm_want := mmRead.ReadMock.defaultExpectation.params
		mm_want_ptrs := mmRead.ReadMock.defaultExpectation.paramPtrs

		mm_got := InputReaderMockReadParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmRead.t.Errorf("InputReaderMock.Read got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRead.t.Errorf("InputReaderMock.Read got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRead.ReadMock.defaultExpectation.results
		if mm_results == nil {
			mmRead.t.Fatal("No results are set for the InputReaderMock.Read")
		}
		return (*mm_results).input, (*mm_results).err
	}
	if mmRead.funcRead != nil {
		return mmRead.funcRead(ctx)
	}
	mmRead.t.Fatalf("Unexpected call to InputReaderMock.Read. %v", ctx)
	return
}

// ReadAfterCounter returns a count of finished InputReaderMock.Read invocations
func (mmRead *InputReaderMock) ReadAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRead.afterReadCounter)
}

// ReadBeforeCounter returns a count of InputReaderMock.Read invocations
func (mmRead *InputReaderMock) ReadBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRead.beforeReadCounter)
}

// Calls returns a list of arguments used in each call to InputReaderMock.Read.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRead *mInputReaderMockRead) Calls() []*InputReaderMockReadParams {
	mmRead.mutex.RLock()

	argCopy := make([]*InputReaderMockReadParams, len(mmRead.callArgs))
	copy(argCopy, mmRead.callArgs)

	mmRead.mutex.RUnlock()

	return argCopy
}

// MinimockReadDone returns true if the count of the Read invocations corresponds
// the number of defined expectations
func (m *InputReaderMock) MinimockReadDone() bool {
	if m.ReadMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReadMock.invocationsDone()
}

// MinimockReadInspect logs each unmet expectation
func (m *InputReaderMock) MinimockReadInspect() {
	for _, e := range m.ReadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to InputReaderMock.Read with params: %#v", *e.params)
		}
	}

	afterReadCounter := mm_atomic.LoadUint64(&m.afterReadCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReadMock.defaultExpectation != nil && afterReadCounter < 1 {
		if m.ReadMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to InputReaderMock.Read")
		} else {
			m.t.Errorf("Expected call to InputReaderMock.Read with params: %#v", *m.ReadMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRead != nil && afterReadCounter < 1 {
		m.t.Error("Expected call to InputReaderMock.Read")
	}

	if !m.ReadMock.invocationsDone() && afterReadCounter > 0 {
		m.t.Errorf("Expected %d calls to InputReaderMock.Read but found %d calls",
			mm_atomic.LoadUint64(&m.ReadMock.expectedInvocations), afterReadCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *InputReaderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockReadInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *InputReaderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *InputReaderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockReadDone()
}
