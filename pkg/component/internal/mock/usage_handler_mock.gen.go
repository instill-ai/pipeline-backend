// Code generated by http://github.com/gojuno/minimock (v3.3.13). DO NOT EDIT.

package mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"google.golang.org/protobuf/types/known/structpb"
)

// UsageHandlerMock implements base.UsageHandler
type UsageHandlerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCheck          func(ctx context.Context, inputs []*structpb.Struct) (err error)
	inspectFuncCheck   func(ctx context.Context, inputs []*structpb.Struct)
	afterCheckCounter  uint64
	beforeCheckCounter uint64
	CheckMock          mUsageHandlerMockCheck

	funcCollect          func(ctx context.Context, inputs []*structpb.Struct, outputs []*structpb.Struct) (err error)
	inspectFuncCollect   func(ctx context.Context, inputs []*structpb.Struct, outputs []*structpb.Struct)
	afterCollectCounter  uint64
	beforeCollectCounter uint64
	CollectMock          mUsageHandlerMockCollect
}

// NewUsageHandlerMock returns a mock for base.UsageHandler
func NewUsageHandlerMock(t minimock.Tester) *UsageHandlerMock {
	m := &UsageHandlerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CheckMock = mUsageHandlerMockCheck{mock: m}
	m.CheckMock.callArgs = []*UsageHandlerMockCheckParams{}

	m.CollectMock = mUsageHandlerMockCollect{mock: m}
	m.CollectMock.callArgs = []*UsageHandlerMockCollectParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUsageHandlerMockCheck struct {
	optional           bool
	mock               *UsageHandlerMock
	defaultExpectation *UsageHandlerMockCheckExpectation
	expectations       []*UsageHandlerMockCheckExpectation

	callArgs []*UsageHandlerMockCheckParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UsageHandlerMockCheckExpectation specifies expectation struct of the UsageHandler.Check
type UsageHandlerMockCheckExpectation struct {
	mock      *UsageHandlerMock
	params    *UsageHandlerMockCheckParams
	paramPtrs *UsageHandlerMockCheckParamPtrs
	results   *UsageHandlerMockCheckResults
	Counter   uint64
}

// UsageHandlerMockCheckParams contains parameters of the UsageHandler.Check
type UsageHandlerMockCheckParams struct {
	ctx    context.Context
	inputs []*structpb.Struct
}

// UsageHandlerMockCheckParamPtrs contains pointers to parameters of the UsageHandler.Check
type UsageHandlerMockCheckParamPtrs struct {
	ctx    *context.Context
	inputs *[]*structpb.Struct
}

// UsageHandlerMockCheckResults contains results of the UsageHandler.Check
type UsageHandlerMockCheckResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCheck *mUsageHandlerMockCheck) Optional() *mUsageHandlerMockCheck {
	mmCheck.optional = true
	return mmCheck
}

// Expect sets up expected params for UsageHandler.Check
func (mmCheck *mUsageHandlerMockCheck) Expect(ctx context.Context, inputs []*structpb.Struct) *mUsageHandlerMockCheck {
	if mmCheck.mock.funcCheck != nil {
		mmCheck.mock.t.Fatalf("UsageHandlerMock.Check mock is already set by Set")
	}

	if mmCheck.defaultExpectation == nil {
		mmCheck.defaultExpectation = &UsageHandlerMockCheckExpectation{}
	}

	if mmCheck.defaultExpectation.paramPtrs != nil {
		mmCheck.mock.t.Fatalf("UsageHandlerMock.Check mock is already set by ExpectParams functions")
	}

	mmCheck.defaultExpectation.params = &UsageHandlerMockCheckParams{ctx, inputs}
	for _, e := range mmCheck.expectations {
		if minimock.Equal(e.params, mmCheck.defaultExpectation.params) {
			mmCheck.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheck.defaultExpectation.params)
		}
	}

	return mmCheck
}

// ExpectCtxParam1 sets up expected param ctx for UsageHandler.Check
func (mmCheck *mUsageHandlerMockCheck) ExpectCtxParam1(ctx context.Context) *mUsageHandlerMockCheck {
	if mmCheck.mock.funcCheck != nil {
		mmCheck.mock.t.Fatalf("UsageHandlerMock.Check mock is already set by Set")
	}

	if mmCheck.defaultExpectation == nil {
		mmCheck.defaultExpectation = &UsageHandlerMockCheckExpectation{}
	}

	if mmCheck.defaultExpectation.params != nil {
		mmCheck.mock.t.Fatalf("UsageHandlerMock.Check mock is already set by Expect")
	}

	if mmCheck.defaultExpectation.paramPtrs == nil {
		mmCheck.defaultExpectation.paramPtrs = &UsageHandlerMockCheckParamPtrs{}
	}
	mmCheck.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCheck
}

// ExpectInputsParam2 sets up expected param inputs for UsageHandler.Check
func (mmCheck *mUsageHandlerMockCheck) ExpectInputsParam2(inputs []*structpb.Struct) *mUsageHandlerMockCheck {
	if mmCheck.mock.funcCheck != nil {
		mmCheck.mock.t.Fatalf("UsageHandlerMock.Check mock is already set by Set")
	}

	if mmCheck.defaultExpectation == nil {
		mmCheck.defaultExpectation = &UsageHandlerMockCheckExpectation{}
	}

	if mmCheck.defaultExpectation.params != nil {
		mmCheck.mock.t.Fatalf("UsageHandlerMock.Check mock is already set by Expect")
	}

	if mmCheck.defaultExpectation.paramPtrs == nil {
		mmCheck.defaultExpectation.paramPtrs = &UsageHandlerMockCheckParamPtrs{}
	}
	mmCheck.defaultExpectation.paramPtrs.inputs = &inputs

	return mmCheck
}

// Inspect accepts an inspector function that has same arguments as the UsageHandler.Check
func (mmCheck *mUsageHandlerMockCheck) Inspect(f func(ctx context.Context, inputs []*structpb.Struct)) *mUsageHandlerMockCheck {
	if mmCheck.mock.inspectFuncCheck != nil {
		mmCheck.mock.t.Fatalf("Inspect function is already set for UsageHandlerMock.Check")
	}

	mmCheck.mock.inspectFuncCheck = f

	return mmCheck
}

// Return sets up results that will be returned by UsageHandler.Check
func (mmCheck *mUsageHandlerMockCheck) Return(err error) *UsageHandlerMock {
	if mmCheck.mock.funcCheck != nil {
		mmCheck.mock.t.Fatalf("UsageHandlerMock.Check mock is already set by Set")
	}

	if mmCheck.defaultExpectation == nil {
		mmCheck.defaultExpectation = &UsageHandlerMockCheckExpectation{mock: mmCheck.mock}
	}
	mmCheck.defaultExpectation.results = &UsageHandlerMockCheckResults{err}
	return mmCheck.mock
}

// Set uses given function f to mock the UsageHandler.Check method
func (mmCheck *mUsageHandlerMockCheck) Set(f func(ctx context.Context, inputs []*structpb.Struct) (err error)) *UsageHandlerMock {
	if mmCheck.defaultExpectation != nil {
		mmCheck.mock.t.Fatalf("Default expectation is already set for the UsageHandler.Check method")
	}

	if len(mmCheck.expectations) > 0 {
		mmCheck.mock.t.Fatalf("Some expectations are already set for the UsageHandler.Check method")
	}

	mmCheck.mock.funcCheck = f
	return mmCheck.mock
}

// When sets expectation for the UsageHandler.Check which will trigger the result defined by the following
// Then helper
func (mmCheck *mUsageHandlerMockCheck) When(ctx context.Context, inputs []*structpb.Struct) *UsageHandlerMockCheckExpectation {
	if mmCheck.mock.funcCheck != nil {
		mmCheck.mock.t.Fatalf("UsageHandlerMock.Check mock is already set by Set")
	}

	expectation := &UsageHandlerMockCheckExpectation{
		mock:   mmCheck.mock,
		params: &UsageHandlerMockCheckParams{ctx, inputs},
	}
	mmCheck.expectations = append(mmCheck.expectations, expectation)
	return expectation
}

// Then sets up UsageHandler.Check return parameters for the expectation previously defined by the When method
func (e *UsageHandlerMockCheckExpectation) Then(err error) *UsageHandlerMock {
	e.results = &UsageHandlerMockCheckResults{err}
	return e.mock
}

// Times sets number of times UsageHandler.Check should be invoked
func (mmCheck *mUsageHandlerMockCheck) Times(n uint64) *mUsageHandlerMockCheck {
	if n == 0 {
		mmCheck.mock.t.Fatalf("Times of UsageHandlerMock.Check mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCheck.expectedInvocations, n)
	return mmCheck
}

func (mmCheck *mUsageHandlerMockCheck) invocationsDone() bool {
	if len(mmCheck.expectations) == 0 && mmCheck.defaultExpectation == nil && mmCheck.mock.funcCheck == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCheck.mock.afterCheckCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCheck.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Check implements base.UsageHandler
func (mmCheck *UsageHandlerMock) Check(ctx context.Context, inputs []*structpb.Struct) (err error) {
	mm_atomic.AddUint64(&mmCheck.beforeCheckCounter, 1)
	defer mm_atomic.AddUint64(&mmCheck.afterCheckCounter, 1)

	if mmCheck.inspectFuncCheck != nil {
		mmCheck.inspectFuncCheck(ctx, inputs)
	}

	mm_params := UsageHandlerMockCheckParams{ctx, inputs}

	// Record call args
	mmCheck.CheckMock.mutex.Lock()
	mmCheck.CheckMock.callArgs = append(mmCheck.CheckMock.callArgs, &mm_params)
	mmCheck.CheckMock.mutex.Unlock()

	for _, e := range mmCheck.CheckMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCheck.CheckMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheck.CheckMock.defaultExpectation.Counter, 1)
		mm_want := mmCheck.CheckMock.defaultExpectation.params
		mm_want_ptrs := mmCheck.CheckMock.defaultExpectation.paramPtrs

		mm_got := UsageHandlerMockCheckParams{ctx, inputs}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCheck.t.Errorf("UsageHandlerMock.Check got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.inputs != nil && !minimock.Equal(*mm_want_ptrs.inputs, mm_got.inputs) {
				mmCheck.t.Errorf("UsageHandlerMock.Check got unexpected parameter inputs, want: %#v, got: %#v%s\n", *mm_want_ptrs.inputs, mm_got.inputs, minimock.Diff(*mm_want_ptrs.inputs, mm_got.inputs))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheck.t.Errorf("UsageHandlerMock.Check got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheck.CheckMock.defaultExpectation.results
		if mm_results == nil {
			mmCheck.t.Fatal("No results are set for the UsageHandlerMock.Check")
		}
		return (*mm_results).err
	}
	if mmCheck.funcCheck != nil {
		return mmCheck.funcCheck(ctx, inputs)
	}
	mmCheck.t.Fatalf("Unexpected call to UsageHandlerMock.Check. %v %v", ctx, inputs)
	return
}

// CheckAfterCounter returns a count of finished UsageHandlerMock.Check invocations
func (mmCheck *UsageHandlerMock) CheckAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheck.afterCheckCounter)
}

// CheckBeforeCounter returns a count of UsageHandlerMock.Check invocations
func (mmCheck *UsageHandlerMock) CheckBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheck.beforeCheckCounter)
}

// Calls returns a list of arguments used in each call to UsageHandlerMock.Check.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheck *mUsageHandlerMockCheck) Calls() []*UsageHandlerMockCheckParams {
	mmCheck.mutex.RLock()

	argCopy := make([]*UsageHandlerMockCheckParams, len(mmCheck.callArgs))
	copy(argCopy, mmCheck.callArgs)

	mmCheck.mutex.RUnlock()

	return argCopy
}

// MinimockCheckDone returns true if the count of the Check invocations corresponds
// the number of defined expectations
func (m *UsageHandlerMock) MinimockCheckDone() bool {
	if m.CheckMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CheckMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CheckMock.invocationsDone()
}

// MinimockCheckInspect logs each unmet expectation
func (m *UsageHandlerMock) MinimockCheckInspect() {
	for _, e := range m.CheckMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UsageHandlerMock.Check with params: %#v", *e.params)
		}
	}

	afterCheckCounter := mm_atomic.LoadUint64(&m.afterCheckCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CheckMock.defaultExpectation != nil && afterCheckCounter < 1 {
		if m.CheckMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UsageHandlerMock.Check")
		} else {
			m.t.Errorf("Expected call to UsageHandlerMock.Check with params: %#v", *m.CheckMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheck != nil && afterCheckCounter < 1 {
		m.t.Error("Expected call to UsageHandlerMock.Check")
	}

	if !m.CheckMock.invocationsDone() && afterCheckCounter > 0 {
		m.t.Errorf("Expected %d calls to UsageHandlerMock.Check but found %d calls",
			mm_atomic.LoadUint64(&m.CheckMock.expectedInvocations), afterCheckCounter)
	}
}

type mUsageHandlerMockCollect struct {
	optional           bool
	mock               *UsageHandlerMock
	defaultExpectation *UsageHandlerMockCollectExpectation
	expectations       []*UsageHandlerMockCollectExpectation

	callArgs []*UsageHandlerMockCollectParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UsageHandlerMockCollectExpectation specifies expectation struct of the UsageHandler.Collect
type UsageHandlerMockCollectExpectation struct {
	mock      *UsageHandlerMock
	params    *UsageHandlerMockCollectParams
	paramPtrs *UsageHandlerMockCollectParamPtrs
	results   *UsageHandlerMockCollectResults
	Counter   uint64
}

// UsageHandlerMockCollectParams contains parameters of the UsageHandler.Collect
type UsageHandlerMockCollectParams struct {
	ctx     context.Context
	inputs  []*structpb.Struct
	outputs []*structpb.Struct
}

// UsageHandlerMockCollectParamPtrs contains pointers to parameters of the UsageHandler.Collect
type UsageHandlerMockCollectParamPtrs struct {
	ctx     *context.Context
	inputs  *[]*structpb.Struct
	outputs *[]*structpb.Struct
}

// UsageHandlerMockCollectResults contains results of the UsageHandler.Collect
type UsageHandlerMockCollectResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCollect *mUsageHandlerMockCollect) Optional() *mUsageHandlerMockCollect {
	mmCollect.optional = true
	return mmCollect
}

// Expect sets up expected params for UsageHandler.Collect
func (mmCollect *mUsageHandlerMockCollect) Expect(ctx context.Context, inputs []*structpb.Struct, outputs []*structpb.Struct) *mUsageHandlerMockCollect {
	if mmCollect.mock.funcCollect != nil {
		mmCollect.mock.t.Fatalf("UsageHandlerMock.Collect mock is already set by Set")
	}

	if mmCollect.defaultExpectation == nil {
		mmCollect.defaultExpectation = &UsageHandlerMockCollectExpectation{}
	}

	if mmCollect.defaultExpectation.paramPtrs != nil {
		mmCollect.mock.t.Fatalf("UsageHandlerMock.Collect mock is already set by ExpectParams functions")
	}

	mmCollect.defaultExpectation.params = &UsageHandlerMockCollectParams{ctx, inputs, outputs}
	for _, e := range mmCollect.expectations {
		if minimock.Equal(e.params, mmCollect.defaultExpectation.params) {
			mmCollect.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCollect.defaultExpectation.params)
		}
	}

	return mmCollect
}

// ExpectCtxParam1 sets up expected param ctx for UsageHandler.Collect
func (mmCollect *mUsageHandlerMockCollect) ExpectCtxParam1(ctx context.Context) *mUsageHandlerMockCollect {
	if mmCollect.mock.funcCollect != nil {
		mmCollect.mock.t.Fatalf("UsageHandlerMock.Collect mock is already set by Set")
	}

	if mmCollect.defaultExpectation == nil {
		mmCollect.defaultExpectation = &UsageHandlerMockCollectExpectation{}
	}

	if mmCollect.defaultExpectation.params != nil {
		mmCollect.mock.t.Fatalf("UsageHandlerMock.Collect mock is already set by Expect")
	}

	if mmCollect.defaultExpectation.paramPtrs == nil {
		mmCollect.defaultExpectation.paramPtrs = &UsageHandlerMockCollectParamPtrs{}
	}
	mmCollect.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCollect
}

// ExpectInputsParam2 sets up expected param inputs for UsageHandler.Collect
func (mmCollect *mUsageHandlerMockCollect) ExpectInputsParam2(inputs []*structpb.Struct) *mUsageHandlerMockCollect {
	if mmCollect.mock.funcCollect != nil {
		mmCollect.mock.t.Fatalf("UsageHandlerMock.Collect mock is already set by Set")
	}

	if mmCollect.defaultExpectation == nil {
		mmCollect.defaultExpectation = &UsageHandlerMockCollectExpectation{}
	}

	if mmCollect.defaultExpectation.params != nil {
		mmCollect.mock.t.Fatalf("UsageHandlerMock.Collect mock is already set by Expect")
	}

	if mmCollect.defaultExpectation.paramPtrs == nil {
		mmCollect.defaultExpectation.paramPtrs = &UsageHandlerMockCollectParamPtrs{}
	}
	mmCollect.defaultExpectation.paramPtrs.inputs = &inputs

	return mmCollect
}

// ExpectOutputsParam3 sets up expected param outputs for UsageHandler.Collect
func (mmCollect *mUsageHandlerMockCollect) ExpectOutputsParam3(outputs []*structpb.Struct) *mUsageHandlerMockCollect {
	if mmCollect.mock.funcCollect != nil {
		mmCollect.mock.t.Fatalf("UsageHandlerMock.Collect mock is already set by Set")
	}

	if mmCollect.defaultExpectation == nil {
		mmCollect.defaultExpectation = &UsageHandlerMockCollectExpectation{}
	}

	if mmCollect.defaultExpectation.params != nil {
		mmCollect.mock.t.Fatalf("UsageHandlerMock.Collect mock is already set by Expect")
	}

	if mmCollect.defaultExpectation.paramPtrs == nil {
		mmCollect.defaultExpectation.paramPtrs = &UsageHandlerMockCollectParamPtrs{}
	}
	mmCollect.defaultExpectation.paramPtrs.outputs = &outputs

	return mmCollect
}

// Inspect accepts an inspector function that has same arguments as the UsageHandler.Collect
func (mmCollect *mUsageHandlerMockCollect) Inspect(f func(ctx context.Context, inputs []*structpb.Struct, outputs []*structpb.Struct)) *mUsageHandlerMockCollect {
	if mmCollect.mock.inspectFuncCollect != nil {
		mmCollect.mock.t.Fatalf("Inspect function is already set for UsageHandlerMock.Collect")
	}

	mmCollect.mock.inspectFuncCollect = f

	return mmCollect
}

// Return sets up results that will be returned by UsageHandler.Collect
func (mmCollect *mUsageHandlerMockCollect) Return(err error) *UsageHandlerMock {
	if mmCollect.mock.funcCollect != nil {
		mmCollect.mock.t.Fatalf("UsageHandlerMock.Collect mock is already set by Set")
	}

	if mmCollect.defaultExpectation == nil {
		mmCollect.defaultExpectation = &UsageHandlerMockCollectExpectation{mock: mmCollect.mock}
	}
	mmCollect.defaultExpectation.results = &UsageHandlerMockCollectResults{err}
	return mmCollect.mock
}

// Set uses given function f to mock the UsageHandler.Collect method
func (mmCollect *mUsageHandlerMockCollect) Set(f func(ctx context.Context, inputs []*structpb.Struct, outputs []*structpb.Struct) (err error)) *UsageHandlerMock {
	if mmCollect.defaultExpectation != nil {
		mmCollect.mock.t.Fatalf("Default expectation is already set for the UsageHandler.Collect method")
	}

	if len(mmCollect.expectations) > 0 {
		mmCollect.mock.t.Fatalf("Some expectations are already set for the UsageHandler.Collect method")
	}

	mmCollect.mock.funcCollect = f
	return mmCollect.mock
}

// When sets expectation for the UsageHandler.Collect which will trigger the result defined by the following
// Then helper
func (mmCollect *mUsageHandlerMockCollect) When(ctx context.Context, inputs []*structpb.Struct, outputs []*structpb.Struct) *UsageHandlerMockCollectExpectation {
	if mmCollect.mock.funcCollect != nil {
		mmCollect.mock.t.Fatalf("UsageHandlerMock.Collect mock is already set by Set")
	}

	expectation := &UsageHandlerMockCollectExpectation{
		mock:   mmCollect.mock,
		params: &UsageHandlerMockCollectParams{ctx, inputs, outputs},
	}
	mmCollect.expectations = append(mmCollect.expectations, expectation)
	return expectation
}

// Then sets up UsageHandler.Collect return parameters for the expectation previously defined by the When method
func (e *UsageHandlerMockCollectExpectation) Then(err error) *UsageHandlerMock {
	e.results = &UsageHandlerMockCollectResults{err}
	return e.mock
}

// Times sets number of times UsageHandler.Collect should be invoked
func (mmCollect *mUsageHandlerMockCollect) Times(n uint64) *mUsageHandlerMockCollect {
	if n == 0 {
		mmCollect.mock.t.Fatalf("Times of UsageHandlerMock.Collect mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCollect.expectedInvocations, n)
	return mmCollect
}

func (mmCollect *mUsageHandlerMockCollect) invocationsDone() bool {
	if len(mmCollect.expectations) == 0 && mmCollect.defaultExpectation == nil && mmCollect.mock.funcCollect == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCollect.mock.afterCollectCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCollect.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Collect implements base.UsageHandler
func (mmCollect *UsageHandlerMock) Collect(ctx context.Context, inputs []*structpb.Struct, outputs []*structpb.Struct) (err error) {
	mm_atomic.AddUint64(&mmCollect.beforeCollectCounter, 1)
	defer mm_atomic.AddUint64(&mmCollect.afterCollectCounter, 1)

	if mmCollect.inspectFuncCollect != nil {
		mmCollect.inspectFuncCollect(ctx, inputs, outputs)
	}

	mm_params := UsageHandlerMockCollectParams{ctx, inputs, outputs}

	// Record call args
	mmCollect.CollectMock.mutex.Lock()
	mmCollect.CollectMock.callArgs = append(mmCollect.CollectMock.callArgs, &mm_params)
	mmCollect.CollectMock.mutex.Unlock()

	for _, e := range mmCollect.CollectMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCollect.CollectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCollect.CollectMock.defaultExpectation.Counter, 1)
		mm_want := mmCollect.CollectMock.defaultExpectation.params
		mm_want_ptrs := mmCollect.CollectMock.defaultExpectation.paramPtrs

		mm_got := UsageHandlerMockCollectParams{ctx, inputs, outputs}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCollect.t.Errorf("UsageHandlerMock.Collect got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.inputs != nil && !minimock.Equal(*mm_want_ptrs.inputs, mm_got.inputs) {
				mmCollect.t.Errorf("UsageHandlerMock.Collect got unexpected parameter inputs, want: %#v, got: %#v%s\n", *mm_want_ptrs.inputs, mm_got.inputs, minimock.Diff(*mm_want_ptrs.inputs, mm_got.inputs))
			}

			if mm_want_ptrs.outputs != nil && !minimock.Equal(*mm_want_ptrs.outputs, mm_got.outputs) {
				mmCollect.t.Errorf("UsageHandlerMock.Collect got unexpected parameter outputs, want: %#v, got: %#v%s\n", *mm_want_ptrs.outputs, mm_got.outputs, minimock.Diff(*mm_want_ptrs.outputs, mm_got.outputs))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCollect.t.Errorf("UsageHandlerMock.Collect got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCollect.CollectMock.defaultExpectation.results
		if mm_results == nil {
			mmCollect.t.Fatal("No results are set for the UsageHandlerMock.Collect")
		}
		return (*mm_results).err
	}
	if mmCollect.funcCollect != nil {
		return mmCollect.funcCollect(ctx, inputs, outputs)
	}
	mmCollect.t.Fatalf("Unexpected call to UsageHandlerMock.Collect. %v %v %v", ctx, inputs, outputs)
	return
}

// CollectAfterCounter returns a count of finished UsageHandlerMock.Collect invocations
func (mmCollect *UsageHandlerMock) CollectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCollect.afterCollectCounter)
}

// CollectBeforeCounter returns a count of UsageHandlerMock.Collect invocations
func (mmCollect *UsageHandlerMock) CollectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCollect.beforeCollectCounter)
}

// Calls returns a list of arguments used in each call to UsageHandlerMock.Collect.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCollect *mUsageHandlerMockCollect) Calls() []*UsageHandlerMockCollectParams {
	mmCollect.mutex.RLock()

	argCopy := make([]*UsageHandlerMockCollectParams, len(mmCollect.callArgs))
	copy(argCopy, mmCollect.callArgs)

	mmCollect.mutex.RUnlock()

	return argCopy
}

// MinimockCollectDone returns true if the count of the Collect invocations corresponds
// the number of defined expectations
func (m *UsageHandlerMock) MinimockCollectDone() bool {
	if m.CollectMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CollectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CollectMock.invocationsDone()
}

// MinimockCollectInspect logs each unmet expectation
func (m *UsageHandlerMock) MinimockCollectInspect() {
	for _, e := range m.CollectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UsageHandlerMock.Collect with params: %#v", *e.params)
		}
	}

	afterCollectCounter := mm_atomic.LoadUint64(&m.afterCollectCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CollectMock.defaultExpectation != nil && afterCollectCounter < 1 {
		if m.CollectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UsageHandlerMock.Collect")
		} else {
			m.t.Errorf("Expected call to UsageHandlerMock.Collect with params: %#v", *m.CollectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCollect != nil && afterCollectCounter < 1 {
		m.t.Error("Expected call to UsageHandlerMock.Collect")
	}

	if !m.CollectMock.invocationsDone() && afterCollectCounter > 0 {
		m.t.Errorf("Expected %d calls to UsageHandlerMock.Collect but found %d calls",
			mm_atomic.LoadUint64(&m.CollectMock.expectedInvocations), afterCollectCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UsageHandlerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCheckInspect()

			m.MinimockCollectInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UsageHandlerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UsageHandlerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCheckDone() &&
		m.MinimockCollectDone()
}
