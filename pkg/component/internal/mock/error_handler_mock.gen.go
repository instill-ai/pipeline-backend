// Code generated by http://github.com/gojuno/minimock (v3.3.13). DO NOT EDIT.

package mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ErrorHandlerMock implements base.ErrorHandler
type ErrorHandlerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcError          func(ctx context.Context, err error)
	inspectFuncError   func(ctx context.Context, err error)
	afterErrorCounter  uint64
	beforeErrorCounter uint64
	ErrorMock          mErrorHandlerMockError
}

// NewErrorHandlerMock returns a mock for base.ErrorHandler
func NewErrorHandlerMock(t minimock.Tester) *ErrorHandlerMock {
	m := &ErrorHandlerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ErrorMock = mErrorHandlerMockError{mock: m}
	m.ErrorMock.callArgs = []*ErrorHandlerMockErrorParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mErrorHandlerMockError struct {
	optional           bool
	mock               *ErrorHandlerMock
	defaultExpectation *ErrorHandlerMockErrorExpectation
	expectations       []*ErrorHandlerMockErrorExpectation

	callArgs []*ErrorHandlerMockErrorParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ErrorHandlerMockErrorExpectation specifies expectation struct of the ErrorHandler.Error
type ErrorHandlerMockErrorExpectation struct {
	mock      *ErrorHandlerMock
	params    *ErrorHandlerMockErrorParams
	paramPtrs *ErrorHandlerMockErrorParamPtrs

	Counter uint64
}

// ErrorHandlerMockErrorParams contains parameters of the ErrorHandler.Error
type ErrorHandlerMockErrorParams struct {
	ctx context.Context
	err error
}

// ErrorHandlerMockErrorParamPtrs contains pointers to parameters of the ErrorHandler.Error
type ErrorHandlerMockErrorParamPtrs struct {
	ctx *context.Context
	err *error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmError *mErrorHandlerMockError) Optional() *mErrorHandlerMockError {
	mmError.optional = true
	return mmError
}

// Expect sets up expected params for ErrorHandler.Error
func (mmError *mErrorHandlerMockError) Expect(ctx context.Context, err error) *mErrorHandlerMockError {
	if mmError.mock.funcError != nil {
		mmError.mock.t.Fatalf("ErrorHandlerMock.Error mock is already set by Set")
	}

	if mmError.defaultExpectation == nil {
		mmError.defaultExpectation = &ErrorHandlerMockErrorExpectation{}
	}

	if mmError.defaultExpectation.paramPtrs != nil {
		mmError.mock.t.Fatalf("ErrorHandlerMock.Error mock is already set by ExpectParams functions")
	}

	mmError.defaultExpectation.params = &ErrorHandlerMockErrorParams{ctx, err}
	for _, e := range mmError.expectations {
		if minimock.Equal(e.params, mmError.defaultExpectation.params) {
			mmError.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmError.defaultExpectation.params)
		}
	}

	return mmError
}

// ExpectCtxParam1 sets up expected param ctx for ErrorHandler.Error
func (mmError *mErrorHandlerMockError) ExpectCtxParam1(ctx context.Context) *mErrorHandlerMockError {
	if mmError.mock.funcError != nil {
		mmError.mock.t.Fatalf("ErrorHandlerMock.Error mock is already set by Set")
	}

	if mmError.defaultExpectation == nil {
		mmError.defaultExpectation = &ErrorHandlerMockErrorExpectation{}
	}

	if mmError.defaultExpectation.params != nil {
		mmError.mock.t.Fatalf("ErrorHandlerMock.Error mock is already set by Expect")
	}

	if mmError.defaultExpectation.paramPtrs == nil {
		mmError.defaultExpectation.paramPtrs = &ErrorHandlerMockErrorParamPtrs{}
	}
	mmError.defaultExpectation.paramPtrs.ctx = &ctx

	return mmError
}

// ExpectErrParam2 sets up expected param err for ErrorHandler.Error
func (mmError *mErrorHandlerMockError) ExpectErrParam2(err error) *mErrorHandlerMockError {
	if mmError.mock.funcError != nil {
		mmError.mock.t.Fatalf("ErrorHandlerMock.Error mock is already set by Set")
	}

	if mmError.defaultExpectation == nil {
		mmError.defaultExpectation = &ErrorHandlerMockErrorExpectation{}
	}

	if mmError.defaultExpectation.params != nil {
		mmError.mock.t.Fatalf("ErrorHandlerMock.Error mock is already set by Expect")
	}

	if mmError.defaultExpectation.paramPtrs == nil {
		mmError.defaultExpectation.paramPtrs = &ErrorHandlerMockErrorParamPtrs{}
	}
	mmError.defaultExpectation.paramPtrs.err = &err

	return mmError
}

// Inspect accepts an inspector function that has same arguments as the ErrorHandler.Error
func (mmError *mErrorHandlerMockError) Inspect(f func(ctx context.Context, err error)) *mErrorHandlerMockError {
	if mmError.mock.inspectFuncError != nil {
		mmError.mock.t.Fatalf("Inspect function is already set for ErrorHandlerMock.Error")
	}

	mmError.mock.inspectFuncError = f

	return mmError
}

// Return sets up results that will be returned by ErrorHandler.Error
func (mmError *mErrorHandlerMockError) Return() *ErrorHandlerMock {
	if mmError.mock.funcError != nil {
		mmError.mock.t.Fatalf("ErrorHandlerMock.Error mock is already set by Set")
	}

	if mmError.defaultExpectation == nil {
		mmError.defaultExpectation = &ErrorHandlerMockErrorExpectation{mock: mmError.mock}
	}

	return mmError.mock
}

// Set uses given function f to mock the ErrorHandler.Error method
func (mmError *mErrorHandlerMockError) Set(f func(ctx context.Context, err error)) *ErrorHandlerMock {
	if mmError.defaultExpectation != nil {
		mmError.mock.t.Fatalf("Default expectation is already set for the ErrorHandler.Error method")
	}

	if len(mmError.expectations) > 0 {
		mmError.mock.t.Fatalf("Some expectations are already set for the ErrorHandler.Error method")
	}

	mmError.mock.funcError = f
	return mmError.mock
}

// Times sets number of times ErrorHandler.Error should be invoked
func (mmError *mErrorHandlerMockError) Times(n uint64) *mErrorHandlerMockError {
	if n == 0 {
		mmError.mock.t.Fatalf("Times of ErrorHandlerMock.Error mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmError.expectedInvocations, n)
	return mmError
}

func (mmError *mErrorHandlerMockError) invocationsDone() bool {
	if len(mmError.expectations) == 0 && mmError.defaultExpectation == nil && mmError.mock.funcError == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmError.mock.afterErrorCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmError.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Error implements base.ErrorHandler
func (mmError *ErrorHandlerMock) Error(ctx context.Context, err error) {
	mm_atomic.AddUint64(&mmError.beforeErrorCounter, 1)
	defer mm_atomic.AddUint64(&mmError.afterErrorCounter, 1)

	if mmError.inspectFuncError != nil {
		mmError.inspectFuncError(ctx, err)
	}

	mm_params := ErrorHandlerMockErrorParams{ctx, err}

	// Record call args
	mmError.ErrorMock.mutex.Lock()
	mmError.ErrorMock.callArgs = append(mmError.ErrorMock.callArgs, &mm_params)
	mmError.ErrorMock.mutex.Unlock()

	for _, e := range mmError.ErrorMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmError.ErrorMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmError.ErrorMock.defaultExpectation.Counter, 1)
		mm_want := mmError.ErrorMock.defaultExpectation.params
		mm_want_ptrs := mmError.ErrorMock.defaultExpectation.paramPtrs

		mm_got := ErrorHandlerMockErrorParams{ctx, err}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmError.t.Errorf("ErrorHandlerMock.Error got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.err != nil && !minimock.Equal(*mm_want_ptrs.err, mm_got.err) {
				mmError.t.Errorf("ErrorHandlerMock.Error got unexpected parameter err, want: %#v, got: %#v%s\n", *mm_want_ptrs.err, mm_got.err, minimock.Diff(*mm_want_ptrs.err, mm_got.err))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmError.t.Errorf("ErrorHandlerMock.Error got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmError.funcError != nil {
		mmError.funcError(ctx, err)
		return
	}
	mmError.t.Fatalf("Unexpected call to ErrorHandlerMock.Error. %v %v", ctx, err)

}

// ErrorAfterCounter returns a count of finished ErrorHandlerMock.Error invocations
func (mmError *ErrorHandlerMock) ErrorAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmError.afterErrorCounter)
}

// ErrorBeforeCounter returns a count of ErrorHandlerMock.Error invocations
func (mmError *ErrorHandlerMock) ErrorBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmError.beforeErrorCounter)
}

// Calls returns a list of arguments used in each call to ErrorHandlerMock.Error.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmError *mErrorHandlerMockError) Calls() []*ErrorHandlerMockErrorParams {
	mmError.mutex.RLock()

	argCopy := make([]*ErrorHandlerMockErrorParams, len(mmError.callArgs))
	copy(argCopy, mmError.callArgs)

	mmError.mutex.RUnlock()

	return argCopy
}

// MinimockErrorDone returns true if the count of the Error invocations corresponds
// the number of defined expectations
func (m *ErrorHandlerMock) MinimockErrorDone() bool {
	if m.ErrorMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ErrorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ErrorMock.invocationsDone()
}

// MinimockErrorInspect logs each unmet expectation
func (m *ErrorHandlerMock) MinimockErrorInspect() {
	for _, e := range m.ErrorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ErrorHandlerMock.Error with params: %#v", *e.params)
		}
	}

	afterErrorCounter := mm_atomic.LoadUint64(&m.afterErrorCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ErrorMock.defaultExpectation != nil && afterErrorCounter < 1 {
		if m.ErrorMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ErrorHandlerMock.Error")
		} else {
			m.t.Errorf("Expected call to ErrorHandlerMock.Error with params: %#v", *m.ErrorMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcError != nil && afterErrorCounter < 1 {
		m.t.Error("Expected call to ErrorHandlerMock.Error")
	}

	if !m.ErrorMock.invocationsDone() && afterErrorCounter > 0 {
		m.t.Errorf("Expected %d calls to ErrorHandlerMock.Error but found %d calls",
			mm_atomic.LoadUint64(&m.ErrorMock.expectedInvocations), afterErrorCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ErrorHandlerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockErrorInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ErrorHandlerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ErrorHandlerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockErrorDone()
}
