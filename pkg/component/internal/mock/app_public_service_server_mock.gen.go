// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

import (
	context "context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_appv1alpha "github.com/instill-ai/protogen-go/app/app/v1alpha"
)

// AppPublicServiceServerMock implements mm_appv1alpha.AppPublicServiceServer
type AppPublicServiceServerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcChat          func(ctx context.Context, cp1 *mm_appv1alpha.ChatRequest) (cp2 *mm_appv1alpha.ChatResponse, err error)
	funcChatOrigin    string
	inspectFuncChat   func(ctx context.Context, cp1 *mm_appv1alpha.ChatRequest)
	afterChatCounter  uint64
	beforeChatCounter uint64
	ChatMock          mAppPublicServiceServerMockChat

	funcCreateAgent          func(ctx context.Context, cp1 *mm_appv1alpha.CreateAgentRequest) (cp2 *mm_appv1alpha.CreateAgentResponse, err error)
	funcCreateAgentOrigin    string
	inspectFuncCreateAgent   func(ctx context.Context, cp1 *mm_appv1alpha.CreateAgentRequest)
	afterCreateAgentCounter  uint64
	beforeCreateAgentCounter uint64
	CreateAgentMock          mAppPublicServiceServerMockCreateAgent

	funcCreateApp          func(ctx context.Context, cp1 *mm_appv1alpha.CreateAppRequest) (cp2 *mm_appv1alpha.CreateAppResponse, err error)
	funcCreateAppOrigin    string
	inspectFuncCreateApp   func(ctx context.Context, cp1 *mm_appv1alpha.CreateAppRequest)
	afterCreateAppCounter  uint64
	beforeCreateAppCounter uint64
	CreateAppMock          mAppPublicServiceServerMockCreateApp

	funcCreateChat          func(ctx context.Context, cp1 *mm_appv1alpha.CreateChatRequest) (cp2 *mm_appv1alpha.CreateChatResponse, err error)
	funcCreateChatOrigin    string
	inspectFuncCreateChat   func(ctx context.Context, cp1 *mm_appv1alpha.CreateChatRequest)
	afterCreateChatCounter  uint64
	beforeCreateChatCounter uint64
	CreateChatMock          mAppPublicServiceServerMockCreateChat

	funcCreateConversation          func(ctx context.Context, cp1 *mm_appv1alpha.CreateConversationRequest) (cp2 *mm_appv1alpha.CreateConversationResponse, err error)
	funcCreateConversationOrigin    string
	inspectFuncCreateConversation   func(ctx context.Context, cp1 *mm_appv1alpha.CreateConversationRequest)
	afterCreateConversationCounter  uint64
	beforeCreateConversationCounter uint64
	CreateConversationMock          mAppPublicServiceServerMockCreateConversation

	funcCreateMessage          func(ctx context.Context, cp1 *mm_appv1alpha.CreateMessageRequest) (cp2 *mm_appv1alpha.CreateMessageResponse, err error)
	funcCreateMessageOrigin    string
	inspectFuncCreateMessage   func(ctx context.Context, cp1 *mm_appv1alpha.CreateMessageRequest)
	afterCreateMessageCounter  uint64
	beforeCreateMessageCounter uint64
	CreateMessageMock          mAppPublicServiceServerMockCreateMessage

	funcCreateTable          func(ctx context.Context, cp1 *mm_appv1alpha.CreateTableRequest) (cp2 *mm_appv1alpha.CreateTableResponse, err error)
	funcCreateTableOrigin    string
	inspectFuncCreateTable   func(ctx context.Context, cp1 *mm_appv1alpha.CreateTableRequest)
	afterCreateTableCounter  uint64
	beforeCreateTableCounter uint64
	CreateTableMock          mAppPublicServiceServerMockCreateTable

	funcDeleteAgent          func(ctx context.Context, dp1 *mm_appv1alpha.DeleteAgentRequest) (dp2 *mm_appv1alpha.DeleteAgentResponse, err error)
	funcDeleteAgentOrigin    string
	inspectFuncDeleteAgent   func(ctx context.Context, dp1 *mm_appv1alpha.DeleteAgentRequest)
	afterDeleteAgentCounter  uint64
	beforeDeleteAgentCounter uint64
	DeleteAgentMock          mAppPublicServiceServerMockDeleteAgent

	funcDeleteApp          func(ctx context.Context, dp1 *mm_appv1alpha.DeleteAppRequest) (dp2 *mm_appv1alpha.DeleteAppResponse, err error)
	funcDeleteAppOrigin    string
	inspectFuncDeleteApp   func(ctx context.Context, dp1 *mm_appv1alpha.DeleteAppRequest)
	afterDeleteAppCounter  uint64
	beforeDeleteAppCounter uint64
	DeleteAppMock          mAppPublicServiceServerMockDeleteApp

	funcDeleteChat          func(ctx context.Context, dp1 *mm_appv1alpha.DeleteChatRequest) (dp2 *mm_appv1alpha.DeleteChatResponse, err error)
	funcDeleteChatOrigin    string
	inspectFuncDeleteChat   func(ctx context.Context, dp1 *mm_appv1alpha.DeleteChatRequest)
	afterDeleteChatCounter  uint64
	beforeDeleteChatCounter uint64
	DeleteChatMock          mAppPublicServiceServerMockDeleteChat

	funcDeleteConversation          func(ctx context.Context, dp1 *mm_appv1alpha.DeleteConversationRequest) (dp2 *mm_appv1alpha.DeleteConversationResponse, err error)
	funcDeleteConversationOrigin    string
	inspectFuncDeleteConversation   func(ctx context.Context, dp1 *mm_appv1alpha.DeleteConversationRequest)
	afterDeleteConversationCounter  uint64
	beforeDeleteConversationCounter uint64
	DeleteConversationMock          mAppPublicServiceServerMockDeleteConversation

	funcDeleteMessage          func(ctx context.Context, dp1 *mm_appv1alpha.DeleteMessageRequest) (dp2 *mm_appv1alpha.DeleteMessageResponse, err error)
	funcDeleteMessageOrigin    string
	inspectFuncDeleteMessage   func(ctx context.Context, dp1 *mm_appv1alpha.DeleteMessageRequest)
	afterDeleteMessageCounter  uint64
	beforeDeleteMessageCounter uint64
	DeleteMessageMock          mAppPublicServiceServerMockDeleteMessage

	funcDeleteRow          func(ctx context.Context, dp1 *mm_appv1alpha.DeleteRowRequest) (dp2 *mm_appv1alpha.DeleteRowResponse, err error)
	funcDeleteRowOrigin    string
	inspectFuncDeleteRow   func(ctx context.Context, dp1 *mm_appv1alpha.DeleteRowRequest)
	afterDeleteRowCounter  uint64
	beforeDeleteRowCounter uint64
	DeleteRowMock          mAppPublicServiceServerMockDeleteRow

	funcDeleteRows          func(ctx context.Context, dp1 *mm_appv1alpha.DeleteRowsRequest) (dp2 *mm_appv1alpha.DeleteRowsResponse, err error)
	funcDeleteRowsOrigin    string
	inspectFuncDeleteRows   func(ctx context.Context, dp1 *mm_appv1alpha.DeleteRowsRequest)
	afterDeleteRowsCounter  uint64
	beforeDeleteRowsCounter uint64
	DeleteRowsMock          mAppPublicServiceServerMockDeleteRows

	funcDeleteTable          func(ctx context.Context, dp1 *mm_appv1alpha.DeleteTableRequest) (dp2 *mm_appv1alpha.DeleteTableResponse, err error)
	funcDeleteTableOrigin    string
	inspectFuncDeleteTable   func(ctx context.Context, dp1 *mm_appv1alpha.DeleteTableRequest)
	afterDeleteTableCounter  uint64
	beforeDeleteTableCounter uint64
	DeleteTableMock          mAppPublicServiceServerMockDeleteTable

	funcExport          func(ctx context.Context, ep1 *mm_appv1alpha.ExportRequest) (ep2 *mm_appv1alpha.ExportResponse, err error)
	funcExportOrigin    string
	inspectFuncExport   func(ctx context.Context, ep1 *mm_appv1alpha.ExportRequest)
	afterExportCounter  uint64
	beforeExportCounter uint64
	ExportMock          mAppPublicServiceServerMockExport

	funcGetColumnDefinitions          func(ctx context.Context, gp1 *mm_appv1alpha.GetColumnDefinitionsRequest) (gp2 *mm_appv1alpha.GetColumnDefinitionsResponse, err error)
	funcGetColumnDefinitionsOrigin    string
	inspectFuncGetColumnDefinitions   func(ctx context.Context, gp1 *mm_appv1alpha.GetColumnDefinitionsRequest)
	afterGetColumnDefinitionsCounter  uint64
	beforeGetColumnDefinitionsCounter uint64
	GetColumnDefinitionsMock          mAppPublicServiceServerMockGetColumnDefinitions

	funcGetPlaygroundConversation          func(ctx context.Context, gp1 *mm_appv1alpha.GetPlaygroundConversationRequest) (gp2 *mm_appv1alpha.GetPlaygroundConversationResponse, err error)
	funcGetPlaygroundConversationOrigin    string
	inspectFuncGetPlaygroundConversation   func(ctx context.Context, gp1 *mm_appv1alpha.GetPlaygroundConversationRequest)
	afterGetPlaygroundConversationCounter  uint64
	beforeGetPlaygroundConversationCounter uint64
	GetPlaygroundConversationMock          mAppPublicServiceServerMockGetPlaygroundConversation

	funcGetTable          func(ctx context.Context, gp1 *mm_appv1alpha.GetTableRequest) (gp2 *mm_appv1alpha.GetTableResponse, err error)
	funcGetTableOrigin    string
	inspectFuncGetTable   func(ctx context.Context, gp1 *mm_appv1alpha.GetTableRequest)
	afterGetTableCounter  uint64
	beforeGetTableCounter uint64
	GetTableMock          mAppPublicServiceServerMockGetTable

	funcGetTableEvents          func(gp1 *mm_appv1alpha.GetTableEventsRequest, a1 mm_appv1alpha.AppPublicService_GetTableEventsServer) (err error)
	funcGetTableEventsOrigin    string
	inspectFuncGetTableEvents   func(gp1 *mm_appv1alpha.GetTableEventsRequest, a1 mm_appv1alpha.AppPublicService_GetTableEventsServer)
	afterGetTableEventsCounter  uint64
	beforeGetTableEventsCounter uint64
	GetTableEventsMock          mAppPublicServiceServerMockGetTableEvents

	funcInsertRow          func(ctx context.Context, ip1 *mm_appv1alpha.InsertRowRequest) (ip2 *mm_appv1alpha.InsertRowResponse, err error)
	funcInsertRowOrigin    string
	inspectFuncInsertRow   func(ctx context.Context, ip1 *mm_appv1alpha.InsertRowRequest)
	afterInsertRowCounter  uint64
	beforeInsertRowCounter uint64
	InsertRowMock          mAppPublicServiceServerMockInsertRow

	funcListAgents          func(ctx context.Context, lp1 *mm_appv1alpha.ListAgentsRequest) (lp2 *mm_appv1alpha.ListAgentsResponse, err error)
	funcListAgentsOrigin    string
	inspectFuncListAgents   func(ctx context.Context, lp1 *mm_appv1alpha.ListAgentsRequest)
	afterListAgentsCounter  uint64
	beforeListAgentsCounter uint64
	ListAgentsMock          mAppPublicServiceServerMockListAgents

	funcListApps          func(ctx context.Context, lp1 *mm_appv1alpha.ListAppsRequest) (lp2 *mm_appv1alpha.ListAppsResponse, err error)
	funcListAppsOrigin    string
	inspectFuncListApps   func(ctx context.Context, lp1 *mm_appv1alpha.ListAppsRequest)
	afterListAppsCounter  uint64
	beforeListAppsCounter uint64
	ListAppsMock          mAppPublicServiceServerMockListApps

	funcListChatMessages          func(ctx context.Context, lp1 *mm_appv1alpha.ListChatMessagesRequest) (lp2 *mm_appv1alpha.ListChatMessagesResponse, err error)
	funcListChatMessagesOrigin    string
	inspectFuncListChatMessages   func(ctx context.Context, lp1 *mm_appv1alpha.ListChatMessagesRequest)
	afterListChatMessagesCounter  uint64
	beforeListChatMessagesCounter uint64
	ListChatMessagesMock          mAppPublicServiceServerMockListChatMessages

	funcListChats          func(ctx context.Context, lp1 *mm_appv1alpha.ListChatsRequest) (lp2 *mm_appv1alpha.ListChatsResponse, err error)
	funcListChatsOrigin    string
	inspectFuncListChats   func(ctx context.Context, lp1 *mm_appv1alpha.ListChatsRequest)
	afterListChatsCounter  uint64
	beforeListChatsCounter uint64
	ListChatsMock          mAppPublicServiceServerMockListChats

	funcListConversations          func(ctx context.Context, lp1 *mm_appv1alpha.ListConversationsRequest) (lp2 *mm_appv1alpha.ListConversationsResponse, err error)
	funcListConversationsOrigin    string
	inspectFuncListConversations   func(ctx context.Context, lp1 *mm_appv1alpha.ListConversationsRequest)
	afterListConversationsCounter  uint64
	beforeListConversationsCounter uint64
	ListConversationsMock          mAppPublicServiceServerMockListConversations

	funcListMessages          func(ctx context.Context, lp1 *mm_appv1alpha.ListMessagesRequest) (lp2 *mm_appv1alpha.ListMessagesResponse, err error)
	funcListMessagesOrigin    string
	inspectFuncListMessages   func(ctx context.Context, lp1 *mm_appv1alpha.ListMessagesRequest)
	afterListMessagesCounter  uint64
	beforeListMessagesCounter uint64
	ListMessagesMock          mAppPublicServiceServerMockListMessages

	funcListRows          func(ctx context.Context, lp1 *mm_appv1alpha.ListRowsRequest) (lp2 *mm_appv1alpha.ListRowsResponse, err error)
	funcListRowsOrigin    string
	inspectFuncListRows   func(ctx context.Context, lp1 *mm_appv1alpha.ListRowsRequest)
	afterListRowsCounter  uint64
	beforeListRowsCounter uint64
	ListRowsMock          mAppPublicServiceServerMockListRows

	funcListTables          func(ctx context.Context, lp1 *mm_appv1alpha.ListTablesRequest) (lp2 *mm_appv1alpha.ListTablesResponse, err error)
	funcListTablesOrigin    string
	inspectFuncListTables   func(ctx context.Context, lp1 *mm_appv1alpha.ListTablesRequest)
	afterListTablesCounter  uint64
	beforeListTablesCounter uint64
	ListTablesMock          mAppPublicServiceServerMockListTables

	funcListTools          func(ctx context.Context, lp1 *mm_appv1alpha.ListToolsRequest) (lp2 *mm_appv1alpha.ListToolsResponse, err error)
	funcListToolsOrigin    string
	inspectFuncListTools   func(ctx context.Context, lp1 *mm_appv1alpha.ListToolsRequest)
	afterListToolsCounter  uint64
	beforeListToolsCounter uint64
	ListToolsMock          mAppPublicServiceServerMockListTools

	funcLiveness          func(ctx context.Context, lp1 *mm_appv1alpha.LivenessRequest) (lp2 *mm_appv1alpha.LivenessResponse, err error)
	funcLivenessOrigin    string
	inspectFuncLiveness   func(ctx context.Context, lp1 *mm_appv1alpha.LivenessRequest)
	afterLivenessCounter  uint64
	beforeLivenessCounter uint64
	LivenessMock          mAppPublicServiceServerMockLiveness

	funcMoveRows          func(ctx context.Context, mp1 *mm_appv1alpha.MoveRowsRequest) (mp2 *mm_appv1alpha.MoveRowsResponse, err error)
	funcMoveRowsOrigin    string
	inspectFuncMoveRows   func(ctx context.Context, mp1 *mm_appv1alpha.MoveRowsRequest)
	afterMoveRowsCounter  uint64
	beforeMoveRowsCounter uint64
	MoveRowsMock          mAppPublicServiceServerMockMoveRows

	funcReadiness          func(ctx context.Context, rp1 *mm_appv1alpha.ReadinessRequest) (rp2 *mm_appv1alpha.ReadinessResponse, err error)
	funcReadinessOrigin    string
	inspectFuncReadiness   func(ctx context.Context, rp1 *mm_appv1alpha.ReadinessRequest)
	afterReadinessCounter  uint64
	beforeReadinessCounter uint64
	ReadinessMock          mAppPublicServiceServerMockReadiness

	funcRestartPlaygroundConversation          func(ctx context.Context, rp1 *mm_appv1alpha.RestartPlaygroundConversationRequest) (rp2 *mm_appv1alpha.RestartPlaygroundConversationResponse, err error)
	funcRestartPlaygroundConversationOrigin    string
	inspectFuncRestartPlaygroundConversation   func(ctx context.Context, rp1 *mm_appv1alpha.RestartPlaygroundConversationRequest)
	afterRestartPlaygroundConversationCounter  uint64
	beforeRestartPlaygroundConversationCounter uint64
	RestartPlaygroundConversationMock          mAppPublicServiceServerMockRestartPlaygroundConversation

	funcUpdateAgent          func(ctx context.Context, up1 *mm_appv1alpha.UpdateAgentRequest) (up2 *mm_appv1alpha.UpdateAgentResponse, err error)
	funcUpdateAgentOrigin    string
	inspectFuncUpdateAgent   func(ctx context.Context, up1 *mm_appv1alpha.UpdateAgentRequest)
	afterUpdateAgentCounter  uint64
	beforeUpdateAgentCounter uint64
	UpdateAgentMock          mAppPublicServiceServerMockUpdateAgent

	funcUpdateApp          func(ctx context.Context, up1 *mm_appv1alpha.UpdateAppRequest) (up2 *mm_appv1alpha.UpdateAppResponse, err error)
	funcUpdateAppOrigin    string
	inspectFuncUpdateApp   func(ctx context.Context, up1 *mm_appv1alpha.UpdateAppRequest)
	afterUpdateAppCounter  uint64
	beforeUpdateAppCounter uint64
	UpdateAppMock          mAppPublicServiceServerMockUpdateApp

	funcUpdateChat          func(ctx context.Context, up1 *mm_appv1alpha.UpdateChatRequest) (up2 *mm_appv1alpha.UpdateChatResponse, err error)
	funcUpdateChatOrigin    string
	inspectFuncUpdateChat   func(ctx context.Context, up1 *mm_appv1alpha.UpdateChatRequest)
	afterUpdateChatCounter  uint64
	beforeUpdateChatCounter uint64
	UpdateChatMock          mAppPublicServiceServerMockUpdateChat

	funcUpdateColumnDefinitions          func(ctx context.Context, up1 *mm_appv1alpha.UpdateColumnDefinitionsRequest) (up2 *mm_appv1alpha.UpdateColumnDefinitionsResponse, err error)
	funcUpdateColumnDefinitionsOrigin    string
	inspectFuncUpdateColumnDefinitions   func(ctx context.Context, up1 *mm_appv1alpha.UpdateColumnDefinitionsRequest)
	afterUpdateColumnDefinitionsCounter  uint64
	beforeUpdateColumnDefinitionsCounter uint64
	UpdateColumnDefinitionsMock          mAppPublicServiceServerMockUpdateColumnDefinitions

	funcUpdateConversation          func(ctx context.Context, up1 *mm_appv1alpha.UpdateConversationRequest) (up2 *mm_appv1alpha.UpdateConversationResponse, err error)
	funcUpdateConversationOrigin    string
	inspectFuncUpdateConversation   func(ctx context.Context, up1 *mm_appv1alpha.UpdateConversationRequest)
	afterUpdateConversationCounter  uint64
	beforeUpdateConversationCounter uint64
	UpdateConversationMock          mAppPublicServiceServerMockUpdateConversation

	funcUpdateMessage          func(ctx context.Context, up1 *mm_appv1alpha.UpdateMessageRequest) (up2 *mm_appv1alpha.UpdateMessageResponse, err error)
	funcUpdateMessageOrigin    string
	inspectFuncUpdateMessage   func(ctx context.Context, up1 *mm_appv1alpha.UpdateMessageRequest)
	afterUpdateMessageCounter  uint64
	beforeUpdateMessageCounter uint64
	UpdateMessageMock          mAppPublicServiceServerMockUpdateMessage

	funcUpdateRow          func(ctx context.Context, up1 *mm_appv1alpha.UpdateRowRequest) (up2 *mm_appv1alpha.UpdateRowResponse, err error)
	funcUpdateRowOrigin    string
	inspectFuncUpdateRow   func(ctx context.Context, up1 *mm_appv1alpha.UpdateRowRequest)
	afterUpdateRowCounter  uint64
	beforeUpdateRowCounter uint64
	UpdateRowMock          mAppPublicServiceServerMockUpdateRow

	funcUpdateRows          func(ctx context.Context, up1 *mm_appv1alpha.UpdateRowsRequest) (up2 *mm_appv1alpha.UpdateRowsResponse, err error)
	funcUpdateRowsOrigin    string
	inspectFuncUpdateRows   func(ctx context.Context, up1 *mm_appv1alpha.UpdateRowsRequest)
	afterUpdateRowsCounter  uint64
	beforeUpdateRowsCounter uint64
	UpdateRowsMock          mAppPublicServiceServerMockUpdateRows

	funcUpdateTable          func(ctx context.Context, up1 *mm_appv1alpha.UpdateTableRequest) (up2 *mm_appv1alpha.UpdateTableResponse, err error)
	funcUpdateTableOrigin    string
	inspectFuncUpdateTable   func(ctx context.Context, up1 *mm_appv1alpha.UpdateTableRequest)
	afterUpdateTableCounter  uint64
	beforeUpdateTableCounter uint64
	UpdateTableMock          mAppPublicServiceServerMockUpdateTable
}

// NewAppPublicServiceServerMock returns a mock for mm_appv1alpha.AppPublicServiceServer
func NewAppPublicServiceServerMock(t minimock.Tester) *AppPublicServiceServerMock {
	m := &AppPublicServiceServerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ChatMock = mAppPublicServiceServerMockChat{mock: m}
	m.ChatMock.callArgs = []*AppPublicServiceServerMockChatParams{}

	m.CreateAgentMock = mAppPublicServiceServerMockCreateAgent{mock: m}
	m.CreateAgentMock.callArgs = []*AppPublicServiceServerMockCreateAgentParams{}

	m.CreateAppMock = mAppPublicServiceServerMockCreateApp{mock: m}
	m.CreateAppMock.callArgs = []*AppPublicServiceServerMockCreateAppParams{}

	m.CreateChatMock = mAppPublicServiceServerMockCreateChat{mock: m}
	m.CreateChatMock.callArgs = []*AppPublicServiceServerMockCreateChatParams{}

	m.CreateConversationMock = mAppPublicServiceServerMockCreateConversation{mock: m}
	m.CreateConversationMock.callArgs = []*AppPublicServiceServerMockCreateConversationParams{}

	m.CreateMessageMock = mAppPublicServiceServerMockCreateMessage{mock: m}
	m.CreateMessageMock.callArgs = []*AppPublicServiceServerMockCreateMessageParams{}

	m.CreateTableMock = mAppPublicServiceServerMockCreateTable{mock: m}
	m.CreateTableMock.callArgs = []*AppPublicServiceServerMockCreateTableParams{}

	m.DeleteAgentMock = mAppPublicServiceServerMockDeleteAgent{mock: m}
	m.DeleteAgentMock.callArgs = []*AppPublicServiceServerMockDeleteAgentParams{}

	m.DeleteAppMock = mAppPublicServiceServerMockDeleteApp{mock: m}
	m.DeleteAppMock.callArgs = []*AppPublicServiceServerMockDeleteAppParams{}

	m.DeleteChatMock = mAppPublicServiceServerMockDeleteChat{mock: m}
	m.DeleteChatMock.callArgs = []*AppPublicServiceServerMockDeleteChatParams{}

	m.DeleteConversationMock = mAppPublicServiceServerMockDeleteConversation{mock: m}
	m.DeleteConversationMock.callArgs = []*AppPublicServiceServerMockDeleteConversationParams{}

	m.DeleteMessageMock = mAppPublicServiceServerMockDeleteMessage{mock: m}
	m.DeleteMessageMock.callArgs = []*AppPublicServiceServerMockDeleteMessageParams{}

	m.DeleteRowMock = mAppPublicServiceServerMockDeleteRow{mock: m}
	m.DeleteRowMock.callArgs = []*AppPublicServiceServerMockDeleteRowParams{}

	m.DeleteRowsMock = mAppPublicServiceServerMockDeleteRows{mock: m}
	m.DeleteRowsMock.callArgs = []*AppPublicServiceServerMockDeleteRowsParams{}

	m.DeleteTableMock = mAppPublicServiceServerMockDeleteTable{mock: m}
	m.DeleteTableMock.callArgs = []*AppPublicServiceServerMockDeleteTableParams{}

	m.ExportMock = mAppPublicServiceServerMockExport{mock: m}
	m.ExportMock.callArgs = []*AppPublicServiceServerMockExportParams{}

	m.GetColumnDefinitionsMock = mAppPublicServiceServerMockGetColumnDefinitions{mock: m}
	m.GetColumnDefinitionsMock.callArgs = []*AppPublicServiceServerMockGetColumnDefinitionsParams{}

	m.GetPlaygroundConversationMock = mAppPublicServiceServerMockGetPlaygroundConversation{mock: m}
	m.GetPlaygroundConversationMock.callArgs = []*AppPublicServiceServerMockGetPlaygroundConversationParams{}

	m.GetTableMock = mAppPublicServiceServerMockGetTable{mock: m}
	m.GetTableMock.callArgs = []*AppPublicServiceServerMockGetTableParams{}

	m.GetTableEventsMock = mAppPublicServiceServerMockGetTableEvents{mock: m}
	m.GetTableEventsMock.callArgs = []*AppPublicServiceServerMockGetTableEventsParams{}

	m.InsertRowMock = mAppPublicServiceServerMockInsertRow{mock: m}
	m.InsertRowMock.callArgs = []*AppPublicServiceServerMockInsertRowParams{}

	m.ListAgentsMock = mAppPublicServiceServerMockListAgents{mock: m}
	m.ListAgentsMock.callArgs = []*AppPublicServiceServerMockListAgentsParams{}

	m.ListAppsMock = mAppPublicServiceServerMockListApps{mock: m}
	m.ListAppsMock.callArgs = []*AppPublicServiceServerMockListAppsParams{}

	m.ListChatMessagesMock = mAppPublicServiceServerMockListChatMessages{mock: m}
	m.ListChatMessagesMock.callArgs = []*AppPublicServiceServerMockListChatMessagesParams{}

	m.ListChatsMock = mAppPublicServiceServerMockListChats{mock: m}
	m.ListChatsMock.callArgs = []*AppPublicServiceServerMockListChatsParams{}

	m.ListConversationsMock = mAppPublicServiceServerMockListConversations{mock: m}
	m.ListConversationsMock.callArgs = []*AppPublicServiceServerMockListConversationsParams{}

	m.ListMessagesMock = mAppPublicServiceServerMockListMessages{mock: m}
	m.ListMessagesMock.callArgs = []*AppPublicServiceServerMockListMessagesParams{}

	m.ListRowsMock = mAppPublicServiceServerMockListRows{mock: m}
	m.ListRowsMock.callArgs = []*AppPublicServiceServerMockListRowsParams{}

	m.ListTablesMock = mAppPublicServiceServerMockListTables{mock: m}
	m.ListTablesMock.callArgs = []*AppPublicServiceServerMockListTablesParams{}

	m.ListToolsMock = mAppPublicServiceServerMockListTools{mock: m}
	m.ListToolsMock.callArgs = []*AppPublicServiceServerMockListToolsParams{}

	m.LivenessMock = mAppPublicServiceServerMockLiveness{mock: m}
	m.LivenessMock.callArgs = []*AppPublicServiceServerMockLivenessParams{}

	m.MoveRowsMock = mAppPublicServiceServerMockMoveRows{mock: m}
	m.MoveRowsMock.callArgs = []*AppPublicServiceServerMockMoveRowsParams{}

	m.ReadinessMock = mAppPublicServiceServerMockReadiness{mock: m}
	m.ReadinessMock.callArgs = []*AppPublicServiceServerMockReadinessParams{}

	m.RestartPlaygroundConversationMock = mAppPublicServiceServerMockRestartPlaygroundConversation{mock: m}
	m.RestartPlaygroundConversationMock.callArgs = []*AppPublicServiceServerMockRestartPlaygroundConversationParams{}

	m.UpdateAgentMock = mAppPublicServiceServerMockUpdateAgent{mock: m}
	m.UpdateAgentMock.callArgs = []*AppPublicServiceServerMockUpdateAgentParams{}

	m.UpdateAppMock = mAppPublicServiceServerMockUpdateApp{mock: m}
	m.UpdateAppMock.callArgs = []*AppPublicServiceServerMockUpdateAppParams{}

	m.UpdateChatMock = mAppPublicServiceServerMockUpdateChat{mock: m}
	m.UpdateChatMock.callArgs = []*AppPublicServiceServerMockUpdateChatParams{}

	m.UpdateColumnDefinitionsMock = mAppPublicServiceServerMockUpdateColumnDefinitions{mock: m}
	m.UpdateColumnDefinitionsMock.callArgs = []*AppPublicServiceServerMockUpdateColumnDefinitionsParams{}

	m.UpdateConversationMock = mAppPublicServiceServerMockUpdateConversation{mock: m}
	m.UpdateConversationMock.callArgs = []*AppPublicServiceServerMockUpdateConversationParams{}

	m.UpdateMessageMock = mAppPublicServiceServerMockUpdateMessage{mock: m}
	m.UpdateMessageMock.callArgs = []*AppPublicServiceServerMockUpdateMessageParams{}

	m.UpdateRowMock = mAppPublicServiceServerMockUpdateRow{mock: m}
	m.UpdateRowMock.callArgs = []*AppPublicServiceServerMockUpdateRowParams{}

	m.UpdateRowsMock = mAppPublicServiceServerMockUpdateRows{mock: m}
	m.UpdateRowsMock.callArgs = []*AppPublicServiceServerMockUpdateRowsParams{}

	m.UpdateTableMock = mAppPublicServiceServerMockUpdateTable{mock: m}
	m.UpdateTableMock.callArgs = []*AppPublicServiceServerMockUpdateTableParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAppPublicServiceServerMockChat struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockChatExpectation
	expectations       []*AppPublicServiceServerMockChatExpectation

	callArgs []*AppPublicServiceServerMockChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockChatExpectation specifies expectation struct of the AppPublicServiceServer.Chat
type AppPublicServiceServerMockChatExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockChatParams
	paramPtrs          *AppPublicServiceServerMockChatParamPtrs
	expectationOrigins AppPublicServiceServerMockChatExpectationOrigins
	results            *AppPublicServiceServerMockChatResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockChatParams contains parameters of the AppPublicServiceServer.Chat
type AppPublicServiceServerMockChatParams struct {
	ctx context.Context
	cp1 *mm_appv1alpha.ChatRequest
}

// AppPublicServiceServerMockChatParamPtrs contains pointers to parameters of the AppPublicServiceServer.Chat
type AppPublicServiceServerMockChatParamPtrs struct {
	ctx *context.Context
	cp1 **mm_appv1alpha.ChatRequest
}

// AppPublicServiceServerMockChatResults contains results of the AppPublicServiceServer.Chat
type AppPublicServiceServerMockChatResults struct {
	cp2 *mm_appv1alpha.ChatResponse
	err error
}

// AppPublicServiceServerMockChatOrigins contains origins of expectations of the AppPublicServiceServer.Chat
type AppPublicServiceServerMockChatExpectationOrigins struct {
	origin    string
	originCtx string
	originCp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmChat *mAppPublicServiceServerMockChat) Optional() *mAppPublicServiceServerMockChat {
	mmChat.optional = true
	return mmChat
}

// Expect sets up expected params for AppPublicServiceServer.Chat
func (mmChat *mAppPublicServiceServerMockChat) Expect(ctx context.Context, cp1 *mm_appv1alpha.ChatRequest) *mAppPublicServiceServerMockChat {
	if mmChat.mock.funcChat != nil {
		mmChat.mock.t.Fatalf("AppPublicServiceServerMock.Chat mock is already set by Set")
	}

	if mmChat.defaultExpectation == nil {
		mmChat.defaultExpectation = &AppPublicServiceServerMockChatExpectation{}
	}

	if mmChat.defaultExpectation.paramPtrs != nil {
		mmChat.mock.t.Fatalf("AppPublicServiceServerMock.Chat mock is already set by ExpectParams functions")
	}

	mmChat.defaultExpectation.params = &AppPublicServiceServerMockChatParams{ctx, cp1}
	mmChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmChat.expectations {
		if minimock.Equal(e.params, mmChat.defaultExpectation.params) {
			mmChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmChat.defaultExpectation.params)
		}
	}

	return mmChat
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.Chat
func (mmChat *mAppPublicServiceServerMockChat) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockChat {
	if mmChat.mock.funcChat != nil {
		mmChat.mock.t.Fatalf("AppPublicServiceServerMock.Chat mock is already set by Set")
	}

	if mmChat.defaultExpectation == nil {
		mmChat.defaultExpectation = &AppPublicServiceServerMockChatExpectation{}
	}

	if mmChat.defaultExpectation.params != nil {
		mmChat.mock.t.Fatalf("AppPublicServiceServerMock.Chat mock is already set by Expect")
	}

	if mmChat.defaultExpectation.paramPtrs == nil {
		mmChat.defaultExpectation.paramPtrs = &AppPublicServiceServerMockChatParamPtrs{}
	}
	mmChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmChat
}

// ExpectCp1Param2 sets up expected param cp1 for AppPublicServiceServer.Chat
func (mmChat *mAppPublicServiceServerMockChat) ExpectCp1Param2(cp1 *mm_appv1alpha.ChatRequest) *mAppPublicServiceServerMockChat {
	if mmChat.mock.funcChat != nil {
		mmChat.mock.t.Fatalf("AppPublicServiceServerMock.Chat mock is already set by Set")
	}

	if mmChat.defaultExpectation == nil {
		mmChat.defaultExpectation = &AppPublicServiceServerMockChatExpectation{}
	}

	if mmChat.defaultExpectation.params != nil {
		mmChat.mock.t.Fatalf("AppPublicServiceServerMock.Chat mock is already set by Expect")
	}

	if mmChat.defaultExpectation.paramPtrs == nil {
		mmChat.defaultExpectation.paramPtrs = &AppPublicServiceServerMockChatParamPtrs{}
	}
	mmChat.defaultExpectation.paramPtrs.cp1 = &cp1
	mmChat.defaultExpectation.expectationOrigins.originCp1 = minimock.CallerInfo(1)

	return mmChat
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.Chat
func (mmChat *mAppPublicServiceServerMockChat) Inspect(f func(ctx context.Context, cp1 *mm_appv1alpha.ChatRequest)) *mAppPublicServiceServerMockChat {
	if mmChat.mock.inspectFuncChat != nil {
		mmChat.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.Chat")
	}

	mmChat.mock.inspectFuncChat = f

	return mmChat
}

// Return sets up results that will be returned by AppPublicServiceServer.Chat
func (mmChat *mAppPublicServiceServerMockChat) Return(cp2 *mm_appv1alpha.ChatResponse, err error) *AppPublicServiceServerMock {
	if mmChat.mock.funcChat != nil {
		mmChat.mock.t.Fatalf("AppPublicServiceServerMock.Chat mock is already set by Set")
	}

	if mmChat.defaultExpectation == nil {
		mmChat.defaultExpectation = &AppPublicServiceServerMockChatExpectation{mock: mmChat.mock}
	}
	mmChat.defaultExpectation.results = &AppPublicServiceServerMockChatResults{cp2, err}
	mmChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmChat.mock
}

// Set uses given function f to mock the AppPublicServiceServer.Chat method
func (mmChat *mAppPublicServiceServerMockChat) Set(f func(ctx context.Context, cp1 *mm_appv1alpha.ChatRequest) (cp2 *mm_appv1alpha.ChatResponse, err error)) *AppPublicServiceServerMock {
	if mmChat.defaultExpectation != nil {
		mmChat.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.Chat method")
	}

	if len(mmChat.expectations) > 0 {
		mmChat.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.Chat method")
	}

	mmChat.mock.funcChat = f
	mmChat.mock.funcChatOrigin = minimock.CallerInfo(1)
	return mmChat.mock
}

// When sets expectation for the AppPublicServiceServer.Chat which will trigger the result defined by the following
// Then helper
func (mmChat *mAppPublicServiceServerMockChat) When(ctx context.Context, cp1 *mm_appv1alpha.ChatRequest) *AppPublicServiceServerMockChatExpectation {
	if mmChat.mock.funcChat != nil {
		mmChat.mock.t.Fatalf("AppPublicServiceServerMock.Chat mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockChatExpectation{
		mock:               mmChat.mock,
		params:             &AppPublicServiceServerMockChatParams{ctx, cp1},
		expectationOrigins: AppPublicServiceServerMockChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmChat.expectations = append(mmChat.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.Chat return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockChatExpectation) Then(cp2 *mm_appv1alpha.ChatResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockChatResults{cp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.Chat should be invoked
func (mmChat *mAppPublicServiceServerMockChat) Times(n uint64) *mAppPublicServiceServerMockChat {
	if n == 0 {
		mmChat.mock.t.Fatalf("Times of AppPublicServiceServerMock.Chat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmChat.expectedInvocations, n)
	mmChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmChat
}

func (mmChat *mAppPublicServiceServerMockChat) invocationsDone() bool {
	if len(mmChat.expectations) == 0 && mmChat.defaultExpectation == nil && mmChat.mock.funcChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmChat.mock.afterChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Chat implements mm_appv1alpha.AppPublicServiceServer
func (mmChat *AppPublicServiceServerMock) Chat(ctx context.Context, cp1 *mm_appv1alpha.ChatRequest) (cp2 *mm_appv1alpha.ChatResponse, err error) {
	mm_atomic.AddUint64(&mmChat.beforeChatCounter, 1)
	defer mm_atomic.AddUint64(&mmChat.afterChatCounter, 1)

	mmChat.t.Helper()

	if mmChat.inspectFuncChat != nil {
		mmChat.inspectFuncChat(ctx, cp1)
	}

	mm_params := AppPublicServiceServerMockChatParams{ctx, cp1}

	// Record call args
	mmChat.ChatMock.mutex.Lock()
	mmChat.ChatMock.callArgs = append(mmChat.ChatMock.callArgs, &mm_params)
	mmChat.ChatMock.mutex.Unlock()

	for _, e := range mmChat.ChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp2, e.results.err
		}
	}

	if mmChat.ChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmChat.ChatMock.defaultExpectation.Counter, 1)
		mm_want := mmChat.ChatMock.defaultExpectation.params
		mm_want_ptrs := mmChat.ChatMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockChatParams{ctx, cp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmChat.t.Errorf("AppPublicServiceServerMock.Chat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmChat.ChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cp1 != nil && !minimock.Equal(*mm_want_ptrs.cp1, mm_got.cp1) {
				mmChat.t.Errorf("AppPublicServiceServerMock.Chat got unexpected parameter cp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmChat.ChatMock.defaultExpectation.expectationOrigins.originCp1, *mm_want_ptrs.cp1, mm_got.cp1, minimock.Diff(*mm_want_ptrs.cp1, mm_got.cp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmChat.t.Errorf("AppPublicServiceServerMock.Chat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmChat.ChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmChat.ChatMock.defaultExpectation.results
		if mm_results == nil {
			mmChat.t.Fatal("No results are set for the AppPublicServiceServerMock.Chat")
		}
		return (*mm_results).cp2, (*mm_results).err
	}
	if mmChat.funcChat != nil {
		return mmChat.funcChat(ctx, cp1)
	}
	mmChat.t.Fatalf("Unexpected call to AppPublicServiceServerMock.Chat. %v %v", ctx, cp1)
	return
}

// ChatAfterCounter returns a count of finished AppPublicServiceServerMock.Chat invocations
func (mmChat *AppPublicServiceServerMock) ChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChat.afterChatCounter)
}

// ChatBeforeCounter returns a count of AppPublicServiceServerMock.Chat invocations
func (mmChat *AppPublicServiceServerMock) ChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChat.beforeChatCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.Chat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmChat *mAppPublicServiceServerMockChat) Calls() []*AppPublicServiceServerMockChatParams {
	mmChat.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockChatParams, len(mmChat.callArgs))
	copy(argCopy, mmChat.callArgs)

	mmChat.mutex.RUnlock()

	return argCopy
}

// MinimockChatDone returns true if the count of the Chat invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockChatDone() bool {
	if m.ChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ChatMock.invocationsDone()
}

// MinimockChatInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockChatInspect() {
	for _, e := range m.ChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.Chat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterChatCounter := mm_atomic.LoadUint64(&m.afterChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ChatMock.defaultExpectation != nil && afterChatCounter < 1 {
		if m.ChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.Chat at\n%s", m.ChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.Chat at\n%s with params: %#v", m.ChatMock.defaultExpectation.expectationOrigins.origin, *m.ChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChat != nil && afterChatCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.Chat at\n%s", m.funcChatOrigin)
	}

	if !m.ChatMock.invocationsDone() && afterChatCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.Chat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ChatMock.expectedInvocations), m.ChatMock.expectedInvocationsOrigin, afterChatCounter)
	}
}

type mAppPublicServiceServerMockCreateAgent struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockCreateAgentExpectation
	expectations       []*AppPublicServiceServerMockCreateAgentExpectation

	callArgs []*AppPublicServiceServerMockCreateAgentParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockCreateAgentExpectation specifies expectation struct of the AppPublicServiceServer.CreateAgent
type AppPublicServiceServerMockCreateAgentExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockCreateAgentParams
	paramPtrs          *AppPublicServiceServerMockCreateAgentParamPtrs
	expectationOrigins AppPublicServiceServerMockCreateAgentExpectationOrigins
	results            *AppPublicServiceServerMockCreateAgentResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockCreateAgentParams contains parameters of the AppPublicServiceServer.CreateAgent
type AppPublicServiceServerMockCreateAgentParams struct {
	ctx context.Context
	cp1 *mm_appv1alpha.CreateAgentRequest
}

// AppPublicServiceServerMockCreateAgentParamPtrs contains pointers to parameters of the AppPublicServiceServer.CreateAgent
type AppPublicServiceServerMockCreateAgentParamPtrs struct {
	ctx *context.Context
	cp1 **mm_appv1alpha.CreateAgentRequest
}

// AppPublicServiceServerMockCreateAgentResults contains results of the AppPublicServiceServer.CreateAgent
type AppPublicServiceServerMockCreateAgentResults struct {
	cp2 *mm_appv1alpha.CreateAgentResponse
	err error
}

// AppPublicServiceServerMockCreateAgentOrigins contains origins of expectations of the AppPublicServiceServer.CreateAgent
type AppPublicServiceServerMockCreateAgentExpectationOrigins struct {
	origin    string
	originCtx string
	originCp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateAgent *mAppPublicServiceServerMockCreateAgent) Optional() *mAppPublicServiceServerMockCreateAgent {
	mmCreateAgent.optional = true
	return mmCreateAgent
}

// Expect sets up expected params for AppPublicServiceServer.CreateAgent
func (mmCreateAgent *mAppPublicServiceServerMockCreateAgent) Expect(ctx context.Context, cp1 *mm_appv1alpha.CreateAgentRequest) *mAppPublicServiceServerMockCreateAgent {
	if mmCreateAgent.mock.funcCreateAgent != nil {
		mmCreateAgent.mock.t.Fatalf("AppPublicServiceServerMock.CreateAgent mock is already set by Set")
	}

	if mmCreateAgent.defaultExpectation == nil {
		mmCreateAgent.defaultExpectation = &AppPublicServiceServerMockCreateAgentExpectation{}
	}

	if mmCreateAgent.defaultExpectation.paramPtrs != nil {
		mmCreateAgent.mock.t.Fatalf("AppPublicServiceServerMock.CreateAgent mock is already set by ExpectParams functions")
	}

	mmCreateAgent.defaultExpectation.params = &AppPublicServiceServerMockCreateAgentParams{ctx, cp1}
	mmCreateAgent.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateAgent.expectations {
		if minimock.Equal(e.params, mmCreateAgent.defaultExpectation.params) {
			mmCreateAgent.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateAgent.defaultExpectation.params)
		}
	}

	return mmCreateAgent
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.CreateAgent
func (mmCreateAgent *mAppPublicServiceServerMockCreateAgent) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockCreateAgent {
	if mmCreateAgent.mock.funcCreateAgent != nil {
		mmCreateAgent.mock.t.Fatalf("AppPublicServiceServerMock.CreateAgent mock is already set by Set")
	}

	if mmCreateAgent.defaultExpectation == nil {
		mmCreateAgent.defaultExpectation = &AppPublicServiceServerMockCreateAgentExpectation{}
	}

	if mmCreateAgent.defaultExpectation.params != nil {
		mmCreateAgent.mock.t.Fatalf("AppPublicServiceServerMock.CreateAgent mock is already set by Expect")
	}

	if mmCreateAgent.defaultExpectation.paramPtrs == nil {
		mmCreateAgent.defaultExpectation.paramPtrs = &AppPublicServiceServerMockCreateAgentParamPtrs{}
	}
	mmCreateAgent.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateAgent.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateAgent
}

// ExpectCp1Param2 sets up expected param cp1 for AppPublicServiceServer.CreateAgent
func (mmCreateAgent *mAppPublicServiceServerMockCreateAgent) ExpectCp1Param2(cp1 *mm_appv1alpha.CreateAgentRequest) *mAppPublicServiceServerMockCreateAgent {
	if mmCreateAgent.mock.funcCreateAgent != nil {
		mmCreateAgent.mock.t.Fatalf("AppPublicServiceServerMock.CreateAgent mock is already set by Set")
	}

	if mmCreateAgent.defaultExpectation == nil {
		mmCreateAgent.defaultExpectation = &AppPublicServiceServerMockCreateAgentExpectation{}
	}

	if mmCreateAgent.defaultExpectation.params != nil {
		mmCreateAgent.mock.t.Fatalf("AppPublicServiceServerMock.CreateAgent mock is already set by Expect")
	}

	if mmCreateAgent.defaultExpectation.paramPtrs == nil {
		mmCreateAgent.defaultExpectation.paramPtrs = &AppPublicServiceServerMockCreateAgentParamPtrs{}
	}
	mmCreateAgent.defaultExpectation.paramPtrs.cp1 = &cp1
	mmCreateAgent.defaultExpectation.expectationOrigins.originCp1 = minimock.CallerInfo(1)

	return mmCreateAgent
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.CreateAgent
func (mmCreateAgent *mAppPublicServiceServerMockCreateAgent) Inspect(f func(ctx context.Context, cp1 *mm_appv1alpha.CreateAgentRequest)) *mAppPublicServiceServerMockCreateAgent {
	if mmCreateAgent.mock.inspectFuncCreateAgent != nil {
		mmCreateAgent.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.CreateAgent")
	}

	mmCreateAgent.mock.inspectFuncCreateAgent = f

	return mmCreateAgent
}

// Return sets up results that will be returned by AppPublicServiceServer.CreateAgent
func (mmCreateAgent *mAppPublicServiceServerMockCreateAgent) Return(cp2 *mm_appv1alpha.CreateAgentResponse, err error) *AppPublicServiceServerMock {
	if mmCreateAgent.mock.funcCreateAgent != nil {
		mmCreateAgent.mock.t.Fatalf("AppPublicServiceServerMock.CreateAgent mock is already set by Set")
	}

	if mmCreateAgent.defaultExpectation == nil {
		mmCreateAgent.defaultExpectation = &AppPublicServiceServerMockCreateAgentExpectation{mock: mmCreateAgent.mock}
	}
	mmCreateAgent.defaultExpectation.results = &AppPublicServiceServerMockCreateAgentResults{cp2, err}
	mmCreateAgent.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateAgent.mock
}

// Set uses given function f to mock the AppPublicServiceServer.CreateAgent method
func (mmCreateAgent *mAppPublicServiceServerMockCreateAgent) Set(f func(ctx context.Context, cp1 *mm_appv1alpha.CreateAgentRequest) (cp2 *mm_appv1alpha.CreateAgentResponse, err error)) *AppPublicServiceServerMock {
	if mmCreateAgent.defaultExpectation != nil {
		mmCreateAgent.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.CreateAgent method")
	}

	if len(mmCreateAgent.expectations) > 0 {
		mmCreateAgent.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.CreateAgent method")
	}

	mmCreateAgent.mock.funcCreateAgent = f
	mmCreateAgent.mock.funcCreateAgentOrigin = minimock.CallerInfo(1)
	return mmCreateAgent.mock
}

// When sets expectation for the AppPublicServiceServer.CreateAgent which will trigger the result defined by the following
// Then helper
func (mmCreateAgent *mAppPublicServiceServerMockCreateAgent) When(ctx context.Context, cp1 *mm_appv1alpha.CreateAgentRequest) *AppPublicServiceServerMockCreateAgentExpectation {
	if mmCreateAgent.mock.funcCreateAgent != nil {
		mmCreateAgent.mock.t.Fatalf("AppPublicServiceServerMock.CreateAgent mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockCreateAgentExpectation{
		mock:               mmCreateAgent.mock,
		params:             &AppPublicServiceServerMockCreateAgentParams{ctx, cp1},
		expectationOrigins: AppPublicServiceServerMockCreateAgentExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateAgent.expectations = append(mmCreateAgent.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.CreateAgent return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockCreateAgentExpectation) Then(cp2 *mm_appv1alpha.CreateAgentResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockCreateAgentResults{cp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.CreateAgent should be invoked
func (mmCreateAgent *mAppPublicServiceServerMockCreateAgent) Times(n uint64) *mAppPublicServiceServerMockCreateAgent {
	if n == 0 {
		mmCreateAgent.mock.t.Fatalf("Times of AppPublicServiceServerMock.CreateAgent mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateAgent.expectedInvocations, n)
	mmCreateAgent.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateAgent
}

func (mmCreateAgent *mAppPublicServiceServerMockCreateAgent) invocationsDone() bool {
	if len(mmCreateAgent.expectations) == 0 && mmCreateAgent.defaultExpectation == nil && mmCreateAgent.mock.funcCreateAgent == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateAgent.mock.afterCreateAgentCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateAgent.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateAgent implements mm_appv1alpha.AppPublicServiceServer
func (mmCreateAgent *AppPublicServiceServerMock) CreateAgent(ctx context.Context, cp1 *mm_appv1alpha.CreateAgentRequest) (cp2 *mm_appv1alpha.CreateAgentResponse, err error) {
	mm_atomic.AddUint64(&mmCreateAgent.beforeCreateAgentCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateAgent.afterCreateAgentCounter, 1)

	mmCreateAgent.t.Helper()

	if mmCreateAgent.inspectFuncCreateAgent != nil {
		mmCreateAgent.inspectFuncCreateAgent(ctx, cp1)
	}

	mm_params := AppPublicServiceServerMockCreateAgentParams{ctx, cp1}

	// Record call args
	mmCreateAgent.CreateAgentMock.mutex.Lock()
	mmCreateAgent.CreateAgentMock.callArgs = append(mmCreateAgent.CreateAgentMock.callArgs, &mm_params)
	mmCreateAgent.CreateAgentMock.mutex.Unlock()

	for _, e := range mmCreateAgent.CreateAgentMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp2, e.results.err
		}
	}

	if mmCreateAgent.CreateAgentMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateAgent.CreateAgentMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateAgent.CreateAgentMock.defaultExpectation.params
		mm_want_ptrs := mmCreateAgent.CreateAgentMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockCreateAgentParams{ctx, cp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateAgent.t.Errorf("AppPublicServiceServerMock.CreateAgent got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateAgent.CreateAgentMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cp1 != nil && !minimock.Equal(*mm_want_ptrs.cp1, mm_got.cp1) {
				mmCreateAgent.t.Errorf("AppPublicServiceServerMock.CreateAgent got unexpected parameter cp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateAgent.CreateAgentMock.defaultExpectation.expectationOrigins.originCp1, *mm_want_ptrs.cp1, mm_got.cp1, minimock.Diff(*mm_want_ptrs.cp1, mm_got.cp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateAgent.t.Errorf("AppPublicServiceServerMock.CreateAgent got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateAgent.CreateAgentMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateAgent.CreateAgentMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateAgent.t.Fatal("No results are set for the AppPublicServiceServerMock.CreateAgent")
		}
		return (*mm_results).cp2, (*mm_results).err
	}
	if mmCreateAgent.funcCreateAgent != nil {
		return mmCreateAgent.funcCreateAgent(ctx, cp1)
	}
	mmCreateAgent.t.Fatalf("Unexpected call to AppPublicServiceServerMock.CreateAgent. %v %v", ctx, cp1)
	return
}

// CreateAgentAfterCounter returns a count of finished AppPublicServiceServerMock.CreateAgent invocations
func (mmCreateAgent *AppPublicServiceServerMock) CreateAgentAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateAgent.afterCreateAgentCounter)
}

// CreateAgentBeforeCounter returns a count of AppPublicServiceServerMock.CreateAgent invocations
func (mmCreateAgent *AppPublicServiceServerMock) CreateAgentBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateAgent.beforeCreateAgentCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.CreateAgent.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateAgent *mAppPublicServiceServerMockCreateAgent) Calls() []*AppPublicServiceServerMockCreateAgentParams {
	mmCreateAgent.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockCreateAgentParams, len(mmCreateAgent.callArgs))
	copy(argCopy, mmCreateAgent.callArgs)

	mmCreateAgent.mutex.RUnlock()

	return argCopy
}

// MinimockCreateAgentDone returns true if the count of the CreateAgent invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockCreateAgentDone() bool {
	if m.CreateAgentMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateAgentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateAgentMock.invocationsDone()
}

// MinimockCreateAgentInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockCreateAgentInspect() {
	for _, e := range m.CreateAgentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateAgent at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateAgentCounter := mm_atomic.LoadUint64(&m.afterCreateAgentCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateAgentMock.defaultExpectation != nil && afterCreateAgentCounter < 1 {
		if m.CreateAgentMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateAgent at\n%s", m.CreateAgentMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateAgent at\n%s with params: %#v", m.CreateAgentMock.defaultExpectation.expectationOrigins.origin, *m.CreateAgentMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateAgent != nil && afterCreateAgentCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateAgent at\n%s", m.funcCreateAgentOrigin)
	}

	if !m.CreateAgentMock.invocationsDone() && afterCreateAgentCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.CreateAgent at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateAgentMock.expectedInvocations), m.CreateAgentMock.expectedInvocationsOrigin, afterCreateAgentCounter)
	}
}

type mAppPublicServiceServerMockCreateApp struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockCreateAppExpectation
	expectations       []*AppPublicServiceServerMockCreateAppExpectation

	callArgs []*AppPublicServiceServerMockCreateAppParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockCreateAppExpectation specifies expectation struct of the AppPublicServiceServer.CreateApp
type AppPublicServiceServerMockCreateAppExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockCreateAppParams
	paramPtrs          *AppPublicServiceServerMockCreateAppParamPtrs
	expectationOrigins AppPublicServiceServerMockCreateAppExpectationOrigins
	results            *AppPublicServiceServerMockCreateAppResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockCreateAppParams contains parameters of the AppPublicServiceServer.CreateApp
type AppPublicServiceServerMockCreateAppParams struct {
	ctx context.Context
	cp1 *mm_appv1alpha.CreateAppRequest
}

// AppPublicServiceServerMockCreateAppParamPtrs contains pointers to parameters of the AppPublicServiceServer.CreateApp
type AppPublicServiceServerMockCreateAppParamPtrs struct {
	ctx *context.Context
	cp1 **mm_appv1alpha.CreateAppRequest
}

// AppPublicServiceServerMockCreateAppResults contains results of the AppPublicServiceServer.CreateApp
type AppPublicServiceServerMockCreateAppResults struct {
	cp2 *mm_appv1alpha.CreateAppResponse
	err error
}

// AppPublicServiceServerMockCreateAppOrigins contains origins of expectations of the AppPublicServiceServer.CreateApp
type AppPublicServiceServerMockCreateAppExpectationOrigins struct {
	origin    string
	originCtx string
	originCp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateApp *mAppPublicServiceServerMockCreateApp) Optional() *mAppPublicServiceServerMockCreateApp {
	mmCreateApp.optional = true
	return mmCreateApp
}

// Expect sets up expected params for AppPublicServiceServer.CreateApp
func (mmCreateApp *mAppPublicServiceServerMockCreateApp) Expect(ctx context.Context, cp1 *mm_appv1alpha.CreateAppRequest) *mAppPublicServiceServerMockCreateApp {
	if mmCreateApp.mock.funcCreateApp != nil {
		mmCreateApp.mock.t.Fatalf("AppPublicServiceServerMock.CreateApp mock is already set by Set")
	}

	if mmCreateApp.defaultExpectation == nil {
		mmCreateApp.defaultExpectation = &AppPublicServiceServerMockCreateAppExpectation{}
	}

	if mmCreateApp.defaultExpectation.paramPtrs != nil {
		mmCreateApp.mock.t.Fatalf("AppPublicServiceServerMock.CreateApp mock is already set by ExpectParams functions")
	}

	mmCreateApp.defaultExpectation.params = &AppPublicServiceServerMockCreateAppParams{ctx, cp1}
	mmCreateApp.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateApp.expectations {
		if minimock.Equal(e.params, mmCreateApp.defaultExpectation.params) {
			mmCreateApp.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateApp.defaultExpectation.params)
		}
	}

	return mmCreateApp
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.CreateApp
func (mmCreateApp *mAppPublicServiceServerMockCreateApp) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockCreateApp {
	if mmCreateApp.mock.funcCreateApp != nil {
		mmCreateApp.mock.t.Fatalf("AppPublicServiceServerMock.CreateApp mock is already set by Set")
	}

	if mmCreateApp.defaultExpectation == nil {
		mmCreateApp.defaultExpectation = &AppPublicServiceServerMockCreateAppExpectation{}
	}

	if mmCreateApp.defaultExpectation.params != nil {
		mmCreateApp.mock.t.Fatalf("AppPublicServiceServerMock.CreateApp mock is already set by Expect")
	}

	if mmCreateApp.defaultExpectation.paramPtrs == nil {
		mmCreateApp.defaultExpectation.paramPtrs = &AppPublicServiceServerMockCreateAppParamPtrs{}
	}
	mmCreateApp.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateApp.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateApp
}

// ExpectCp1Param2 sets up expected param cp1 for AppPublicServiceServer.CreateApp
func (mmCreateApp *mAppPublicServiceServerMockCreateApp) ExpectCp1Param2(cp1 *mm_appv1alpha.CreateAppRequest) *mAppPublicServiceServerMockCreateApp {
	if mmCreateApp.mock.funcCreateApp != nil {
		mmCreateApp.mock.t.Fatalf("AppPublicServiceServerMock.CreateApp mock is already set by Set")
	}

	if mmCreateApp.defaultExpectation == nil {
		mmCreateApp.defaultExpectation = &AppPublicServiceServerMockCreateAppExpectation{}
	}

	if mmCreateApp.defaultExpectation.params != nil {
		mmCreateApp.mock.t.Fatalf("AppPublicServiceServerMock.CreateApp mock is already set by Expect")
	}

	if mmCreateApp.defaultExpectation.paramPtrs == nil {
		mmCreateApp.defaultExpectation.paramPtrs = &AppPublicServiceServerMockCreateAppParamPtrs{}
	}
	mmCreateApp.defaultExpectation.paramPtrs.cp1 = &cp1
	mmCreateApp.defaultExpectation.expectationOrigins.originCp1 = minimock.CallerInfo(1)

	return mmCreateApp
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.CreateApp
func (mmCreateApp *mAppPublicServiceServerMockCreateApp) Inspect(f func(ctx context.Context, cp1 *mm_appv1alpha.CreateAppRequest)) *mAppPublicServiceServerMockCreateApp {
	if mmCreateApp.mock.inspectFuncCreateApp != nil {
		mmCreateApp.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.CreateApp")
	}

	mmCreateApp.mock.inspectFuncCreateApp = f

	return mmCreateApp
}

// Return sets up results that will be returned by AppPublicServiceServer.CreateApp
func (mmCreateApp *mAppPublicServiceServerMockCreateApp) Return(cp2 *mm_appv1alpha.CreateAppResponse, err error) *AppPublicServiceServerMock {
	if mmCreateApp.mock.funcCreateApp != nil {
		mmCreateApp.mock.t.Fatalf("AppPublicServiceServerMock.CreateApp mock is already set by Set")
	}

	if mmCreateApp.defaultExpectation == nil {
		mmCreateApp.defaultExpectation = &AppPublicServiceServerMockCreateAppExpectation{mock: mmCreateApp.mock}
	}
	mmCreateApp.defaultExpectation.results = &AppPublicServiceServerMockCreateAppResults{cp2, err}
	mmCreateApp.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateApp.mock
}

// Set uses given function f to mock the AppPublicServiceServer.CreateApp method
func (mmCreateApp *mAppPublicServiceServerMockCreateApp) Set(f func(ctx context.Context, cp1 *mm_appv1alpha.CreateAppRequest) (cp2 *mm_appv1alpha.CreateAppResponse, err error)) *AppPublicServiceServerMock {
	if mmCreateApp.defaultExpectation != nil {
		mmCreateApp.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.CreateApp method")
	}

	if len(mmCreateApp.expectations) > 0 {
		mmCreateApp.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.CreateApp method")
	}

	mmCreateApp.mock.funcCreateApp = f
	mmCreateApp.mock.funcCreateAppOrigin = minimock.CallerInfo(1)
	return mmCreateApp.mock
}

// When sets expectation for the AppPublicServiceServer.CreateApp which will trigger the result defined by the following
// Then helper
func (mmCreateApp *mAppPublicServiceServerMockCreateApp) When(ctx context.Context, cp1 *mm_appv1alpha.CreateAppRequest) *AppPublicServiceServerMockCreateAppExpectation {
	if mmCreateApp.mock.funcCreateApp != nil {
		mmCreateApp.mock.t.Fatalf("AppPublicServiceServerMock.CreateApp mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockCreateAppExpectation{
		mock:               mmCreateApp.mock,
		params:             &AppPublicServiceServerMockCreateAppParams{ctx, cp1},
		expectationOrigins: AppPublicServiceServerMockCreateAppExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateApp.expectations = append(mmCreateApp.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.CreateApp return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockCreateAppExpectation) Then(cp2 *mm_appv1alpha.CreateAppResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockCreateAppResults{cp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.CreateApp should be invoked
func (mmCreateApp *mAppPublicServiceServerMockCreateApp) Times(n uint64) *mAppPublicServiceServerMockCreateApp {
	if n == 0 {
		mmCreateApp.mock.t.Fatalf("Times of AppPublicServiceServerMock.CreateApp mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateApp.expectedInvocations, n)
	mmCreateApp.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateApp
}

func (mmCreateApp *mAppPublicServiceServerMockCreateApp) invocationsDone() bool {
	if len(mmCreateApp.expectations) == 0 && mmCreateApp.defaultExpectation == nil && mmCreateApp.mock.funcCreateApp == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateApp.mock.afterCreateAppCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateApp.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateApp implements mm_appv1alpha.AppPublicServiceServer
func (mmCreateApp *AppPublicServiceServerMock) CreateApp(ctx context.Context, cp1 *mm_appv1alpha.CreateAppRequest) (cp2 *mm_appv1alpha.CreateAppResponse, err error) {
	mm_atomic.AddUint64(&mmCreateApp.beforeCreateAppCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateApp.afterCreateAppCounter, 1)

	mmCreateApp.t.Helper()

	if mmCreateApp.inspectFuncCreateApp != nil {
		mmCreateApp.inspectFuncCreateApp(ctx, cp1)
	}

	mm_params := AppPublicServiceServerMockCreateAppParams{ctx, cp1}

	// Record call args
	mmCreateApp.CreateAppMock.mutex.Lock()
	mmCreateApp.CreateAppMock.callArgs = append(mmCreateApp.CreateAppMock.callArgs, &mm_params)
	mmCreateApp.CreateAppMock.mutex.Unlock()

	for _, e := range mmCreateApp.CreateAppMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp2, e.results.err
		}
	}

	if mmCreateApp.CreateAppMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateApp.CreateAppMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateApp.CreateAppMock.defaultExpectation.params
		mm_want_ptrs := mmCreateApp.CreateAppMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockCreateAppParams{ctx, cp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateApp.t.Errorf("AppPublicServiceServerMock.CreateApp got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateApp.CreateAppMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cp1 != nil && !minimock.Equal(*mm_want_ptrs.cp1, mm_got.cp1) {
				mmCreateApp.t.Errorf("AppPublicServiceServerMock.CreateApp got unexpected parameter cp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateApp.CreateAppMock.defaultExpectation.expectationOrigins.originCp1, *mm_want_ptrs.cp1, mm_got.cp1, minimock.Diff(*mm_want_ptrs.cp1, mm_got.cp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateApp.t.Errorf("AppPublicServiceServerMock.CreateApp got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateApp.CreateAppMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateApp.CreateAppMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateApp.t.Fatal("No results are set for the AppPublicServiceServerMock.CreateApp")
		}
		return (*mm_results).cp2, (*mm_results).err
	}
	if mmCreateApp.funcCreateApp != nil {
		return mmCreateApp.funcCreateApp(ctx, cp1)
	}
	mmCreateApp.t.Fatalf("Unexpected call to AppPublicServiceServerMock.CreateApp. %v %v", ctx, cp1)
	return
}

// CreateAppAfterCounter returns a count of finished AppPublicServiceServerMock.CreateApp invocations
func (mmCreateApp *AppPublicServiceServerMock) CreateAppAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateApp.afterCreateAppCounter)
}

// CreateAppBeforeCounter returns a count of AppPublicServiceServerMock.CreateApp invocations
func (mmCreateApp *AppPublicServiceServerMock) CreateAppBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateApp.beforeCreateAppCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.CreateApp.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateApp *mAppPublicServiceServerMockCreateApp) Calls() []*AppPublicServiceServerMockCreateAppParams {
	mmCreateApp.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockCreateAppParams, len(mmCreateApp.callArgs))
	copy(argCopy, mmCreateApp.callArgs)

	mmCreateApp.mutex.RUnlock()

	return argCopy
}

// MinimockCreateAppDone returns true if the count of the CreateApp invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockCreateAppDone() bool {
	if m.CreateAppMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateAppMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateAppMock.invocationsDone()
}

// MinimockCreateAppInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockCreateAppInspect() {
	for _, e := range m.CreateAppMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateApp at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateAppCounter := mm_atomic.LoadUint64(&m.afterCreateAppCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateAppMock.defaultExpectation != nil && afterCreateAppCounter < 1 {
		if m.CreateAppMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateApp at\n%s", m.CreateAppMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateApp at\n%s with params: %#v", m.CreateAppMock.defaultExpectation.expectationOrigins.origin, *m.CreateAppMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateApp != nil && afterCreateAppCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateApp at\n%s", m.funcCreateAppOrigin)
	}

	if !m.CreateAppMock.invocationsDone() && afterCreateAppCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.CreateApp at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateAppMock.expectedInvocations), m.CreateAppMock.expectedInvocationsOrigin, afterCreateAppCounter)
	}
}

type mAppPublicServiceServerMockCreateChat struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockCreateChatExpectation
	expectations       []*AppPublicServiceServerMockCreateChatExpectation

	callArgs []*AppPublicServiceServerMockCreateChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockCreateChatExpectation specifies expectation struct of the AppPublicServiceServer.CreateChat
type AppPublicServiceServerMockCreateChatExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockCreateChatParams
	paramPtrs          *AppPublicServiceServerMockCreateChatParamPtrs
	expectationOrigins AppPublicServiceServerMockCreateChatExpectationOrigins
	results            *AppPublicServiceServerMockCreateChatResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockCreateChatParams contains parameters of the AppPublicServiceServer.CreateChat
type AppPublicServiceServerMockCreateChatParams struct {
	ctx context.Context
	cp1 *mm_appv1alpha.CreateChatRequest
}

// AppPublicServiceServerMockCreateChatParamPtrs contains pointers to parameters of the AppPublicServiceServer.CreateChat
type AppPublicServiceServerMockCreateChatParamPtrs struct {
	ctx *context.Context
	cp1 **mm_appv1alpha.CreateChatRequest
}

// AppPublicServiceServerMockCreateChatResults contains results of the AppPublicServiceServer.CreateChat
type AppPublicServiceServerMockCreateChatResults struct {
	cp2 *mm_appv1alpha.CreateChatResponse
	err error
}

// AppPublicServiceServerMockCreateChatOrigins contains origins of expectations of the AppPublicServiceServer.CreateChat
type AppPublicServiceServerMockCreateChatExpectationOrigins struct {
	origin    string
	originCtx string
	originCp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateChat *mAppPublicServiceServerMockCreateChat) Optional() *mAppPublicServiceServerMockCreateChat {
	mmCreateChat.optional = true
	return mmCreateChat
}

// Expect sets up expected params for AppPublicServiceServer.CreateChat
func (mmCreateChat *mAppPublicServiceServerMockCreateChat) Expect(ctx context.Context, cp1 *mm_appv1alpha.CreateChatRequest) *mAppPublicServiceServerMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("AppPublicServiceServerMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &AppPublicServiceServerMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.paramPtrs != nil {
		mmCreateChat.mock.t.Fatalf("AppPublicServiceServerMock.CreateChat mock is already set by ExpectParams functions")
	}

	mmCreateChat.defaultExpectation.params = &AppPublicServiceServerMockCreateChatParams{ctx, cp1}
	mmCreateChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateChat.expectations {
		if minimock.Equal(e.params, mmCreateChat.defaultExpectation.params) {
			mmCreateChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateChat.defaultExpectation.params)
		}
	}

	return mmCreateChat
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.CreateChat
func (mmCreateChat *mAppPublicServiceServerMockCreateChat) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("AppPublicServiceServerMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &AppPublicServiceServerMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("AppPublicServiceServerMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &AppPublicServiceServerMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateChat
}

// ExpectCp1Param2 sets up expected param cp1 for AppPublicServiceServer.CreateChat
func (mmCreateChat *mAppPublicServiceServerMockCreateChat) ExpectCp1Param2(cp1 *mm_appv1alpha.CreateChatRequest) *mAppPublicServiceServerMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("AppPublicServiceServerMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &AppPublicServiceServerMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("AppPublicServiceServerMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &AppPublicServiceServerMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.cp1 = &cp1
	mmCreateChat.defaultExpectation.expectationOrigins.originCp1 = minimock.CallerInfo(1)

	return mmCreateChat
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.CreateChat
func (mmCreateChat *mAppPublicServiceServerMockCreateChat) Inspect(f func(ctx context.Context, cp1 *mm_appv1alpha.CreateChatRequest)) *mAppPublicServiceServerMockCreateChat {
	if mmCreateChat.mock.inspectFuncCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.CreateChat")
	}

	mmCreateChat.mock.inspectFuncCreateChat = f

	return mmCreateChat
}

// Return sets up results that will be returned by AppPublicServiceServer.CreateChat
func (mmCreateChat *mAppPublicServiceServerMockCreateChat) Return(cp2 *mm_appv1alpha.CreateChatResponse, err error) *AppPublicServiceServerMock {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("AppPublicServiceServerMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &AppPublicServiceServerMockCreateChatExpectation{mock: mmCreateChat.mock}
	}
	mmCreateChat.defaultExpectation.results = &AppPublicServiceServerMockCreateChatResults{cp2, err}
	mmCreateChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// Set uses given function f to mock the AppPublicServiceServer.CreateChat method
func (mmCreateChat *mAppPublicServiceServerMockCreateChat) Set(f func(ctx context.Context, cp1 *mm_appv1alpha.CreateChatRequest) (cp2 *mm_appv1alpha.CreateChatResponse, err error)) *AppPublicServiceServerMock {
	if mmCreateChat.defaultExpectation != nil {
		mmCreateChat.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.CreateChat method")
	}

	if len(mmCreateChat.expectations) > 0 {
		mmCreateChat.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.CreateChat method")
	}

	mmCreateChat.mock.funcCreateChat = f
	mmCreateChat.mock.funcCreateChatOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// When sets expectation for the AppPublicServiceServer.CreateChat which will trigger the result defined by the following
// Then helper
func (mmCreateChat *mAppPublicServiceServerMockCreateChat) When(ctx context.Context, cp1 *mm_appv1alpha.CreateChatRequest) *AppPublicServiceServerMockCreateChatExpectation {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("AppPublicServiceServerMock.CreateChat mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockCreateChatExpectation{
		mock:               mmCreateChat.mock,
		params:             &AppPublicServiceServerMockCreateChatParams{ctx, cp1},
		expectationOrigins: AppPublicServiceServerMockCreateChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateChat.expectations = append(mmCreateChat.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.CreateChat return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockCreateChatExpectation) Then(cp2 *mm_appv1alpha.CreateChatResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockCreateChatResults{cp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.CreateChat should be invoked
func (mmCreateChat *mAppPublicServiceServerMockCreateChat) Times(n uint64) *mAppPublicServiceServerMockCreateChat {
	if n == 0 {
		mmCreateChat.mock.t.Fatalf("Times of AppPublicServiceServerMock.CreateChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateChat.expectedInvocations, n)
	mmCreateChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateChat
}

func (mmCreateChat *mAppPublicServiceServerMockCreateChat) invocationsDone() bool {
	if len(mmCreateChat.expectations) == 0 && mmCreateChat.defaultExpectation == nil && mmCreateChat.mock.funcCreateChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateChat.mock.afterCreateChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateChat implements mm_appv1alpha.AppPublicServiceServer
func (mmCreateChat *AppPublicServiceServerMock) CreateChat(ctx context.Context, cp1 *mm_appv1alpha.CreateChatRequest) (cp2 *mm_appv1alpha.CreateChatResponse, err error) {
	mm_atomic.AddUint64(&mmCreateChat.beforeCreateChatCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateChat.afterCreateChatCounter, 1)

	mmCreateChat.t.Helper()

	if mmCreateChat.inspectFuncCreateChat != nil {
		mmCreateChat.inspectFuncCreateChat(ctx, cp1)
	}

	mm_params := AppPublicServiceServerMockCreateChatParams{ctx, cp1}

	// Record call args
	mmCreateChat.CreateChatMock.mutex.Lock()
	mmCreateChat.CreateChatMock.callArgs = append(mmCreateChat.CreateChatMock.callArgs, &mm_params)
	mmCreateChat.CreateChatMock.mutex.Unlock()

	for _, e := range mmCreateChat.CreateChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp2, e.results.err
		}
	}

	if mmCreateChat.CreateChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateChat.CreateChatMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateChat.CreateChatMock.defaultExpectation.params
		mm_want_ptrs := mmCreateChat.CreateChatMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockCreateChatParams{ctx, cp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateChat.t.Errorf("AppPublicServiceServerMock.CreateChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cp1 != nil && !minimock.Equal(*mm_want_ptrs.cp1, mm_got.cp1) {
				mmCreateChat.t.Errorf("AppPublicServiceServerMock.CreateChat got unexpected parameter cp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originCp1, *mm_want_ptrs.cp1, mm_got.cp1, minimock.Diff(*mm_want_ptrs.cp1, mm_got.cp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateChat.t.Errorf("AppPublicServiceServerMock.CreateChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateChat.CreateChatMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateChat.t.Fatal("No results are set for the AppPublicServiceServerMock.CreateChat")
		}
		return (*mm_results).cp2, (*mm_results).err
	}
	if mmCreateChat.funcCreateChat != nil {
		return mmCreateChat.funcCreateChat(ctx, cp1)
	}
	mmCreateChat.t.Fatalf("Unexpected call to AppPublicServiceServerMock.CreateChat. %v %v", ctx, cp1)
	return
}

// CreateChatAfterCounter returns a count of finished AppPublicServiceServerMock.CreateChat invocations
func (mmCreateChat *AppPublicServiceServerMock) CreateChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.afterCreateChatCounter)
}

// CreateChatBeforeCounter returns a count of AppPublicServiceServerMock.CreateChat invocations
func (mmCreateChat *AppPublicServiceServerMock) CreateChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.beforeCreateChatCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.CreateChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateChat *mAppPublicServiceServerMockCreateChat) Calls() []*AppPublicServiceServerMockCreateChatParams {
	mmCreateChat.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockCreateChatParams, len(mmCreateChat.callArgs))
	copy(argCopy, mmCreateChat.callArgs)

	mmCreateChat.mutex.RUnlock()

	return argCopy
}

// MinimockCreateChatDone returns true if the count of the CreateChat invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockCreateChatDone() bool {
	if m.CreateChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateChatMock.invocationsDone()
}

// MinimockCreateChatInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockCreateChatInspect() {
	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateChatCounter := mm_atomic.LoadUint64(&m.afterCreateChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateChatMock.defaultExpectation != nil && afterCreateChatCounter < 1 {
		if m.CreateChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateChat at\n%s", m.CreateChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateChat at\n%s with params: %#v", m.CreateChatMock.defaultExpectation.expectationOrigins.origin, *m.CreateChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateChat != nil && afterCreateChatCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateChat at\n%s", m.funcCreateChatOrigin)
	}

	if !m.CreateChatMock.invocationsDone() && afterCreateChatCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.CreateChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateChatMock.expectedInvocations), m.CreateChatMock.expectedInvocationsOrigin, afterCreateChatCounter)
	}
}

type mAppPublicServiceServerMockCreateConversation struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockCreateConversationExpectation
	expectations       []*AppPublicServiceServerMockCreateConversationExpectation

	callArgs []*AppPublicServiceServerMockCreateConversationParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockCreateConversationExpectation specifies expectation struct of the AppPublicServiceServer.CreateConversation
type AppPublicServiceServerMockCreateConversationExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockCreateConversationParams
	paramPtrs          *AppPublicServiceServerMockCreateConversationParamPtrs
	expectationOrigins AppPublicServiceServerMockCreateConversationExpectationOrigins
	results            *AppPublicServiceServerMockCreateConversationResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockCreateConversationParams contains parameters of the AppPublicServiceServer.CreateConversation
type AppPublicServiceServerMockCreateConversationParams struct {
	ctx context.Context
	cp1 *mm_appv1alpha.CreateConversationRequest
}

// AppPublicServiceServerMockCreateConversationParamPtrs contains pointers to parameters of the AppPublicServiceServer.CreateConversation
type AppPublicServiceServerMockCreateConversationParamPtrs struct {
	ctx *context.Context
	cp1 **mm_appv1alpha.CreateConversationRequest
}

// AppPublicServiceServerMockCreateConversationResults contains results of the AppPublicServiceServer.CreateConversation
type AppPublicServiceServerMockCreateConversationResults struct {
	cp2 *mm_appv1alpha.CreateConversationResponse
	err error
}

// AppPublicServiceServerMockCreateConversationOrigins contains origins of expectations of the AppPublicServiceServer.CreateConversation
type AppPublicServiceServerMockCreateConversationExpectationOrigins struct {
	origin    string
	originCtx string
	originCp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateConversation *mAppPublicServiceServerMockCreateConversation) Optional() *mAppPublicServiceServerMockCreateConversation {
	mmCreateConversation.optional = true
	return mmCreateConversation
}

// Expect sets up expected params for AppPublicServiceServer.CreateConversation
func (mmCreateConversation *mAppPublicServiceServerMockCreateConversation) Expect(ctx context.Context, cp1 *mm_appv1alpha.CreateConversationRequest) *mAppPublicServiceServerMockCreateConversation {
	if mmCreateConversation.mock.funcCreateConversation != nil {
		mmCreateConversation.mock.t.Fatalf("AppPublicServiceServerMock.CreateConversation mock is already set by Set")
	}

	if mmCreateConversation.defaultExpectation == nil {
		mmCreateConversation.defaultExpectation = &AppPublicServiceServerMockCreateConversationExpectation{}
	}

	if mmCreateConversation.defaultExpectation.paramPtrs != nil {
		mmCreateConversation.mock.t.Fatalf("AppPublicServiceServerMock.CreateConversation mock is already set by ExpectParams functions")
	}

	mmCreateConversation.defaultExpectation.params = &AppPublicServiceServerMockCreateConversationParams{ctx, cp1}
	mmCreateConversation.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateConversation.expectations {
		if minimock.Equal(e.params, mmCreateConversation.defaultExpectation.params) {
			mmCreateConversation.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateConversation.defaultExpectation.params)
		}
	}

	return mmCreateConversation
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.CreateConversation
func (mmCreateConversation *mAppPublicServiceServerMockCreateConversation) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockCreateConversation {
	if mmCreateConversation.mock.funcCreateConversation != nil {
		mmCreateConversation.mock.t.Fatalf("AppPublicServiceServerMock.CreateConversation mock is already set by Set")
	}

	if mmCreateConversation.defaultExpectation == nil {
		mmCreateConversation.defaultExpectation = &AppPublicServiceServerMockCreateConversationExpectation{}
	}

	if mmCreateConversation.defaultExpectation.params != nil {
		mmCreateConversation.mock.t.Fatalf("AppPublicServiceServerMock.CreateConversation mock is already set by Expect")
	}

	if mmCreateConversation.defaultExpectation.paramPtrs == nil {
		mmCreateConversation.defaultExpectation.paramPtrs = &AppPublicServiceServerMockCreateConversationParamPtrs{}
	}
	mmCreateConversation.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateConversation.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateConversation
}

// ExpectCp1Param2 sets up expected param cp1 for AppPublicServiceServer.CreateConversation
func (mmCreateConversation *mAppPublicServiceServerMockCreateConversation) ExpectCp1Param2(cp1 *mm_appv1alpha.CreateConversationRequest) *mAppPublicServiceServerMockCreateConversation {
	if mmCreateConversation.mock.funcCreateConversation != nil {
		mmCreateConversation.mock.t.Fatalf("AppPublicServiceServerMock.CreateConversation mock is already set by Set")
	}

	if mmCreateConversation.defaultExpectation == nil {
		mmCreateConversation.defaultExpectation = &AppPublicServiceServerMockCreateConversationExpectation{}
	}

	if mmCreateConversation.defaultExpectation.params != nil {
		mmCreateConversation.mock.t.Fatalf("AppPublicServiceServerMock.CreateConversation mock is already set by Expect")
	}

	if mmCreateConversation.defaultExpectation.paramPtrs == nil {
		mmCreateConversation.defaultExpectation.paramPtrs = &AppPublicServiceServerMockCreateConversationParamPtrs{}
	}
	mmCreateConversation.defaultExpectation.paramPtrs.cp1 = &cp1
	mmCreateConversation.defaultExpectation.expectationOrigins.originCp1 = minimock.CallerInfo(1)

	return mmCreateConversation
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.CreateConversation
func (mmCreateConversation *mAppPublicServiceServerMockCreateConversation) Inspect(f func(ctx context.Context, cp1 *mm_appv1alpha.CreateConversationRequest)) *mAppPublicServiceServerMockCreateConversation {
	if mmCreateConversation.mock.inspectFuncCreateConversation != nil {
		mmCreateConversation.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.CreateConversation")
	}

	mmCreateConversation.mock.inspectFuncCreateConversation = f

	return mmCreateConversation
}

// Return sets up results that will be returned by AppPublicServiceServer.CreateConversation
func (mmCreateConversation *mAppPublicServiceServerMockCreateConversation) Return(cp2 *mm_appv1alpha.CreateConversationResponse, err error) *AppPublicServiceServerMock {
	if mmCreateConversation.mock.funcCreateConversation != nil {
		mmCreateConversation.mock.t.Fatalf("AppPublicServiceServerMock.CreateConversation mock is already set by Set")
	}

	if mmCreateConversation.defaultExpectation == nil {
		mmCreateConversation.defaultExpectation = &AppPublicServiceServerMockCreateConversationExpectation{mock: mmCreateConversation.mock}
	}
	mmCreateConversation.defaultExpectation.results = &AppPublicServiceServerMockCreateConversationResults{cp2, err}
	mmCreateConversation.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateConversation.mock
}

// Set uses given function f to mock the AppPublicServiceServer.CreateConversation method
func (mmCreateConversation *mAppPublicServiceServerMockCreateConversation) Set(f func(ctx context.Context, cp1 *mm_appv1alpha.CreateConversationRequest) (cp2 *mm_appv1alpha.CreateConversationResponse, err error)) *AppPublicServiceServerMock {
	if mmCreateConversation.defaultExpectation != nil {
		mmCreateConversation.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.CreateConversation method")
	}

	if len(mmCreateConversation.expectations) > 0 {
		mmCreateConversation.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.CreateConversation method")
	}

	mmCreateConversation.mock.funcCreateConversation = f
	mmCreateConversation.mock.funcCreateConversationOrigin = minimock.CallerInfo(1)
	return mmCreateConversation.mock
}

// When sets expectation for the AppPublicServiceServer.CreateConversation which will trigger the result defined by the following
// Then helper
func (mmCreateConversation *mAppPublicServiceServerMockCreateConversation) When(ctx context.Context, cp1 *mm_appv1alpha.CreateConversationRequest) *AppPublicServiceServerMockCreateConversationExpectation {
	if mmCreateConversation.mock.funcCreateConversation != nil {
		mmCreateConversation.mock.t.Fatalf("AppPublicServiceServerMock.CreateConversation mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockCreateConversationExpectation{
		mock:               mmCreateConversation.mock,
		params:             &AppPublicServiceServerMockCreateConversationParams{ctx, cp1},
		expectationOrigins: AppPublicServiceServerMockCreateConversationExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateConversation.expectations = append(mmCreateConversation.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.CreateConversation return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockCreateConversationExpectation) Then(cp2 *mm_appv1alpha.CreateConversationResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockCreateConversationResults{cp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.CreateConversation should be invoked
func (mmCreateConversation *mAppPublicServiceServerMockCreateConversation) Times(n uint64) *mAppPublicServiceServerMockCreateConversation {
	if n == 0 {
		mmCreateConversation.mock.t.Fatalf("Times of AppPublicServiceServerMock.CreateConversation mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateConversation.expectedInvocations, n)
	mmCreateConversation.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateConversation
}

func (mmCreateConversation *mAppPublicServiceServerMockCreateConversation) invocationsDone() bool {
	if len(mmCreateConversation.expectations) == 0 && mmCreateConversation.defaultExpectation == nil && mmCreateConversation.mock.funcCreateConversation == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateConversation.mock.afterCreateConversationCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateConversation.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateConversation implements mm_appv1alpha.AppPublicServiceServer
func (mmCreateConversation *AppPublicServiceServerMock) CreateConversation(ctx context.Context, cp1 *mm_appv1alpha.CreateConversationRequest) (cp2 *mm_appv1alpha.CreateConversationResponse, err error) {
	mm_atomic.AddUint64(&mmCreateConversation.beforeCreateConversationCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateConversation.afterCreateConversationCounter, 1)

	mmCreateConversation.t.Helper()

	if mmCreateConversation.inspectFuncCreateConversation != nil {
		mmCreateConversation.inspectFuncCreateConversation(ctx, cp1)
	}

	mm_params := AppPublicServiceServerMockCreateConversationParams{ctx, cp1}

	// Record call args
	mmCreateConversation.CreateConversationMock.mutex.Lock()
	mmCreateConversation.CreateConversationMock.callArgs = append(mmCreateConversation.CreateConversationMock.callArgs, &mm_params)
	mmCreateConversation.CreateConversationMock.mutex.Unlock()

	for _, e := range mmCreateConversation.CreateConversationMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp2, e.results.err
		}
	}

	if mmCreateConversation.CreateConversationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateConversation.CreateConversationMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateConversation.CreateConversationMock.defaultExpectation.params
		mm_want_ptrs := mmCreateConversation.CreateConversationMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockCreateConversationParams{ctx, cp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateConversation.t.Errorf("AppPublicServiceServerMock.CreateConversation got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateConversation.CreateConversationMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cp1 != nil && !minimock.Equal(*mm_want_ptrs.cp1, mm_got.cp1) {
				mmCreateConversation.t.Errorf("AppPublicServiceServerMock.CreateConversation got unexpected parameter cp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateConversation.CreateConversationMock.defaultExpectation.expectationOrigins.originCp1, *mm_want_ptrs.cp1, mm_got.cp1, minimock.Diff(*mm_want_ptrs.cp1, mm_got.cp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateConversation.t.Errorf("AppPublicServiceServerMock.CreateConversation got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateConversation.CreateConversationMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateConversation.CreateConversationMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateConversation.t.Fatal("No results are set for the AppPublicServiceServerMock.CreateConversation")
		}
		return (*mm_results).cp2, (*mm_results).err
	}
	if mmCreateConversation.funcCreateConversation != nil {
		return mmCreateConversation.funcCreateConversation(ctx, cp1)
	}
	mmCreateConversation.t.Fatalf("Unexpected call to AppPublicServiceServerMock.CreateConversation. %v %v", ctx, cp1)
	return
}

// CreateConversationAfterCounter returns a count of finished AppPublicServiceServerMock.CreateConversation invocations
func (mmCreateConversation *AppPublicServiceServerMock) CreateConversationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateConversation.afterCreateConversationCounter)
}

// CreateConversationBeforeCounter returns a count of AppPublicServiceServerMock.CreateConversation invocations
func (mmCreateConversation *AppPublicServiceServerMock) CreateConversationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateConversation.beforeCreateConversationCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.CreateConversation.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateConversation *mAppPublicServiceServerMockCreateConversation) Calls() []*AppPublicServiceServerMockCreateConversationParams {
	mmCreateConversation.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockCreateConversationParams, len(mmCreateConversation.callArgs))
	copy(argCopy, mmCreateConversation.callArgs)

	mmCreateConversation.mutex.RUnlock()

	return argCopy
}

// MinimockCreateConversationDone returns true if the count of the CreateConversation invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockCreateConversationDone() bool {
	if m.CreateConversationMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateConversationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateConversationMock.invocationsDone()
}

// MinimockCreateConversationInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockCreateConversationInspect() {
	for _, e := range m.CreateConversationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateConversation at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateConversationCounter := mm_atomic.LoadUint64(&m.afterCreateConversationCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateConversationMock.defaultExpectation != nil && afterCreateConversationCounter < 1 {
		if m.CreateConversationMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateConversation at\n%s", m.CreateConversationMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateConversation at\n%s with params: %#v", m.CreateConversationMock.defaultExpectation.expectationOrigins.origin, *m.CreateConversationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateConversation != nil && afterCreateConversationCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateConversation at\n%s", m.funcCreateConversationOrigin)
	}

	if !m.CreateConversationMock.invocationsDone() && afterCreateConversationCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.CreateConversation at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateConversationMock.expectedInvocations), m.CreateConversationMock.expectedInvocationsOrigin, afterCreateConversationCounter)
	}
}

type mAppPublicServiceServerMockCreateMessage struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockCreateMessageExpectation
	expectations       []*AppPublicServiceServerMockCreateMessageExpectation

	callArgs []*AppPublicServiceServerMockCreateMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockCreateMessageExpectation specifies expectation struct of the AppPublicServiceServer.CreateMessage
type AppPublicServiceServerMockCreateMessageExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockCreateMessageParams
	paramPtrs          *AppPublicServiceServerMockCreateMessageParamPtrs
	expectationOrigins AppPublicServiceServerMockCreateMessageExpectationOrigins
	results            *AppPublicServiceServerMockCreateMessageResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockCreateMessageParams contains parameters of the AppPublicServiceServer.CreateMessage
type AppPublicServiceServerMockCreateMessageParams struct {
	ctx context.Context
	cp1 *mm_appv1alpha.CreateMessageRequest
}

// AppPublicServiceServerMockCreateMessageParamPtrs contains pointers to parameters of the AppPublicServiceServer.CreateMessage
type AppPublicServiceServerMockCreateMessageParamPtrs struct {
	ctx *context.Context
	cp1 **mm_appv1alpha.CreateMessageRequest
}

// AppPublicServiceServerMockCreateMessageResults contains results of the AppPublicServiceServer.CreateMessage
type AppPublicServiceServerMockCreateMessageResults struct {
	cp2 *mm_appv1alpha.CreateMessageResponse
	err error
}

// AppPublicServiceServerMockCreateMessageOrigins contains origins of expectations of the AppPublicServiceServer.CreateMessage
type AppPublicServiceServerMockCreateMessageExpectationOrigins struct {
	origin    string
	originCtx string
	originCp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateMessage *mAppPublicServiceServerMockCreateMessage) Optional() *mAppPublicServiceServerMockCreateMessage {
	mmCreateMessage.optional = true
	return mmCreateMessage
}

// Expect sets up expected params for AppPublicServiceServer.CreateMessage
func (mmCreateMessage *mAppPublicServiceServerMockCreateMessage) Expect(ctx context.Context, cp1 *mm_appv1alpha.CreateMessageRequest) *mAppPublicServiceServerMockCreateMessage {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("AppPublicServiceServerMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &AppPublicServiceServerMockCreateMessageExpectation{}
	}

	if mmCreateMessage.defaultExpectation.paramPtrs != nil {
		mmCreateMessage.mock.t.Fatalf("AppPublicServiceServerMock.CreateMessage mock is already set by ExpectParams functions")
	}

	mmCreateMessage.defaultExpectation.params = &AppPublicServiceServerMockCreateMessageParams{ctx, cp1}
	mmCreateMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateMessage.expectations {
		if minimock.Equal(e.params, mmCreateMessage.defaultExpectation.params) {
			mmCreateMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateMessage.defaultExpectation.params)
		}
	}

	return mmCreateMessage
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.CreateMessage
func (mmCreateMessage *mAppPublicServiceServerMockCreateMessage) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockCreateMessage {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("AppPublicServiceServerMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &AppPublicServiceServerMockCreateMessageExpectation{}
	}

	if mmCreateMessage.defaultExpectation.params != nil {
		mmCreateMessage.mock.t.Fatalf("AppPublicServiceServerMock.CreateMessage mock is already set by Expect")
	}

	if mmCreateMessage.defaultExpectation.paramPtrs == nil {
		mmCreateMessage.defaultExpectation.paramPtrs = &AppPublicServiceServerMockCreateMessageParamPtrs{}
	}
	mmCreateMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateMessage
}

// ExpectCp1Param2 sets up expected param cp1 for AppPublicServiceServer.CreateMessage
func (mmCreateMessage *mAppPublicServiceServerMockCreateMessage) ExpectCp1Param2(cp1 *mm_appv1alpha.CreateMessageRequest) *mAppPublicServiceServerMockCreateMessage {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("AppPublicServiceServerMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &AppPublicServiceServerMockCreateMessageExpectation{}
	}

	if mmCreateMessage.defaultExpectation.params != nil {
		mmCreateMessage.mock.t.Fatalf("AppPublicServiceServerMock.CreateMessage mock is already set by Expect")
	}

	if mmCreateMessage.defaultExpectation.paramPtrs == nil {
		mmCreateMessage.defaultExpectation.paramPtrs = &AppPublicServiceServerMockCreateMessageParamPtrs{}
	}
	mmCreateMessage.defaultExpectation.paramPtrs.cp1 = &cp1
	mmCreateMessage.defaultExpectation.expectationOrigins.originCp1 = minimock.CallerInfo(1)

	return mmCreateMessage
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.CreateMessage
func (mmCreateMessage *mAppPublicServiceServerMockCreateMessage) Inspect(f func(ctx context.Context, cp1 *mm_appv1alpha.CreateMessageRequest)) *mAppPublicServiceServerMockCreateMessage {
	if mmCreateMessage.mock.inspectFuncCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.CreateMessage")
	}

	mmCreateMessage.mock.inspectFuncCreateMessage = f

	return mmCreateMessage
}

// Return sets up results that will be returned by AppPublicServiceServer.CreateMessage
func (mmCreateMessage *mAppPublicServiceServerMockCreateMessage) Return(cp2 *mm_appv1alpha.CreateMessageResponse, err error) *AppPublicServiceServerMock {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("AppPublicServiceServerMock.CreateMessage mock is already set by Set")
	}

	if mmCreateMessage.defaultExpectation == nil {
		mmCreateMessage.defaultExpectation = &AppPublicServiceServerMockCreateMessageExpectation{mock: mmCreateMessage.mock}
	}
	mmCreateMessage.defaultExpectation.results = &AppPublicServiceServerMockCreateMessageResults{cp2, err}
	mmCreateMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateMessage.mock
}

// Set uses given function f to mock the AppPublicServiceServer.CreateMessage method
func (mmCreateMessage *mAppPublicServiceServerMockCreateMessage) Set(f func(ctx context.Context, cp1 *mm_appv1alpha.CreateMessageRequest) (cp2 *mm_appv1alpha.CreateMessageResponse, err error)) *AppPublicServiceServerMock {
	if mmCreateMessage.defaultExpectation != nil {
		mmCreateMessage.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.CreateMessage method")
	}

	if len(mmCreateMessage.expectations) > 0 {
		mmCreateMessage.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.CreateMessage method")
	}

	mmCreateMessage.mock.funcCreateMessage = f
	mmCreateMessage.mock.funcCreateMessageOrigin = minimock.CallerInfo(1)
	return mmCreateMessage.mock
}

// When sets expectation for the AppPublicServiceServer.CreateMessage which will trigger the result defined by the following
// Then helper
func (mmCreateMessage *mAppPublicServiceServerMockCreateMessage) When(ctx context.Context, cp1 *mm_appv1alpha.CreateMessageRequest) *AppPublicServiceServerMockCreateMessageExpectation {
	if mmCreateMessage.mock.funcCreateMessage != nil {
		mmCreateMessage.mock.t.Fatalf("AppPublicServiceServerMock.CreateMessage mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockCreateMessageExpectation{
		mock:               mmCreateMessage.mock,
		params:             &AppPublicServiceServerMockCreateMessageParams{ctx, cp1},
		expectationOrigins: AppPublicServiceServerMockCreateMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateMessage.expectations = append(mmCreateMessage.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.CreateMessage return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockCreateMessageExpectation) Then(cp2 *mm_appv1alpha.CreateMessageResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockCreateMessageResults{cp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.CreateMessage should be invoked
func (mmCreateMessage *mAppPublicServiceServerMockCreateMessage) Times(n uint64) *mAppPublicServiceServerMockCreateMessage {
	if n == 0 {
		mmCreateMessage.mock.t.Fatalf("Times of AppPublicServiceServerMock.CreateMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateMessage.expectedInvocations, n)
	mmCreateMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateMessage
}

func (mmCreateMessage *mAppPublicServiceServerMockCreateMessage) invocationsDone() bool {
	if len(mmCreateMessage.expectations) == 0 && mmCreateMessage.defaultExpectation == nil && mmCreateMessage.mock.funcCreateMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateMessage.mock.afterCreateMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateMessage implements mm_appv1alpha.AppPublicServiceServer
func (mmCreateMessage *AppPublicServiceServerMock) CreateMessage(ctx context.Context, cp1 *mm_appv1alpha.CreateMessageRequest) (cp2 *mm_appv1alpha.CreateMessageResponse, err error) {
	mm_atomic.AddUint64(&mmCreateMessage.beforeCreateMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateMessage.afterCreateMessageCounter, 1)

	mmCreateMessage.t.Helper()

	if mmCreateMessage.inspectFuncCreateMessage != nil {
		mmCreateMessage.inspectFuncCreateMessage(ctx, cp1)
	}

	mm_params := AppPublicServiceServerMockCreateMessageParams{ctx, cp1}

	// Record call args
	mmCreateMessage.CreateMessageMock.mutex.Lock()
	mmCreateMessage.CreateMessageMock.callArgs = append(mmCreateMessage.CreateMessageMock.callArgs, &mm_params)
	mmCreateMessage.CreateMessageMock.mutex.Unlock()

	for _, e := range mmCreateMessage.CreateMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp2, e.results.err
		}
	}

	if mmCreateMessage.CreateMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateMessage.CreateMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateMessage.CreateMessageMock.defaultExpectation.params
		mm_want_ptrs := mmCreateMessage.CreateMessageMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockCreateMessageParams{ctx, cp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateMessage.t.Errorf("AppPublicServiceServerMock.CreateMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateMessage.CreateMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cp1 != nil && !minimock.Equal(*mm_want_ptrs.cp1, mm_got.cp1) {
				mmCreateMessage.t.Errorf("AppPublicServiceServerMock.CreateMessage got unexpected parameter cp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateMessage.CreateMessageMock.defaultExpectation.expectationOrigins.originCp1, *mm_want_ptrs.cp1, mm_got.cp1, minimock.Diff(*mm_want_ptrs.cp1, mm_got.cp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateMessage.t.Errorf("AppPublicServiceServerMock.CreateMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateMessage.CreateMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateMessage.CreateMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateMessage.t.Fatal("No results are set for the AppPublicServiceServerMock.CreateMessage")
		}
		return (*mm_results).cp2, (*mm_results).err
	}
	if mmCreateMessage.funcCreateMessage != nil {
		return mmCreateMessage.funcCreateMessage(ctx, cp1)
	}
	mmCreateMessage.t.Fatalf("Unexpected call to AppPublicServiceServerMock.CreateMessage. %v %v", ctx, cp1)
	return
}

// CreateMessageAfterCounter returns a count of finished AppPublicServiceServerMock.CreateMessage invocations
func (mmCreateMessage *AppPublicServiceServerMock) CreateMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateMessage.afterCreateMessageCounter)
}

// CreateMessageBeforeCounter returns a count of AppPublicServiceServerMock.CreateMessage invocations
func (mmCreateMessage *AppPublicServiceServerMock) CreateMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateMessage.beforeCreateMessageCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.CreateMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateMessage *mAppPublicServiceServerMockCreateMessage) Calls() []*AppPublicServiceServerMockCreateMessageParams {
	mmCreateMessage.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockCreateMessageParams, len(mmCreateMessage.callArgs))
	copy(argCopy, mmCreateMessage.callArgs)

	mmCreateMessage.mutex.RUnlock()

	return argCopy
}

// MinimockCreateMessageDone returns true if the count of the CreateMessage invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockCreateMessageDone() bool {
	if m.CreateMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMessageMock.invocationsDone()
}

// MinimockCreateMessageInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockCreateMessageInspect() {
	for _, e := range m.CreateMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateMessageCounter := mm_atomic.LoadUint64(&m.afterCreateMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMessageMock.defaultExpectation != nil && afterCreateMessageCounter < 1 {
		if m.CreateMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateMessage at\n%s", m.CreateMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateMessage at\n%s with params: %#v", m.CreateMessageMock.defaultExpectation.expectationOrigins.origin, *m.CreateMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateMessage != nil && afterCreateMessageCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateMessage at\n%s", m.funcCreateMessageOrigin)
	}

	if !m.CreateMessageMock.invocationsDone() && afterCreateMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.CreateMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMessageMock.expectedInvocations), m.CreateMessageMock.expectedInvocationsOrigin, afterCreateMessageCounter)
	}
}

type mAppPublicServiceServerMockCreateTable struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockCreateTableExpectation
	expectations       []*AppPublicServiceServerMockCreateTableExpectation

	callArgs []*AppPublicServiceServerMockCreateTableParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockCreateTableExpectation specifies expectation struct of the AppPublicServiceServer.CreateTable
type AppPublicServiceServerMockCreateTableExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockCreateTableParams
	paramPtrs          *AppPublicServiceServerMockCreateTableParamPtrs
	expectationOrigins AppPublicServiceServerMockCreateTableExpectationOrigins
	results            *AppPublicServiceServerMockCreateTableResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockCreateTableParams contains parameters of the AppPublicServiceServer.CreateTable
type AppPublicServiceServerMockCreateTableParams struct {
	ctx context.Context
	cp1 *mm_appv1alpha.CreateTableRequest
}

// AppPublicServiceServerMockCreateTableParamPtrs contains pointers to parameters of the AppPublicServiceServer.CreateTable
type AppPublicServiceServerMockCreateTableParamPtrs struct {
	ctx *context.Context
	cp1 **mm_appv1alpha.CreateTableRequest
}

// AppPublicServiceServerMockCreateTableResults contains results of the AppPublicServiceServer.CreateTable
type AppPublicServiceServerMockCreateTableResults struct {
	cp2 *mm_appv1alpha.CreateTableResponse
	err error
}

// AppPublicServiceServerMockCreateTableOrigins contains origins of expectations of the AppPublicServiceServer.CreateTable
type AppPublicServiceServerMockCreateTableExpectationOrigins struct {
	origin    string
	originCtx string
	originCp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateTable *mAppPublicServiceServerMockCreateTable) Optional() *mAppPublicServiceServerMockCreateTable {
	mmCreateTable.optional = true
	return mmCreateTable
}

// Expect sets up expected params for AppPublicServiceServer.CreateTable
func (mmCreateTable *mAppPublicServiceServerMockCreateTable) Expect(ctx context.Context, cp1 *mm_appv1alpha.CreateTableRequest) *mAppPublicServiceServerMockCreateTable {
	if mmCreateTable.mock.funcCreateTable != nil {
		mmCreateTable.mock.t.Fatalf("AppPublicServiceServerMock.CreateTable mock is already set by Set")
	}

	if mmCreateTable.defaultExpectation == nil {
		mmCreateTable.defaultExpectation = &AppPublicServiceServerMockCreateTableExpectation{}
	}

	if mmCreateTable.defaultExpectation.paramPtrs != nil {
		mmCreateTable.mock.t.Fatalf("AppPublicServiceServerMock.CreateTable mock is already set by ExpectParams functions")
	}

	mmCreateTable.defaultExpectation.params = &AppPublicServiceServerMockCreateTableParams{ctx, cp1}
	mmCreateTable.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateTable.expectations {
		if minimock.Equal(e.params, mmCreateTable.defaultExpectation.params) {
			mmCreateTable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateTable.defaultExpectation.params)
		}
	}

	return mmCreateTable
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.CreateTable
func (mmCreateTable *mAppPublicServiceServerMockCreateTable) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockCreateTable {
	if mmCreateTable.mock.funcCreateTable != nil {
		mmCreateTable.mock.t.Fatalf("AppPublicServiceServerMock.CreateTable mock is already set by Set")
	}

	if mmCreateTable.defaultExpectation == nil {
		mmCreateTable.defaultExpectation = &AppPublicServiceServerMockCreateTableExpectation{}
	}

	if mmCreateTable.defaultExpectation.params != nil {
		mmCreateTable.mock.t.Fatalf("AppPublicServiceServerMock.CreateTable mock is already set by Expect")
	}

	if mmCreateTable.defaultExpectation.paramPtrs == nil {
		mmCreateTable.defaultExpectation.paramPtrs = &AppPublicServiceServerMockCreateTableParamPtrs{}
	}
	mmCreateTable.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateTable.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateTable
}

// ExpectCp1Param2 sets up expected param cp1 for AppPublicServiceServer.CreateTable
func (mmCreateTable *mAppPublicServiceServerMockCreateTable) ExpectCp1Param2(cp1 *mm_appv1alpha.CreateTableRequest) *mAppPublicServiceServerMockCreateTable {
	if mmCreateTable.mock.funcCreateTable != nil {
		mmCreateTable.mock.t.Fatalf("AppPublicServiceServerMock.CreateTable mock is already set by Set")
	}

	if mmCreateTable.defaultExpectation == nil {
		mmCreateTable.defaultExpectation = &AppPublicServiceServerMockCreateTableExpectation{}
	}

	if mmCreateTable.defaultExpectation.params != nil {
		mmCreateTable.mock.t.Fatalf("AppPublicServiceServerMock.CreateTable mock is already set by Expect")
	}

	if mmCreateTable.defaultExpectation.paramPtrs == nil {
		mmCreateTable.defaultExpectation.paramPtrs = &AppPublicServiceServerMockCreateTableParamPtrs{}
	}
	mmCreateTable.defaultExpectation.paramPtrs.cp1 = &cp1
	mmCreateTable.defaultExpectation.expectationOrigins.originCp1 = minimock.CallerInfo(1)

	return mmCreateTable
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.CreateTable
func (mmCreateTable *mAppPublicServiceServerMockCreateTable) Inspect(f func(ctx context.Context, cp1 *mm_appv1alpha.CreateTableRequest)) *mAppPublicServiceServerMockCreateTable {
	if mmCreateTable.mock.inspectFuncCreateTable != nil {
		mmCreateTable.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.CreateTable")
	}

	mmCreateTable.mock.inspectFuncCreateTable = f

	return mmCreateTable
}

// Return sets up results that will be returned by AppPublicServiceServer.CreateTable
func (mmCreateTable *mAppPublicServiceServerMockCreateTable) Return(cp2 *mm_appv1alpha.CreateTableResponse, err error) *AppPublicServiceServerMock {
	if mmCreateTable.mock.funcCreateTable != nil {
		mmCreateTable.mock.t.Fatalf("AppPublicServiceServerMock.CreateTable mock is already set by Set")
	}

	if mmCreateTable.defaultExpectation == nil {
		mmCreateTable.defaultExpectation = &AppPublicServiceServerMockCreateTableExpectation{mock: mmCreateTable.mock}
	}
	mmCreateTable.defaultExpectation.results = &AppPublicServiceServerMockCreateTableResults{cp2, err}
	mmCreateTable.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateTable.mock
}

// Set uses given function f to mock the AppPublicServiceServer.CreateTable method
func (mmCreateTable *mAppPublicServiceServerMockCreateTable) Set(f func(ctx context.Context, cp1 *mm_appv1alpha.CreateTableRequest) (cp2 *mm_appv1alpha.CreateTableResponse, err error)) *AppPublicServiceServerMock {
	if mmCreateTable.defaultExpectation != nil {
		mmCreateTable.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.CreateTable method")
	}

	if len(mmCreateTable.expectations) > 0 {
		mmCreateTable.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.CreateTable method")
	}

	mmCreateTable.mock.funcCreateTable = f
	mmCreateTable.mock.funcCreateTableOrigin = minimock.CallerInfo(1)
	return mmCreateTable.mock
}

// When sets expectation for the AppPublicServiceServer.CreateTable which will trigger the result defined by the following
// Then helper
func (mmCreateTable *mAppPublicServiceServerMockCreateTable) When(ctx context.Context, cp1 *mm_appv1alpha.CreateTableRequest) *AppPublicServiceServerMockCreateTableExpectation {
	if mmCreateTable.mock.funcCreateTable != nil {
		mmCreateTable.mock.t.Fatalf("AppPublicServiceServerMock.CreateTable mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockCreateTableExpectation{
		mock:               mmCreateTable.mock,
		params:             &AppPublicServiceServerMockCreateTableParams{ctx, cp1},
		expectationOrigins: AppPublicServiceServerMockCreateTableExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateTable.expectations = append(mmCreateTable.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.CreateTable return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockCreateTableExpectation) Then(cp2 *mm_appv1alpha.CreateTableResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockCreateTableResults{cp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.CreateTable should be invoked
func (mmCreateTable *mAppPublicServiceServerMockCreateTable) Times(n uint64) *mAppPublicServiceServerMockCreateTable {
	if n == 0 {
		mmCreateTable.mock.t.Fatalf("Times of AppPublicServiceServerMock.CreateTable mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateTable.expectedInvocations, n)
	mmCreateTable.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateTable
}

func (mmCreateTable *mAppPublicServiceServerMockCreateTable) invocationsDone() bool {
	if len(mmCreateTable.expectations) == 0 && mmCreateTable.defaultExpectation == nil && mmCreateTable.mock.funcCreateTable == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateTable.mock.afterCreateTableCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateTable.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateTable implements mm_appv1alpha.AppPublicServiceServer
func (mmCreateTable *AppPublicServiceServerMock) CreateTable(ctx context.Context, cp1 *mm_appv1alpha.CreateTableRequest) (cp2 *mm_appv1alpha.CreateTableResponse, err error) {
	mm_atomic.AddUint64(&mmCreateTable.beforeCreateTableCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateTable.afterCreateTableCounter, 1)

	mmCreateTable.t.Helper()

	if mmCreateTable.inspectFuncCreateTable != nil {
		mmCreateTable.inspectFuncCreateTable(ctx, cp1)
	}

	mm_params := AppPublicServiceServerMockCreateTableParams{ctx, cp1}

	// Record call args
	mmCreateTable.CreateTableMock.mutex.Lock()
	mmCreateTable.CreateTableMock.callArgs = append(mmCreateTable.CreateTableMock.callArgs, &mm_params)
	mmCreateTable.CreateTableMock.mutex.Unlock()

	for _, e := range mmCreateTable.CreateTableMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp2, e.results.err
		}
	}

	if mmCreateTable.CreateTableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateTable.CreateTableMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateTable.CreateTableMock.defaultExpectation.params
		mm_want_ptrs := mmCreateTable.CreateTableMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockCreateTableParams{ctx, cp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateTable.t.Errorf("AppPublicServiceServerMock.CreateTable got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateTable.CreateTableMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cp1 != nil && !minimock.Equal(*mm_want_ptrs.cp1, mm_got.cp1) {
				mmCreateTable.t.Errorf("AppPublicServiceServerMock.CreateTable got unexpected parameter cp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateTable.CreateTableMock.defaultExpectation.expectationOrigins.originCp1, *mm_want_ptrs.cp1, mm_got.cp1, minimock.Diff(*mm_want_ptrs.cp1, mm_got.cp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateTable.t.Errorf("AppPublicServiceServerMock.CreateTable got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateTable.CreateTableMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateTable.CreateTableMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateTable.t.Fatal("No results are set for the AppPublicServiceServerMock.CreateTable")
		}
		return (*mm_results).cp2, (*mm_results).err
	}
	if mmCreateTable.funcCreateTable != nil {
		return mmCreateTable.funcCreateTable(ctx, cp1)
	}
	mmCreateTable.t.Fatalf("Unexpected call to AppPublicServiceServerMock.CreateTable. %v %v", ctx, cp1)
	return
}

// CreateTableAfterCounter returns a count of finished AppPublicServiceServerMock.CreateTable invocations
func (mmCreateTable *AppPublicServiceServerMock) CreateTableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateTable.afterCreateTableCounter)
}

// CreateTableBeforeCounter returns a count of AppPublicServiceServerMock.CreateTable invocations
func (mmCreateTable *AppPublicServiceServerMock) CreateTableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateTable.beforeCreateTableCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.CreateTable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateTable *mAppPublicServiceServerMockCreateTable) Calls() []*AppPublicServiceServerMockCreateTableParams {
	mmCreateTable.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockCreateTableParams, len(mmCreateTable.callArgs))
	copy(argCopy, mmCreateTable.callArgs)

	mmCreateTable.mutex.RUnlock()

	return argCopy
}

// MinimockCreateTableDone returns true if the count of the CreateTable invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockCreateTableDone() bool {
	if m.CreateTableMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateTableMock.invocationsDone()
}

// MinimockCreateTableInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockCreateTableInspect() {
	for _, e := range m.CreateTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateTable at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateTableCounter := mm_atomic.LoadUint64(&m.afterCreateTableCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateTableMock.defaultExpectation != nil && afterCreateTableCounter < 1 {
		if m.CreateTableMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateTable at\n%s", m.CreateTableMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateTable at\n%s with params: %#v", m.CreateTableMock.defaultExpectation.expectationOrigins.origin, *m.CreateTableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateTable != nil && afterCreateTableCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.CreateTable at\n%s", m.funcCreateTableOrigin)
	}

	if !m.CreateTableMock.invocationsDone() && afterCreateTableCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.CreateTable at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateTableMock.expectedInvocations), m.CreateTableMock.expectedInvocationsOrigin, afterCreateTableCounter)
	}
}

type mAppPublicServiceServerMockDeleteAgent struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockDeleteAgentExpectation
	expectations       []*AppPublicServiceServerMockDeleteAgentExpectation

	callArgs []*AppPublicServiceServerMockDeleteAgentParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockDeleteAgentExpectation specifies expectation struct of the AppPublicServiceServer.DeleteAgent
type AppPublicServiceServerMockDeleteAgentExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockDeleteAgentParams
	paramPtrs          *AppPublicServiceServerMockDeleteAgentParamPtrs
	expectationOrigins AppPublicServiceServerMockDeleteAgentExpectationOrigins
	results            *AppPublicServiceServerMockDeleteAgentResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockDeleteAgentParams contains parameters of the AppPublicServiceServer.DeleteAgent
type AppPublicServiceServerMockDeleteAgentParams struct {
	ctx context.Context
	dp1 *mm_appv1alpha.DeleteAgentRequest
}

// AppPublicServiceServerMockDeleteAgentParamPtrs contains pointers to parameters of the AppPublicServiceServer.DeleteAgent
type AppPublicServiceServerMockDeleteAgentParamPtrs struct {
	ctx *context.Context
	dp1 **mm_appv1alpha.DeleteAgentRequest
}

// AppPublicServiceServerMockDeleteAgentResults contains results of the AppPublicServiceServer.DeleteAgent
type AppPublicServiceServerMockDeleteAgentResults struct {
	dp2 *mm_appv1alpha.DeleteAgentResponse
	err error
}

// AppPublicServiceServerMockDeleteAgentOrigins contains origins of expectations of the AppPublicServiceServer.DeleteAgent
type AppPublicServiceServerMockDeleteAgentExpectationOrigins struct {
	origin    string
	originCtx string
	originDp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteAgent *mAppPublicServiceServerMockDeleteAgent) Optional() *mAppPublicServiceServerMockDeleteAgent {
	mmDeleteAgent.optional = true
	return mmDeleteAgent
}

// Expect sets up expected params for AppPublicServiceServer.DeleteAgent
func (mmDeleteAgent *mAppPublicServiceServerMockDeleteAgent) Expect(ctx context.Context, dp1 *mm_appv1alpha.DeleteAgentRequest) *mAppPublicServiceServerMockDeleteAgent {
	if mmDeleteAgent.mock.funcDeleteAgent != nil {
		mmDeleteAgent.mock.t.Fatalf("AppPublicServiceServerMock.DeleteAgent mock is already set by Set")
	}

	if mmDeleteAgent.defaultExpectation == nil {
		mmDeleteAgent.defaultExpectation = &AppPublicServiceServerMockDeleteAgentExpectation{}
	}

	if mmDeleteAgent.defaultExpectation.paramPtrs != nil {
		mmDeleteAgent.mock.t.Fatalf("AppPublicServiceServerMock.DeleteAgent mock is already set by ExpectParams functions")
	}

	mmDeleteAgent.defaultExpectation.params = &AppPublicServiceServerMockDeleteAgentParams{ctx, dp1}
	mmDeleteAgent.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteAgent.expectations {
		if minimock.Equal(e.params, mmDeleteAgent.defaultExpectation.params) {
			mmDeleteAgent.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteAgent.defaultExpectation.params)
		}
	}

	return mmDeleteAgent
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.DeleteAgent
func (mmDeleteAgent *mAppPublicServiceServerMockDeleteAgent) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockDeleteAgent {
	if mmDeleteAgent.mock.funcDeleteAgent != nil {
		mmDeleteAgent.mock.t.Fatalf("AppPublicServiceServerMock.DeleteAgent mock is already set by Set")
	}

	if mmDeleteAgent.defaultExpectation == nil {
		mmDeleteAgent.defaultExpectation = &AppPublicServiceServerMockDeleteAgentExpectation{}
	}

	if mmDeleteAgent.defaultExpectation.params != nil {
		mmDeleteAgent.mock.t.Fatalf("AppPublicServiceServerMock.DeleteAgent mock is already set by Expect")
	}

	if mmDeleteAgent.defaultExpectation.paramPtrs == nil {
		mmDeleteAgent.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteAgentParamPtrs{}
	}
	mmDeleteAgent.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteAgent.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteAgent
}

// ExpectDp1Param2 sets up expected param dp1 for AppPublicServiceServer.DeleteAgent
func (mmDeleteAgent *mAppPublicServiceServerMockDeleteAgent) ExpectDp1Param2(dp1 *mm_appv1alpha.DeleteAgentRequest) *mAppPublicServiceServerMockDeleteAgent {
	if mmDeleteAgent.mock.funcDeleteAgent != nil {
		mmDeleteAgent.mock.t.Fatalf("AppPublicServiceServerMock.DeleteAgent mock is already set by Set")
	}

	if mmDeleteAgent.defaultExpectation == nil {
		mmDeleteAgent.defaultExpectation = &AppPublicServiceServerMockDeleteAgentExpectation{}
	}

	if mmDeleteAgent.defaultExpectation.params != nil {
		mmDeleteAgent.mock.t.Fatalf("AppPublicServiceServerMock.DeleteAgent mock is already set by Expect")
	}

	if mmDeleteAgent.defaultExpectation.paramPtrs == nil {
		mmDeleteAgent.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteAgentParamPtrs{}
	}
	mmDeleteAgent.defaultExpectation.paramPtrs.dp1 = &dp1
	mmDeleteAgent.defaultExpectation.expectationOrigins.originDp1 = minimock.CallerInfo(1)

	return mmDeleteAgent
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.DeleteAgent
func (mmDeleteAgent *mAppPublicServiceServerMockDeleteAgent) Inspect(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteAgentRequest)) *mAppPublicServiceServerMockDeleteAgent {
	if mmDeleteAgent.mock.inspectFuncDeleteAgent != nil {
		mmDeleteAgent.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.DeleteAgent")
	}

	mmDeleteAgent.mock.inspectFuncDeleteAgent = f

	return mmDeleteAgent
}

// Return sets up results that will be returned by AppPublicServiceServer.DeleteAgent
func (mmDeleteAgent *mAppPublicServiceServerMockDeleteAgent) Return(dp2 *mm_appv1alpha.DeleteAgentResponse, err error) *AppPublicServiceServerMock {
	if mmDeleteAgent.mock.funcDeleteAgent != nil {
		mmDeleteAgent.mock.t.Fatalf("AppPublicServiceServerMock.DeleteAgent mock is already set by Set")
	}

	if mmDeleteAgent.defaultExpectation == nil {
		mmDeleteAgent.defaultExpectation = &AppPublicServiceServerMockDeleteAgentExpectation{mock: mmDeleteAgent.mock}
	}
	mmDeleteAgent.defaultExpectation.results = &AppPublicServiceServerMockDeleteAgentResults{dp2, err}
	mmDeleteAgent.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteAgent.mock
}

// Set uses given function f to mock the AppPublicServiceServer.DeleteAgent method
func (mmDeleteAgent *mAppPublicServiceServerMockDeleteAgent) Set(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteAgentRequest) (dp2 *mm_appv1alpha.DeleteAgentResponse, err error)) *AppPublicServiceServerMock {
	if mmDeleteAgent.defaultExpectation != nil {
		mmDeleteAgent.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.DeleteAgent method")
	}

	if len(mmDeleteAgent.expectations) > 0 {
		mmDeleteAgent.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.DeleteAgent method")
	}

	mmDeleteAgent.mock.funcDeleteAgent = f
	mmDeleteAgent.mock.funcDeleteAgentOrigin = minimock.CallerInfo(1)
	return mmDeleteAgent.mock
}

// When sets expectation for the AppPublicServiceServer.DeleteAgent which will trigger the result defined by the following
// Then helper
func (mmDeleteAgent *mAppPublicServiceServerMockDeleteAgent) When(ctx context.Context, dp1 *mm_appv1alpha.DeleteAgentRequest) *AppPublicServiceServerMockDeleteAgentExpectation {
	if mmDeleteAgent.mock.funcDeleteAgent != nil {
		mmDeleteAgent.mock.t.Fatalf("AppPublicServiceServerMock.DeleteAgent mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockDeleteAgentExpectation{
		mock:               mmDeleteAgent.mock,
		params:             &AppPublicServiceServerMockDeleteAgentParams{ctx, dp1},
		expectationOrigins: AppPublicServiceServerMockDeleteAgentExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteAgent.expectations = append(mmDeleteAgent.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.DeleteAgent return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockDeleteAgentExpectation) Then(dp2 *mm_appv1alpha.DeleteAgentResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockDeleteAgentResults{dp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.DeleteAgent should be invoked
func (mmDeleteAgent *mAppPublicServiceServerMockDeleteAgent) Times(n uint64) *mAppPublicServiceServerMockDeleteAgent {
	if n == 0 {
		mmDeleteAgent.mock.t.Fatalf("Times of AppPublicServiceServerMock.DeleteAgent mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteAgent.expectedInvocations, n)
	mmDeleteAgent.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteAgent
}

func (mmDeleteAgent *mAppPublicServiceServerMockDeleteAgent) invocationsDone() bool {
	if len(mmDeleteAgent.expectations) == 0 && mmDeleteAgent.defaultExpectation == nil && mmDeleteAgent.mock.funcDeleteAgent == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteAgent.mock.afterDeleteAgentCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteAgent.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteAgent implements mm_appv1alpha.AppPublicServiceServer
func (mmDeleteAgent *AppPublicServiceServerMock) DeleteAgent(ctx context.Context, dp1 *mm_appv1alpha.DeleteAgentRequest) (dp2 *mm_appv1alpha.DeleteAgentResponse, err error) {
	mm_atomic.AddUint64(&mmDeleteAgent.beforeDeleteAgentCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteAgent.afterDeleteAgentCounter, 1)

	mmDeleteAgent.t.Helper()

	if mmDeleteAgent.inspectFuncDeleteAgent != nil {
		mmDeleteAgent.inspectFuncDeleteAgent(ctx, dp1)
	}

	mm_params := AppPublicServiceServerMockDeleteAgentParams{ctx, dp1}

	// Record call args
	mmDeleteAgent.DeleteAgentMock.mutex.Lock()
	mmDeleteAgent.DeleteAgentMock.callArgs = append(mmDeleteAgent.DeleteAgentMock.callArgs, &mm_params)
	mmDeleteAgent.DeleteAgentMock.mutex.Unlock()

	for _, e := range mmDeleteAgent.DeleteAgentMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp2, e.results.err
		}
	}

	if mmDeleteAgent.DeleteAgentMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteAgent.DeleteAgentMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteAgent.DeleteAgentMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteAgent.DeleteAgentMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockDeleteAgentParams{ctx, dp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteAgent.t.Errorf("AppPublicServiceServerMock.DeleteAgent got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteAgent.DeleteAgentMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.dp1 != nil && !minimock.Equal(*mm_want_ptrs.dp1, mm_got.dp1) {
				mmDeleteAgent.t.Errorf("AppPublicServiceServerMock.DeleteAgent got unexpected parameter dp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteAgent.DeleteAgentMock.defaultExpectation.expectationOrigins.originDp1, *mm_want_ptrs.dp1, mm_got.dp1, minimock.Diff(*mm_want_ptrs.dp1, mm_got.dp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteAgent.t.Errorf("AppPublicServiceServerMock.DeleteAgent got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteAgent.DeleteAgentMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteAgent.DeleteAgentMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteAgent.t.Fatal("No results are set for the AppPublicServiceServerMock.DeleteAgent")
		}
		return (*mm_results).dp2, (*mm_results).err
	}
	if mmDeleteAgent.funcDeleteAgent != nil {
		return mmDeleteAgent.funcDeleteAgent(ctx, dp1)
	}
	mmDeleteAgent.t.Fatalf("Unexpected call to AppPublicServiceServerMock.DeleteAgent. %v %v", ctx, dp1)
	return
}

// DeleteAgentAfterCounter returns a count of finished AppPublicServiceServerMock.DeleteAgent invocations
func (mmDeleteAgent *AppPublicServiceServerMock) DeleteAgentAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteAgent.afterDeleteAgentCounter)
}

// DeleteAgentBeforeCounter returns a count of AppPublicServiceServerMock.DeleteAgent invocations
func (mmDeleteAgent *AppPublicServiceServerMock) DeleteAgentBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteAgent.beforeDeleteAgentCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.DeleteAgent.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteAgent *mAppPublicServiceServerMockDeleteAgent) Calls() []*AppPublicServiceServerMockDeleteAgentParams {
	mmDeleteAgent.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockDeleteAgentParams, len(mmDeleteAgent.callArgs))
	copy(argCopy, mmDeleteAgent.callArgs)

	mmDeleteAgent.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteAgentDone returns true if the count of the DeleteAgent invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockDeleteAgentDone() bool {
	if m.DeleteAgentMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteAgentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteAgentMock.invocationsDone()
}

// MinimockDeleteAgentInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockDeleteAgentInspect() {
	for _, e := range m.DeleteAgentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteAgent at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteAgentCounter := mm_atomic.LoadUint64(&m.afterDeleteAgentCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteAgentMock.defaultExpectation != nil && afterDeleteAgentCounter < 1 {
		if m.DeleteAgentMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteAgent at\n%s", m.DeleteAgentMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteAgent at\n%s with params: %#v", m.DeleteAgentMock.defaultExpectation.expectationOrigins.origin, *m.DeleteAgentMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteAgent != nil && afterDeleteAgentCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteAgent at\n%s", m.funcDeleteAgentOrigin)
	}

	if !m.DeleteAgentMock.invocationsDone() && afterDeleteAgentCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.DeleteAgent at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteAgentMock.expectedInvocations), m.DeleteAgentMock.expectedInvocationsOrigin, afterDeleteAgentCounter)
	}
}

type mAppPublicServiceServerMockDeleteApp struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockDeleteAppExpectation
	expectations       []*AppPublicServiceServerMockDeleteAppExpectation

	callArgs []*AppPublicServiceServerMockDeleteAppParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockDeleteAppExpectation specifies expectation struct of the AppPublicServiceServer.DeleteApp
type AppPublicServiceServerMockDeleteAppExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockDeleteAppParams
	paramPtrs          *AppPublicServiceServerMockDeleteAppParamPtrs
	expectationOrigins AppPublicServiceServerMockDeleteAppExpectationOrigins
	results            *AppPublicServiceServerMockDeleteAppResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockDeleteAppParams contains parameters of the AppPublicServiceServer.DeleteApp
type AppPublicServiceServerMockDeleteAppParams struct {
	ctx context.Context
	dp1 *mm_appv1alpha.DeleteAppRequest
}

// AppPublicServiceServerMockDeleteAppParamPtrs contains pointers to parameters of the AppPublicServiceServer.DeleteApp
type AppPublicServiceServerMockDeleteAppParamPtrs struct {
	ctx *context.Context
	dp1 **mm_appv1alpha.DeleteAppRequest
}

// AppPublicServiceServerMockDeleteAppResults contains results of the AppPublicServiceServer.DeleteApp
type AppPublicServiceServerMockDeleteAppResults struct {
	dp2 *mm_appv1alpha.DeleteAppResponse
	err error
}

// AppPublicServiceServerMockDeleteAppOrigins contains origins of expectations of the AppPublicServiceServer.DeleteApp
type AppPublicServiceServerMockDeleteAppExpectationOrigins struct {
	origin    string
	originCtx string
	originDp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteApp *mAppPublicServiceServerMockDeleteApp) Optional() *mAppPublicServiceServerMockDeleteApp {
	mmDeleteApp.optional = true
	return mmDeleteApp
}

// Expect sets up expected params for AppPublicServiceServer.DeleteApp
func (mmDeleteApp *mAppPublicServiceServerMockDeleteApp) Expect(ctx context.Context, dp1 *mm_appv1alpha.DeleteAppRequest) *mAppPublicServiceServerMockDeleteApp {
	if mmDeleteApp.mock.funcDeleteApp != nil {
		mmDeleteApp.mock.t.Fatalf("AppPublicServiceServerMock.DeleteApp mock is already set by Set")
	}

	if mmDeleteApp.defaultExpectation == nil {
		mmDeleteApp.defaultExpectation = &AppPublicServiceServerMockDeleteAppExpectation{}
	}

	if mmDeleteApp.defaultExpectation.paramPtrs != nil {
		mmDeleteApp.mock.t.Fatalf("AppPublicServiceServerMock.DeleteApp mock is already set by ExpectParams functions")
	}

	mmDeleteApp.defaultExpectation.params = &AppPublicServiceServerMockDeleteAppParams{ctx, dp1}
	mmDeleteApp.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteApp.expectations {
		if minimock.Equal(e.params, mmDeleteApp.defaultExpectation.params) {
			mmDeleteApp.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteApp.defaultExpectation.params)
		}
	}

	return mmDeleteApp
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.DeleteApp
func (mmDeleteApp *mAppPublicServiceServerMockDeleteApp) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockDeleteApp {
	if mmDeleteApp.mock.funcDeleteApp != nil {
		mmDeleteApp.mock.t.Fatalf("AppPublicServiceServerMock.DeleteApp mock is already set by Set")
	}

	if mmDeleteApp.defaultExpectation == nil {
		mmDeleteApp.defaultExpectation = &AppPublicServiceServerMockDeleteAppExpectation{}
	}

	if mmDeleteApp.defaultExpectation.params != nil {
		mmDeleteApp.mock.t.Fatalf("AppPublicServiceServerMock.DeleteApp mock is already set by Expect")
	}

	if mmDeleteApp.defaultExpectation.paramPtrs == nil {
		mmDeleteApp.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteAppParamPtrs{}
	}
	mmDeleteApp.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteApp.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteApp
}

// ExpectDp1Param2 sets up expected param dp1 for AppPublicServiceServer.DeleteApp
func (mmDeleteApp *mAppPublicServiceServerMockDeleteApp) ExpectDp1Param2(dp1 *mm_appv1alpha.DeleteAppRequest) *mAppPublicServiceServerMockDeleteApp {
	if mmDeleteApp.mock.funcDeleteApp != nil {
		mmDeleteApp.mock.t.Fatalf("AppPublicServiceServerMock.DeleteApp mock is already set by Set")
	}

	if mmDeleteApp.defaultExpectation == nil {
		mmDeleteApp.defaultExpectation = &AppPublicServiceServerMockDeleteAppExpectation{}
	}

	if mmDeleteApp.defaultExpectation.params != nil {
		mmDeleteApp.mock.t.Fatalf("AppPublicServiceServerMock.DeleteApp mock is already set by Expect")
	}

	if mmDeleteApp.defaultExpectation.paramPtrs == nil {
		mmDeleteApp.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteAppParamPtrs{}
	}
	mmDeleteApp.defaultExpectation.paramPtrs.dp1 = &dp1
	mmDeleteApp.defaultExpectation.expectationOrigins.originDp1 = minimock.CallerInfo(1)

	return mmDeleteApp
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.DeleteApp
func (mmDeleteApp *mAppPublicServiceServerMockDeleteApp) Inspect(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteAppRequest)) *mAppPublicServiceServerMockDeleteApp {
	if mmDeleteApp.mock.inspectFuncDeleteApp != nil {
		mmDeleteApp.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.DeleteApp")
	}

	mmDeleteApp.mock.inspectFuncDeleteApp = f

	return mmDeleteApp
}

// Return sets up results that will be returned by AppPublicServiceServer.DeleteApp
func (mmDeleteApp *mAppPublicServiceServerMockDeleteApp) Return(dp2 *mm_appv1alpha.DeleteAppResponse, err error) *AppPublicServiceServerMock {
	if mmDeleteApp.mock.funcDeleteApp != nil {
		mmDeleteApp.mock.t.Fatalf("AppPublicServiceServerMock.DeleteApp mock is already set by Set")
	}

	if mmDeleteApp.defaultExpectation == nil {
		mmDeleteApp.defaultExpectation = &AppPublicServiceServerMockDeleteAppExpectation{mock: mmDeleteApp.mock}
	}
	mmDeleteApp.defaultExpectation.results = &AppPublicServiceServerMockDeleteAppResults{dp2, err}
	mmDeleteApp.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteApp.mock
}

// Set uses given function f to mock the AppPublicServiceServer.DeleteApp method
func (mmDeleteApp *mAppPublicServiceServerMockDeleteApp) Set(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteAppRequest) (dp2 *mm_appv1alpha.DeleteAppResponse, err error)) *AppPublicServiceServerMock {
	if mmDeleteApp.defaultExpectation != nil {
		mmDeleteApp.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.DeleteApp method")
	}

	if len(mmDeleteApp.expectations) > 0 {
		mmDeleteApp.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.DeleteApp method")
	}

	mmDeleteApp.mock.funcDeleteApp = f
	mmDeleteApp.mock.funcDeleteAppOrigin = minimock.CallerInfo(1)
	return mmDeleteApp.mock
}

// When sets expectation for the AppPublicServiceServer.DeleteApp which will trigger the result defined by the following
// Then helper
func (mmDeleteApp *mAppPublicServiceServerMockDeleteApp) When(ctx context.Context, dp1 *mm_appv1alpha.DeleteAppRequest) *AppPublicServiceServerMockDeleteAppExpectation {
	if mmDeleteApp.mock.funcDeleteApp != nil {
		mmDeleteApp.mock.t.Fatalf("AppPublicServiceServerMock.DeleteApp mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockDeleteAppExpectation{
		mock:               mmDeleteApp.mock,
		params:             &AppPublicServiceServerMockDeleteAppParams{ctx, dp1},
		expectationOrigins: AppPublicServiceServerMockDeleteAppExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteApp.expectations = append(mmDeleteApp.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.DeleteApp return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockDeleteAppExpectation) Then(dp2 *mm_appv1alpha.DeleteAppResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockDeleteAppResults{dp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.DeleteApp should be invoked
func (mmDeleteApp *mAppPublicServiceServerMockDeleteApp) Times(n uint64) *mAppPublicServiceServerMockDeleteApp {
	if n == 0 {
		mmDeleteApp.mock.t.Fatalf("Times of AppPublicServiceServerMock.DeleteApp mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteApp.expectedInvocations, n)
	mmDeleteApp.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteApp
}

func (mmDeleteApp *mAppPublicServiceServerMockDeleteApp) invocationsDone() bool {
	if len(mmDeleteApp.expectations) == 0 && mmDeleteApp.defaultExpectation == nil && mmDeleteApp.mock.funcDeleteApp == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteApp.mock.afterDeleteAppCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteApp.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteApp implements mm_appv1alpha.AppPublicServiceServer
func (mmDeleteApp *AppPublicServiceServerMock) DeleteApp(ctx context.Context, dp1 *mm_appv1alpha.DeleteAppRequest) (dp2 *mm_appv1alpha.DeleteAppResponse, err error) {
	mm_atomic.AddUint64(&mmDeleteApp.beforeDeleteAppCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteApp.afterDeleteAppCounter, 1)

	mmDeleteApp.t.Helper()

	if mmDeleteApp.inspectFuncDeleteApp != nil {
		mmDeleteApp.inspectFuncDeleteApp(ctx, dp1)
	}

	mm_params := AppPublicServiceServerMockDeleteAppParams{ctx, dp1}

	// Record call args
	mmDeleteApp.DeleteAppMock.mutex.Lock()
	mmDeleteApp.DeleteAppMock.callArgs = append(mmDeleteApp.DeleteAppMock.callArgs, &mm_params)
	mmDeleteApp.DeleteAppMock.mutex.Unlock()

	for _, e := range mmDeleteApp.DeleteAppMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp2, e.results.err
		}
	}

	if mmDeleteApp.DeleteAppMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteApp.DeleteAppMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteApp.DeleteAppMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteApp.DeleteAppMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockDeleteAppParams{ctx, dp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteApp.t.Errorf("AppPublicServiceServerMock.DeleteApp got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteApp.DeleteAppMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.dp1 != nil && !minimock.Equal(*mm_want_ptrs.dp1, mm_got.dp1) {
				mmDeleteApp.t.Errorf("AppPublicServiceServerMock.DeleteApp got unexpected parameter dp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteApp.DeleteAppMock.defaultExpectation.expectationOrigins.originDp1, *mm_want_ptrs.dp1, mm_got.dp1, minimock.Diff(*mm_want_ptrs.dp1, mm_got.dp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteApp.t.Errorf("AppPublicServiceServerMock.DeleteApp got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteApp.DeleteAppMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteApp.DeleteAppMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteApp.t.Fatal("No results are set for the AppPublicServiceServerMock.DeleteApp")
		}
		return (*mm_results).dp2, (*mm_results).err
	}
	if mmDeleteApp.funcDeleteApp != nil {
		return mmDeleteApp.funcDeleteApp(ctx, dp1)
	}
	mmDeleteApp.t.Fatalf("Unexpected call to AppPublicServiceServerMock.DeleteApp. %v %v", ctx, dp1)
	return
}

// DeleteAppAfterCounter returns a count of finished AppPublicServiceServerMock.DeleteApp invocations
func (mmDeleteApp *AppPublicServiceServerMock) DeleteAppAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteApp.afterDeleteAppCounter)
}

// DeleteAppBeforeCounter returns a count of AppPublicServiceServerMock.DeleteApp invocations
func (mmDeleteApp *AppPublicServiceServerMock) DeleteAppBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteApp.beforeDeleteAppCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.DeleteApp.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteApp *mAppPublicServiceServerMockDeleteApp) Calls() []*AppPublicServiceServerMockDeleteAppParams {
	mmDeleteApp.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockDeleteAppParams, len(mmDeleteApp.callArgs))
	copy(argCopy, mmDeleteApp.callArgs)

	mmDeleteApp.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteAppDone returns true if the count of the DeleteApp invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockDeleteAppDone() bool {
	if m.DeleteAppMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteAppMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteAppMock.invocationsDone()
}

// MinimockDeleteAppInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockDeleteAppInspect() {
	for _, e := range m.DeleteAppMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteApp at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteAppCounter := mm_atomic.LoadUint64(&m.afterDeleteAppCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteAppMock.defaultExpectation != nil && afterDeleteAppCounter < 1 {
		if m.DeleteAppMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteApp at\n%s", m.DeleteAppMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteApp at\n%s with params: %#v", m.DeleteAppMock.defaultExpectation.expectationOrigins.origin, *m.DeleteAppMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteApp != nil && afterDeleteAppCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteApp at\n%s", m.funcDeleteAppOrigin)
	}

	if !m.DeleteAppMock.invocationsDone() && afterDeleteAppCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.DeleteApp at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteAppMock.expectedInvocations), m.DeleteAppMock.expectedInvocationsOrigin, afterDeleteAppCounter)
	}
}

type mAppPublicServiceServerMockDeleteChat struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockDeleteChatExpectation
	expectations       []*AppPublicServiceServerMockDeleteChatExpectation

	callArgs []*AppPublicServiceServerMockDeleteChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockDeleteChatExpectation specifies expectation struct of the AppPublicServiceServer.DeleteChat
type AppPublicServiceServerMockDeleteChatExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockDeleteChatParams
	paramPtrs          *AppPublicServiceServerMockDeleteChatParamPtrs
	expectationOrigins AppPublicServiceServerMockDeleteChatExpectationOrigins
	results            *AppPublicServiceServerMockDeleteChatResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockDeleteChatParams contains parameters of the AppPublicServiceServer.DeleteChat
type AppPublicServiceServerMockDeleteChatParams struct {
	ctx context.Context
	dp1 *mm_appv1alpha.DeleteChatRequest
}

// AppPublicServiceServerMockDeleteChatParamPtrs contains pointers to parameters of the AppPublicServiceServer.DeleteChat
type AppPublicServiceServerMockDeleteChatParamPtrs struct {
	ctx *context.Context
	dp1 **mm_appv1alpha.DeleteChatRequest
}

// AppPublicServiceServerMockDeleteChatResults contains results of the AppPublicServiceServer.DeleteChat
type AppPublicServiceServerMockDeleteChatResults struct {
	dp2 *mm_appv1alpha.DeleteChatResponse
	err error
}

// AppPublicServiceServerMockDeleteChatOrigins contains origins of expectations of the AppPublicServiceServer.DeleteChat
type AppPublicServiceServerMockDeleteChatExpectationOrigins struct {
	origin    string
	originCtx string
	originDp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteChat *mAppPublicServiceServerMockDeleteChat) Optional() *mAppPublicServiceServerMockDeleteChat {
	mmDeleteChat.optional = true
	return mmDeleteChat
}

// Expect sets up expected params for AppPublicServiceServer.DeleteChat
func (mmDeleteChat *mAppPublicServiceServerMockDeleteChat) Expect(ctx context.Context, dp1 *mm_appv1alpha.DeleteChatRequest) *mAppPublicServiceServerMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("AppPublicServiceServerMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &AppPublicServiceServerMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.paramPtrs != nil {
		mmDeleteChat.mock.t.Fatalf("AppPublicServiceServerMock.DeleteChat mock is already set by ExpectParams functions")
	}

	mmDeleteChat.defaultExpectation.params = &AppPublicServiceServerMockDeleteChatParams{ctx, dp1}
	mmDeleteChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteChat.expectations {
		if minimock.Equal(e.params, mmDeleteChat.defaultExpectation.params) {
			mmDeleteChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteChat.defaultExpectation.params)
		}
	}

	return mmDeleteChat
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.DeleteChat
func (mmDeleteChat *mAppPublicServiceServerMockDeleteChat) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("AppPublicServiceServerMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &AppPublicServiceServerMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("AppPublicServiceServerMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteChat
}

// ExpectDp1Param2 sets up expected param dp1 for AppPublicServiceServer.DeleteChat
func (mmDeleteChat *mAppPublicServiceServerMockDeleteChat) ExpectDp1Param2(dp1 *mm_appv1alpha.DeleteChatRequest) *mAppPublicServiceServerMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("AppPublicServiceServerMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &AppPublicServiceServerMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("AppPublicServiceServerMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.dp1 = &dp1
	mmDeleteChat.defaultExpectation.expectationOrigins.originDp1 = minimock.CallerInfo(1)

	return mmDeleteChat
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.DeleteChat
func (mmDeleteChat *mAppPublicServiceServerMockDeleteChat) Inspect(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteChatRequest)) *mAppPublicServiceServerMockDeleteChat {
	if mmDeleteChat.mock.inspectFuncDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.DeleteChat")
	}

	mmDeleteChat.mock.inspectFuncDeleteChat = f

	return mmDeleteChat
}

// Return sets up results that will be returned by AppPublicServiceServer.DeleteChat
func (mmDeleteChat *mAppPublicServiceServerMockDeleteChat) Return(dp2 *mm_appv1alpha.DeleteChatResponse, err error) *AppPublicServiceServerMock {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("AppPublicServiceServerMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &AppPublicServiceServerMockDeleteChatExpectation{mock: mmDeleteChat.mock}
	}
	mmDeleteChat.defaultExpectation.results = &AppPublicServiceServerMockDeleteChatResults{dp2, err}
	mmDeleteChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// Set uses given function f to mock the AppPublicServiceServer.DeleteChat method
func (mmDeleteChat *mAppPublicServiceServerMockDeleteChat) Set(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteChatRequest) (dp2 *mm_appv1alpha.DeleteChatResponse, err error)) *AppPublicServiceServerMock {
	if mmDeleteChat.defaultExpectation != nil {
		mmDeleteChat.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.DeleteChat method")
	}

	if len(mmDeleteChat.expectations) > 0 {
		mmDeleteChat.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.DeleteChat method")
	}

	mmDeleteChat.mock.funcDeleteChat = f
	mmDeleteChat.mock.funcDeleteChatOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// When sets expectation for the AppPublicServiceServer.DeleteChat which will trigger the result defined by the following
// Then helper
func (mmDeleteChat *mAppPublicServiceServerMockDeleteChat) When(ctx context.Context, dp1 *mm_appv1alpha.DeleteChatRequest) *AppPublicServiceServerMockDeleteChatExpectation {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("AppPublicServiceServerMock.DeleteChat mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockDeleteChatExpectation{
		mock:               mmDeleteChat.mock,
		params:             &AppPublicServiceServerMockDeleteChatParams{ctx, dp1},
		expectationOrigins: AppPublicServiceServerMockDeleteChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteChat.expectations = append(mmDeleteChat.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.DeleteChat return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockDeleteChatExpectation) Then(dp2 *mm_appv1alpha.DeleteChatResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockDeleteChatResults{dp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.DeleteChat should be invoked
func (mmDeleteChat *mAppPublicServiceServerMockDeleteChat) Times(n uint64) *mAppPublicServiceServerMockDeleteChat {
	if n == 0 {
		mmDeleteChat.mock.t.Fatalf("Times of AppPublicServiceServerMock.DeleteChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteChat.expectedInvocations, n)
	mmDeleteChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteChat
}

func (mmDeleteChat *mAppPublicServiceServerMockDeleteChat) invocationsDone() bool {
	if len(mmDeleteChat.expectations) == 0 && mmDeleteChat.defaultExpectation == nil && mmDeleteChat.mock.funcDeleteChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteChat.mock.afterDeleteChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteChat implements mm_appv1alpha.AppPublicServiceServer
func (mmDeleteChat *AppPublicServiceServerMock) DeleteChat(ctx context.Context, dp1 *mm_appv1alpha.DeleteChatRequest) (dp2 *mm_appv1alpha.DeleteChatResponse, err error) {
	mm_atomic.AddUint64(&mmDeleteChat.beforeDeleteChatCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteChat.afterDeleteChatCounter, 1)

	mmDeleteChat.t.Helper()

	if mmDeleteChat.inspectFuncDeleteChat != nil {
		mmDeleteChat.inspectFuncDeleteChat(ctx, dp1)
	}

	mm_params := AppPublicServiceServerMockDeleteChatParams{ctx, dp1}

	// Record call args
	mmDeleteChat.DeleteChatMock.mutex.Lock()
	mmDeleteChat.DeleteChatMock.callArgs = append(mmDeleteChat.DeleteChatMock.callArgs, &mm_params)
	mmDeleteChat.DeleteChatMock.mutex.Unlock()

	for _, e := range mmDeleteChat.DeleteChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp2, e.results.err
		}
	}

	if mmDeleteChat.DeleteChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteChat.DeleteChatMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteChat.DeleteChatMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteChat.DeleteChatMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockDeleteChatParams{ctx, dp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteChat.t.Errorf("AppPublicServiceServerMock.DeleteChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.dp1 != nil && !minimock.Equal(*mm_want_ptrs.dp1, mm_got.dp1) {
				mmDeleteChat.t.Errorf("AppPublicServiceServerMock.DeleteChat got unexpected parameter dp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originDp1, *mm_want_ptrs.dp1, mm_got.dp1, minimock.Diff(*mm_want_ptrs.dp1, mm_got.dp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteChat.t.Errorf("AppPublicServiceServerMock.DeleteChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteChat.DeleteChatMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteChat.t.Fatal("No results are set for the AppPublicServiceServerMock.DeleteChat")
		}
		return (*mm_results).dp2, (*mm_results).err
	}
	if mmDeleteChat.funcDeleteChat != nil {
		return mmDeleteChat.funcDeleteChat(ctx, dp1)
	}
	mmDeleteChat.t.Fatalf("Unexpected call to AppPublicServiceServerMock.DeleteChat. %v %v", ctx, dp1)
	return
}

// DeleteChatAfterCounter returns a count of finished AppPublicServiceServerMock.DeleteChat invocations
func (mmDeleteChat *AppPublicServiceServerMock) DeleteChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.afterDeleteChatCounter)
}

// DeleteChatBeforeCounter returns a count of AppPublicServiceServerMock.DeleteChat invocations
func (mmDeleteChat *AppPublicServiceServerMock) DeleteChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.beforeDeleteChatCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.DeleteChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteChat *mAppPublicServiceServerMockDeleteChat) Calls() []*AppPublicServiceServerMockDeleteChatParams {
	mmDeleteChat.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockDeleteChatParams, len(mmDeleteChat.callArgs))
	copy(argCopy, mmDeleteChat.callArgs)

	mmDeleteChat.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteChatDone returns true if the count of the DeleteChat invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockDeleteChatDone() bool {
	if m.DeleteChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteChatMock.invocationsDone()
}

// MinimockDeleteChatInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockDeleteChatInspect() {
	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteChatCounter := mm_atomic.LoadUint64(&m.afterDeleteChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteChatMock.defaultExpectation != nil && afterDeleteChatCounter < 1 {
		if m.DeleteChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteChat at\n%s", m.DeleteChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteChat at\n%s with params: %#v", m.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *m.DeleteChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteChat != nil && afterDeleteChatCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteChat at\n%s", m.funcDeleteChatOrigin)
	}

	if !m.DeleteChatMock.invocationsDone() && afterDeleteChatCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.DeleteChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteChatMock.expectedInvocations), m.DeleteChatMock.expectedInvocationsOrigin, afterDeleteChatCounter)
	}
}

type mAppPublicServiceServerMockDeleteConversation struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockDeleteConversationExpectation
	expectations       []*AppPublicServiceServerMockDeleteConversationExpectation

	callArgs []*AppPublicServiceServerMockDeleteConversationParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockDeleteConversationExpectation specifies expectation struct of the AppPublicServiceServer.DeleteConversation
type AppPublicServiceServerMockDeleteConversationExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockDeleteConversationParams
	paramPtrs          *AppPublicServiceServerMockDeleteConversationParamPtrs
	expectationOrigins AppPublicServiceServerMockDeleteConversationExpectationOrigins
	results            *AppPublicServiceServerMockDeleteConversationResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockDeleteConversationParams contains parameters of the AppPublicServiceServer.DeleteConversation
type AppPublicServiceServerMockDeleteConversationParams struct {
	ctx context.Context
	dp1 *mm_appv1alpha.DeleteConversationRequest
}

// AppPublicServiceServerMockDeleteConversationParamPtrs contains pointers to parameters of the AppPublicServiceServer.DeleteConversation
type AppPublicServiceServerMockDeleteConversationParamPtrs struct {
	ctx *context.Context
	dp1 **mm_appv1alpha.DeleteConversationRequest
}

// AppPublicServiceServerMockDeleteConversationResults contains results of the AppPublicServiceServer.DeleteConversation
type AppPublicServiceServerMockDeleteConversationResults struct {
	dp2 *mm_appv1alpha.DeleteConversationResponse
	err error
}

// AppPublicServiceServerMockDeleteConversationOrigins contains origins of expectations of the AppPublicServiceServer.DeleteConversation
type AppPublicServiceServerMockDeleteConversationExpectationOrigins struct {
	origin    string
	originCtx string
	originDp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteConversation *mAppPublicServiceServerMockDeleteConversation) Optional() *mAppPublicServiceServerMockDeleteConversation {
	mmDeleteConversation.optional = true
	return mmDeleteConversation
}

// Expect sets up expected params for AppPublicServiceServer.DeleteConversation
func (mmDeleteConversation *mAppPublicServiceServerMockDeleteConversation) Expect(ctx context.Context, dp1 *mm_appv1alpha.DeleteConversationRequest) *mAppPublicServiceServerMockDeleteConversation {
	if mmDeleteConversation.mock.funcDeleteConversation != nil {
		mmDeleteConversation.mock.t.Fatalf("AppPublicServiceServerMock.DeleteConversation mock is already set by Set")
	}

	if mmDeleteConversation.defaultExpectation == nil {
		mmDeleteConversation.defaultExpectation = &AppPublicServiceServerMockDeleteConversationExpectation{}
	}

	if mmDeleteConversation.defaultExpectation.paramPtrs != nil {
		mmDeleteConversation.mock.t.Fatalf("AppPublicServiceServerMock.DeleteConversation mock is already set by ExpectParams functions")
	}

	mmDeleteConversation.defaultExpectation.params = &AppPublicServiceServerMockDeleteConversationParams{ctx, dp1}
	mmDeleteConversation.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteConversation.expectations {
		if minimock.Equal(e.params, mmDeleteConversation.defaultExpectation.params) {
			mmDeleteConversation.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteConversation.defaultExpectation.params)
		}
	}

	return mmDeleteConversation
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.DeleteConversation
func (mmDeleteConversation *mAppPublicServiceServerMockDeleteConversation) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockDeleteConversation {
	if mmDeleteConversation.mock.funcDeleteConversation != nil {
		mmDeleteConversation.mock.t.Fatalf("AppPublicServiceServerMock.DeleteConversation mock is already set by Set")
	}

	if mmDeleteConversation.defaultExpectation == nil {
		mmDeleteConversation.defaultExpectation = &AppPublicServiceServerMockDeleteConversationExpectation{}
	}

	if mmDeleteConversation.defaultExpectation.params != nil {
		mmDeleteConversation.mock.t.Fatalf("AppPublicServiceServerMock.DeleteConversation mock is already set by Expect")
	}

	if mmDeleteConversation.defaultExpectation.paramPtrs == nil {
		mmDeleteConversation.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteConversationParamPtrs{}
	}
	mmDeleteConversation.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteConversation.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteConversation
}

// ExpectDp1Param2 sets up expected param dp1 for AppPublicServiceServer.DeleteConversation
func (mmDeleteConversation *mAppPublicServiceServerMockDeleteConversation) ExpectDp1Param2(dp1 *mm_appv1alpha.DeleteConversationRequest) *mAppPublicServiceServerMockDeleteConversation {
	if mmDeleteConversation.mock.funcDeleteConversation != nil {
		mmDeleteConversation.mock.t.Fatalf("AppPublicServiceServerMock.DeleteConversation mock is already set by Set")
	}

	if mmDeleteConversation.defaultExpectation == nil {
		mmDeleteConversation.defaultExpectation = &AppPublicServiceServerMockDeleteConversationExpectation{}
	}

	if mmDeleteConversation.defaultExpectation.params != nil {
		mmDeleteConversation.mock.t.Fatalf("AppPublicServiceServerMock.DeleteConversation mock is already set by Expect")
	}

	if mmDeleteConversation.defaultExpectation.paramPtrs == nil {
		mmDeleteConversation.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteConversationParamPtrs{}
	}
	mmDeleteConversation.defaultExpectation.paramPtrs.dp1 = &dp1
	mmDeleteConversation.defaultExpectation.expectationOrigins.originDp1 = minimock.CallerInfo(1)

	return mmDeleteConversation
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.DeleteConversation
func (mmDeleteConversation *mAppPublicServiceServerMockDeleteConversation) Inspect(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteConversationRequest)) *mAppPublicServiceServerMockDeleteConversation {
	if mmDeleteConversation.mock.inspectFuncDeleteConversation != nil {
		mmDeleteConversation.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.DeleteConversation")
	}

	mmDeleteConversation.mock.inspectFuncDeleteConversation = f

	return mmDeleteConversation
}

// Return sets up results that will be returned by AppPublicServiceServer.DeleteConversation
func (mmDeleteConversation *mAppPublicServiceServerMockDeleteConversation) Return(dp2 *mm_appv1alpha.DeleteConversationResponse, err error) *AppPublicServiceServerMock {
	if mmDeleteConversation.mock.funcDeleteConversation != nil {
		mmDeleteConversation.mock.t.Fatalf("AppPublicServiceServerMock.DeleteConversation mock is already set by Set")
	}

	if mmDeleteConversation.defaultExpectation == nil {
		mmDeleteConversation.defaultExpectation = &AppPublicServiceServerMockDeleteConversationExpectation{mock: mmDeleteConversation.mock}
	}
	mmDeleteConversation.defaultExpectation.results = &AppPublicServiceServerMockDeleteConversationResults{dp2, err}
	mmDeleteConversation.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteConversation.mock
}

// Set uses given function f to mock the AppPublicServiceServer.DeleteConversation method
func (mmDeleteConversation *mAppPublicServiceServerMockDeleteConversation) Set(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteConversationRequest) (dp2 *mm_appv1alpha.DeleteConversationResponse, err error)) *AppPublicServiceServerMock {
	if mmDeleteConversation.defaultExpectation != nil {
		mmDeleteConversation.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.DeleteConversation method")
	}

	if len(mmDeleteConversation.expectations) > 0 {
		mmDeleteConversation.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.DeleteConversation method")
	}

	mmDeleteConversation.mock.funcDeleteConversation = f
	mmDeleteConversation.mock.funcDeleteConversationOrigin = minimock.CallerInfo(1)
	return mmDeleteConversation.mock
}

// When sets expectation for the AppPublicServiceServer.DeleteConversation which will trigger the result defined by the following
// Then helper
func (mmDeleteConversation *mAppPublicServiceServerMockDeleteConversation) When(ctx context.Context, dp1 *mm_appv1alpha.DeleteConversationRequest) *AppPublicServiceServerMockDeleteConversationExpectation {
	if mmDeleteConversation.mock.funcDeleteConversation != nil {
		mmDeleteConversation.mock.t.Fatalf("AppPublicServiceServerMock.DeleteConversation mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockDeleteConversationExpectation{
		mock:               mmDeleteConversation.mock,
		params:             &AppPublicServiceServerMockDeleteConversationParams{ctx, dp1},
		expectationOrigins: AppPublicServiceServerMockDeleteConversationExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteConversation.expectations = append(mmDeleteConversation.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.DeleteConversation return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockDeleteConversationExpectation) Then(dp2 *mm_appv1alpha.DeleteConversationResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockDeleteConversationResults{dp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.DeleteConversation should be invoked
func (mmDeleteConversation *mAppPublicServiceServerMockDeleteConversation) Times(n uint64) *mAppPublicServiceServerMockDeleteConversation {
	if n == 0 {
		mmDeleteConversation.mock.t.Fatalf("Times of AppPublicServiceServerMock.DeleteConversation mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteConversation.expectedInvocations, n)
	mmDeleteConversation.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteConversation
}

func (mmDeleteConversation *mAppPublicServiceServerMockDeleteConversation) invocationsDone() bool {
	if len(mmDeleteConversation.expectations) == 0 && mmDeleteConversation.defaultExpectation == nil && mmDeleteConversation.mock.funcDeleteConversation == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteConversation.mock.afterDeleteConversationCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteConversation.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteConversation implements mm_appv1alpha.AppPublicServiceServer
func (mmDeleteConversation *AppPublicServiceServerMock) DeleteConversation(ctx context.Context, dp1 *mm_appv1alpha.DeleteConversationRequest) (dp2 *mm_appv1alpha.DeleteConversationResponse, err error) {
	mm_atomic.AddUint64(&mmDeleteConversation.beforeDeleteConversationCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteConversation.afterDeleteConversationCounter, 1)

	mmDeleteConversation.t.Helper()

	if mmDeleteConversation.inspectFuncDeleteConversation != nil {
		mmDeleteConversation.inspectFuncDeleteConversation(ctx, dp1)
	}

	mm_params := AppPublicServiceServerMockDeleteConversationParams{ctx, dp1}

	// Record call args
	mmDeleteConversation.DeleteConversationMock.mutex.Lock()
	mmDeleteConversation.DeleteConversationMock.callArgs = append(mmDeleteConversation.DeleteConversationMock.callArgs, &mm_params)
	mmDeleteConversation.DeleteConversationMock.mutex.Unlock()

	for _, e := range mmDeleteConversation.DeleteConversationMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp2, e.results.err
		}
	}

	if mmDeleteConversation.DeleteConversationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteConversation.DeleteConversationMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteConversation.DeleteConversationMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteConversation.DeleteConversationMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockDeleteConversationParams{ctx, dp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteConversation.t.Errorf("AppPublicServiceServerMock.DeleteConversation got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteConversation.DeleteConversationMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.dp1 != nil && !minimock.Equal(*mm_want_ptrs.dp1, mm_got.dp1) {
				mmDeleteConversation.t.Errorf("AppPublicServiceServerMock.DeleteConversation got unexpected parameter dp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteConversation.DeleteConversationMock.defaultExpectation.expectationOrigins.originDp1, *mm_want_ptrs.dp1, mm_got.dp1, minimock.Diff(*mm_want_ptrs.dp1, mm_got.dp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteConversation.t.Errorf("AppPublicServiceServerMock.DeleteConversation got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteConversation.DeleteConversationMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteConversation.DeleteConversationMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteConversation.t.Fatal("No results are set for the AppPublicServiceServerMock.DeleteConversation")
		}
		return (*mm_results).dp2, (*mm_results).err
	}
	if mmDeleteConversation.funcDeleteConversation != nil {
		return mmDeleteConversation.funcDeleteConversation(ctx, dp1)
	}
	mmDeleteConversation.t.Fatalf("Unexpected call to AppPublicServiceServerMock.DeleteConversation. %v %v", ctx, dp1)
	return
}

// DeleteConversationAfterCounter returns a count of finished AppPublicServiceServerMock.DeleteConversation invocations
func (mmDeleteConversation *AppPublicServiceServerMock) DeleteConversationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteConversation.afterDeleteConversationCounter)
}

// DeleteConversationBeforeCounter returns a count of AppPublicServiceServerMock.DeleteConversation invocations
func (mmDeleteConversation *AppPublicServiceServerMock) DeleteConversationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteConversation.beforeDeleteConversationCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.DeleteConversation.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteConversation *mAppPublicServiceServerMockDeleteConversation) Calls() []*AppPublicServiceServerMockDeleteConversationParams {
	mmDeleteConversation.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockDeleteConversationParams, len(mmDeleteConversation.callArgs))
	copy(argCopy, mmDeleteConversation.callArgs)

	mmDeleteConversation.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteConversationDone returns true if the count of the DeleteConversation invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockDeleteConversationDone() bool {
	if m.DeleteConversationMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteConversationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteConversationMock.invocationsDone()
}

// MinimockDeleteConversationInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockDeleteConversationInspect() {
	for _, e := range m.DeleteConversationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteConversation at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteConversationCounter := mm_atomic.LoadUint64(&m.afterDeleteConversationCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteConversationMock.defaultExpectation != nil && afterDeleteConversationCounter < 1 {
		if m.DeleteConversationMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteConversation at\n%s", m.DeleteConversationMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteConversation at\n%s with params: %#v", m.DeleteConversationMock.defaultExpectation.expectationOrigins.origin, *m.DeleteConversationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteConversation != nil && afterDeleteConversationCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteConversation at\n%s", m.funcDeleteConversationOrigin)
	}

	if !m.DeleteConversationMock.invocationsDone() && afterDeleteConversationCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.DeleteConversation at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteConversationMock.expectedInvocations), m.DeleteConversationMock.expectedInvocationsOrigin, afterDeleteConversationCounter)
	}
}

type mAppPublicServiceServerMockDeleteMessage struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockDeleteMessageExpectation
	expectations       []*AppPublicServiceServerMockDeleteMessageExpectation

	callArgs []*AppPublicServiceServerMockDeleteMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockDeleteMessageExpectation specifies expectation struct of the AppPublicServiceServer.DeleteMessage
type AppPublicServiceServerMockDeleteMessageExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockDeleteMessageParams
	paramPtrs          *AppPublicServiceServerMockDeleteMessageParamPtrs
	expectationOrigins AppPublicServiceServerMockDeleteMessageExpectationOrigins
	results            *AppPublicServiceServerMockDeleteMessageResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockDeleteMessageParams contains parameters of the AppPublicServiceServer.DeleteMessage
type AppPublicServiceServerMockDeleteMessageParams struct {
	ctx context.Context
	dp1 *mm_appv1alpha.DeleteMessageRequest
}

// AppPublicServiceServerMockDeleteMessageParamPtrs contains pointers to parameters of the AppPublicServiceServer.DeleteMessage
type AppPublicServiceServerMockDeleteMessageParamPtrs struct {
	ctx *context.Context
	dp1 **mm_appv1alpha.DeleteMessageRequest
}

// AppPublicServiceServerMockDeleteMessageResults contains results of the AppPublicServiceServer.DeleteMessage
type AppPublicServiceServerMockDeleteMessageResults struct {
	dp2 *mm_appv1alpha.DeleteMessageResponse
	err error
}

// AppPublicServiceServerMockDeleteMessageOrigins contains origins of expectations of the AppPublicServiceServer.DeleteMessage
type AppPublicServiceServerMockDeleteMessageExpectationOrigins struct {
	origin    string
	originCtx string
	originDp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteMessage *mAppPublicServiceServerMockDeleteMessage) Optional() *mAppPublicServiceServerMockDeleteMessage {
	mmDeleteMessage.optional = true
	return mmDeleteMessage
}

// Expect sets up expected params for AppPublicServiceServer.DeleteMessage
func (mmDeleteMessage *mAppPublicServiceServerMockDeleteMessage) Expect(ctx context.Context, dp1 *mm_appv1alpha.DeleteMessageRequest) *mAppPublicServiceServerMockDeleteMessage {
	if mmDeleteMessage.mock.funcDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("AppPublicServiceServerMock.DeleteMessage mock is already set by Set")
	}

	if mmDeleteMessage.defaultExpectation == nil {
		mmDeleteMessage.defaultExpectation = &AppPublicServiceServerMockDeleteMessageExpectation{}
	}

	if mmDeleteMessage.defaultExpectation.paramPtrs != nil {
		mmDeleteMessage.mock.t.Fatalf("AppPublicServiceServerMock.DeleteMessage mock is already set by ExpectParams functions")
	}

	mmDeleteMessage.defaultExpectation.params = &AppPublicServiceServerMockDeleteMessageParams{ctx, dp1}
	mmDeleteMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteMessage.expectations {
		if minimock.Equal(e.params, mmDeleteMessage.defaultExpectation.params) {
			mmDeleteMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteMessage.defaultExpectation.params)
		}
	}

	return mmDeleteMessage
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.DeleteMessage
func (mmDeleteMessage *mAppPublicServiceServerMockDeleteMessage) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockDeleteMessage {
	if mmDeleteMessage.mock.funcDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("AppPublicServiceServerMock.DeleteMessage mock is already set by Set")
	}

	if mmDeleteMessage.defaultExpectation == nil {
		mmDeleteMessage.defaultExpectation = &AppPublicServiceServerMockDeleteMessageExpectation{}
	}

	if mmDeleteMessage.defaultExpectation.params != nil {
		mmDeleteMessage.mock.t.Fatalf("AppPublicServiceServerMock.DeleteMessage mock is already set by Expect")
	}

	if mmDeleteMessage.defaultExpectation.paramPtrs == nil {
		mmDeleteMessage.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteMessageParamPtrs{}
	}
	mmDeleteMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteMessage
}

// ExpectDp1Param2 sets up expected param dp1 for AppPublicServiceServer.DeleteMessage
func (mmDeleteMessage *mAppPublicServiceServerMockDeleteMessage) ExpectDp1Param2(dp1 *mm_appv1alpha.DeleteMessageRequest) *mAppPublicServiceServerMockDeleteMessage {
	if mmDeleteMessage.mock.funcDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("AppPublicServiceServerMock.DeleteMessage mock is already set by Set")
	}

	if mmDeleteMessage.defaultExpectation == nil {
		mmDeleteMessage.defaultExpectation = &AppPublicServiceServerMockDeleteMessageExpectation{}
	}

	if mmDeleteMessage.defaultExpectation.params != nil {
		mmDeleteMessage.mock.t.Fatalf("AppPublicServiceServerMock.DeleteMessage mock is already set by Expect")
	}

	if mmDeleteMessage.defaultExpectation.paramPtrs == nil {
		mmDeleteMessage.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteMessageParamPtrs{}
	}
	mmDeleteMessage.defaultExpectation.paramPtrs.dp1 = &dp1
	mmDeleteMessage.defaultExpectation.expectationOrigins.originDp1 = minimock.CallerInfo(1)

	return mmDeleteMessage
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.DeleteMessage
func (mmDeleteMessage *mAppPublicServiceServerMockDeleteMessage) Inspect(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteMessageRequest)) *mAppPublicServiceServerMockDeleteMessage {
	if mmDeleteMessage.mock.inspectFuncDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.DeleteMessage")
	}

	mmDeleteMessage.mock.inspectFuncDeleteMessage = f

	return mmDeleteMessage
}

// Return sets up results that will be returned by AppPublicServiceServer.DeleteMessage
func (mmDeleteMessage *mAppPublicServiceServerMockDeleteMessage) Return(dp2 *mm_appv1alpha.DeleteMessageResponse, err error) *AppPublicServiceServerMock {
	if mmDeleteMessage.mock.funcDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("AppPublicServiceServerMock.DeleteMessage mock is already set by Set")
	}

	if mmDeleteMessage.defaultExpectation == nil {
		mmDeleteMessage.defaultExpectation = &AppPublicServiceServerMockDeleteMessageExpectation{mock: mmDeleteMessage.mock}
	}
	mmDeleteMessage.defaultExpectation.results = &AppPublicServiceServerMockDeleteMessageResults{dp2, err}
	mmDeleteMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteMessage.mock
}

// Set uses given function f to mock the AppPublicServiceServer.DeleteMessage method
func (mmDeleteMessage *mAppPublicServiceServerMockDeleteMessage) Set(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteMessageRequest) (dp2 *mm_appv1alpha.DeleteMessageResponse, err error)) *AppPublicServiceServerMock {
	if mmDeleteMessage.defaultExpectation != nil {
		mmDeleteMessage.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.DeleteMessage method")
	}

	if len(mmDeleteMessage.expectations) > 0 {
		mmDeleteMessage.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.DeleteMessage method")
	}

	mmDeleteMessage.mock.funcDeleteMessage = f
	mmDeleteMessage.mock.funcDeleteMessageOrigin = minimock.CallerInfo(1)
	return mmDeleteMessage.mock
}

// When sets expectation for the AppPublicServiceServer.DeleteMessage which will trigger the result defined by the following
// Then helper
func (mmDeleteMessage *mAppPublicServiceServerMockDeleteMessage) When(ctx context.Context, dp1 *mm_appv1alpha.DeleteMessageRequest) *AppPublicServiceServerMockDeleteMessageExpectation {
	if mmDeleteMessage.mock.funcDeleteMessage != nil {
		mmDeleteMessage.mock.t.Fatalf("AppPublicServiceServerMock.DeleteMessage mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockDeleteMessageExpectation{
		mock:               mmDeleteMessage.mock,
		params:             &AppPublicServiceServerMockDeleteMessageParams{ctx, dp1},
		expectationOrigins: AppPublicServiceServerMockDeleteMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteMessage.expectations = append(mmDeleteMessage.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.DeleteMessage return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockDeleteMessageExpectation) Then(dp2 *mm_appv1alpha.DeleteMessageResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockDeleteMessageResults{dp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.DeleteMessage should be invoked
func (mmDeleteMessage *mAppPublicServiceServerMockDeleteMessage) Times(n uint64) *mAppPublicServiceServerMockDeleteMessage {
	if n == 0 {
		mmDeleteMessage.mock.t.Fatalf("Times of AppPublicServiceServerMock.DeleteMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteMessage.expectedInvocations, n)
	mmDeleteMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteMessage
}

func (mmDeleteMessage *mAppPublicServiceServerMockDeleteMessage) invocationsDone() bool {
	if len(mmDeleteMessage.expectations) == 0 && mmDeleteMessage.defaultExpectation == nil && mmDeleteMessage.mock.funcDeleteMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteMessage.mock.afterDeleteMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteMessage implements mm_appv1alpha.AppPublicServiceServer
func (mmDeleteMessage *AppPublicServiceServerMock) DeleteMessage(ctx context.Context, dp1 *mm_appv1alpha.DeleteMessageRequest) (dp2 *mm_appv1alpha.DeleteMessageResponse, err error) {
	mm_atomic.AddUint64(&mmDeleteMessage.beforeDeleteMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteMessage.afterDeleteMessageCounter, 1)

	mmDeleteMessage.t.Helper()

	if mmDeleteMessage.inspectFuncDeleteMessage != nil {
		mmDeleteMessage.inspectFuncDeleteMessage(ctx, dp1)
	}

	mm_params := AppPublicServiceServerMockDeleteMessageParams{ctx, dp1}

	// Record call args
	mmDeleteMessage.DeleteMessageMock.mutex.Lock()
	mmDeleteMessage.DeleteMessageMock.callArgs = append(mmDeleteMessage.DeleteMessageMock.callArgs, &mm_params)
	mmDeleteMessage.DeleteMessageMock.mutex.Unlock()

	for _, e := range mmDeleteMessage.DeleteMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp2, e.results.err
		}
	}

	if mmDeleteMessage.DeleteMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteMessage.DeleteMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteMessage.DeleteMessageMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteMessage.DeleteMessageMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockDeleteMessageParams{ctx, dp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteMessage.t.Errorf("AppPublicServiceServerMock.DeleteMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteMessage.DeleteMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.dp1 != nil && !minimock.Equal(*mm_want_ptrs.dp1, mm_got.dp1) {
				mmDeleteMessage.t.Errorf("AppPublicServiceServerMock.DeleteMessage got unexpected parameter dp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteMessage.DeleteMessageMock.defaultExpectation.expectationOrigins.originDp1, *mm_want_ptrs.dp1, mm_got.dp1, minimock.Diff(*mm_want_ptrs.dp1, mm_got.dp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteMessage.t.Errorf("AppPublicServiceServerMock.DeleteMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteMessage.DeleteMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteMessage.DeleteMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteMessage.t.Fatal("No results are set for the AppPublicServiceServerMock.DeleteMessage")
		}
		return (*mm_results).dp2, (*mm_results).err
	}
	if mmDeleteMessage.funcDeleteMessage != nil {
		return mmDeleteMessage.funcDeleteMessage(ctx, dp1)
	}
	mmDeleteMessage.t.Fatalf("Unexpected call to AppPublicServiceServerMock.DeleteMessage. %v %v", ctx, dp1)
	return
}

// DeleteMessageAfterCounter returns a count of finished AppPublicServiceServerMock.DeleteMessage invocations
func (mmDeleteMessage *AppPublicServiceServerMock) DeleteMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteMessage.afterDeleteMessageCounter)
}

// DeleteMessageBeforeCounter returns a count of AppPublicServiceServerMock.DeleteMessage invocations
func (mmDeleteMessage *AppPublicServiceServerMock) DeleteMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteMessage.beforeDeleteMessageCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.DeleteMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteMessage *mAppPublicServiceServerMockDeleteMessage) Calls() []*AppPublicServiceServerMockDeleteMessageParams {
	mmDeleteMessage.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockDeleteMessageParams, len(mmDeleteMessage.callArgs))
	copy(argCopy, mmDeleteMessage.callArgs)

	mmDeleteMessage.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteMessageDone returns true if the count of the DeleteMessage invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockDeleteMessageDone() bool {
	if m.DeleteMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMessageMock.invocationsDone()
}

// MinimockDeleteMessageInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockDeleteMessageInspect() {
	for _, e := range m.DeleteMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteMessageCounter := mm_atomic.LoadUint64(&m.afterDeleteMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMessageMock.defaultExpectation != nil && afterDeleteMessageCounter < 1 {
		if m.DeleteMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteMessage at\n%s", m.DeleteMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteMessage at\n%s with params: %#v", m.DeleteMessageMock.defaultExpectation.expectationOrigins.origin, *m.DeleteMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteMessage != nil && afterDeleteMessageCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteMessage at\n%s", m.funcDeleteMessageOrigin)
	}

	if !m.DeleteMessageMock.invocationsDone() && afterDeleteMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.DeleteMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMessageMock.expectedInvocations), m.DeleteMessageMock.expectedInvocationsOrigin, afterDeleteMessageCounter)
	}
}

type mAppPublicServiceServerMockDeleteRow struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockDeleteRowExpectation
	expectations       []*AppPublicServiceServerMockDeleteRowExpectation

	callArgs []*AppPublicServiceServerMockDeleteRowParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockDeleteRowExpectation specifies expectation struct of the AppPublicServiceServer.DeleteRow
type AppPublicServiceServerMockDeleteRowExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockDeleteRowParams
	paramPtrs          *AppPublicServiceServerMockDeleteRowParamPtrs
	expectationOrigins AppPublicServiceServerMockDeleteRowExpectationOrigins
	results            *AppPublicServiceServerMockDeleteRowResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockDeleteRowParams contains parameters of the AppPublicServiceServer.DeleteRow
type AppPublicServiceServerMockDeleteRowParams struct {
	ctx context.Context
	dp1 *mm_appv1alpha.DeleteRowRequest
}

// AppPublicServiceServerMockDeleteRowParamPtrs contains pointers to parameters of the AppPublicServiceServer.DeleteRow
type AppPublicServiceServerMockDeleteRowParamPtrs struct {
	ctx *context.Context
	dp1 **mm_appv1alpha.DeleteRowRequest
}

// AppPublicServiceServerMockDeleteRowResults contains results of the AppPublicServiceServer.DeleteRow
type AppPublicServiceServerMockDeleteRowResults struct {
	dp2 *mm_appv1alpha.DeleteRowResponse
	err error
}

// AppPublicServiceServerMockDeleteRowOrigins contains origins of expectations of the AppPublicServiceServer.DeleteRow
type AppPublicServiceServerMockDeleteRowExpectationOrigins struct {
	origin    string
	originCtx string
	originDp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteRow *mAppPublicServiceServerMockDeleteRow) Optional() *mAppPublicServiceServerMockDeleteRow {
	mmDeleteRow.optional = true
	return mmDeleteRow
}

// Expect sets up expected params for AppPublicServiceServer.DeleteRow
func (mmDeleteRow *mAppPublicServiceServerMockDeleteRow) Expect(ctx context.Context, dp1 *mm_appv1alpha.DeleteRowRequest) *mAppPublicServiceServerMockDeleteRow {
	if mmDeleteRow.mock.funcDeleteRow != nil {
		mmDeleteRow.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRow mock is already set by Set")
	}

	if mmDeleteRow.defaultExpectation == nil {
		mmDeleteRow.defaultExpectation = &AppPublicServiceServerMockDeleteRowExpectation{}
	}

	if mmDeleteRow.defaultExpectation.paramPtrs != nil {
		mmDeleteRow.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRow mock is already set by ExpectParams functions")
	}

	mmDeleteRow.defaultExpectation.params = &AppPublicServiceServerMockDeleteRowParams{ctx, dp1}
	mmDeleteRow.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteRow.expectations {
		if minimock.Equal(e.params, mmDeleteRow.defaultExpectation.params) {
			mmDeleteRow.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteRow.defaultExpectation.params)
		}
	}

	return mmDeleteRow
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.DeleteRow
func (mmDeleteRow *mAppPublicServiceServerMockDeleteRow) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockDeleteRow {
	if mmDeleteRow.mock.funcDeleteRow != nil {
		mmDeleteRow.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRow mock is already set by Set")
	}

	if mmDeleteRow.defaultExpectation == nil {
		mmDeleteRow.defaultExpectation = &AppPublicServiceServerMockDeleteRowExpectation{}
	}

	if mmDeleteRow.defaultExpectation.params != nil {
		mmDeleteRow.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRow mock is already set by Expect")
	}

	if mmDeleteRow.defaultExpectation.paramPtrs == nil {
		mmDeleteRow.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteRowParamPtrs{}
	}
	mmDeleteRow.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteRow.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteRow
}

// ExpectDp1Param2 sets up expected param dp1 for AppPublicServiceServer.DeleteRow
func (mmDeleteRow *mAppPublicServiceServerMockDeleteRow) ExpectDp1Param2(dp1 *mm_appv1alpha.DeleteRowRequest) *mAppPublicServiceServerMockDeleteRow {
	if mmDeleteRow.mock.funcDeleteRow != nil {
		mmDeleteRow.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRow mock is already set by Set")
	}

	if mmDeleteRow.defaultExpectation == nil {
		mmDeleteRow.defaultExpectation = &AppPublicServiceServerMockDeleteRowExpectation{}
	}

	if mmDeleteRow.defaultExpectation.params != nil {
		mmDeleteRow.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRow mock is already set by Expect")
	}

	if mmDeleteRow.defaultExpectation.paramPtrs == nil {
		mmDeleteRow.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteRowParamPtrs{}
	}
	mmDeleteRow.defaultExpectation.paramPtrs.dp1 = &dp1
	mmDeleteRow.defaultExpectation.expectationOrigins.originDp1 = minimock.CallerInfo(1)

	return mmDeleteRow
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.DeleteRow
func (mmDeleteRow *mAppPublicServiceServerMockDeleteRow) Inspect(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteRowRequest)) *mAppPublicServiceServerMockDeleteRow {
	if mmDeleteRow.mock.inspectFuncDeleteRow != nil {
		mmDeleteRow.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.DeleteRow")
	}

	mmDeleteRow.mock.inspectFuncDeleteRow = f

	return mmDeleteRow
}

// Return sets up results that will be returned by AppPublicServiceServer.DeleteRow
func (mmDeleteRow *mAppPublicServiceServerMockDeleteRow) Return(dp2 *mm_appv1alpha.DeleteRowResponse, err error) *AppPublicServiceServerMock {
	if mmDeleteRow.mock.funcDeleteRow != nil {
		mmDeleteRow.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRow mock is already set by Set")
	}

	if mmDeleteRow.defaultExpectation == nil {
		mmDeleteRow.defaultExpectation = &AppPublicServiceServerMockDeleteRowExpectation{mock: mmDeleteRow.mock}
	}
	mmDeleteRow.defaultExpectation.results = &AppPublicServiceServerMockDeleteRowResults{dp2, err}
	mmDeleteRow.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteRow.mock
}

// Set uses given function f to mock the AppPublicServiceServer.DeleteRow method
func (mmDeleteRow *mAppPublicServiceServerMockDeleteRow) Set(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteRowRequest) (dp2 *mm_appv1alpha.DeleteRowResponse, err error)) *AppPublicServiceServerMock {
	if mmDeleteRow.defaultExpectation != nil {
		mmDeleteRow.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.DeleteRow method")
	}

	if len(mmDeleteRow.expectations) > 0 {
		mmDeleteRow.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.DeleteRow method")
	}

	mmDeleteRow.mock.funcDeleteRow = f
	mmDeleteRow.mock.funcDeleteRowOrigin = minimock.CallerInfo(1)
	return mmDeleteRow.mock
}

// When sets expectation for the AppPublicServiceServer.DeleteRow which will trigger the result defined by the following
// Then helper
func (mmDeleteRow *mAppPublicServiceServerMockDeleteRow) When(ctx context.Context, dp1 *mm_appv1alpha.DeleteRowRequest) *AppPublicServiceServerMockDeleteRowExpectation {
	if mmDeleteRow.mock.funcDeleteRow != nil {
		mmDeleteRow.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRow mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockDeleteRowExpectation{
		mock:               mmDeleteRow.mock,
		params:             &AppPublicServiceServerMockDeleteRowParams{ctx, dp1},
		expectationOrigins: AppPublicServiceServerMockDeleteRowExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteRow.expectations = append(mmDeleteRow.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.DeleteRow return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockDeleteRowExpectation) Then(dp2 *mm_appv1alpha.DeleteRowResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockDeleteRowResults{dp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.DeleteRow should be invoked
func (mmDeleteRow *mAppPublicServiceServerMockDeleteRow) Times(n uint64) *mAppPublicServiceServerMockDeleteRow {
	if n == 0 {
		mmDeleteRow.mock.t.Fatalf("Times of AppPublicServiceServerMock.DeleteRow mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteRow.expectedInvocations, n)
	mmDeleteRow.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteRow
}

func (mmDeleteRow *mAppPublicServiceServerMockDeleteRow) invocationsDone() bool {
	if len(mmDeleteRow.expectations) == 0 && mmDeleteRow.defaultExpectation == nil && mmDeleteRow.mock.funcDeleteRow == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteRow.mock.afterDeleteRowCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteRow.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteRow implements mm_appv1alpha.AppPublicServiceServer
func (mmDeleteRow *AppPublicServiceServerMock) DeleteRow(ctx context.Context, dp1 *mm_appv1alpha.DeleteRowRequest) (dp2 *mm_appv1alpha.DeleteRowResponse, err error) {
	mm_atomic.AddUint64(&mmDeleteRow.beforeDeleteRowCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteRow.afterDeleteRowCounter, 1)

	mmDeleteRow.t.Helper()

	if mmDeleteRow.inspectFuncDeleteRow != nil {
		mmDeleteRow.inspectFuncDeleteRow(ctx, dp1)
	}

	mm_params := AppPublicServiceServerMockDeleteRowParams{ctx, dp1}

	// Record call args
	mmDeleteRow.DeleteRowMock.mutex.Lock()
	mmDeleteRow.DeleteRowMock.callArgs = append(mmDeleteRow.DeleteRowMock.callArgs, &mm_params)
	mmDeleteRow.DeleteRowMock.mutex.Unlock()

	for _, e := range mmDeleteRow.DeleteRowMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp2, e.results.err
		}
	}

	if mmDeleteRow.DeleteRowMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteRow.DeleteRowMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteRow.DeleteRowMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteRow.DeleteRowMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockDeleteRowParams{ctx, dp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteRow.t.Errorf("AppPublicServiceServerMock.DeleteRow got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteRow.DeleteRowMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.dp1 != nil && !minimock.Equal(*mm_want_ptrs.dp1, mm_got.dp1) {
				mmDeleteRow.t.Errorf("AppPublicServiceServerMock.DeleteRow got unexpected parameter dp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteRow.DeleteRowMock.defaultExpectation.expectationOrigins.originDp1, *mm_want_ptrs.dp1, mm_got.dp1, minimock.Diff(*mm_want_ptrs.dp1, mm_got.dp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteRow.t.Errorf("AppPublicServiceServerMock.DeleteRow got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteRow.DeleteRowMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteRow.DeleteRowMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteRow.t.Fatal("No results are set for the AppPublicServiceServerMock.DeleteRow")
		}
		return (*mm_results).dp2, (*mm_results).err
	}
	if mmDeleteRow.funcDeleteRow != nil {
		return mmDeleteRow.funcDeleteRow(ctx, dp1)
	}
	mmDeleteRow.t.Fatalf("Unexpected call to AppPublicServiceServerMock.DeleteRow. %v %v", ctx, dp1)
	return
}

// DeleteRowAfterCounter returns a count of finished AppPublicServiceServerMock.DeleteRow invocations
func (mmDeleteRow *AppPublicServiceServerMock) DeleteRowAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteRow.afterDeleteRowCounter)
}

// DeleteRowBeforeCounter returns a count of AppPublicServiceServerMock.DeleteRow invocations
func (mmDeleteRow *AppPublicServiceServerMock) DeleteRowBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteRow.beforeDeleteRowCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.DeleteRow.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteRow *mAppPublicServiceServerMockDeleteRow) Calls() []*AppPublicServiceServerMockDeleteRowParams {
	mmDeleteRow.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockDeleteRowParams, len(mmDeleteRow.callArgs))
	copy(argCopy, mmDeleteRow.callArgs)

	mmDeleteRow.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteRowDone returns true if the count of the DeleteRow invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockDeleteRowDone() bool {
	if m.DeleteRowMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteRowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteRowMock.invocationsDone()
}

// MinimockDeleteRowInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockDeleteRowInspect() {
	for _, e := range m.DeleteRowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteRow at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteRowCounter := mm_atomic.LoadUint64(&m.afterDeleteRowCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteRowMock.defaultExpectation != nil && afterDeleteRowCounter < 1 {
		if m.DeleteRowMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteRow at\n%s", m.DeleteRowMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteRow at\n%s with params: %#v", m.DeleteRowMock.defaultExpectation.expectationOrigins.origin, *m.DeleteRowMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteRow != nil && afterDeleteRowCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteRow at\n%s", m.funcDeleteRowOrigin)
	}

	if !m.DeleteRowMock.invocationsDone() && afterDeleteRowCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.DeleteRow at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteRowMock.expectedInvocations), m.DeleteRowMock.expectedInvocationsOrigin, afterDeleteRowCounter)
	}
}

type mAppPublicServiceServerMockDeleteRows struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockDeleteRowsExpectation
	expectations       []*AppPublicServiceServerMockDeleteRowsExpectation

	callArgs []*AppPublicServiceServerMockDeleteRowsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockDeleteRowsExpectation specifies expectation struct of the AppPublicServiceServer.DeleteRows
type AppPublicServiceServerMockDeleteRowsExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockDeleteRowsParams
	paramPtrs          *AppPublicServiceServerMockDeleteRowsParamPtrs
	expectationOrigins AppPublicServiceServerMockDeleteRowsExpectationOrigins
	results            *AppPublicServiceServerMockDeleteRowsResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockDeleteRowsParams contains parameters of the AppPublicServiceServer.DeleteRows
type AppPublicServiceServerMockDeleteRowsParams struct {
	ctx context.Context
	dp1 *mm_appv1alpha.DeleteRowsRequest
}

// AppPublicServiceServerMockDeleteRowsParamPtrs contains pointers to parameters of the AppPublicServiceServer.DeleteRows
type AppPublicServiceServerMockDeleteRowsParamPtrs struct {
	ctx *context.Context
	dp1 **mm_appv1alpha.DeleteRowsRequest
}

// AppPublicServiceServerMockDeleteRowsResults contains results of the AppPublicServiceServer.DeleteRows
type AppPublicServiceServerMockDeleteRowsResults struct {
	dp2 *mm_appv1alpha.DeleteRowsResponse
	err error
}

// AppPublicServiceServerMockDeleteRowsOrigins contains origins of expectations of the AppPublicServiceServer.DeleteRows
type AppPublicServiceServerMockDeleteRowsExpectationOrigins struct {
	origin    string
	originCtx string
	originDp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteRows *mAppPublicServiceServerMockDeleteRows) Optional() *mAppPublicServiceServerMockDeleteRows {
	mmDeleteRows.optional = true
	return mmDeleteRows
}

// Expect sets up expected params for AppPublicServiceServer.DeleteRows
func (mmDeleteRows *mAppPublicServiceServerMockDeleteRows) Expect(ctx context.Context, dp1 *mm_appv1alpha.DeleteRowsRequest) *mAppPublicServiceServerMockDeleteRows {
	if mmDeleteRows.mock.funcDeleteRows != nil {
		mmDeleteRows.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRows mock is already set by Set")
	}

	if mmDeleteRows.defaultExpectation == nil {
		mmDeleteRows.defaultExpectation = &AppPublicServiceServerMockDeleteRowsExpectation{}
	}

	if mmDeleteRows.defaultExpectation.paramPtrs != nil {
		mmDeleteRows.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRows mock is already set by ExpectParams functions")
	}

	mmDeleteRows.defaultExpectation.params = &AppPublicServiceServerMockDeleteRowsParams{ctx, dp1}
	mmDeleteRows.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteRows.expectations {
		if minimock.Equal(e.params, mmDeleteRows.defaultExpectation.params) {
			mmDeleteRows.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteRows.defaultExpectation.params)
		}
	}

	return mmDeleteRows
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.DeleteRows
func (mmDeleteRows *mAppPublicServiceServerMockDeleteRows) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockDeleteRows {
	if mmDeleteRows.mock.funcDeleteRows != nil {
		mmDeleteRows.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRows mock is already set by Set")
	}

	if mmDeleteRows.defaultExpectation == nil {
		mmDeleteRows.defaultExpectation = &AppPublicServiceServerMockDeleteRowsExpectation{}
	}

	if mmDeleteRows.defaultExpectation.params != nil {
		mmDeleteRows.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRows mock is already set by Expect")
	}

	if mmDeleteRows.defaultExpectation.paramPtrs == nil {
		mmDeleteRows.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteRowsParamPtrs{}
	}
	mmDeleteRows.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteRows.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteRows
}

// ExpectDp1Param2 sets up expected param dp1 for AppPublicServiceServer.DeleteRows
func (mmDeleteRows *mAppPublicServiceServerMockDeleteRows) ExpectDp1Param2(dp1 *mm_appv1alpha.DeleteRowsRequest) *mAppPublicServiceServerMockDeleteRows {
	if mmDeleteRows.mock.funcDeleteRows != nil {
		mmDeleteRows.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRows mock is already set by Set")
	}

	if mmDeleteRows.defaultExpectation == nil {
		mmDeleteRows.defaultExpectation = &AppPublicServiceServerMockDeleteRowsExpectation{}
	}

	if mmDeleteRows.defaultExpectation.params != nil {
		mmDeleteRows.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRows mock is already set by Expect")
	}

	if mmDeleteRows.defaultExpectation.paramPtrs == nil {
		mmDeleteRows.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteRowsParamPtrs{}
	}
	mmDeleteRows.defaultExpectation.paramPtrs.dp1 = &dp1
	mmDeleteRows.defaultExpectation.expectationOrigins.originDp1 = minimock.CallerInfo(1)

	return mmDeleteRows
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.DeleteRows
func (mmDeleteRows *mAppPublicServiceServerMockDeleteRows) Inspect(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteRowsRequest)) *mAppPublicServiceServerMockDeleteRows {
	if mmDeleteRows.mock.inspectFuncDeleteRows != nil {
		mmDeleteRows.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.DeleteRows")
	}

	mmDeleteRows.mock.inspectFuncDeleteRows = f

	return mmDeleteRows
}

// Return sets up results that will be returned by AppPublicServiceServer.DeleteRows
func (mmDeleteRows *mAppPublicServiceServerMockDeleteRows) Return(dp2 *mm_appv1alpha.DeleteRowsResponse, err error) *AppPublicServiceServerMock {
	if mmDeleteRows.mock.funcDeleteRows != nil {
		mmDeleteRows.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRows mock is already set by Set")
	}

	if mmDeleteRows.defaultExpectation == nil {
		mmDeleteRows.defaultExpectation = &AppPublicServiceServerMockDeleteRowsExpectation{mock: mmDeleteRows.mock}
	}
	mmDeleteRows.defaultExpectation.results = &AppPublicServiceServerMockDeleteRowsResults{dp2, err}
	mmDeleteRows.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteRows.mock
}

// Set uses given function f to mock the AppPublicServiceServer.DeleteRows method
func (mmDeleteRows *mAppPublicServiceServerMockDeleteRows) Set(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteRowsRequest) (dp2 *mm_appv1alpha.DeleteRowsResponse, err error)) *AppPublicServiceServerMock {
	if mmDeleteRows.defaultExpectation != nil {
		mmDeleteRows.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.DeleteRows method")
	}

	if len(mmDeleteRows.expectations) > 0 {
		mmDeleteRows.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.DeleteRows method")
	}

	mmDeleteRows.mock.funcDeleteRows = f
	mmDeleteRows.mock.funcDeleteRowsOrigin = minimock.CallerInfo(1)
	return mmDeleteRows.mock
}

// When sets expectation for the AppPublicServiceServer.DeleteRows which will trigger the result defined by the following
// Then helper
func (mmDeleteRows *mAppPublicServiceServerMockDeleteRows) When(ctx context.Context, dp1 *mm_appv1alpha.DeleteRowsRequest) *AppPublicServiceServerMockDeleteRowsExpectation {
	if mmDeleteRows.mock.funcDeleteRows != nil {
		mmDeleteRows.mock.t.Fatalf("AppPublicServiceServerMock.DeleteRows mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockDeleteRowsExpectation{
		mock:               mmDeleteRows.mock,
		params:             &AppPublicServiceServerMockDeleteRowsParams{ctx, dp1},
		expectationOrigins: AppPublicServiceServerMockDeleteRowsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteRows.expectations = append(mmDeleteRows.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.DeleteRows return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockDeleteRowsExpectation) Then(dp2 *mm_appv1alpha.DeleteRowsResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockDeleteRowsResults{dp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.DeleteRows should be invoked
func (mmDeleteRows *mAppPublicServiceServerMockDeleteRows) Times(n uint64) *mAppPublicServiceServerMockDeleteRows {
	if n == 0 {
		mmDeleteRows.mock.t.Fatalf("Times of AppPublicServiceServerMock.DeleteRows mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteRows.expectedInvocations, n)
	mmDeleteRows.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteRows
}

func (mmDeleteRows *mAppPublicServiceServerMockDeleteRows) invocationsDone() bool {
	if len(mmDeleteRows.expectations) == 0 && mmDeleteRows.defaultExpectation == nil && mmDeleteRows.mock.funcDeleteRows == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteRows.mock.afterDeleteRowsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteRows.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteRows implements mm_appv1alpha.AppPublicServiceServer
func (mmDeleteRows *AppPublicServiceServerMock) DeleteRows(ctx context.Context, dp1 *mm_appv1alpha.DeleteRowsRequest) (dp2 *mm_appv1alpha.DeleteRowsResponse, err error) {
	mm_atomic.AddUint64(&mmDeleteRows.beforeDeleteRowsCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteRows.afterDeleteRowsCounter, 1)

	mmDeleteRows.t.Helper()

	if mmDeleteRows.inspectFuncDeleteRows != nil {
		mmDeleteRows.inspectFuncDeleteRows(ctx, dp1)
	}

	mm_params := AppPublicServiceServerMockDeleteRowsParams{ctx, dp1}

	// Record call args
	mmDeleteRows.DeleteRowsMock.mutex.Lock()
	mmDeleteRows.DeleteRowsMock.callArgs = append(mmDeleteRows.DeleteRowsMock.callArgs, &mm_params)
	mmDeleteRows.DeleteRowsMock.mutex.Unlock()

	for _, e := range mmDeleteRows.DeleteRowsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp2, e.results.err
		}
	}

	if mmDeleteRows.DeleteRowsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteRows.DeleteRowsMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteRows.DeleteRowsMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteRows.DeleteRowsMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockDeleteRowsParams{ctx, dp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteRows.t.Errorf("AppPublicServiceServerMock.DeleteRows got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteRows.DeleteRowsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.dp1 != nil && !minimock.Equal(*mm_want_ptrs.dp1, mm_got.dp1) {
				mmDeleteRows.t.Errorf("AppPublicServiceServerMock.DeleteRows got unexpected parameter dp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteRows.DeleteRowsMock.defaultExpectation.expectationOrigins.originDp1, *mm_want_ptrs.dp1, mm_got.dp1, minimock.Diff(*mm_want_ptrs.dp1, mm_got.dp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteRows.t.Errorf("AppPublicServiceServerMock.DeleteRows got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteRows.DeleteRowsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteRows.DeleteRowsMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteRows.t.Fatal("No results are set for the AppPublicServiceServerMock.DeleteRows")
		}
		return (*mm_results).dp2, (*mm_results).err
	}
	if mmDeleteRows.funcDeleteRows != nil {
		return mmDeleteRows.funcDeleteRows(ctx, dp1)
	}
	mmDeleteRows.t.Fatalf("Unexpected call to AppPublicServiceServerMock.DeleteRows. %v %v", ctx, dp1)
	return
}

// DeleteRowsAfterCounter returns a count of finished AppPublicServiceServerMock.DeleteRows invocations
func (mmDeleteRows *AppPublicServiceServerMock) DeleteRowsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteRows.afterDeleteRowsCounter)
}

// DeleteRowsBeforeCounter returns a count of AppPublicServiceServerMock.DeleteRows invocations
func (mmDeleteRows *AppPublicServiceServerMock) DeleteRowsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteRows.beforeDeleteRowsCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.DeleteRows.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteRows *mAppPublicServiceServerMockDeleteRows) Calls() []*AppPublicServiceServerMockDeleteRowsParams {
	mmDeleteRows.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockDeleteRowsParams, len(mmDeleteRows.callArgs))
	copy(argCopy, mmDeleteRows.callArgs)

	mmDeleteRows.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteRowsDone returns true if the count of the DeleteRows invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockDeleteRowsDone() bool {
	if m.DeleteRowsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteRowsMock.invocationsDone()
}

// MinimockDeleteRowsInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockDeleteRowsInspect() {
	for _, e := range m.DeleteRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteRows at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteRowsCounter := mm_atomic.LoadUint64(&m.afterDeleteRowsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteRowsMock.defaultExpectation != nil && afterDeleteRowsCounter < 1 {
		if m.DeleteRowsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteRows at\n%s", m.DeleteRowsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteRows at\n%s with params: %#v", m.DeleteRowsMock.defaultExpectation.expectationOrigins.origin, *m.DeleteRowsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteRows != nil && afterDeleteRowsCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteRows at\n%s", m.funcDeleteRowsOrigin)
	}

	if !m.DeleteRowsMock.invocationsDone() && afterDeleteRowsCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.DeleteRows at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteRowsMock.expectedInvocations), m.DeleteRowsMock.expectedInvocationsOrigin, afterDeleteRowsCounter)
	}
}

type mAppPublicServiceServerMockDeleteTable struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockDeleteTableExpectation
	expectations       []*AppPublicServiceServerMockDeleteTableExpectation

	callArgs []*AppPublicServiceServerMockDeleteTableParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockDeleteTableExpectation specifies expectation struct of the AppPublicServiceServer.DeleteTable
type AppPublicServiceServerMockDeleteTableExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockDeleteTableParams
	paramPtrs          *AppPublicServiceServerMockDeleteTableParamPtrs
	expectationOrigins AppPublicServiceServerMockDeleteTableExpectationOrigins
	results            *AppPublicServiceServerMockDeleteTableResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockDeleteTableParams contains parameters of the AppPublicServiceServer.DeleteTable
type AppPublicServiceServerMockDeleteTableParams struct {
	ctx context.Context
	dp1 *mm_appv1alpha.DeleteTableRequest
}

// AppPublicServiceServerMockDeleteTableParamPtrs contains pointers to parameters of the AppPublicServiceServer.DeleteTable
type AppPublicServiceServerMockDeleteTableParamPtrs struct {
	ctx *context.Context
	dp1 **mm_appv1alpha.DeleteTableRequest
}

// AppPublicServiceServerMockDeleteTableResults contains results of the AppPublicServiceServer.DeleteTable
type AppPublicServiceServerMockDeleteTableResults struct {
	dp2 *mm_appv1alpha.DeleteTableResponse
	err error
}

// AppPublicServiceServerMockDeleteTableOrigins contains origins of expectations of the AppPublicServiceServer.DeleteTable
type AppPublicServiceServerMockDeleteTableExpectationOrigins struct {
	origin    string
	originCtx string
	originDp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteTable *mAppPublicServiceServerMockDeleteTable) Optional() *mAppPublicServiceServerMockDeleteTable {
	mmDeleteTable.optional = true
	return mmDeleteTable
}

// Expect sets up expected params for AppPublicServiceServer.DeleteTable
func (mmDeleteTable *mAppPublicServiceServerMockDeleteTable) Expect(ctx context.Context, dp1 *mm_appv1alpha.DeleteTableRequest) *mAppPublicServiceServerMockDeleteTable {
	if mmDeleteTable.mock.funcDeleteTable != nil {
		mmDeleteTable.mock.t.Fatalf("AppPublicServiceServerMock.DeleteTable mock is already set by Set")
	}

	if mmDeleteTable.defaultExpectation == nil {
		mmDeleteTable.defaultExpectation = &AppPublicServiceServerMockDeleteTableExpectation{}
	}

	if mmDeleteTable.defaultExpectation.paramPtrs != nil {
		mmDeleteTable.mock.t.Fatalf("AppPublicServiceServerMock.DeleteTable mock is already set by ExpectParams functions")
	}

	mmDeleteTable.defaultExpectation.params = &AppPublicServiceServerMockDeleteTableParams{ctx, dp1}
	mmDeleteTable.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteTable.expectations {
		if minimock.Equal(e.params, mmDeleteTable.defaultExpectation.params) {
			mmDeleteTable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteTable.defaultExpectation.params)
		}
	}

	return mmDeleteTable
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.DeleteTable
func (mmDeleteTable *mAppPublicServiceServerMockDeleteTable) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockDeleteTable {
	if mmDeleteTable.mock.funcDeleteTable != nil {
		mmDeleteTable.mock.t.Fatalf("AppPublicServiceServerMock.DeleteTable mock is already set by Set")
	}

	if mmDeleteTable.defaultExpectation == nil {
		mmDeleteTable.defaultExpectation = &AppPublicServiceServerMockDeleteTableExpectation{}
	}

	if mmDeleteTable.defaultExpectation.params != nil {
		mmDeleteTable.mock.t.Fatalf("AppPublicServiceServerMock.DeleteTable mock is already set by Expect")
	}

	if mmDeleteTable.defaultExpectation.paramPtrs == nil {
		mmDeleteTable.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteTableParamPtrs{}
	}
	mmDeleteTable.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteTable.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteTable
}

// ExpectDp1Param2 sets up expected param dp1 for AppPublicServiceServer.DeleteTable
func (mmDeleteTable *mAppPublicServiceServerMockDeleteTable) ExpectDp1Param2(dp1 *mm_appv1alpha.DeleteTableRequest) *mAppPublicServiceServerMockDeleteTable {
	if mmDeleteTable.mock.funcDeleteTable != nil {
		mmDeleteTable.mock.t.Fatalf("AppPublicServiceServerMock.DeleteTable mock is already set by Set")
	}

	if mmDeleteTable.defaultExpectation == nil {
		mmDeleteTable.defaultExpectation = &AppPublicServiceServerMockDeleteTableExpectation{}
	}

	if mmDeleteTable.defaultExpectation.params != nil {
		mmDeleteTable.mock.t.Fatalf("AppPublicServiceServerMock.DeleteTable mock is already set by Expect")
	}

	if mmDeleteTable.defaultExpectation.paramPtrs == nil {
		mmDeleteTable.defaultExpectation.paramPtrs = &AppPublicServiceServerMockDeleteTableParamPtrs{}
	}
	mmDeleteTable.defaultExpectation.paramPtrs.dp1 = &dp1
	mmDeleteTable.defaultExpectation.expectationOrigins.originDp1 = minimock.CallerInfo(1)

	return mmDeleteTable
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.DeleteTable
func (mmDeleteTable *mAppPublicServiceServerMockDeleteTable) Inspect(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteTableRequest)) *mAppPublicServiceServerMockDeleteTable {
	if mmDeleteTable.mock.inspectFuncDeleteTable != nil {
		mmDeleteTable.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.DeleteTable")
	}

	mmDeleteTable.mock.inspectFuncDeleteTable = f

	return mmDeleteTable
}

// Return sets up results that will be returned by AppPublicServiceServer.DeleteTable
func (mmDeleteTable *mAppPublicServiceServerMockDeleteTable) Return(dp2 *mm_appv1alpha.DeleteTableResponse, err error) *AppPublicServiceServerMock {
	if mmDeleteTable.mock.funcDeleteTable != nil {
		mmDeleteTable.mock.t.Fatalf("AppPublicServiceServerMock.DeleteTable mock is already set by Set")
	}

	if mmDeleteTable.defaultExpectation == nil {
		mmDeleteTable.defaultExpectation = &AppPublicServiceServerMockDeleteTableExpectation{mock: mmDeleteTable.mock}
	}
	mmDeleteTable.defaultExpectation.results = &AppPublicServiceServerMockDeleteTableResults{dp2, err}
	mmDeleteTable.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteTable.mock
}

// Set uses given function f to mock the AppPublicServiceServer.DeleteTable method
func (mmDeleteTable *mAppPublicServiceServerMockDeleteTable) Set(f func(ctx context.Context, dp1 *mm_appv1alpha.DeleteTableRequest) (dp2 *mm_appv1alpha.DeleteTableResponse, err error)) *AppPublicServiceServerMock {
	if mmDeleteTable.defaultExpectation != nil {
		mmDeleteTable.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.DeleteTable method")
	}

	if len(mmDeleteTable.expectations) > 0 {
		mmDeleteTable.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.DeleteTable method")
	}

	mmDeleteTable.mock.funcDeleteTable = f
	mmDeleteTable.mock.funcDeleteTableOrigin = minimock.CallerInfo(1)
	return mmDeleteTable.mock
}

// When sets expectation for the AppPublicServiceServer.DeleteTable which will trigger the result defined by the following
// Then helper
func (mmDeleteTable *mAppPublicServiceServerMockDeleteTable) When(ctx context.Context, dp1 *mm_appv1alpha.DeleteTableRequest) *AppPublicServiceServerMockDeleteTableExpectation {
	if mmDeleteTable.mock.funcDeleteTable != nil {
		mmDeleteTable.mock.t.Fatalf("AppPublicServiceServerMock.DeleteTable mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockDeleteTableExpectation{
		mock:               mmDeleteTable.mock,
		params:             &AppPublicServiceServerMockDeleteTableParams{ctx, dp1},
		expectationOrigins: AppPublicServiceServerMockDeleteTableExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteTable.expectations = append(mmDeleteTable.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.DeleteTable return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockDeleteTableExpectation) Then(dp2 *mm_appv1alpha.DeleteTableResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockDeleteTableResults{dp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.DeleteTable should be invoked
func (mmDeleteTable *mAppPublicServiceServerMockDeleteTable) Times(n uint64) *mAppPublicServiceServerMockDeleteTable {
	if n == 0 {
		mmDeleteTable.mock.t.Fatalf("Times of AppPublicServiceServerMock.DeleteTable mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteTable.expectedInvocations, n)
	mmDeleteTable.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteTable
}

func (mmDeleteTable *mAppPublicServiceServerMockDeleteTable) invocationsDone() bool {
	if len(mmDeleteTable.expectations) == 0 && mmDeleteTable.defaultExpectation == nil && mmDeleteTable.mock.funcDeleteTable == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteTable.mock.afterDeleteTableCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteTable.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteTable implements mm_appv1alpha.AppPublicServiceServer
func (mmDeleteTable *AppPublicServiceServerMock) DeleteTable(ctx context.Context, dp1 *mm_appv1alpha.DeleteTableRequest) (dp2 *mm_appv1alpha.DeleteTableResponse, err error) {
	mm_atomic.AddUint64(&mmDeleteTable.beforeDeleteTableCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteTable.afterDeleteTableCounter, 1)

	mmDeleteTable.t.Helper()

	if mmDeleteTable.inspectFuncDeleteTable != nil {
		mmDeleteTable.inspectFuncDeleteTable(ctx, dp1)
	}

	mm_params := AppPublicServiceServerMockDeleteTableParams{ctx, dp1}

	// Record call args
	mmDeleteTable.DeleteTableMock.mutex.Lock()
	mmDeleteTable.DeleteTableMock.callArgs = append(mmDeleteTable.DeleteTableMock.callArgs, &mm_params)
	mmDeleteTable.DeleteTableMock.mutex.Unlock()

	for _, e := range mmDeleteTable.DeleteTableMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.dp2, e.results.err
		}
	}

	if mmDeleteTable.DeleteTableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteTable.DeleteTableMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteTable.DeleteTableMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteTable.DeleteTableMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockDeleteTableParams{ctx, dp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteTable.t.Errorf("AppPublicServiceServerMock.DeleteTable got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteTable.DeleteTableMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.dp1 != nil && !minimock.Equal(*mm_want_ptrs.dp1, mm_got.dp1) {
				mmDeleteTable.t.Errorf("AppPublicServiceServerMock.DeleteTable got unexpected parameter dp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteTable.DeleteTableMock.defaultExpectation.expectationOrigins.originDp1, *mm_want_ptrs.dp1, mm_got.dp1, minimock.Diff(*mm_want_ptrs.dp1, mm_got.dp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteTable.t.Errorf("AppPublicServiceServerMock.DeleteTable got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteTable.DeleteTableMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteTable.DeleteTableMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteTable.t.Fatal("No results are set for the AppPublicServiceServerMock.DeleteTable")
		}
		return (*mm_results).dp2, (*mm_results).err
	}
	if mmDeleteTable.funcDeleteTable != nil {
		return mmDeleteTable.funcDeleteTable(ctx, dp1)
	}
	mmDeleteTable.t.Fatalf("Unexpected call to AppPublicServiceServerMock.DeleteTable. %v %v", ctx, dp1)
	return
}

// DeleteTableAfterCounter returns a count of finished AppPublicServiceServerMock.DeleteTable invocations
func (mmDeleteTable *AppPublicServiceServerMock) DeleteTableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteTable.afterDeleteTableCounter)
}

// DeleteTableBeforeCounter returns a count of AppPublicServiceServerMock.DeleteTable invocations
func (mmDeleteTable *AppPublicServiceServerMock) DeleteTableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteTable.beforeDeleteTableCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.DeleteTable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteTable *mAppPublicServiceServerMockDeleteTable) Calls() []*AppPublicServiceServerMockDeleteTableParams {
	mmDeleteTable.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockDeleteTableParams, len(mmDeleteTable.callArgs))
	copy(argCopy, mmDeleteTable.callArgs)

	mmDeleteTable.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteTableDone returns true if the count of the DeleteTable invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockDeleteTableDone() bool {
	if m.DeleteTableMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteTableMock.invocationsDone()
}

// MinimockDeleteTableInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockDeleteTableInspect() {
	for _, e := range m.DeleteTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteTable at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteTableCounter := mm_atomic.LoadUint64(&m.afterDeleteTableCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteTableMock.defaultExpectation != nil && afterDeleteTableCounter < 1 {
		if m.DeleteTableMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteTable at\n%s", m.DeleteTableMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteTable at\n%s with params: %#v", m.DeleteTableMock.defaultExpectation.expectationOrigins.origin, *m.DeleteTableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteTable != nil && afterDeleteTableCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.DeleteTable at\n%s", m.funcDeleteTableOrigin)
	}

	if !m.DeleteTableMock.invocationsDone() && afterDeleteTableCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.DeleteTable at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteTableMock.expectedInvocations), m.DeleteTableMock.expectedInvocationsOrigin, afterDeleteTableCounter)
	}
}

type mAppPublicServiceServerMockExport struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockExportExpectation
	expectations       []*AppPublicServiceServerMockExportExpectation

	callArgs []*AppPublicServiceServerMockExportParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockExportExpectation specifies expectation struct of the AppPublicServiceServer.Export
type AppPublicServiceServerMockExportExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockExportParams
	paramPtrs          *AppPublicServiceServerMockExportParamPtrs
	expectationOrigins AppPublicServiceServerMockExportExpectationOrigins
	results            *AppPublicServiceServerMockExportResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockExportParams contains parameters of the AppPublicServiceServer.Export
type AppPublicServiceServerMockExportParams struct {
	ctx context.Context
	ep1 *mm_appv1alpha.ExportRequest
}

// AppPublicServiceServerMockExportParamPtrs contains pointers to parameters of the AppPublicServiceServer.Export
type AppPublicServiceServerMockExportParamPtrs struct {
	ctx *context.Context
	ep1 **mm_appv1alpha.ExportRequest
}

// AppPublicServiceServerMockExportResults contains results of the AppPublicServiceServer.Export
type AppPublicServiceServerMockExportResults struct {
	ep2 *mm_appv1alpha.ExportResponse
	err error
}

// AppPublicServiceServerMockExportOrigins contains origins of expectations of the AppPublicServiceServer.Export
type AppPublicServiceServerMockExportExpectationOrigins struct {
	origin    string
	originCtx string
	originEp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmExport *mAppPublicServiceServerMockExport) Optional() *mAppPublicServiceServerMockExport {
	mmExport.optional = true
	return mmExport
}

// Expect sets up expected params for AppPublicServiceServer.Export
func (mmExport *mAppPublicServiceServerMockExport) Expect(ctx context.Context, ep1 *mm_appv1alpha.ExportRequest) *mAppPublicServiceServerMockExport {
	if mmExport.mock.funcExport != nil {
		mmExport.mock.t.Fatalf("AppPublicServiceServerMock.Export mock is already set by Set")
	}

	if mmExport.defaultExpectation == nil {
		mmExport.defaultExpectation = &AppPublicServiceServerMockExportExpectation{}
	}

	if mmExport.defaultExpectation.paramPtrs != nil {
		mmExport.mock.t.Fatalf("AppPublicServiceServerMock.Export mock is already set by ExpectParams functions")
	}

	mmExport.defaultExpectation.params = &AppPublicServiceServerMockExportParams{ctx, ep1}
	mmExport.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmExport.expectations {
		if minimock.Equal(e.params, mmExport.defaultExpectation.params) {
			mmExport.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmExport.defaultExpectation.params)
		}
	}

	return mmExport
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.Export
func (mmExport *mAppPublicServiceServerMockExport) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockExport {
	if mmExport.mock.funcExport != nil {
		mmExport.mock.t.Fatalf("AppPublicServiceServerMock.Export mock is already set by Set")
	}

	if mmExport.defaultExpectation == nil {
		mmExport.defaultExpectation = &AppPublicServiceServerMockExportExpectation{}
	}

	if mmExport.defaultExpectation.params != nil {
		mmExport.mock.t.Fatalf("AppPublicServiceServerMock.Export mock is already set by Expect")
	}

	if mmExport.defaultExpectation.paramPtrs == nil {
		mmExport.defaultExpectation.paramPtrs = &AppPublicServiceServerMockExportParamPtrs{}
	}
	mmExport.defaultExpectation.paramPtrs.ctx = &ctx
	mmExport.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmExport
}

// ExpectEp1Param2 sets up expected param ep1 for AppPublicServiceServer.Export
func (mmExport *mAppPublicServiceServerMockExport) ExpectEp1Param2(ep1 *mm_appv1alpha.ExportRequest) *mAppPublicServiceServerMockExport {
	if mmExport.mock.funcExport != nil {
		mmExport.mock.t.Fatalf("AppPublicServiceServerMock.Export mock is already set by Set")
	}

	if mmExport.defaultExpectation == nil {
		mmExport.defaultExpectation = &AppPublicServiceServerMockExportExpectation{}
	}

	if mmExport.defaultExpectation.params != nil {
		mmExport.mock.t.Fatalf("AppPublicServiceServerMock.Export mock is already set by Expect")
	}

	if mmExport.defaultExpectation.paramPtrs == nil {
		mmExport.defaultExpectation.paramPtrs = &AppPublicServiceServerMockExportParamPtrs{}
	}
	mmExport.defaultExpectation.paramPtrs.ep1 = &ep1
	mmExport.defaultExpectation.expectationOrigins.originEp1 = minimock.CallerInfo(1)

	return mmExport
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.Export
func (mmExport *mAppPublicServiceServerMockExport) Inspect(f func(ctx context.Context, ep1 *mm_appv1alpha.ExportRequest)) *mAppPublicServiceServerMockExport {
	if mmExport.mock.inspectFuncExport != nil {
		mmExport.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.Export")
	}

	mmExport.mock.inspectFuncExport = f

	return mmExport
}

// Return sets up results that will be returned by AppPublicServiceServer.Export
func (mmExport *mAppPublicServiceServerMockExport) Return(ep2 *mm_appv1alpha.ExportResponse, err error) *AppPublicServiceServerMock {
	if mmExport.mock.funcExport != nil {
		mmExport.mock.t.Fatalf("AppPublicServiceServerMock.Export mock is already set by Set")
	}

	if mmExport.defaultExpectation == nil {
		mmExport.defaultExpectation = &AppPublicServiceServerMockExportExpectation{mock: mmExport.mock}
	}
	mmExport.defaultExpectation.results = &AppPublicServiceServerMockExportResults{ep2, err}
	mmExport.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmExport.mock
}

// Set uses given function f to mock the AppPublicServiceServer.Export method
func (mmExport *mAppPublicServiceServerMockExport) Set(f func(ctx context.Context, ep1 *mm_appv1alpha.ExportRequest) (ep2 *mm_appv1alpha.ExportResponse, err error)) *AppPublicServiceServerMock {
	if mmExport.defaultExpectation != nil {
		mmExport.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.Export method")
	}

	if len(mmExport.expectations) > 0 {
		mmExport.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.Export method")
	}

	mmExport.mock.funcExport = f
	mmExport.mock.funcExportOrigin = minimock.CallerInfo(1)
	return mmExport.mock
}

// When sets expectation for the AppPublicServiceServer.Export which will trigger the result defined by the following
// Then helper
func (mmExport *mAppPublicServiceServerMockExport) When(ctx context.Context, ep1 *mm_appv1alpha.ExportRequest) *AppPublicServiceServerMockExportExpectation {
	if mmExport.mock.funcExport != nil {
		mmExport.mock.t.Fatalf("AppPublicServiceServerMock.Export mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockExportExpectation{
		mock:               mmExport.mock,
		params:             &AppPublicServiceServerMockExportParams{ctx, ep1},
		expectationOrigins: AppPublicServiceServerMockExportExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmExport.expectations = append(mmExport.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.Export return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockExportExpectation) Then(ep2 *mm_appv1alpha.ExportResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockExportResults{ep2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.Export should be invoked
func (mmExport *mAppPublicServiceServerMockExport) Times(n uint64) *mAppPublicServiceServerMockExport {
	if n == 0 {
		mmExport.mock.t.Fatalf("Times of AppPublicServiceServerMock.Export mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmExport.expectedInvocations, n)
	mmExport.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmExport
}

func (mmExport *mAppPublicServiceServerMockExport) invocationsDone() bool {
	if len(mmExport.expectations) == 0 && mmExport.defaultExpectation == nil && mmExport.mock.funcExport == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmExport.mock.afterExportCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmExport.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Export implements mm_appv1alpha.AppPublicServiceServer
func (mmExport *AppPublicServiceServerMock) Export(ctx context.Context, ep1 *mm_appv1alpha.ExportRequest) (ep2 *mm_appv1alpha.ExportResponse, err error) {
	mm_atomic.AddUint64(&mmExport.beforeExportCounter, 1)
	defer mm_atomic.AddUint64(&mmExport.afterExportCounter, 1)

	mmExport.t.Helper()

	if mmExport.inspectFuncExport != nil {
		mmExport.inspectFuncExport(ctx, ep1)
	}

	mm_params := AppPublicServiceServerMockExportParams{ctx, ep1}

	// Record call args
	mmExport.ExportMock.mutex.Lock()
	mmExport.ExportMock.callArgs = append(mmExport.ExportMock.callArgs, &mm_params)
	mmExport.ExportMock.mutex.Unlock()

	for _, e := range mmExport.ExportMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep2, e.results.err
		}
	}

	if mmExport.ExportMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmExport.ExportMock.defaultExpectation.Counter, 1)
		mm_want := mmExport.ExportMock.defaultExpectation.params
		mm_want_ptrs := mmExport.ExportMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockExportParams{ctx, ep1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmExport.t.Errorf("AppPublicServiceServerMock.Export got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmExport.ExportMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.ep1 != nil && !minimock.Equal(*mm_want_ptrs.ep1, mm_got.ep1) {
				mmExport.t.Errorf("AppPublicServiceServerMock.Export got unexpected parameter ep1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmExport.ExportMock.defaultExpectation.expectationOrigins.originEp1, *mm_want_ptrs.ep1, mm_got.ep1, minimock.Diff(*mm_want_ptrs.ep1, mm_got.ep1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmExport.t.Errorf("AppPublicServiceServerMock.Export got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmExport.ExportMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmExport.ExportMock.defaultExpectation.results
		if mm_results == nil {
			mmExport.t.Fatal("No results are set for the AppPublicServiceServerMock.Export")
		}
		return (*mm_results).ep2, (*mm_results).err
	}
	if mmExport.funcExport != nil {
		return mmExport.funcExport(ctx, ep1)
	}
	mmExport.t.Fatalf("Unexpected call to AppPublicServiceServerMock.Export. %v %v", ctx, ep1)
	return
}

// ExportAfterCounter returns a count of finished AppPublicServiceServerMock.Export invocations
func (mmExport *AppPublicServiceServerMock) ExportAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExport.afterExportCounter)
}

// ExportBeforeCounter returns a count of AppPublicServiceServerMock.Export invocations
func (mmExport *AppPublicServiceServerMock) ExportBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExport.beforeExportCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.Export.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmExport *mAppPublicServiceServerMockExport) Calls() []*AppPublicServiceServerMockExportParams {
	mmExport.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockExportParams, len(mmExport.callArgs))
	copy(argCopy, mmExport.callArgs)

	mmExport.mutex.RUnlock()

	return argCopy
}

// MinimockExportDone returns true if the count of the Export invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockExportDone() bool {
	if m.ExportMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ExportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ExportMock.invocationsDone()
}

// MinimockExportInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockExportInspect() {
	for _, e := range m.ExportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.Export at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterExportCounter := mm_atomic.LoadUint64(&m.afterExportCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ExportMock.defaultExpectation != nil && afterExportCounter < 1 {
		if m.ExportMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.Export at\n%s", m.ExportMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.Export at\n%s with params: %#v", m.ExportMock.defaultExpectation.expectationOrigins.origin, *m.ExportMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExport != nil && afterExportCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.Export at\n%s", m.funcExportOrigin)
	}

	if !m.ExportMock.invocationsDone() && afterExportCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.Export at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ExportMock.expectedInvocations), m.ExportMock.expectedInvocationsOrigin, afterExportCounter)
	}
}

type mAppPublicServiceServerMockGetColumnDefinitions struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockGetColumnDefinitionsExpectation
	expectations       []*AppPublicServiceServerMockGetColumnDefinitionsExpectation

	callArgs []*AppPublicServiceServerMockGetColumnDefinitionsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockGetColumnDefinitionsExpectation specifies expectation struct of the AppPublicServiceServer.GetColumnDefinitions
type AppPublicServiceServerMockGetColumnDefinitionsExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockGetColumnDefinitionsParams
	paramPtrs          *AppPublicServiceServerMockGetColumnDefinitionsParamPtrs
	expectationOrigins AppPublicServiceServerMockGetColumnDefinitionsExpectationOrigins
	results            *AppPublicServiceServerMockGetColumnDefinitionsResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockGetColumnDefinitionsParams contains parameters of the AppPublicServiceServer.GetColumnDefinitions
type AppPublicServiceServerMockGetColumnDefinitionsParams struct {
	ctx context.Context
	gp1 *mm_appv1alpha.GetColumnDefinitionsRequest
}

// AppPublicServiceServerMockGetColumnDefinitionsParamPtrs contains pointers to parameters of the AppPublicServiceServer.GetColumnDefinitions
type AppPublicServiceServerMockGetColumnDefinitionsParamPtrs struct {
	ctx *context.Context
	gp1 **mm_appv1alpha.GetColumnDefinitionsRequest
}

// AppPublicServiceServerMockGetColumnDefinitionsResults contains results of the AppPublicServiceServer.GetColumnDefinitions
type AppPublicServiceServerMockGetColumnDefinitionsResults struct {
	gp2 *mm_appv1alpha.GetColumnDefinitionsResponse
	err error
}

// AppPublicServiceServerMockGetColumnDefinitionsOrigins contains origins of expectations of the AppPublicServiceServer.GetColumnDefinitions
type AppPublicServiceServerMockGetColumnDefinitionsExpectationOrigins struct {
	origin    string
	originCtx string
	originGp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetColumnDefinitions *mAppPublicServiceServerMockGetColumnDefinitions) Optional() *mAppPublicServiceServerMockGetColumnDefinitions {
	mmGetColumnDefinitions.optional = true
	return mmGetColumnDefinitions
}

// Expect sets up expected params for AppPublicServiceServer.GetColumnDefinitions
func (mmGetColumnDefinitions *mAppPublicServiceServerMockGetColumnDefinitions) Expect(ctx context.Context, gp1 *mm_appv1alpha.GetColumnDefinitionsRequest) *mAppPublicServiceServerMockGetColumnDefinitions {
	if mmGetColumnDefinitions.mock.funcGetColumnDefinitions != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.GetColumnDefinitions mock is already set by Set")
	}

	if mmGetColumnDefinitions.defaultExpectation == nil {
		mmGetColumnDefinitions.defaultExpectation = &AppPublicServiceServerMockGetColumnDefinitionsExpectation{}
	}

	if mmGetColumnDefinitions.defaultExpectation.paramPtrs != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.GetColumnDefinitions mock is already set by ExpectParams functions")
	}

	mmGetColumnDefinitions.defaultExpectation.params = &AppPublicServiceServerMockGetColumnDefinitionsParams{ctx, gp1}
	mmGetColumnDefinitions.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetColumnDefinitions.expectations {
		if minimock.Equal(e.params, mmGetColumnDefinitions.defaultExpectation.params) {
			mmGetColumnDefinitions.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetColumnDefinitions.defaultExpectation.params)
		}
	}

	return mmGetColumnDefinitions
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.GetColumnDefinitions
func (mmGetColumnDefinitions *mAppPublicServiceServerMockGetColumnDefinitions) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockGetColumnDefinitions {
	if mmGetColumnDefinitions.mock.funcGetColumnDefinitions != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.GetColumnDefinitions mock is already set by Set")
	}

	if mmGetColumnDefinitions.defaultExpectation == nil {
		mmGetColumnDefinitions.defaultExpectation = &AppPublicServiceServerMockGetColumnDefinitionsExpectation{}
	}

	if mmGetColumnDefinitions.defaultExpectation.params != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.GetColumnDefinitions mock is already set by Expect")
	}

	if mmGetColumnDefinitions.defaultExpectation.paramPtrs == nil {
		mmGetColumnDefinitions.defaultExpectation.paramPtrs = &AppPublicServiceServerMockGetColumnDefinitionsParamPtrs{}
	}
	mmGetColumnDefinitions.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetColumnDefinitions.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetColumnDefinitions
}

// ExpectGp1Param2 sets up expected param gp1 for AppPublicServiceServer.GetColumnDefinitions
func (mmGetColumnDefinitions *mAppPublicServiceServerMockGetColumnDefinitions) ExpectGp1Param2(gp1 *mm_appv1alpha.GetColumnDefinitionsRequest) *mAppPublicServiceServerMockGetColumnDefinitions {
	if mmGetColumnDefinitions.mock.funcGetColumnDefinitions != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.GetColumnDefinitions mock is already set by Set")
	}

	if mmGetColumnDefinitions.defaultExpectation == nil {
		mmGetColumnDefinitions.defaultExpectation = &AppPublicServiceServerMockGetColumnDefinitionsExpectation{}
	}

	if mmGetColumnDefinitions.defaultExpectation.params != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.GetColumnDefinitions mock is already set by Expect")
	}

	if mmGetColumnDefinitions.defaultExpectation.paramPtrs == nil {
		mmGetColumnDefinitions.defaultExpectation.paramPtrs = &AppPublicServiceServerMockGetColumnDefinitionsParamPtrs{}
	}
	mmGetColumnDefinitions.defaultExpectation.paramPtrs.gp1 = &gp1
	mmGetColumnDefinitions.defaultExpectation.expectationOrigins.originGp1 = minimock.CallerInfo(1)

	return mmGetColumnDefinitions
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.GetColumnDefinitions
func (mmGetColumnDefinitions *mAppPublicServiceServerMockGetColumnDefinitions) Inspect(f func(ctx context.Context, gp1 *mm_appv1alpha.GetColumnDefinitionsRequest)) *mAppPublicServiceServerMockGetColumnDefinitions {
	if mmGetColumnDefinitions.mock.inspectFuncGetColumnDefinitions != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.GetColumnDefinitions")
	}

	mmGetColumnDefinitions.mock.inspectFuncGetColumnDefinitions = f

	return mmGetColumnDefinitions
}

// Return sets up results that will be returned by AppPublicServiceServer.GetColumnDefinitions
func (mmGetColumnDefinitions *mAppPublicServiceServerMockGetColumnDefinitions) Return(gp2 *mm_appv1alpha.GetColumnDefinitionsResponse, err error) *AppPublicServiceServerMock {
	if mmGetColumnDefinitions.mock.funcGetColumnDefinitions != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.GetColumnDefinitions mock is already set by Set")
	}

	if mmGetColumnDefinitions.defaultExpectation == nil {
		mmGetColumnDefinitions.defaultExpectation = &AppPublicServiceServerMockGetColumnDefinitionsExpectation{mock: mmGetColumnDefinitions.mock}
	}
	mmGetColumnDefinitions.defaultExpectation.results = &AppPublicServiceServerMockGetColumnDefinitionsResults{gp2, err}
	mmGetColumnDefinitions.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetColumnDefinitions.mock
}

// Set uses given function f to mock the AppPublicServiceServer.GetColumnDefinitions method
func (mmGetColumnDefinitions *mAppPublicServiceServerMockGetColumnDefinitions) Set(f func(ctx context.Context, gp1 *mm_appv1alpha.GetColumnDefinitionsRequest) (gp2 *mm_appv1alpha.GetColumnDefinitionsResponse, err error)) *AppPublicServiceServerMock {
	if mmGetColumnDefinitions.defaultExpectation != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.GetColumnDefinitions method")
	}

	if len(mmGetColumnDefinitions.expectations) > 0 {
		mmGetColumnDefinitions.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.GetColumnDefinitions method")
	}

	mmGetColumnDefinitions.mock.funcGetColumnDefinitions = f
	mmGetColumnDefinitions.mock.funcGetColumnDefinitionsOrigin = minimock.CallerInfo(1)
	return mmGetColumnDefinitions.mock
}

// When sets expectation for the AppPublicServiceServer.GetColumnDefinitions which will trigger the result defined by the following
// Then helper
func (mmGetColumnDefinitions *mAppPublicServiceServerMockGetColumnDefinitions) When(ctx context.Context, gp1 *mm_appv1alpha.GetColumnDefinitionsRequest) *AppPublicServiceServerMockGetColumnDefinitionsExpectation {
	if mmGetColumnDefinitions.mock.funcGetColumnDefinitions != nil {
		mmGetColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.GetColumnDefinitions mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockGetColumnDefinitionsExpectation{
		mock:               mmGetColumnDefinitions.mock,
		params:             &AppPublicServiceServerMockGetColumnDefinitionsParams{ctx, gp1},
		expectationOrigins: AppPublicServiceServerMockGetColumnDefinitionsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetColumnDefinitions.expectations = append(mmGetColumnDefinitions.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.GetColumnDefinitions return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockGetColumnDefinitionsExpectation) Then(gp2 *mm_appv1alpha.GetColumnDefinitionsResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockGetColumnDefinitionsResults{gp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.GetColumnDefinitions should be invoked
func (mmGetColumnDefinitions *mAppPublicServiceServerMockGetColumnDefinitions) Times(n uint64) *mAppPublicServiceServerMockGetColumnDefinitions {
	if n == 0 {
		mmGetColumnDefinitions.mock.t.Fatalf("Times of AppPublicServiceServerMock.GetColumnDefinitions mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetColumnDefinitions.expectedInvocations, n)
	mmGetColumnDefinitions.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetColumnDefinitions
}

func (mmGetColumnDefinitions *mAppPublicServiceServerMockGetColumnDefinitions) invocationsDone() bool {
	if len(mmGetColumnDefinitions.expectations) == 0 && mmGetColumnDefinitions.defaultExpectation == nil && mmGetColumnDefinitions.mock.funcGetColumnDefinitions == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetColumnDefinitions.mock.afterGetColumnDefinitionsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetColumnDefinitions.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetColumnDefinitions implements mm_appv1alpha.AppPublicServiceServer
func (mmGetColumnDefinitions *AppPublicServiceServerMock) GetColumnDefinitions(ctx context.Context, gp1 *mm_appv1alpha.GetColumnDefinitionsRequest) (gp2 *mm_appv1alpha.GetColumnDefinitionsResponse, err error) {
	mm_atomic.AddUint64(&mmGetColumnDefinitions.beforeGetColumnDefinitionsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetColumnDefinitions.afterGetColumnDefinitionsCounter, 1)

	mmGetColumnDefinitions.t.Helper()

	if mmGetColumnDefinitions.inspectFuncGetColumnDefinitions != nil {
		mmGetColumnDefinitions.inspectFuncGetColumnDefinitions(ctx, gp1)
	}

	mm_params := AppPublicServiceServerMockGetColumnDefinitionsParams{ctx, gp1}

	// Record call args
	mmGetColumnDefinitions.GetColumnDefinitionsMock.mutex.Lock()
	mmGetColumnDefinitions.GetColumnDefinitionsMock.callArgs = append(mmGetColumnDefinitions.GetColumnDefinitionsMock.callArgs, &mm_params)
	mmGetColumnDefinitions.GetColumnDefinitionsMock.mutex.Unlock()

	for _, e := range mmGetColumnDefinitions.GetColumnDefinitionsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp2, e.results.err
		}
	}

	if mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation.params
		mm_want_ptrs := mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockGetColumnDefinitionsParams{ctx, gp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetColumnDefinitions.t.Errorf("AppPublicServiceServerMock.GetColumnDefinitions got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.gp1 != nil && !minimock.Equal(*mm_want_ptrs.gp1, mm_got.gp1) {
				mmGetColumnDefinitions.t.Errorf("AppPublicServiceServerMock.GetColumnDefinitions got unexpected parameter gp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation.expectationOrigins.originGp1, *mm_want_ptrs.gp1, mm_got.gp1, minimock.Diff(*mm_want_ptrs.gp1, mm_got.gp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetColumnDefinitions.t.Errorf("AppPublicServiceServerMock.GetColumnDefinitions got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetColumnDefinitions.GetColumnDefinitionsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetColumnDefinitions.t.Fatal("No results are set for the AppPublicServiceServerMock.GetColumnDefinitions")
		}
		return (*mm_results).gp2, (*mm_results).err
	}
	if mmGetColumnDefinitions.funcGetColumnDefinitions != nil {
		return mmGetColumnDefinitions.funcGetColumnDefinitions(ctx, gp1)
	}
	mmGetColumnDefinitions.t.Fatalf("Unexpected call to AppPublicServiceServerMock.GetColumnDefinitions. %v %v", ctx, gp1)
	return
}

// GetColumnDefinitionsAfterCounter returns a count of finished AppPublicServiceServerMock.GetColumnDefinitions invocations
func (mmGetColumnDefinitions *AppPublicServiceServerMock) GetColumnDefinitionsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetColumnDefinitions.afterGetColumnDefinitionsCounter)
}

// GetColumnDefinitionsBeforeCounter returns a count of AppPublicServiceServerMock.GetColumnDefinitions invocations
func (mmGetColumnDefinitions *AppPublicServiceServerMock) GetColumnDefinitionsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetColumnDefinitions.beforeGetColumnDefinitionsCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.GetColumnDefinitions.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetColumnDefinitions *mAppPublicServiceServerMockGetColumnDefinitions) Calls() []*AppPublicServiceServerMockGetColumnDefinitionsParams {
	mmGetColumnDefinitions.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockGetColumnDefinitionsParams, len(mmGetColumnDefinitions.callArgs))
	copy(argCopy, mmGetColumnDefinitions.callArgs)

	mmGetColumnDefinitions.mutex.RUnlock()

	return argCopy
}

// MinimockGetColumnDefinitionsDone returns true if the count of the GetColumnDefinitions invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockGetColumnDefinitionsDone() bool {
	if m.GetColumnDefinitionsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetColumnDefinitionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetColumnDefinitionsMock.invocationsDone()
}

// MinimockGetColumnDefinitionsInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockGetColumnDefinitionsInspect() {
	for _, e := range m.GetColumnDefinitionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.GetColumnDefinitions at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetColumnDefinitionsCounter := mm_atomic.LoadUint64(&m.afterGetColumnDefinitionsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetColumnDefinitionsMock.defaultExpectation != nil && afterGetColumnDefinitionsCounter < 1 {
		if m.GetColumnDefinitionsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.GetColumnDefinitions at\n%s", m.GetColumnDefinitionsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.GetColumnDefinitions at\n%s with params: %#v", m.GetColumnDefinitionsMock.defaultExpectation.expectationOrigins.origin, *m.GetColumnDefinitionsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetColumnDefinitions != nil && afterGetColumnDefinitionsCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.GetColumnDefinitions at\n%s", m.funcGetColumnDefinitionsOrigin)
	}

	if !m.GetColumnDefinitionsMock.invocationsDone() && afterGetColumnDefinitionsCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.GetColumnDefinitions at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetColumnDefinitionsMock.expectedInvocations), m.GetColumnDefinitionsMock.expectedInvocationsOrigin, afterGetColumnDefinitionsCounter)
	}
}

type mAppPublicServiceServerMockGetPlaygroundConversation struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockGetPlaygroundConversationExpectation
	expectations       []*AppPublicServiceServerMockGetPlaygroundConversationExpectation

	callArgs []*AppPublicServiceServerMockGetPlaygroundConversationParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockGetPlaygroundConversationExpectation specifies expectation struct of the AppPublicServiceServer.GetPlaygroundConversation
type AppPublicServiceServerMockGetPlaygroundConversationExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockGetPlaygroundConversationParams
	paramPtrs          *AppPublicServiceServerMockGetPlaygroundConversationParamPtrs
	expectationOrigins AppPublicServiceServerMockGetPlaygroundConversationExpectationOrigins
	results            *AppPublicServiceServerMockGetPlaygroundConversationResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockGetPlaygroundConversationParams contains parameters of the AppPublicServiceServer.GetPlaygroundConversation
type AppPublicServiceServerMockGetPlaygroundConversationParams struct {
	ctx context.Context
	gp1 *mm_appv1alpha.GetPlaygroundConversationRequest
}

// AppPublicServiceServerMockGetPlaygroundConversationParamPtrs contains pointers to parameters of the AppPublicServiceServer.GetPlaygroundConversation
type AppPublicServiceServerMockGetPlaygroundConversationParamPtrs struct {
	ctx *context.Context
	gp1 **mm_appv1alpha.GetPlaygroundConversationRequest
}

// AppPublicServiceServerMockGetPlaygroundConversationResults contains results of the AppPublicServiceServer.GetPlaygroundConversation
type AppPublicServiceServerMockGetPlaygroundConversationResults struct {
	gp2 *mm_appv1alpha.GetPlaygroundConversationResponse
	err error
}

// AppPublicServiceServerMockGetPlaygroundConversationOrigins contains origins of expectations of the AppPublicServiceServer.GetPlaygroundConversation
type AppPublicServiceServerMockGetPlaygroundConversationExpectationOrigins struct {
	origin    string
	originCtx string
	originGp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetPlaygroundConversation *mAppPublicServiceServerMockGetPlaygroundConversation) Optional() *mAppPublicServiceServerMockGetPlaygroundConversation {
	mmGetPlaygroundConversation.optional = true
	return mmGetPlaygroundConversation
}

// Expect sets up expected params for AppPublicServiceServer.GetPlaygroundConversation
func (mmGetPlaygroundConversation *mAppPublicServiceServerMockGetPlaygroundConversation) Expect(ctx context.Context, gp1 *mm_appv1alpha.GetPlaygroundConversationRequest) *mAppPublicServiceServerMockGetPlaygroundConversation {
	if mmGetPlaygroundConversation.mock.funcGetPlaygroundConversation != nil {
		mmGetPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.GetPlaygroundConversation mock is already set by Set")
	}

	if mmGetPlaygroundConversation.defaultExpectation == nil {
		mmGetPlaygroundConversation.defaultExpectation = &AppPublicServiceServerMockGetPlaygroundConversationExpectation{}
	}

	if mmGetPlaygroundConversation.defaultExpectation.paramPtrs != nil {
		mmGetPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.GetPlaygroundConversation mock is already set by ExpectParams functions")
	}

	mmGetPlaygroundConversation.defaultExpectation.params = &AppPublicServiceServerMockGetPlaygroundConversationParams{ctx, gp1}
	mmGetPlaygroundConversation.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetPlaygroundConversation.expectations {
		if minimock.Equal(e.params, mmGetPlaygroundConversation.defaultExpectation.params) {
			mmGetPlaygroundConversation.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetPlaygroundConversation.defaultExpectation.params)
		}
	}

	return mmGetPlaygroundConversation
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.GetPlaygroundConversation
func (mmGetPlaygroundConversation *mAppPublicServiceServerMockGetPlaygroundConversation) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockGetPlaygroundConversation {
	if mmGetPlaygroundConversation.mock.funcGetPlaygroundConversation != nil {
		mmGetPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.GetPlaygroundConversation mock is already set by Set")
	}

	if mmGetPlaygroundConversation.defaultExpectation == nil {
		mmGetPlaygroundConversation.defaultExpectation = &AppPublicServiceServerMockGetPlaygroundConversationExpectation{}
	}

	if mmGetPlaygroundConversation.defaultExpectation.params != nil {
		mmGetPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.GetPlaygroundConversation mock is already set by Expect")
	}

	if mmGetPlaygroundConversation.defaultExpectation.paramPtrs == nil {
		mmGetPlaygroundConversation.defaultExpectation.paramPtrs = &AppPublicServiceServerMockGetPlaygroundConversationParamPtrs{}
	}
	mmGetPlaygroundConversation.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetPlaygroundConversation.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetPlaygroundConversation
}

// ExpectGp1Param2 sets up expected param gp1 for AppPublicServiceServer.GetPlaygroundConversation
func (mmGetPlaygroundConversation *mAppPublicServiceServerMockGetPlaygroundConversation) ExpectGp1Param2(gp1 *mm_appv1alpha.GetPlaygroundConversationRequest) *mAppPublicServiceServerMockGetPlaygroundConversation {
	if mmGetPlaygroundConversation.mock.funcGetPlaygroundConversation != nil {
		mmGetPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.GetPlaygroundConversation mock is already set by Set")
	}

	if mmGetPlaygroundConversation.defaultExpectation == nil {
		mmGetPlaygroundConversation.defaultExpectation = &AppPublicServiceServerMockGetPlaygroundConversationExpectation{}
	}

	if mmGetPlaygroundConversation.defaultExpectation.params != nil {
		mmGetPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.GetPlaygroundConversation mock is already set by Expect")
	}

	if mmGetPlaygroundConversation.defaultExpectation.paramPtrs == nil {
		mmGetPlaygroundConversation.defaultExpectation.paramPtrs = &AppPublicServiceServerMockGetPlaygroundConversationParamPtrs{}
	}
	mmGetPlaygroundConversation.defaultExpectation.paramPtrs.gp1 = &gp1
	mmGetPlaygroundConversation.defaultExpectation.expectationOrigins.originGp1 = minimock.CallerInfo(1)

	return mmGetPlaygroundConversation
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.GetPlaygroundConversation
func (mmGetPlaygroundConversation *mAppPublicServiceServerMockGetPlaygroundConversation) Inspect(f func(ctx context.Context, gp1 *mm_appv1alpha.GetPlaygroundConversationRequest)) *mAppPublicServiceServerMockGetPlaygroundConversation {
	if mmGetPlaygroundConversation.mock.inspectFuncGetPlaygroundConversation != nil {
		mmGetPlaygroundConversation.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.GetPlaygroundConversation")
	}

	mmGetPlaygroundConversation.mock.inspectFuncGetPlaygroundConversation = f

	return mmGetPlaygroundConversation
}

// Return sets up results that will be returned by AppPublicServiceServer.GetPlaygroundConversation
func (mmGetPlaygroundConversation *mAppPublicServiceServerMockGetPlaygroundConversation) Return(gp2 *mm_appv1alpha.GetPlaygroundConversationResponse, err error) *AppPublicServiceServerMock {
	if mmGetPlaygroundConversation.mock.funcGetPlaygroundConversation != nil {
		mmGetPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.GetPlaygroundConversation mock is already set by Set")
	}

	if mmGetPlaygroundConversation.defaultExpectation == nil {
		mmGetPlaygroundConversation.defaultExpectation = &AppPublicServiceServerMockGetPlaygroundConversationExpectation{mock: mmGetPlaygroundConversation.mock}
	}
	mmGetPlaygroundConversation.defaultExpectation.results = &AppPublicServiceServerMockGetPlaygroundConversationResults{gp2, err}
	mmGetPlaygroundConversation.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetPlaygroundConversation.mock
}

// Set uses given function f to mock the AppPublicServiceServer.GetPlaygroundConversation method
func (mmGetPlaygroundConversation *mAppPublicServiceServerMockGetPlaygroundConversation) Set(f func(ctx context.Context, gp1 *mm_appv1alpha.GetPlaygroundConversationRequest) (gp2 *mm_appv1alpha.GetPlaygroundConversationResponse, err error)) *AppPublicServiceServerMock {
	if mmGetPlaygroundConversation.defaultExpectation != nil {
		mmGetPlaygroundConversation.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.GetPlaygroundConversation method")
	}

	if len(mmGetPlaygroundConversation.expectations) > 0 {
		mmGetPlaygroundConversation.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.GetPlaygroundConversation method")
	}

	mmGetPlaygroundConversation.mock.funcGetPlaygroundConversation = f
	mmGetPlaygroundConversation.mock.funcGetPlaygroundConversationOrigin = minimock.CallerInfo(1)
	return mmGetPlaygroundConversation.mock
}

// When sets expectation for the AppPublicServiceServer.GetPlaygroundConversation which will trigger the result defined by the following
// Then helper
func (mmGetPlaygroundConversation *mAppPublicServiceServerMockGetPlaygroundConversation) When(ctx context.Context, gp1 *mm_appv1alpha.GetPlaygroundConversationRequest) *AppPublicServiceServerMockGetPlaygroundConversationExpectation {
	if mmGetPlaygroundConversation.mock.funcGetPlaygroundConversation != nil {
		mmGetPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.GetPlaygroundConversation mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockGetPlaygroundConversationExpectation{
		mock:               mmGetPlaygroundConversation.mock,
		params:             &AppPublicServiceServerMockGetPlaygroundConversationParams{ctx, gp1},
		expectationOrigins: AppPublicServiceServerMockGetPlaygroundConversationExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetPlaygroundConversation.expectations = append(mmGetPlaygroundConversation.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.GetPlaygroundConversation return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockGetPlaygroundConversationExpectation) Then(gp2 *mm_appv1alpha.GetPlaygroundConversationResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockGetPlaygroundConversationResults{gp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.GetPlaygroundConversation should be invoked
func (mmGetPlaygroundConversation *mAppPublicServiceServerMockGetPlaygroundConversation) Times(n uint64) *mAppPublicServiceServerMockGetPlaygroundConversation {
	if n == 0 {
		mmGetPlaygroundConversation.mock.t.Fatalf("Times of AppPublicServiceServerMock.GetPlaygroundConversation mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetPlaygroundConversation.expectedInvocations, n)
	mmGetPlaygroundConversation.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetPlaygroundConversation
}

func (mmGetPlaygroundConversation *mAppPublicServiceServerMockGetPlaygroundConversation) invocationsDone() bool {
	if len(mmGetPlaygroundConversation.expectations) == 0 && mmGetPlaygroundConversation.defaultExpectation == nil && mmGetPlaygroundConversation.mock.funcGetPlaygroundConversation == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetPlaygroundConversation.mock.afterGetPlaygroundConversationCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetPlaygroundConversation.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetPlaygroundConversation implements mm_appv1alpha.AppPublicServiceServer
func (mmGetPlaygroundConversation *AppPublicServiceServerMock) GetPlaygroundConversation(ctx context.Context, gp1 *mm_appv1alpha.GetPlaygroundConversationRequest) (gp2 *mm_appv1alpha.GetPlaygroundConversationResponse, err error) {
	mm_atomic.AddUint64(&mmGetPlaygroundConversation.beforeGetPlaygroundConversationCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPlaygroundConversation.afterGetPlaygroundConversationCounter, 1)

	mmGetPlaygroundConversation.t.Helper()

	if mmGetPlaygroundConversation.inspectFuncGetPlaygroundConversation != nil {
		mmGetPlaygroundConversation.inspectFuncGetPlaygroundConversation(ctx, gp1)
	}

	mm_params := AppPublicServiceServerMockGetPlaygroundConversationParams{ctx, gp1}

	// Record call args
	mmGetPlaygroundConversation.GetPlaygroundConversationMock.mutex.Lock()
	mmGetPlaygroundConversation.GetPlaygroundConversationMock.callArgs = append(mmGetPlaygroundConversation.GetPlaygroundConversationMock.callArgs, &mm_params)
	mmGetPlaygroundConversation.GetPlaygroundConversationMock.mutex.Unlock()

	for _, e := range mmGetPlaygroundConversation.GetPlaygroundConversationMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp2, e.results.err
		}
	}

	if mmGetPlaygroundConversation.GetPlaygroundConversationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPlaygroundConversation.GetPlaygroundConversationMock.defaultExpectation.Counter, 1)
		mm_want := mmGetPlaygroundConversation.GetPlaygroundConversationMock.defaultExpectation.params
		mm_want_ptrs := mmGetPlaygroundConversation.GetPlaygroundConversationMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockGetPlaygroundConversationParams{ctx, gp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetPlaygroundConversation.t.Errorf("AppPublicServiceServerMock.GetPlaygroundConversation got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetPlaygroundConversation.GetPlaygroundConversationMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.gp1 != nil && !minimock.Equal(*mm_want_ptrs.gp1, mm_got.gp1) {
				mmGetPlaygroundConversation.t.Errorf("AppPublicServiceServerMock.GetPlaygroundConversation got unexpected parameter gp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetPlaygroundConversation.GetPlaygroundConversationMock.defaultExpectation.expectationOrigins.originGp1, *mm_want_ptrs.gp1, mm_got.gp1, minimock.Diff(*mm_want_ptrs.gp1, mm_got.gp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetPlaygroundConversation.t.Errorf("AppPublicServiceServerMock.GetPlaygroundConversation got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetPlaygroundConversation.GetPlaygroundConversationMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetPlaygroundConversation.GetPlaygroundConversationMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPlaygroundConversation.t.Fatal("No results are set for the AppPublicServiceServerMock.GetPlaygroundConversation")
		}
		return (*mm_results).gp2, (*mm_results).err
	}
	if mmGetPlaygroundConversation.funcGetPlaygroundConversation != nil {
		return mmGetPlaygroundConversation.funcGetPlaygroundConversation(ctx, gp1)
	}
	mmGetPlaygroundConversation.t.Fatalf("Unexpected call to AppPublicServiceServerMock.GetPlaygroundConversation. %v %v", ctx, gp1)
	return
}

// GetPlaygroundConversationAfterCounter returns a count of finished AppPublicServiceServerMock.GetPlaygroundConversation invocations
func (mmGetPlaygroundConversation *AppPublicServiceServerMock) GetPlaygroundConversationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPlaygroundConversation.afterGetPlaygroundConversationCounter)
}

// GetPlaygroundConversationBeforeCounter returns a count of AppPublicServiceServerMock.GetPlaygroundConversation invocations
func (mmGetPlaygroundConversation *AppPublicServiceServerMock) GetPlaygroundConversationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPlaygroundConversation.beforeGetPlaygroundConversationCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.GetPlaygroundConversation.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetPlaygroundConversation *mAppPublicServiceServerMockGetPlaygroundConversation) Calls() []*AppPublicServiceServerMockGetPlaygroundConversationParams {
	mmGetPlaygroundConversation.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockGetPlaygroundConversationParams, len(mmGetPlaygroundConversation.callArgs))
	copy(argCopy, mmGetPlaygroundConversation.callArgs)

	mmGetPlaygroundConversation.mutex.RUnlock()

	return argCopy
}

// MinimockGetPlaygroundConversationDone returns true if the count of the GetPlaygroundConversation invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockGetPlaygroundConversationDone() bool {
	if m.GetPlaygroundConversationMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetPlaygroundConversationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetPlaygroundConversationMock.invocationsDone()
}

// MinimockGetPlaygroundConversationInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockGetPlaygroundConversationInspect() {
	for _, e := range m.GetPlaygroundConversationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.GetPlaygroundConversation at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetPlaygroundConversationCounter := mm_atomic.LoadUint64(&m.afterGetPlaygroundConversationCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetPlaygroundConversationMock.defaultExpectation != nil && afterGetPlaygroundConversationCounter < 1 {
		if m.GetPlaygroundConversationMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.GetPlaygroundConversation at\n%s", m.GetPlaygroundConversationMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.GetPlaygroundConversation at\n%s with params: %#v", m.GetPlaygroundConversationMock.defaultExpectation.expectationOrigins.origin, *m.GetPlaygroundConversationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPlaygroundConversation != nil && afterGetPlaygroundConversationCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.GetPlaygroundConversation at\n%s", m.funcGetPlaygroundConversationOrigin)
	}

	if !m.GetPlaygroundConversationMock.invocationsDone() && afterGetPlaygroundConversationCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.GetPlaygroundConversation at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetPlaygroundConversationMock.expectedInvocations), m.GetPlaygroundConversationMock.expectedInvocationsOrigin, afterGetPlaygroundConversationCounter)
	}
}

type mAppPublicServiceServerMockGetTable struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockGetTableExpectation
	expectations       []*AppPublicServiceServerMockGetTableExpectation

	callArgs []*AppPublicServiceServerMockGetTableParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockGetTableExpectation specifies expectation struct of the AppPublicServiceServer.GetTable
type AppPublicServiceServerMockGetTableExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockGetTableParams
	paramPtrs          *AppPublicServiceServerMockGetTableParamPtrs
	expectationOrigins AppPublicServiceServerMockGetTableExpectationOrigins
	results            *AppPublicServiceServerMockGetTableResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockGetTableParams contains parameters of the AppPublicServiceServer.GetTable
type AppPublicServiceServerMockGetTableParams struct {
	ctx context.Context
	gp1 *mm_appv1alpha.GetTableRequest
}

// AppPublicServiceServerMockGetTableParamPtrs contains pointers to parameters of the AppPublicServiceServer.GetTable
type AppPublicServiceServerMockGetTableParamPtrs struct {
	ctx *context.Context
	gp1 **mm_appv1alpha.GetTableRequest
}

// AppPublicServiceServerMockGetTableResults contains results of the AppPublicServiceServer.GetTable
type AppPublicServiceServerMockGetTableResults struct {
	gp2 *mm_appv1alpha.GetTableResponse
	err error
}

// AppPublicServiceServerMockGetTableOrigins contains origins of expectations of the AppPublicServiceServer.GetTable
type AppPublicServiceServerMockGetTableExpectationOrigins struct {
	origin    string
	originCtx string
	originGp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetTable *mAppPublicServiceServerMockGetTable) Optional() *mAppPublicServiceServerMockGetTable {
	mmGetTable.optional = true
	return mmGetTable
}

// Expect sets up expected params for AppPublicServiceServer.GetTable
func (mmGetTable *mAppPublicServiceServerMockGetTable) Expect(ctx context.Context, gp1 *mm_appv1alpha.GetTableRequest) *mAppPublicServiceServerMockGetTable {
	if mmGetTable.mock.funcGetTable != nil {
		mmGetTable.mock.t.Fatalf("AppPublicServiceServerMock.GetTable mock is already set by Set")
	}

	if mmGetTable.defaultExpectation == nil {
		mmGetTable.defaultExpectation = &AppPublicServiceServerMockGetTableExpectation{}
	}

	if mmGetTable.defaultExpectation.paramPtrs != nil {
		mmGetTable.mock.t.Fatalf("AppPublicServiceServerMock.GetTable mock is already set by ExpectParams functions")
	}

	mmGetTable.defaultExpectation.params = &AppPublicServiceServerMockGetTableParams{ctx, gp1}
	mmGetTable.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetTable.expectations {
		if minimock.Equal(e.params, mmGetTable.defaultExpectation.params) {
			mmGetTable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetTable.defaultExpectation.params)
		}
	}

	return mmGetTable
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.GetTable
func (mmGetTable *mAppPublicServiceServerMockGetTable) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockGetTable {
	if mmGetTable.mock.funcGetTable != nil {
		mmGetTable.mock.t.Fatalf("AppPublicServiceServerMock.GetTable mock is already set by Set")
	}

	if mmGetTable.defaultExpectation == nil {
		mmGetTable.defaultExpectation = &AppPublicServiceServerMockGetTableExpectation{}
	}

	if mmGetTable.defaultExpectation.params != nil {
		mmGetTable.mock.t.Fatalf("AppPublicServiceServerMock.GetTable mock is already set by Expect")
	}

	if mmGetTable.defaultExpectation.paramPtrs == nil {
		mmGetTable.defaultExpectation.paramPtrs = &AppPublicServiceServerMockGetTableParamPtrs{}
	}
	mmGetTable.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetTable.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetTable
}

// ExpectGp1Param2 sets up expected param gp1 for AppPublicServiceServer.GetTable
func (mmGetTable *mAppPublicServiceServerMockGetTable) ExpectGp1Param2(gp1 *mm_appv1alpha.GetTableRequest) *mAppPublicServiceServerMockGetTable {
	if mmGetTable.mock.funcGetTable != nil {
		mmGetTable.mock.t.Fatalf("AppPublicServiceServerMock.GetTable mock is already set by Set")
	}

	if mmGetTable.defaultExpectation == nil {
		mmGetTable.defaultExpectation = &AppPublicServiceServerMockGetTableExpectation{}
	}

	if mmGetTable.defaultExpectation.params != nil {
		mmGetTable.mock.t.Fatalf("AppPublicServiceServerMock.GetTable mock is already set by Expect")
	}

	if mmGetTable.defaultExpectation.paramPtrs == nil {
		mmGetTable.defaultExpectation.paramPtrs = &AppPublicServiceServerMockGetTableParamPtrs{}
	}
	mmGetTable.defaultExpectation.paramPtrs.gp1 = &gp1
	mmGetTable.defaultExpectation.expectationOrigins.originGp1 = minimock.CallerInfo(1)

	return mmGetTable
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.GetTable
func (mmGetTable *mAppPublicServiceServerMockGetTable) Inspect(f func(ctx context.Context, gp1 *mm_appv1alpha.GetTableRequest)) *mAppPublicServiceServerMockGetTable {
	if mmGetTable.mock.inspectFuncGetTable != nil {
		mmGetTable.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.GetTable")
	}

	mmGetTable.mock.inspectFuncGetTable = f

	return mmGetTable
}

// Return sets up results that will be returned by AppPublicServiceServer.GetTable
func (mmGetTable *mAppPublicServiceServerMockGetTable) Return(gp2 *mm_appv1alpha.GetTableResponse, err error) *AppPublicServiceServerMock {
	if mmGetTable.mock.funcGetTable != nil {
		mmGetTable.mock.t.Fatalf("AppPublicServiceServerMock.GetTable mock is already set by Set")
	}

	if mmGetTable.defaultExpectation == nil {
		mmGetTable.defaultExpectation = &AppPublicServiceServerMockGetTableExpectation{mock: mmGetTable.mock}
	}
	mmGetTable.defaultExpectation.results = &AppPublicServiceServerMockGetTableResults{gp2, err}
	mmGetTable.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetTable.mock
}

// Set uses given function f to mock the AppPublicServiceServer.GetTable method
func (mmGetTable *mAppPublicServiceServerMockGetTable) Set(f func(ctx context.Context, gp1 *mm_appv1alpha.GetTableRequest) (gp2 *mm_appv1alpha.GetTableResponse, err error)) *AppPublicServiceServerMock {
	if mmGetTable.defaultExpectation != nil {
		mmGetTable.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.GetTable method")
	}

	if len(mmGetTable.expectations) > 0 {
		mmGetTable.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.GetTable method")
	}

	mmGetTable.mock.funcGetTable = f
	mmGetTable.mock.funcGetTableOrigin = minimock.CallerInfo(1)
	return mmGetTable.mock
}

// When sets expectation for the AppPublicServiceServer.GetTable which will trigger the result defined by the following
// Then helper
func (mmGetTable *mAppPublicServiceServerMockGetTable) When(ctx context.Context, gp1 *mm_appv1alpha.GetTableRequest) *AppPublicServiceServerMockGetTableExpectation {
	if mmGetTable.mock.funcGetTable != nil {
		mmGetTable.mock.t.Fatalf("AppPublicServiceServerMock.GetTable mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockGetTableExpectation{
		mock:               mmGetTable.mock,
		params:             &AppPublicServiceServerMockGetTableParams{ctx, gp1},
		expectationOrigins: AppPublicServiceServerMockGetTableExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetTable.expectations = append(mmGetTable.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.GetTable return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockGetTableExpectation) Then(gp2 *mm_appv1alpha.GetTableResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockGetTableResults{gp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.GetTable should be invoked
func (mmGetTable *mAppPublicServiceServerMockGetTable) Times(n uint64) *mAppPublicServiceServerMockGetTable {
	if n == 0 {
		mmGetTable.mock.t.Fatalf("Times of AppPublicServiceServerMock.GetTable mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetTable.expectedInvocations, n)
	mmGetTable.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetTable
}

func (mmGetTable *mAppPublicServiceServerMockGetTable) invocationsDone() bool {
	if len(mmGetTable.expectations) == 0 && mmGetTable.defaultExpectation == nil && mmGetTable.mock.funcGetTable == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetTable.mock.afterGetTableCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetTable.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetTable implements mm_appv1alpha.AppPublicServiceServer
func (mmGetTable *AppPublicServiceServerMock) GetTable(ctx context.Context, gp1 *mm_appv1alpha.GetTableRequest) (gp2 *mm_appv1alpha.GetTableResponse, err error) {
	mm_atomic.AddUint64(&mmGetTable.beforeGetTableCounter, 1)
	defer mm_atomic.AddUint64(&mmGetTable.afterGetTableCounter, 1)

	mmGetTable.t.Helper()

	if mmGetTable.inspectFuncGetTable != nil {
		mmGetTable.inspectFuncGetTable(ctx, gp1)
	}

	mm_params := AppPublicServiceServerMockGetTableParams{ctx, gp1}

	// Record call args
	mmGetTable.GetTableMock.mutex.Lock()
	mmGetTable.GetTableMock.callArgs = append(mmGetTable.GetTableMock.callArgs, &mm_params)
	mmGetTable.GetTableMock.mutex.Unlock()

	for _, e := range mmGetTable.GetTableMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp2, e.results.err
		}
	}

	if mmGetTable.GetTableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetTable.GetTableMock.defaultExpectation.Counter, 1)
		mm_want := mmGetTable.GetTableMock.defaultExpectation.params
		mm_want_ptrs := mmGetTable.GetTableMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockGetTableParams{ctx, gp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetTable.t.Errorf("AppPublicServiceServerMock.GetTable got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetTable.GetTableMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.gp1 != nil && !minimock.Equal(*mm_want_ptrs.gp1, mm_got.gp1) {
				mmGetTable.t.Errorf("AppPublicServiceServerMock.GetTable got unexpected parameter gp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetTable.GetTableMock.defaultExpectation.expectationOrigins.originGp1, *mm_want_ptrs.gp1, mm_got.gp1, minimock.Diff(*mm_want_ptrs.gp1, mm_got.gp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetTable.t.Errorf("AppPublicServiceServerMock.GetTable got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetTable.GetTableMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetTable.GetTableMock.defaultExpectation.results
		if mm_results == nil {
			mmGetTable.t.Fatal("No results are set for the AppPublicServiceServerMock.GetTable")
		}
		return (*mm_results).gp2, (*mm_results).err
	}
	if mmGetTable.funcGetTable != nil {
		return mmGetTable.funcGetTable(ctx, gp1)
	}
	mmGetTable.t.Fatalf("Unexpected call to AppPublicServiceServerMock.GetTable. %v %v", ctx, gp1)
	return
}

// GetTableAfterCounter returns a count of finished AppPublicServiceServerMock.GetTable invocations
func (mmGetTable *AppPublicServiceServerMock) GetTableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTable.afterGetTableCounter)
}

// GetTableBeforeCounter returns a count of AppPublicServiceServerMock.GetTable invocations
func (mmGetTable *AppPublicServiceServerMock) GetTableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTable.beforeGetTableCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.GetTable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetTable *mAppPublicServiceServerMockGetTable) Calls() []*AppPublicServiceServerMockGetTableParams {
	mmGetTable.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockGetTableParams, len(mmGetTable.callArgs))
	copy(argCopy, mmGetTable.callArgs)

	mmGetTable.mutex.RUnlock()

	return argCopy
}

// MinimockGetTableDone returns true if the count of the GetTable invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockGetTableDone() bool {
	if m.GetTableMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetTableMock.invocationsDone()
}

// MinimockGetTableInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockGetTableInspect() {
	for _, e := range m.GetTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.GetTable at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetTableCounter := mm_atomic.LoadUint64(&m.afterGetTableCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetTableMock.defaultExpectation != nil && afterGetTableCounter < 1 {
		if m.GetTableMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.GetTable at\n%s", m.GetTableMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.GetTable at\n%s with params: %#v", m.GetTableMock.defaultExpectation.expectationOrigins.origin, *m.GetTableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTable != nil && afterGetTableCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.GetTable at\n%s", m.funcGetTableOrigin)
	}

	if !m.GetTableMock.invocationsDone() && afterGetTableCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.GetTable at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetTableMock.expectedInvocations), m.GetTableMock.expectedInvocationsOrigin, afterGetTableCounter)
	}
}

type mAppPublicServiceServerMockGetTableEvents struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockGetTableEventsExpectation
	expectations       []*AppPublicServiceServerMockGetTableEventsExpectation

	callArgs []*AppPublicServiceServerMockGetTableEventsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockGetTableEventsExpectation specifies expectation struct of the AppPublicServiceServer.GetTableEvents
type AppPublicServiceServerMockGetTableEventsExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockGetTableEventsParams
	paramPtrs          *AppPublicServiceServerMockGetTableEventsParamPtrs
	expectationOrigins AppPublicServiceServerMockGetTableEventsExpectationOrigins
	results            *AppPublicServiceServerMockGetTableEventsResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockGetTableEventsParams contains parameters of the AppPublicServiceServer.GetTableEvents
type AppPublicServiceServerMockGetTableEventsParams struct {
	gp1 *mm_appv1alpha.GetTableEventsRequest
	a1  mm_appv1alpha.AppPublicService_GetTableEventsServer
}

// AppPublicServiceServerMockGetTableEventsParamPtrs contains pointers to parameters of the AppPublicServiceServer.GetTableEvents
type AppPublicServiceServerMockGetTableEventsParamPtrs struct {
	gp1 **mm_appv1alpha.GetTableEventsRequest
	a1  *mm_appv1alpha.AppPublicService_GetTableEventsServer
}

// AppPublicServiceServerMockGetTableEventsResults contains results of the AppPublicServiceServer.GetTableEvents
type AppPublicServiceServerMockGetTableEventsResults struct {
	err error
}

// AppPublicServiceServerMockGetTableEventsOrigins contains origins of expectations of the AppPublicServiceServer.GetTableEvents
type AppPublicServiceServerMockGetTableEventsExpectationOrigins struct {
	origin    string
	originGp1 string
	originA1  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetTableEvents *mAppPublicServiceServerMockGetTableEvents) Optional() *mAppPublicServiceServerMockGetTableEvents {
	mmGetTableEvents.optional = true
	return mmGetTableEvents
}

// Expect sets up expected params for AppPublicServiceServer.GetTableEvents
func (mmGetTableEvents *mAppPublicServiceServerMockGetTableEvents) Expect(gp1 *mm_appv1alpha.GetTableEventsRequest, a1 mm_appv1alpha.AppPublicService_GetTableEventsServer) *mAppPublicServiceServerMockGetTableEvents {
	if mmGetTableEvents.mock.funcGetTableEvents != nil {
		mmGetTableEvents.mock.t.Fatalf("AppPublicServiceServerMock.GetTableEvents mock is already set by Set")
	}

	if mmGetTableEvents.defaultExpectation == nil {
		mmGetTableEvents.defaultExpectation = &AppPublicServiceServerMockGetTableEventsExpectation{}
	}

	if mmGetTableEvents.defaultExpectation.paramPtrs != nil {
		mmGetTableEvents.mock.t.Fatalf("AppPublicServiceServerMock.GetTableEvents mock is already set by ExpectParams functions")
	}

	mmGetTableEvents.defaultExpectation.params = &AppPublicServiceServerMockGetTableEventsParams{gp1, a1}
	mmGetTableEvents.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetTableEvents.expectations {
		if minimock.Equal(e.params, mmGetTableEvents.defaultExpectation.params) {
			mmGetTableEvents.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetTableEvents.defaultExpectation.params)
		}
	}

	return mmGetTableEvents
}

// ExpectGp1Param1 sets up expected param gp1 for AppPublicServiceServer.GetTableEvents
func (mmGetTableEvents *mAppPublicServiceServerMockGetTableEvents) ExpectGp1Param1(gp1 *mm_appv1alpha.GetTableEventsRequest) *mAppPublicServiceServerMockGetTableEvents {
	if mmGetTableEvents.mock.funcGetTableEvents != nil {
		mmGetTableEvents.mock.t.Fatalf("AppPublicServiceServerMock.GetTableEvents mock is already set by Set")
	}

	if mmGetTableEvents.defaultExpectation == nil {
		mmGetTableEvents.defaultExpectation = &AppPublicServiceServerMockGetTableEventsExpectation{}
	}

	if mmGetTableEvents.defaultExpectation.params != nil {
		mmGetTableEvents.mock.t.Fatalf("AppPublicServiceServerMock.GetTableEvents mock is already set by Expect")
	}

	if mmGetTableEvents.defaultExpectation.paramPtrs == nil {
		mmGetTableEvents.defaultExpectation.paramPtrs = &AppPublicServiceServerMockGetTableEventsParamPtrs{}
	}
	mmGetTableEvents.defaultExpectation.paramPtrs.gp1 = &gp1
	mmGetTableEvents.defaultExpectation.expectationOrigins.originGp1 = minimock.CallerInfo(1)

	return mmGetTableEvents
}

// ExpectA1Param2 sets up expected param a1 for AppPublicServiceServer.GetTableEvents
func (mmGetTableEvents *mAppPublicServiceServerMockGetTableEvents) ExpectA1Param2(a1 mm_appv1alpha.AppPublicService_GetTableEventsServer) *mAppPublicServiceServerMockGetTableEvents {
	if mmGetTableEvents.mock.funcGetTableEvents != nil {
		mmGetTableEvents.mock.t.Fatalf("AppPublicServiceServerMock.GetTableEvents mock is already set by Set")
	}

	if mmGetTableEvents.defaultExpectation == nil {
		mmGetTableEvents.defaultExpectation = &AppPublicServiceServerMockGetTableEventsExpectation{}
	}

	if mmGetTableEvents.defaultExpectation.params != nil {
		mmGetTableEvents.mock.t.Fatalf("AppPublicServiceServerMock.GetTableEvents mock is already set by Expect")
	}

	if mmGetTableEvents.defaultExpectation.paramPtrs == nil {
		mmGetTableEvents.defaultExpectation.paramPtrs = &AppPublicServiceServerMockGetTableEventsParamPtrs{}
	}
	mmGetTableEvents.defaultExpectation.paramPtrs.a1 = &a1
	mmGetTableEvents.defaultExpectation.expectationOrigins.originA1 = minimock.CallerInfo(1)

	return mmGetTableEvents
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.GetTableEvents
func (mmGetTableEvents *mAppPublicServiceServerMockGetTableEvents) Inspect(f func(gp1 *mm_appv1alpha.GetTableEventsRequest, a1 mm_appv1alpha.AppPublicService_GetTableEventsServer)) *mAppPublicServiceServerMockGetTableEvents {
	if mmGetTableEvents.mock.inspectFuncGetTableEvents != nil {
		mmGetTableEvents.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.GetTableEvents")
	}

	mmGetTableEvents.mock.inspectFuncGetTableEvents = f

	return mmGetTableEvents
}

// Return sets up results that will be returned by AppPublicServiceServer.GetTableEvents
func (mmGetTableEvents *mAppPublicServiceServerMockGetTableEvents) Return(err error) *AppPublicServiceServerMock {
	if mmGetTableEvents.mock.funcGetTableEvents != nil {
		mmGetTableEvents.mock.t.Fatalf("AppPublicServiceServerMock.GetTableEvents mock is already set by Set")
	}

	if mmGetTableEvents.defaultExpectation == nil {
		mmGetTableEvents.defaultExpectation = &AppPublicServiceServerMockGetTableEventsExpectation{mock: mmGetTableEvents.mock}
	}
	mmGetTableEvents.defaultExpectation.results = &AppPublicServiceServerMockGetTableEventsResults{err}
	mmGetTableEvents.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetTableEvents.mock
}

// Set uses given function f to mock the AppPublicServiceServer.GetTableEvents method
func (mmGetTableEvents *mAppPublicServiceServerMockGetTableEvents) Set(f func(gp1 *mm_appv1alpha.GetTableEventsRequest, a1 mm_appv1alpha.AppPublicService_GetTableEventsServer) (err error)) *AppPublicServiceServerMock {
	if mmGetTableEvents.defaultExpectation != nil {
		mmGetTableEvents.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.GetTableEvents method")
	}

	if len(mmGetTableEvents.expectations) > 0 {
		mmGetTableEvents.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.GetTableEvents method")
	}

	mmGetTableEvents.mock.funcGetTableEvents = f
	mmGetTableEvents.mock.funcGetTableEventsOrigin = minimock.CallerInfo(1)
	return mmGetTableEvents.mock
}

// When sets expectation for the AppPublicServiceServer.GetTableEvents which will trigger the result defined by the following
// Then helper
func (mmGetTableEvents *mAppPublicServiceServerMockGetTableEvents) When(gp1 *mm_appv1alpha.GetTableEventsRequest, a1 mm_appv1alpha.AppPublicService_GetTableEventsServer) *AppPublicServiceServerMockGetTableEventsExpectation {
	if mmGetTableEvents.mock.funcGetTableEvents != nil {
		mmGetTableEvents.mock.t.Fatalf("AppPublicServiceServerMock.GetTableEvents mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockGetTableEventsExpectation{
		mock:               mmGetTableEvents.mock,
		params:             &AppPublicServiceServerMockGetTableEventsParams{gp1, a1},
		expectationOrigins: AppPublicServiceServerMockGetTableEventsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetTableEvents.expectations = append(mmGetTableEvents.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.GetTableEvents return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockGetTableEventsExpectation) Then(err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockGetTableEventsResults{err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.GetTableEvents should be invoked
func (mmGetTableEvents *mAppPublicServiceServerMockGetTableEvents) Times(n uint64) *mAppPublicServiceServerMockGetTableEvents {
	if n == 0 {
		mmGetTableEvents.mock.t.Fatalf("Times of AppPublicServiceServerMock.GetTableEvents mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetTableEvents.expectedInvocations, n)
	mmGetTableEvents.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetTableEvents
}

func (mmGetTableEvents *mAppPublicServiceServerMockGetTableEvents) invocationsDone() bool {
	if len(mmGetTableEvents.expectations) == 0 && mmGetTableEvents.defaultExpectation == nil && mmGetTableEvents.mock.funcGetTableEvents == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetTableEvents.mock.afterGetTableEventsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetTableEvents.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetTableEvents implements mm_appv1alpha.AppPublicServiceServer
func (mmGetTableEvents *AppPublicServiceServerMock) GetTableEvents(gp1 *mm_appv1alpha.GetTableEventsRequest, a1 mm_appv1alpha.AppPublicService_GetTableEventsServer) (err error) {
	mm_atomic.AddUint64(&mmGetTableEvents.beforeGetTableEventsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetTableEvents.afterGetTableEventsCounter, 1)

	mmGetTableEvents.t.Helper()

	if mmGetTableEvents.inspectFuncGetTableEvents != nil {
		mmGetTableEvents.inspectFuncGetTableEvents(gp1, a1)
	}

	mm_params := AppPublicServiceServerMockGetTableEventsParams{gp1, a1}

	// Record call args
	mmGetTableEvents.GetTableEventsMock.mutex.Lock()
	mmGetTableEvents.GetTableEventsMock.callArgs = append(mmGetTableEvents.GetTableEventsMock.callArgs, &mm_params)
	mmGetTableEvents.GetTableEventsMock.mutex.Unlock()

	for _, e := range mmGetTableEvents.GetTableEventsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmGetTableEvents.GetTableEventsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetTableEvents.GetTableEventsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetTableEvents.GetTableEventsMock.defaultExpectation.params
		mm_want_ptrs := mmGetTableEvents.GetTableEventsMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockGetTableEventsParams{gp1, a1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.gp1 != nil && !minimock.Equal(*mm_want_ptrs.gp1, mm_got.gp1) {
				mmGetTableEvents.t.Errorf("AppPublicServiceServerMock.GetTableEvents got unexpected parameter gp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetTableEvents.GetTableEventsMock.defaultExpectation.expectationOrigins.originGp1, *mm_want_ptrs.gp1, mm_got.gp1, minimock.Diff(*mm_want_ptrs.gp1, mm_got.gp1))
			}

			if mm_want_ptrs.a1 != nil && !minimock.Equal(*mm_want_ptrs.a1, mm_got.a1) {
				mmGetTableEvents.t.Errorf("AppPublicServiceServerMock.GetTableEvents got unexpected parameter a1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetTableEvents.GetTableEventsMock.defaultExpectation.expectationOrigins.originA1, *mm_want_ptrs.a1, mm_got.a1, minimock.Diff(*mm_want_ptrs.a1, mm_got.a1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetTableEvents.t.Errorf("AppPublicServiceServerMock.GetTableEvents got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetTableEvents.GetTableEventsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetTableEvents.GetTableEventsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetTableEvents.t.Fatal("No results are set for the AppPublicServiceServerMock.GetTableEvents")
		}
		return (*mm_results).err
	}
	if mmGetTableEvents.funcGetTableEvents != nil {
		return mmGetTableEvents.funcGetTableEvents(gp1, a1)
	}
	mmGetTableEvents.t.Fatalf("Unexpected call to AppPublicServiceServerMock.GetTableEvents. %v %v", gp1, a1)
	return
}

// GetTableEventsAfterCounter returns a count of finished AppPublicServiceServerMock.GetTableEvents invocations
func (mmGetTableEvents *AppPublicServiceServerMock) GetTableEventsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTableEvents.afterGetTableEventsCounter)
}

// GetTableEventsBeforeCounter returns a count of AppPublicServiceServerMock.GetTableEvents invocations
func (mmGetTableEvents *AppPublicServiceServerMock) GetTableEventsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTableEvents.beforeGetTableEventsCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.GetTableEvents.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetTableEvents *mAppPublicServiceServerMockGetTableEvents) Calls() []*AppPublicServiceServerMockGetTableEventsParams {
	mmGetTableEvents.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockGetTableEventsParams, len(mmGetTableEvents.callArgs))
	copy(argCopy, mmGetTableEvents.callArgs)

	mmGetTableEvents.mutex.RUnlock()

	return argCopy
}

// MinimockGetTableEventsDone returns true if the count of the GetTableEvents invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockGetTableEventsDone() bool {
	if m.GetTableEventsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetTableEventsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetTableEventsMock.invocationsDone()
}

// MinimockGetTableEventsInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockGetTableEventsInspect() {
	for _, e := range m.GetTableEventsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.GetTableEvents at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetTableEventsCounter := mm_atomic.LoadUint64(&m.afterGetTableEventsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetTableEventsMock.defaultExpectation != nil && afterGetTableEventsCounter < 1 {
		if m.GetTableEventsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.GetTableEvents at\n%s", m.GetTableEventsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.GetTableEvents at\n%s with params: %#v", m.GetTableEventsMock.defaultExpectation.expectationOrigins.origin, *m.GetTableEventsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTableEvents != nil && afterGetTableEventsCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.GetTableEvents at\n%s", m.funcGetTableEventsOrigin)
	}

	if !m.GetTableEventsMock.invocationsDone() && afterGetTableEventsCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.GetTableEvents at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetTableEventsMock.expectedInvocations), m.GetTableEventsMock.expectedInvocationsOrigin, afterGetTableEventsCounter)
	}
}

type mAppPublicServiceServerMockInsertRow struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockInsertRowExpectation
	expectations       []*AppPublicServiceServerMockInsertRowExpectation

	callArgs []*AppPublicServiceServerMockInsertRowParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockInsertRowExpectation specifies expectation struct of the AppPublicServiceServer.InsertRow
type AppPublicServiceServerMockInsertRowExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockInsertRowParams
	paramPtrs          *AppPublicServiceServerMockInsertRowParamPtrs
	expectationOrigins AppPublicServiceServerMockInsertRowExpectationOrigins
	results            *AppPublicServiceServerMockInsertRowResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockInsertRowParams contains parameters of the AppPublicServiceServer.InsertRow
type AppPublicServiceServerMockInsertRowParams struct {
	ctx context.Context
	ip1 *mm_appv1alpha.InsertRowRequest
}

// AppPublicServiceServerMockInsertRowParamPtrs contains pointers to parameters of the AppPublicServiceServer.InsertRow
type AppPublicServiceServerMockInsertRowParamPtrs struct {
	ctx *context.Context
	ip1 **mm_appv1alpha.InsertRowRequest
}

// AppPublicServiceServerMockInsertRowResults contains results of the AppPublicServiceServer.InsertRow
type AppPublicServiceServerMockInsertRowResults struct {
	ip2 *mm_appv1alpha.InsertRowResponse
	err error
}

// AppPublicServiceServerMockInsertRowOrigins contains origins of expectations of the AppPublicServiceServer.InsertRow
type AppPublicServiceServerMockInsertRowExpectationOrigins struct {
	origin    string
	originCtx string
	originIp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmInsertRow *mAppPublicServiceServerMockInsertRow) Optional() *mAppPublicServiceServerMockInsertRow {
	mmInsertRow.optional = true
	return mmInsertRow
}

// Expect sets up expected params for AppPublicServiceServer.InsertRow
func (mmInsertRow *mAppPublicServiceServerMockInsertRow) Expect(ctx context.Context, ip1 *mm_appv1alpha.InsertRowRequest) *mAppPublicServiceServerMockInsertRow {
	if mmInsertRow.mock.funcInsertRow != nil {
		mmInsertRow.mock.t.Fatalf("AppPublicServiceServerMock.InsertRow mock is already set by Set")
	}

	if mmInsertRow.defaultExpectation == nil {
		mmInsertRow.defaultExpectation = &AppPublicServiceServerMockInsertRowExpectation{}
	}

	if mmInsertRow.defaultExpectation.paramPtrs != nil {
		mmInsertRow.mock.t.Fatalf("AppPublicServiceServerMock.InsertRow mock is already set by ExpectParams functions")
	}

	mmInsertRow.defaultExpectation.params = &AppPublicServiceServerMockInsertRowParams{ctx, ip1}
	mmInsertRow.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmInsertRow.expectations {
		if minimock.Equal(e.params, mmInsertRow.defaultExpectation.params) {
			mmInsertRow.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInsertRow.defaultExpectation.params)
		}
	}

	return mmInsertRow
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.InsertRow
func (mmInsertRow *mAppPublicServiceServerMockInsertRow) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockInsertRow {
	if mmInsertRow.mock.funcInsertRow != nil {
		mmInsertRow.mock.t.Fatalf("AppPublicServiceServerMock.InsertRow mock is already set by Set")
	}

	if mmInsertRow.defaultExpectation == nil {
		mmInsertRow.defaultExpectation = &AppPublicServiceServerMockInsertRowExpectation{}
	}

	if mmInsertRow.defaultExpectation.params != nil {
		mmInsertRow.mock.t.Fatalf("AppPublicServiceServerMock.InsertRow mock is already set by Expect")
	}

	if mmInsertRow.defaultExpectation.paramPtrs == nil {
		mmInsertRow.defaultExpectation.paramPtrs = &AppPublicServiceServerMockInsertRowParamPtrs{}
	}
	mmInsertRow.defaultExpectation.paramPtrs.ctx = &ctx
	mmInsertRow.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmInsertRow
}

// ExpectIp1Param2 sets up expected param ip1 for AppPublicServiceServer.InsertRow
func (mmInsertRow *mAppPublicServiceServerMockInsertRow) ExpectIp1Param2(ip1 *mm_appv1alpha.InsertRowRequest) *mAppPublicServiceServerMockInsertRow {
	if mmInsertRow.mock.funcInsertRow != nil {
		mmInsertRow.mock.t.Fatalf("AppPublicServiceServerMock.InsertRow mock is already set by Set")
	}

	if mmInsertRow.defaultExpectation == nil {
		mmInsertRow.defaultExpectation = &AppPublicServiceServerMockInsertRowExpectation{}
	}

	if mmInsertRow.defaultExpectation.params != nil {
		mmInsertRow.mock.t.Fatalf("AppPublicServiceServerMock.InsertRow mock is already set by Expect")
	}

	if mmInsertRow.defaultExpectation.paramPtrs == nil {
		mmInsertRow.defaultExpectation.paramPtrs = &AppPublicServiceServerMockInsertRowParamPtrs{}
	}
	mmInsertRow.defaultExpectation.paramPtrs.ip1 = &ip1
	mmInsertRow.defaultExpectation.expectationOrigins.originIp1 = minimock.CallerInfo(1)

	return mmInsertRow
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.InsertRow
func (mmInsertRow *mAppPublicServiceServerMockInsertRow) Inspect(f func(ctx context.Context, ip1 *mm_appv1alpha.InsertRowRequest)) *mAppPublicServiceServerMockInsertRow {
	if mmInsertRow.mock.inspectFuncInsertRow != nil {
		mmInsertRow.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.InsertRow")
	}

	mmInsertRow.mock.inspectFuncInsertRow = f

	return mmInsertRow
}

// Return sets up results that will be returned by AppPublicServiceServer.InsertRow
func (mmInsertRow *mAppPublicServiceServerMockInsertRow) Return(ip2 *mm_appv1alpha.InsertRowResponse, err error) *AppPublicServiceServerMock {
	if mmInsertRow.mock.funcInsertRow != nil {
		mmInsertRow.mock.t.Fatalf("AppPublicServiceServerMock.InsertRow mock is already set by Set")
	}

	if mmInsertRow.defaultExpectation == nil {
		mmInsertRow.defaultExpectation = &AppPublicServiceServerMockInsertRowExpectation{mock: mmInsertRow.mock}
	}
	mmInsertRow.defaultExpectation.results = &AppPublicServiceServerMockInsertRowResults{ip2, err}
	mmInsertRow.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmInsertRow.mock
}

// Set uses given function f to mock the AppPublicServiceServer.InsertRow method
func (mmInsertRow *mAppPublicServiceServerMockInsertRow) Set(f func(ctx context.Context, ip1 *mm_appv1alpha.InsertRowRequest) (ip2 *mm_appv1alpha.InsertRowResponse, err error)) *AppPublicServiceServerMock {
	if mmInsertRow.defaultExpectation != nil {
		mmInsertRow.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.InsertRow method")
	}

	if len(mmInsertRow.expectations) > 0 {
		mmInsertRow.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.InsertRow method")
	}

	mmInsertRow.mock.funcInsertRow = f
	mmInsertRow.mock.funcInsertRowOrigin = minimock.CallerInfo(1)
	return mmInsertRow.mock
}

// When sets expectation for the AppPublicServiceServer.InsertRow which will trigger the result defined by the following
// Then helper
func (mmInsertRow *mAppPublicServiceServerMockInsertRow) When(ctx context.Context, ip1 *mm_appv1alpha.InsertRowRequest) *AppPublicServiceServerMockInsertRowExpectation {
	if mmInsertRow.mock.funcInsertRow != nil {
		mmInsertRow.mock.t.Fatalf("AppPublicServiceServerMock.InsertRow mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockInsertRowExpectation{
		mock:               mmInsertRow.mock,
		params:             &AppPublicServiceServerMockInsertRowParams{ctx, ip1},
		expectationOrigins: AppPublicServiceServerMockInsertRowExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmInsertRow.expectations = append(mmInsertRow.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.InsertRow return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockInsertRowExpectation) Then(ip2 *mm_appv1alpha.InsertRowResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockInsertRowResults{ip2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.InsertRow should be invoked
func (mmInsertRow *mAppPublicServiceServerMockInsertRow) Times(n uint64) *mAppPublicServiceServerMockInsertRow {
	if n == 0 {
		mmInsertRow.mock.t.Fatalf("Times of AppPublicServiceServerMock.InsertRow mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmInsertRow.expectedInvocations, n)
	mmInsertRow.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmInsertRow
}

func (mmInsertRow *mAppPublicServiceServerMockInsertRow) invocationsDone() bool {
	if len(mmInsertRow.expectations) == 0 && mmInsertRow.defaultExpectation == nil && mmInsertRow.mock.funcInsertRow == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmInsertRow.mock.afterInsertRowCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmInsertRow.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// InsertRow implements mm_appv1alpha.AppPublicServiceServer
func (mmInsertRow *AppPublicServiceServerMock) InsertRow(ctx context.Context, ip1 *mm_appv1alpha.InsertRowRequest) (ip2 *mm_appv1alpha.InsertRowResponse, err error) {
	mm_atomic.AddUint64(&mmInsertRow.beforeInsertRowCounter, 1)
	defer mm_atomic.AddUint64(&mmInsertRow.afterInsertRowCounter, 1)

	mmInsertRow.t.Helper()

	if mmInsertRow.inspectFuncInsertRow != nil {
		mmInsertRow.inspectFuncInsertRow(ctx, ip1)
	}

	mm_params := AppPublicServiceServerMockInsertRowParams{ctx, ip1}

	// Record call args
	mmInsertRow.InsertRowMock.mutex.Lock()
	mmInsertRow.InsertRowMock.callArgs = append(mmInsertRow.InsertRowMock.callArgs, &mm_params)
	mmInsertRow.InsertRowMock.mutex.Unlock()

	for _, e := range mmInsertRow.InsertRowMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ip2, e.results.err
		}
	}

	if mmInsertRow.InsertRowMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInsertRow.InsertRowMock.defaultExpectation.Counter, 1)
		mm_want := mmInsertRow.InsertRowMock.defaultExpectation.params
		mm_want_ptrs := mmInsertRow.InsertRowMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockInsertRowParams{ctx, ip1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmInsertRow.t.Errorf("AppPublicServiceServerMock.InsertRow got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmInsertRow.InsertRowMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.ip1 != nil && !minimock.Equal(*mm_want_ptrs.ip1, mm_got.ip1) {
				mmInsertRow.t.Errorf("AppPublicServiceServerMock.InsertRow got unexpected parameter ip1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmInsertRow.InsertRowMock.defaultExpectation.expectationOrigins.originIp1, *mm_want_ptrs.ip1, mm_got.ip1, minimock.Diff(*mm_want_ptrs.ip1, mm_got.ip1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInsertRow.t.Errorf("AppPublicServiceServerMock.InsertRow got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmInsertRow.InsertRowMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInsertRow.InsertRowMock.defaultExpectation.results
		if mm_results == nil {
			mmInsertRow.t.Fatal("No results are set for the AppPublicServiceServerMock.InsertRow")
		}
		return (*mm_results).ip2, (*mm_results).err
	}
	if mmInsertRow.funcInsertRow != nil {
		return mmInsertRow.funcInsertRow(ctx, ip1)
	}
	mmInsertRow.t.Fatalf("Unexpected call to AppPublicServiceServerMock.InsertRow. %v %v", ctx, ip1)
	return
}

// InsertRowAfterCounter returns a count of finished AppPublicServiceServerMock.InsertRow invocations
func (mmInsertRow *AppPublicServiceServerMock) InsertRowAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsertRow.afterInsertRowCounter)
}

// InsertRowBeforeCounter returns a count of AppPublicServiceServerMock.InsertRow invocations
func (mmInsertRow *AppPublicServiceServerMock) InsertRowBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsertRow.beforeInsertRowCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.InsertRow.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInsertRow *mAppPublicServiceServerMockInsertRow) Calls() []*AppPublicServiceServerMockInsertRowParams {
	mmInsertRow.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockInsertRowParams, len(mmInsertRow.callArgs))
	copy(argCopy, mmInsertRow.callArgs)

	mmInsertRow.mutex.RUnlock()

	return argCopy
}

// MinimockInsertRowDone returns true if the count of the InsertRow invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockInsertRowDone() bool {
	if m.InsertRowMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.InsertRowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.InsertRowMock.invocationsDone()
}

// MinimockInsertRowInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockInsertRowInspect() {
	for _, e := range m.InsertRowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.InsertRow at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterInsertRowCounter := mm_atomic.LoadUint64(&m.afterInsertRowCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.InsertRowMock.defaultExpectation != nil && afterInsertRowCounter < 1 {
		if m.InsertRowMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.InsertRow at\n%s", m.InsertRowMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.InsertRow at\n%s with params: %#v", m.InsertRowMock.defaultExpectation.expectationOrigins.origin, *m.InsertRowMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsertRow != nil && afterInsertRowCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.InsertRow at\n%s", m.funcInsertRowOrigin)
	}

	if !m.InsertRowMock.invocationsDone() && afterInsertRowCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.InsertRow at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.InsertRowMock.expectedInvocations), m.InsertRowMock.expectedInvocationsOrigin, afterInsertRowCounter)
	}
}

type mAppPublicServiceServerMockListAgents struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockListAgentsExpectation
	expectations       []*AppPublicServiceServerMockListAgentsExpectation

	callArgs []*AppPublicServiceServerMockListAgentsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockListAgentsExpectation specifies expectation struct of the AppPublicServiceServer.ListAgents
type AppPublicServiceServerMockListAgentsExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockListAgentsParams
	paramPtrs          *AppPublicServiceServerMockListAgentsParamPtrs
	expectationOrigins AppPublicServiceServerMockListAgentsExpectationOrigins
	results            *AppPublicServiceServerMockListAgentsResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockListAgentsParams contains parameters of the AppPublicServiceServer.ListAgents
type AppPublicServiceServerMockListAgentsParams struct {
	ctx context.Context
	lp1 *mm_appv1alpha.ListAgentsRequest
}

// AppPublicServiceServerMockListAgentsParamPtrs contains pointers to parameters of the AppPublicServiceServer.ListAgents
type AppPublicServiceServerMockListAgentsParamPtrs struct {
	ctx *context.Context
	lp1 **mm_appv1alpha.ListAgentsRequest
}

// AppPublicServiceServerMockListAgentsResults contains results of the AppPublicServiceServer.ListAgents
type AppPublicServiceServerMockListAgentsResults struct {
	lp2 *mm_appv1alpha.ListAgentsResponse
	err error
}

// AppPublicServiceServerMockListAgentsOrigins contains origins of expectations of the AppPublicServiceServer.ListAgents
type AppPublicServiceServerMockListAgentsExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListAgents *mAppPublicServiceServerMockListAgents) Optional() *mAppPublicServiceServerMockListAgents {
	mmListAgents.optional = true
	return mmListAgents
}

// Expect sets up expected params for AppPublicServiceServer.ListAgents
func (mmListAgents *mAppPublicServiceServerMockListAgents) Expect(ctx context.Context, lp1 *mm_appv1alpha.ListAgentsRequest) *mAppPublicServiceServerMockListAgents {
	if mmListAgents.mock.funcListAgents != nil {
		mmListAgents.mock.t.Fatalf("AppPublicServiceServerMock.ListAgents mock is already set by Set")
	}

	if mmListAgents.defaultExpectation == nil {
		mmListAgents.defaultExpectation = &AppPublicServiceServerMockListAgentsExpectation{}
	}

	if mmListAgents.defaultExpectation.paramPtrs != nil {
		mmListAgents.mock.t.Fatalf("AppPublicServiceServerMock.ListAgents mock is already set by ExpectParams functions")
	}

	mmListAgents.defaultExpectation.params = &AppPublicServiceServerMockListAgentsParams{ctx, lp1}
	mmListAgents.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListAgents.expectations {
		if minimock.Equal(e.params, mmListAgents.defaultExpectation.params) {
			mmListAgents.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListAgents.defaultExpectation.params)
		}
	}

	return mmListAgents
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.ListAgents
func (mmListAgents *mAppPublicServiceServerMockListAgents) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockListAgents {
	if mmListAgents.mock.funcListAgents != nil {
		mmListAgents.mock.t.Fatalf("AppPublicServiceServerMock.ListAgents mock is already set by Set")
	}

	if mmListAgents.defaultExpectation == nil {
		mmListAgents.defaultExpectation = &AppPublicServiceServerMockListAgentsExpectation{}
	}

	if mmListAgents.defaultExpectation.params != nil {
		mmListAgents.mock.t.Fatalf("AppPublicServiceServerMock.ListAgents mock is already set by Expect")
	}

	if mmListAgents.defaultExpectation.paramPtrs == nil {
		mmListAgents.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListAgentsParamPtrs{}
	}
	mmListAgents.defaultExpectation.paramPtrs.ctx = &ctx
	mmListAgents.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListAgents
}

// ExpectLp1Param2 sets up expected param lp1 for AppPublicServiceServer.ListAgents
func (mmListAgents *mAppPublicServiceServerMockListAgents) ExpectLp1Param2(lp1 *mm_appv1alpha.ListAgentsRequest) *mAppPublicServiceServerMockListAgents {
	if mmListAgents.mock.funcListAgents != nil {
		mmListAgents.mock.t.Fatalf("AppPublicServiceServerMock.ListAgents mock is already set by Set")
	}

	if mmListAgents.defaultExpectation == nil {
		mmListAgents.defaultExpectation = &AppPublicServiceServerMockListAgentsExpectation{}
	}

	if mmListAgents.defaultExpectation.params != nil {
		mmListAgents.mock.t.Fatalf("AppPublicServiceServerMock.ListAgents mock is already set by Expect")
	}

	if mmListAgents.defaultExpectation.paramPtrs == nil {
		mmListAgents.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListAgentsParamPtrs{}
	}
	mmListAgents.defaultExpectation.paramPtrs.lp1 = &lp1
	mmListAgents.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmListAgents
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.ListAgents
func (mmListAgents *mAppPublicServiceServerMockListAgents) Inspect(f func(ctx context.Context, lp1 *mm_appv1alpha.ListAgentsRequest)) *mAppPublicServiceServerMockListAgents {
	if mmListAgents.mock.inspectFuncListAgents != nil {
		mmListAgents.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.ListAgents")
	}

	mmListAgents.mock.inspectFuncListAgents = f

	return mmListAgents
}

// Return sets up results that will be returned by AppPublicServiceServer.ListAgents
func (mmListAgents *mAppPublicServiceServerMockListAgents) Return(lp2 *mm_appv1alpha.ListAgentsResponse, err error) *AppPublicServiceServerMock {
	if mmListAgents.mock.funcListAgents != nil {
		mmListAgents.mock.t.Fatalf("AppPublicServiceServerMock.ListAgents mock is already set by Set")
	}

	if mmListAgents.defaultExpectation == nil {
		mmListAgents.defaultExpectation = &AppPublicServiceServerMockListAgentsExpectation{mock: mmListAgents.mock}
	}
	mmListAgents.defaultExpectation.results = &AppPublicServiceServerMockListAgentsResults{lp2, err}
	mmListAgents.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListAgents.mock
}

// Set uses given function f to mock the AppPublicServiceServer.ListAgents method
func (mmListAgents *mAppPublicServiceServerMockListAgents) Set(f func(ctx context.Context, lp1 *mm_appv1alpha.ListAgentsRequest) (lp2 *mm_appv1alpha.ListAgentsResponse, err error)) *AppPublicServiceServerMock {
	if mmListAgents.defaultExpectation != nil {
		mmListAgents.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.ListAgents method")
	}

	if len(mmListAgents.expectations) > 0 {
		mmListAgents.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.ListAgents method")
	}

	mmListAgents.mock.funcListAgents = f
	mmListAgents.mock.funcListAgentsOrigin = minimock.CallerInfo(1)
	return mmListAgents.mock
}

// When sets expectation for the AppPublicServiceServer.ListAgents which will trigger the result defined by the following
// Then helper
func (mmListAgents *mAppPublicServiceServerMockListAgents) When(ctx context.Context, lp1 *mm_appv1alpha.ListAgentsRequest) *AppPublicServiceServerMockListAgentsExpectation {
	if mmListAgents.mock.funcListAgents != nil {
		mmListAgents.mock.t.Fatalf("AppPublicServiceServerMock.ListAgents mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockListAgentsExpectation{
		mock:               mmListAgents.mock,
		params:             &AppPublicServiceServerMockListAgentsParams{ctx, lp1},
		expectationOrigins: AppPublicServiceServerMockListAgentsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListAgents.expectations = append(mmListAgents.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.ListAgents return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockListAgentsExpectation) Then(lp2 *mm_appv1alpha.ListAgentsResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockListAgentsResults{lp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.ListAgents should be invoked
func (mmListAgents *mAppPublicServiceServerMockListAgents) Times(n uint64) *mAppPublicServiceServerMockListAgents {
	if n == 0 {
		mmListAgents.mock.t.Fatalf("Times of AppPublicServiceServerMock.ListAgents mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListAgents.expectedInvocations, n)
	mmListAgents.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListAgents
}

func (mmListAgents *mAppPublicServiceServerMockListAgents) invocationsDone() bool {
	if len(mmListAgents.expectations) == 0 && mmListAgents.defaultExpectation == nil && mmListAgents.mock.funcListAgents == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListAgents.mock.afterListAgentsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListAgents.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListAgents implements mm_appv1alpha.AppPublicServiceServer
func (mmListAgents *AppPublicServiceServerMock) ListAgents(ctx context.Context, lp1 *mm_appv1alpha.ListAgentsRequest) (lp2 *mm_appv1alpha.ListAgentsResponse, err error) {
	mm_atomic.AddUint64(&mmListAgents.beforeListAgentsCounter, 1)
	defer mm_atomic.AddUint64(&mmListAgents.afterListAgentsCounter, 1)

	mmListAgents.t.Helper()

	if mmListAgents.inspectFuncListAgents != nil {
		mmListAgents.inspectFuncListAgents(ctx, lp1)
	}

	mm_params := AppPublicServiceServerMockListAgentsParams{ctx, lp1}

	// Record call args
	mmListAgents.ListAgentsMock.mutex.Lock()
	mmListAgents.ListAgentsMock.callArgs = append(mmListAgents.ListAgentsMock.callArgs, &mm_params)
	mmListAgents.ListAgentsMock.mutex.Unlock()

	for _, e := range mmListAgents.ListAgentsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmListAgents.ListAgentsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListAgents.ListAgentsMock.defaultExpectation.Counter, 1)
		mm_want := mmListAgents.ListAgentsMock.defaultExpectation.params
		mm_want_ptrs := mmListAgents.ListAgentsMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockListAgentsParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListAgents.t.Errorf("AppPublicServiceServerMock.ListAgents got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListAgents.ListAgentsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmListAgents.t.Errorf("AppPublicServiceServerMock.ListAgents got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListAgents.ListAgentsMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListAgents.t.Errorf("AppPublicServiceServerMock.ListAgents got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListAgents.ListAgentsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListAgents.ListAgentsMock.defaultExpectation.results
		if mm_results == nil {
			mmListAgents.t.Fatal("No results are set for the AppPublicServiceServerMock.ListAgents")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmListAgents.funcListAgents != nil {
		return mmListAgents.funcListAgents(ctx, lp1)
	}
	mmListAgents.t.Fatalf("Unexpected call to AppPublicServiceServerMock.ListAgents. %v %v", ctx, lp1)
	return
}

// ListAgentsAfterCounter returns a count of finished AppPublicServiceServerMock.ListAgents invocations
func (mmListAgents *AppPublicServiceServerMock) ListAgentsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListAgents.afterListAgentsCounter)
}

// ListAgentsBeforeCounter returns a count of AppPublicServiceServerMock.ListAgents invocations
func (mmListAgents *AppPublicServiceServerMock) ListAgentsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListAgents.beforeListAgentsCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.ListAgents.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListAgents *mAppPublicServiceServerMockListAgents) Calls() []*AppPublicServiceServerMockListAgentsParams {
	mmListAgents.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockListAgentsParams, len(mmListAgents.callArgs))
	copy(argCopy, mmListAgents.callArgs)

	mmListAgents.mutex.RUnlock()

	return argCopy
}

// MinimockListAgentsDone returns true if the count of the ListAgents invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockListAgentsDone() bool {
	if m.ListAgentsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListAgentsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListAgentsMock.invocationsDone()
}

// MinimockListAgentsInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockListAgentsInspect() {
	for _, e := range m.ListAgentsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListAgents at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListAgentsCounter := mm_atomic.LoadUint64(&m.afterListAgentsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListAgentsMock.defaultExpectation != nil && afterListAgentsCounter < 1 {
		if m.ListAgentsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListAgents at\n%s", m.ListAgentsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListAgents at\n%s with params: %#v", m.ListAgentsMock.defaultExpectation.expectationOrigins.origin, *m.ListAgentsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListAgents != nil && afterListAgentsCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.ListAgents at\n%s", m.funcListAgentsOrigin)
	}

	if !m.ListAgentsMock.invocationsDone() && afterListAgentsCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.ListAgents at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListAgentsMock.expectedInvocations), m.ListAgentsMock.expectedInvocationsOrigin, afterListAgentsCounter)
	}
}

type mAppPublicServiceServerMockListApps struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockListAppsExpectation
	expectations       []*AppPublicServiceServerMockListAppsExpectation

	callArgs []*AppPublicServiceServerMockListAppsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockListAppsExpectation specifies expectation struct of the AppPublicServiceServer.ListApps
type AppPublicServiceServerMockListAppsExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockListAppsParams
	paramPtrs          *AppPublicServiceServerMockListAppsParamPtrs
	expectationOrigins AppPublicServiceServerMockListAppsExpectationOrigins
	results            *AppPublicServiceServerMockListAppsResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockListAppsParams contains parameters of the AppPublicServiceServer.ListApps
type AppPublicServiceServerMockListAppsParams struct {
	ctx context.Context
	lp1 *mm_appv1alpha.ListAppsRequest
}

// AppPublicServiceServerMockListAppsParamPtrs contains pointers to parameters of the AppPublicServiceServer.ListApps
type AppPublicServiceServerMockListAppsParamPtrs struct {
	ctx *context.Context
	lp1 **mm_appv1alpha.ListAppsRequest
}

// AppPublicServiceServerMockListAppsResults contains results of the AppPublicServiceServer.ListApps
type AppPublicServiceServerMockListAppsResults struct {
	lp2 *mm_appv1alpha.ListAppsResponse
	err error
}

// AppPublicServiceServerMockListAppsOrigins contains origins of expectations of the AppPublicServiceServer.ListApps
type AppPublicServiceServerMockListAppsExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListApps *mAppPublicServiceServerMockListApps) Optional() *mAppPublicServiceServerMockListApps {
	mmListApps.optional = true
	return mmListApps
}

// Expect sets up expected params for AppPublicServiceServer.ListApps
func (mmListApps *mAppPublicServiceServerMockListApps) Expect(ctx context.Context, lp1 *mm_appv1alpha.ListAppsRequest) *mAppPublicServiceServerMockListApps {
	if mmListApps.mock.funcListApps != nil {
		mmListApps.mock.t.Fatalf("AppPublicServiceServerMock.ListApps mock is already set by Set")
	}

	if mmListApps.defaultExpectation == nil {
		mmListApps.defaultExpectation = &AppPublicServiceServerMockListAppsExpectation{}
	}

	if mmListApps.defaultExpectation.paramPtrs != nil {
		mmListApps.mock.t.Fatalf("AppPublicServiceServerMock.ListApps mock is already set by ExpectParams functions")
	}

	mmListApps.defaultExpectation.params = &AppPublicServiceServerMockListAppsParams{ctx, lp1}
	mmListApps.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListApps.expectations {
		if minimock.Equal(e.params, mmListApps.defaultExpectation.params) {
			mmListApps.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListApps.defaultExpectation.params)
		}
	}

	return mmListApps
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.ListApps
func (mmListApps *mAppPublicServiceServerMockListApps) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockListApps {
	if mmListApps.mock.funcListApps != nil {
		mmListApps.mock.t.Fatalf("AppPublicServiceServerMock.ListApps mock is already set by Set")
	}

	if mmListApps.defaultExpectation == nil {
		mmListApps.defaultExpectation = &AppPublicServiceServerMockListAppsExpectation{}
	}

	if mmListApps.defaultExpectation.params != nil {
		mmListApps.mock.t.Fatalf("AppPublicServiceServerMock.ListApps mock is already set by Expect")
	}

	if mmListApps.defaultExpectation.paramPtrs == nil {
		mmListApps.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListAppsParamPtrs{}
	}
	mmListApps.defaultExpectation.paramPtrs.ctx = &ctx
	mmListApps.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListApps
}

// ExpectLp1Param2 sets up expected param lp1 for AppPublicServiceServer.ListApps
func (mmListApps *mAppPublicServiceServerMockListApps) ExpectLp1Param2(lp1 *mm_appv1alpha.ListAppsRequest) *mAppPublicServiceServerMockListApps {
	if mmListApps.mock.funcListApps != nil {
		mmListApps.mock.t.Fatalf("AppPublicServiceServerMock.ListApps mock is already set by Set")
	}

	if mmListApps.defaultExpectation == nil {
		mmListApps.defaultExpectation = &AppPublicServiceServerMockListAppsExpectation{}
	}

	if mmListApps.defaultExpectation.params != nil {
		mmListApps.mock.t.Fatalf("AppPublicServiceServerMock.ListApps mock is already set by Expect")
	}

	if mmListApps.defaultExpectation.paramPtrs == nil {
		mmListApps.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListAppsParamPtrs{}
	}
	mmListApps.defaultExpectation.paramPtrs.lp1 = &lp1
	mmListApps.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmListApps
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.ListApps
func (mmListApps *mAppPublicServiceServerMockListApps) Inspect(f func(ctx context.Context, lp1 *mm_appv1alpha.ListAppsRequest)) *mAppPublicServiceServerMockListApps {
	if mmListApps.mock.inspectFuncListApps != nil {
		mmListApps.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.ListApps")
	}

	mmListApps.mock.inspectFuncListApps = f

	return mmListApps
}

// Return sets up results that will be returned by AppPublicServiceServer.ListApps
func (mmListApps *mAppPublicServiceServerMockListApps) Return(lp2 *mm_appv1alpha.ListAppsResponse, err error) *AppPublicServiceServerMock {
	if mmListApps.mock.funcListApps != nil {
		mmListApps.mock.t.Fatalf("AppPublicServiceServerMock.ListApps mock is already set by Set")
	}

	if mmListApps.defaultExpectation == nil {
		mmListApps.defaultExpectation = &AppPublicServiceServerMockListAppsExpectation{mock: mmListApps.mock}
	}
	mmListApps.defaultExpectation.results = &AppPublicServiceServerMockListAppsResults{lp2, err}
	mmListApps.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListApps.mock
}

// Set uses given function f to mock the AppPublicServiceServer.ListApps method
func (mmListApps *mAppPublicServiceServerMockListApps) Set(f func(ctx context.Context, lp1 *mm_appv1alpha.ListAppsRequest) (lp2 *mm_appv1alpha.ListAppsResponse, err error)) *AppPublicServiceServerMock {
	if mmListApps.defaultExpectation != nil {
		mmListApps.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.ListApps method")
	}

	if len(mmListApps.expectations) > 0 {
		mmListApps.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.ListApps method")
	}

	mmListApps.mock.funcListApps = f
	mmListApps.mock.funcListAppsOrigin = minimock.CallerInfo(1)
	return mmListApps.mock
}

// When sets expectation for the AppPublicServiceServer.ListApps which will trigger the result defined by the following
// Then helper
func (mmListApps *mAppPublicServiceServerMockListApps) When(ctx context.Context, lp1 *mm_appv1alpha.ListAppsRequest) *AppPublicServiceServerMockListAppsExpectation {
	if mmListApps.mock.funcListApps != nil {
		mmListApps.mock.t.Fatalf("AppPublicServiceServerMock.ListApps mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockListAppsExpectation{
		mock:               mmListApps.mock,
		params:             &AppPublicServiceServerMockListAppsParams{ctx, lp1},
		expectationOrigins: AppPublicServiceServerMockListAppsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListApps.expectations = append(mmListApps.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.ListApps return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockListAppsExpectation) Then(lp2 *mm_appv1alpha.ListAppsResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockListAppsResults{lp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.ListApps should be invoked
func (mmListApps *mAppPublicServiceServerMockListApps) Times(n uint64) *mAppPublicServiceServerMockListApps {
	if n == 0 {
		mmListApps.mock.t.Fatalf("Times of AppPublicServiceServerMock.ListApps mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListApps.expectedInvocations, n)
	mmListApps.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListApps
}

func (mmListApps *mAppPublicServiceServerMockListApps) invocationsDone() bool {
	if len(mmListApps.expectations) == 0 && mmListApps.defaultExpectation == nil && mmListApps.mock.funcListApps == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListApps.mock.afterListAppsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListApps.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListApps implements mm_appv1alpha.AppPublicServiceServer
func (mmListApps *AppPublicServiceServerMock) ListApps(ctx context.Context, lp1 *mm_appv1alpha.ListAppsRequest) (lp2 *mm_appv1alpha.ListAppsResponse, err error) {
	mm_atomic.AddUint64(&mmListApps.beforeListAppsCounter, 1)
	defer mm_atomic.AddUint64(&mmListApps.afterListAppsCounter, 1)

	mmListApps.t.Helper()

	if mmListApps.inspectFuncListApps != nil {
		mmListApps.inspectFuncListApps(ctx, lp1)
	}

	mm_params := AppPublicServiceServerMockListAppsParams{ctx, lp1}

	// Record call args
	mmListApps.ListAppsMock.mutex.Lock()
	mmListApps.ListAppsMock.callArgs = append(mmListApps.ListAppsMock.callArgs, &mm_params)
	mmListApps.ListAppsMock.mutex.Unlock()

	for _, e := range mmListApps.ListAppsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmListApps.ListAppsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListApps.ListAppsMock.defaultExpectation.Counter, 1)
		mm_want := mmListApps.ListAppsMock.defaultExpectation.params
		mm_want_ptrs := mmListApps.ListAppsMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockListAppsParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListApps.t.Errorf("AppPublicServiceServerMock.ListApps got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListApps.ListAppsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmListApps.t.Errorf("AppPublicServiceServerMock.ListApps got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListApps.ListAppsMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListApps.t.Errorf("AppPublicServiceServerMock.ListApps got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListApps.ListAppsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListApps.ListAppsMock.defaultExpectation.results
		if mm_results == nil {
			mmListApps.t.Fatal("No results are set for the AppPublicServiceServerMock.ListApps")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmListApps.funcListApps != nil {
		return mmListApps.funcListApps(ctx, lp1)
	}
	mmListApps.t.Fatalf("Unexpected call to AppPublicServiceServerMock.ListApps. %v %v", ctx, lp1)
	return
}

// ListAppsAfterCounter returns a count of finished AppPublicServiceServerMock.ListApps invocations
func (mmListApps *AppPublicServiceServerMock) ListAppsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListApps.afterListAppsCounter)
}

// ListAppsBeforeCounter returns a count of AppPublicServiceServerMock.ListApps invocations
func (mmListApps *AppPublicServiceServerMock) ListAppsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListApps.beforeListAppsCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.ListApps.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListApps *mAppPublicServiceServerMockListApps) Calls() []*AppPublicServiceServerMockListAppsParams {
	mmListApps.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockListAppsParams, len(mmListApps.callArgs))
	copy(argCopy, mmListApps.callArgs)

	mmListApps.mutex.RUnlock()

	return argCopy
}

// MinimockListAppsDone returns true if the count of the ListApps invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockListAppsDone() bool {
	if m.ListAppsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListAppsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListAppsMock.invocationsDone()
}

// MinimockListAppsInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockListAppsInspect() {
	for _, e := range m.ListAppsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListApps at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListAppsCounter := mm_atomic.LoadUint64(&m.afterListAppsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListAppsMock.defaultExpectation != nil && afterListAppsCounter < 1 {
		if m.ListAppsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListApps at\n%s", m.ListAppsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListApps at\n%s with params: %#v", m.ListAppsMock.defaultExpectation.expectationOrigins.origin, *m.ListAppsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListApps != nil && afterListAppsCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.ListApps at\n%s", m.funcListAppsOrigin)
	}

	if !m.ListAppsMock.invocationsDone() && afterListAppsCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.ListApps at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListAppsMock.expectedInvocations), m.ListAppsMock.expectedInvocationsOrigin, afterListAppsCounter)
	}
}

type mAppPublicServiceServerMockListChatMessages struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockListChatMessagesExpectation
	expectations       []*AppPublicServiceServerMockListChatMessagesExpectation

	callArgs []*AppPublicServiceServerMockListChatMessagesParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockListChatMessagesExpectation specifies expectation struct of the AppPublicServiceServer.ListChatMessages
type AppPublicServiceServerMockListChatMessagesExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockListChatMessagesParams
	paramPtrs          *AppPublicServiceServerMockListChatMessagesParamPtrs
	expectationOrigins AppPublicServiceServerMockListChatMessagesExpectationOrigins
	results            *AppPublicServiceServerMockListChatMessagesResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockListChatMessagesParams contains parameters of the AppPublicServiceServer.ListChatMessages
type AppPublicServiceServerMockListChatMessagesParams struct {
	ctx context.Context
	lp1 *mm_appv1alpha.ListChatMessagesRequest
}

// AppPublicServiceServerMockListChatMessagesParamPtrs contains pointers to parameters of the AppPublicServiceServer.ListChatMessages
type AppPublicServiceServerMockListChatMessagesParamPtrs struct {
	ctx *context.Context
	lp1 **mm_appv1alpha.ListChatMessagesRequest
}

// AppPublicServiceServerMockListChatMessagesResults contains results of the AppPublicServiceServer.ListChatMessages
type AppPublicServiceServerMockListChatMessagesResults struct {
	lp2 *mm_appv1alpha.ListChatMessagesResponse
	err error
}

// AppPublicServiceServerMockListChatMessagesOrigins contains origins of expectations of the AppPublicServiceServer.ListChatMessages
type AppPublicServiceServerMockListChatMessagesExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListChatMessages *mAppPublicServiceServerMockListChatMessages) Optional() *mAppPublicServiceServerMockListChatMessages {
	mmListChatMessages.optional = true
	return mmListChatMessages
}

// Expect sets up expected params for AppPublicServiceServer.ListChatMessages
func (mmListChatMessages *mAppPublicServiceServerMockListChatMessages) Expect(ctx context.Context, lp1 *mm_appv1alpha.ListChatMessagesRequest) *mAppPublicServiceServerMockListChatMessages {
	if mmListChatMessages.mock.funcListChatMessages != nil {
		mmListChatMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListChatMessages mock is already set by Set")
	}

	if mmListChatMessages.defaultExpectation == nil {
		mmListChatMessages.defaultExpectation = &AppPublicServiceServerMockListChatMessagesExpectation{}
	}

	if mmListChatMessages.defaultExpectation.paramPtrs != nil {
		mmListChatMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListChatMessages mock is already set by ExpectParams functions")
	}

	mmListChatMessages.defaultExpectation.params = &AppPublicServiceServerMockListChatMessagesParams{ctx, lp1}
	mmListChatMessages.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListChatMessages.expectations {
		if minimock.Equal(e.params, mmListChatMessages.defaultExpectation.params) {
			mmListChatMessages.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListChatMessages.defaultExpectation.params)
		}
	}

	return mmListChatMessages
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.ListChatMessages
func (mmListChatMessages *mAppPublicServiceServerMockListChatMessages) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockListChatMessages {
	if mmListChatMessages.mock.funcListChatMessages != nil {
		mmListChatMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListChatMessages mock is already set by Set")
	}

	if mmListChatMessages.defaultExpectation == nil {
		mmListChatMessages.defaultExpectation = &AppPublicServiceServerMockListChatMessagesExpectation{}
	}

	if mmListChatMessages.defaultExpectation.params != nil {
		mmListChatMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListChatMessages mock is already set by Expect")
	}

	if mmListChatMessages.defaultExpectation.paramPtrs == nil {
		mmListChatMessages.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListChatMessagesParamPtrs{}
	}
	mmListChatMessages.defaultExpectation.paramPtrs.ctx = &ctx
	mmListChatMessages.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListChatMessages
}

// ExpectLp1Param2 sets up expected param lp1 for AppPublicServiceServer.ListChatMessages
func (mmListChatMessages *mAppPublicServiceServerMockListChatMessages) ExpectLp1Param2(lp1 *mm_appv1alpha.ListChatMessagesRequest) *mAppPublicServiceServerMockListChatMessages {
	if mmListChatMessages.mock.funcListChatMessages != nil {
		mmListChatMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListChatMessages mock is already set by Set")
	}

	if mmListChatMessages.defaultExpectation == nil {
		mmListChatMessages.defaultExpectation = &AppPublicServiceServerMockListChatMessagesExpectation{}
	}

	if mmListChatMessages.defaultExpectation.params != nil {
		mmListChatMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListChatMessages mock is already set by Expect")
	}

	if mmListChatMessages.defaultExpectation.paramPtrs == nil {
		mmListChatMessages.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListChatMessagesParamPtrs{}
	}
	mmListChatMessages.defaultExpectation.paramPtrs.lp1 = &lp1
	mmListChatMessages.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmListChatMessages
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.ListChatMessages
func (mmListChatMessages *mAppPublicServiceServerMockListChatMessages) Inspect(f func(ctx context.Context, lp1 *mm_appv1alpha.ListChatMessagesRequest)) *mAppPublicServiceServerMockListChatMessages {
	if mmListChatMessages.mock.inspectFuncListChatMessages != nil {
		mmListChatMessages.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.ListChatMessages")
	}

	mmListChatMessages.mock.inspectFuncListChatMessages = f

	return mmListChatMessages
}

// Return sets up results that will be returned by AppPublicServiceServer.ListChatMessages
func (mmListChatMessages *mAppPublicServiceServerMockListChatMessages) Return(lp2 *mm_appv1alpha.ListChatMessagesResponse, err error) *AppPublicServiceServerMock {
	if mmListChatMessages.mock.funcListChatMessages != nil {
		mmListChatMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListChatMessages mock is already set by Set")
	}

	if mmListChatMessages.defaultExpectation == nil {
		mmListChatMessages.defaultExpectation = &AppPublicServiceServerMockListChatMessagesExpectation{mock: mmListChatMessages.mock}
	}
	mmListChatMessages.defaultExpectation.results = &AppPublicServiceServerMockListChatMessagesResults{lp2, err}
	mmListChatMessages.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListChatMessages.mock
}

// Set uses given function f to mock the AppPublicServiceServer.ListChatMessages method
func (mmListChatMessages *mAppPublicServiceServerMockListChatMessages) Set(f func(ctx context.Context, lp1 *mm_appv1alpha.ListChatMessagesRequest) (lp2 *mm_appv1alpha.ListChatMessagesResponse, err error)) *AppPublicServiceServerMock {
	if mmListChatMessages.defaultExpectation != nil {
		mmListChatMessages.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.ListChatMessages method")
	}

	if len(mmListChatMessages.expectations) > 0 {
		mmListChatMessages.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.ListChatMessages method")
	}

	mmListChatMessages.mock.funcListChatMessages = f
	mmListChatMessages.mock.funcListChatMessagesOrigin = minimock.CallerInfo(1)
	return mmListChatMessages.mock
}

// When sets expectation for the AppPublicServiceServer.ListChatMessages which will trigger the result defined by the following
// Then helper
func (mmListChatMessages *mAppPublicServiceServerMockListChatMessages) When(ctx context.Context, lp1 *mm_appv1alpha.ListChatMessagesRequest) *AppPublicServiceServerMockListChatMessagesExpectation {
	if mmListChatMessages.mock.funcListChatMessages != nil {
		mmListChatMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListChatMessages mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockListChatMessagesExpectation{
		mock:               mmListChatMessages.mock,
		params:             &AppPublicServiceServerMockListChatMessagesParams{ctx, lp1},
		expectationOrigins: AppPublicServiceServerMockListChatMessagesExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListChatMessages.expectations = append(mmListChatMessages.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.ListChatMessages return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockListChatMessagesExpectation) Then(lp2 *mm_appv1alpha.ListChatMessagesResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockListChatMessagesResults{lp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.ListChatMessages should be invoked
func (mmListChatMessages *mAppPublicServiceServerMockListChatMessages) Times(n uint64) *mAppPublicServiceServerMockListChatMessages {
	if n == 0 {
		mmListChatMessages.mock.t.Fatalf("Times of AppPublicServiceServerMock.ListChatMessages mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListChatMessages.expectedInvocations, n)
	mmListChatMessages.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListChatMessages
}

func (mmListChatMessages *mAppPublicServiceServerMockListChatMessages) invocationsDone() bool {
	if len(mmListChatMessages.expectations) == 0 && mmListChatMessages.defaultExpectation == nil && mmListChatMessages.mock.funcListChatMessages == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListChatMessages.mock.afterListChatMessagesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListChatMessages.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListChatMessages implements mm_appv1alpha.AppPublicServiceServer
func (mmListChatMessages *AppPublicServiceServerMock) ListChatMessages(ctx context.Context, lp1 *mm_appv1alpha.ListChatMessagesRequest) (lp2 *mm_appv1alpha.ListChatMessagesResponse, err error) {
	mm_atomic.AddUint64(&mmListChatMessages.beforeListChatMessagesCounter, 1)
	defer mm_atomic.AddUint64(&mmListChatMessages.afterListChatMessagesCounter, 1)

	mmListChatMessages.t.Helper()

	if mmListChatMessages.inspectFuncListChatMessages != nil {
		mmListChatMessages.inspectFuncListChatMessages(ctx, lp1)
	}

	mm_params := AppPublicServiceServerMockListChatMessagesParams{ctx, lp1}

	// Record call args
	mmListChatMessages.ListChatMessagesMock.mutex.Lock()
	mmListChatMessages.ListChatMessagesMock.callArgs = append(mmListChatMessages.ListChatMessagesMock.callArgs, &mm_params)
	mmListChatMessages.ListChatMessagesMock.mutex.Unlock()

	for _, e := range mmListChatMessages.ListChatMessagesMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmListChatMessages.ListChatMessagesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListChatMessages.ListChatMessagesMock.defaultExpectation.Counter, 1)
		mm_want := mmListChatMessages.ListChatMessagesMock.defaultExpectation.params
		mm_want_ptrs := mmListChatMessages.ListChatMessagesMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockListChatMessagesParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListChatMessages.t.Errorf("AppPublicServiceServerMock.ListChatMessages got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListChatMessages.ListChatMessagesMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmListChatMessages.t.Errorf("AppPublicServiceServerMock.ListChatMessages got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListChatMessages.ListChatMessagesMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListChatMessages.t.Errorf("AppPublicServiceServerMock.ListChatMessages got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListChatMessages.ListChatMessagesMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListChatMessages.ListChatMessagesMock.defaultExpectation.results
		if mm_results == nil {
			mmListChatMessages.t.Fatal("No results are set for the AppPublicServiceServerMock.ListChatMessages")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmListChatMessages.funcListChatMessages != nil {
		return mmListChatMessages.funcListChatMessages(ctx, lp1)
	}
	mmListChatMessages.t.Fatalf("Unexpected call to AppPublicServiceServerMock.ListChatMessages. %v %v", ctx, lp1)
	return
}

// ListChatMessagesAfterCounter returns a count of finished AppPublicServiceServerMock.ListChatMessages invocations
func (mmListChatMessages *AppPublicServiceServerMock) ListChatMessagesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListChatMessages.afterListChatMessagesCounter)
}

// ListChatMessagesBeforeCounter returns a count of AppPublicServiceServerMock.ListChatMessages invocations
func (mmListChatMessages *AppPublicServiceServerMock) ListChatMessagesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListChatMessages.beforeListChatMessagesCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.ListChatMessages.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListChatMessages *mAppPublicServiceServerMockListChatMessages) Calls() []*AppPublicServiceServerMockListChatMessagesParams {
	mmListChatMessages.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockListChatMessagesParams, len(mmListChatMessages.callArgs))
	copy(argCopy, mmListChatMessages.callArgs)

	mmListChatMessages.mutex.RUnlock()

	return argCopy
}

// MinimockListChatMessagesDone returns true if the count of the ListChatMessages invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockListChatMessagesDone() bool {
	if m.ListChatMessagesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListChatMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListChatMessagesMock.invocationsDone()
}

// MinimockListChatMessagesInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockListChatMessagesInspect() {
	for _, e := range m.ListChatMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListChatMessages at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListChatMessagesCounter := mm_atomic.LoadUint64(&m.afterListChatMessagesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListChatMessagesMock.defaultExpectation != nil && afterListChatMessagesCounter < 1 {
		if m.ListChatMessagesMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListChatMessages at\n%s", m.ListChatMessagesMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListChatMessages at\n%s with params: %#v", m.ListChatMessagesMock.defaultExpectation.expectationOrigins.origin, *m.ListChatMessagesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListChatMessages != nil && afterListChatMessagesCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.ListChatMessages at\n%s", m.funcListChatMessagesOrigin)
	}

	if !m.ListChatMessagesMock.invocationsDone() && afterListChatMessagesCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.ListChatMessages at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListChatMessagesMock.expectedInvocations), m.ListChatMessagesMock.expectedInvocationsOrigin, afterListChatMessagesCounter)
	}
}

type mAppPublicServiceServerMockListChats struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockListChatsExpectation
	expectations       []*AppPublicServiceServerMockListChatsExpectation

	callArgs []*AppPublicServiceServerMockListChatsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockListChatsExpectation specifies expectation struct of the AppPublicServiceServer.ListChats
type AppPublicServiceServerMockListChatsExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockListChatsParams
	paramPtrs          *AppPublicServiceServerMockListChatsParamPtrs
	expectationOrigins AppPublicServiceServerMockListChatsExpectationOrigins
	results            *AppPublicServiceServerMockListChatsResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockListChatsParams contains parameters of the AppPublicServiceServer.ListChats
type AppPublicServiceServerMockListChatsParams struct {
	ctx context.Context
	lp1 *mm_appv1alpha.ListChatsRequest
}

// AppPublicServiceServerMockListChatsParamPtrs contains pointers to parameters of the AppPublicServiceServer.ListChats
type AppPublicServiceServerMockListChatsParamPtrs struct {
	ctx *context.Context
	lp1 **mm_appv1alpha.ListChatsRequest
}

// AppPublicServiceServerMockListChatsResults contains results of the AppPublicServiceServer.ListChats
type AppPublicServiceServerMockListChatsResults struct {
	lp2 *mm_appv1alpha.ListChatsResponse
	err error
}

// AppPublicServiceServerMockListChatsOrigins contains origins of expectations of the AppPublicServiceServer.ListChats
type AppPublicServiceServerMockListChatsExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListChats *mAppPublicServiceServerMockListChats) Optional() *mAppPublicServiceServerMockListChats {
	mmListChats.optional = true
	return mmListChats
}

// Expect sets up expected params for AppPublicServiceServer.ListChats
func (mmListChats *mAppPublicServiceServerMockListChats) Expect(ctx context.Context, lp1 *mm_appv1alpha.ListChatsRequest) *mAppPublicServiceServerMockListChats {
	if mmListChats.mock.funcListChats != nil {
		mmListChats.mock.t.Fatalf("AppPublicServiceServerMock.ListChats mock is already set by Set")
	}

	if mmListChats.defaultExpectation == nil {
		mmListChats.defaultExpectation = &AppPublicServiceServerMockListChatsExpectation{}
	}

	if mmListChats.defaultExpectation.paramPtrs != nil {
		mmListChats.mock.t.Fatalf("AppPublicServiceServerMock.ListChats mock is already set by ExpectParams functions")
	}

	mmListChats.defaultExpectation.params = &AppPublicServiceServerMockListChatsParams{ctx, lp1}
	mmListChats.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListChats.expectations {
		if minimock.Equal(e.params, mmListChats.defaultExpectation.params) {
			mmListChats.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListChats.defaultExpectation.params)
		}
	}

	return mmListChats
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.ListChats
func (mmListChats *mAppPublicServiceServerMockListChats) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockListChats {
	if mmListChats.mock.funcListChats != nil {
		mmListChats.mock.t.Fatalf("AppPublicServiceServerMock.ListChats mock is already set by Set")
	}

	if mmListChats.defaultExpectation == nil {
		mmListChats.defaultExpectation = &AppPublicServiceServerMockListChatsExpectation{}
	}

	if mmListChats.defaultExpectation.params != nil {
		mmListChats.mock.t.Fatalf("AppPublicServiceServerMock.ListChats mock is already set by Expect")
	}

	if mmListChats.defaultExpectation.paramPtrs == nil {
		mmListChats.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListChatsParamPtrs{}
	}
	mmListChats.defaultExpectation.paramPtrs.ctx = &ctx
	mmListChats.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListChats
}

// ExpectLp1Param2 sets up expected param lp1 for AppPublicServiceServer.ListChats
func (mmListChats *mAppPublicServiceServerMockListChats) ExpectLp1Param2(lp1 *mm_appv1alpha.ListChatsRequest) *mAppPublicServiceServerMockListChats {
	if mmListChats.mock.funcListChats != nil {
		mmListChats.mock.t.Fatalf("AppPublicServiceServerMock.ListChats mock is already set by Set")
	}

	if mmListChats.defaultExpectation == nil {
		mmListChats.defaultExpectation = &AppPublicServiceServerMockListChatsExpectation{}
	}

	if mmListChats.defaultExpectation.params != nil {
		mmListChats.mock.t.Fatalf("AppPublicServiceServerMock.ListChats mock is already set by Expect")
	}

	if mmListChats.defaultExpectation.paramPtrs == nil {
		mmListChats.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListChatsParamPtrs{}
	}
	mmListChats.defaultExpectation.paramPtrs.lp1 = &lp1
	mmListChats.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmListChats
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.ListChats
func (mmListChats *mAppPublicServiceServerMockListChats) Inspect(f func(ctx context.Context, lp1 *mm_appv1alpha.ListChatsRequest)) *mAppPublicServiceServerMockListChats {
	if mmListChats.mock.inspectFuncListChats != nil {
		mmListChats.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.ListChats")
	}

	mmListChats.mock.inspectFuncListChats = f

	return mmListChats
}

// Return sets up results that will be returned by AppPublicServiceServer.ListChats
func (mmListChats *mAppPublicServiceServerMockListChats) Return(lp2 *mm_appv1alpha.ListChatsResponse, err error) *AppPublicServiceServerMock {
	if mmListChats.mock.funcListChats != nil {
		mmListChats.mock.t.Fatalf("AppPublicServiceServerMock.ListChats mock is already set by Set")
	}

	if mmListChats.defaultExpectation == nil {
		mmListChats.defaultExpectation = &AppPublicServiceServerMockListChatsExpectation{mock: mmListChats.mock}
	}
	mmListChats.defaultExpectation.results = &AppPublicServiceServerMockListChatsResults{lp2, err}
	mmListChats.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListChats.mock
}

// Set uses given function f to mock the AppPublicServiceServer.ListChats method
func (mmListChats *mAppPublicServiceServerMockListChats) Set(f func(ctx context.Context, lp1 *mm_appv1alpha.ListChatsRequest) (lp2 *mm_appv1alpha.ListChatsResponse, err error)) *AppPublicServiceServerMock {
	if mmListChats.defaultExpectation != nil {
		mmListChats.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.ListChats method")
	}

	if len(mmListChats.expectations) > 0 {
		mmListChats.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.ListChats method")
	}

	mmListChats.mock.funcListChats = f
	mmListChats.mock.funcListChatsOrigin = minimock.CallerInfo(1)
	return mmListChats.mock
}

// When sets expectation for the AppPublicServiceServer.ListChats which will trigger the result defined by the following
// Then helper
func (mmListChats *mAppPublicServiceServerMockListChats) When(ctx context.Context, lp1 *mm_appv1alpha.ListChatsRequest) *AppPublicServiceServerMockListChatsExpectation {
	if mmListChats.mock.funcListChats != nil {
		mmListChats.mock.t.Fatalf("AppPublicServiceServerMock.ListChats mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockListChatsExpectation{
		mock:               mmListChats.mock,
		params:             &AppPublicServiceServerMockListChatsParams{ctx, lp1},
		expectationOrigins: AppPublicServiceServerMockListChatsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListChats.expectations = append(mmListChats.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.ListChats return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockListChatsExpectation) Then(lp2 *mm_appv1alpha.ListChatsResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockListChatsResults{lp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.ListChats should be invoked
func (mmListChats *mAppPublicServiceServerMockListChats) Times(n uint64) *mAppPublicServiceServerMockListChats {
	if n == 0 {
		mmListChats.mock.t.Fatalf("Times of AppPublicServiceServerMock.ListChats mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListChats.expectedInvocations, n)
	mmListChats.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListChats
}

func (mmListChats *mAppPublicServiceServerMockListChats) invocationsDone() bool {
	if len(mmListChats.expectations) == 0 && mmListChats.defaultExpectation == nil && mmListChats.mock.funcListChats == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListChats.mock.afterListChatsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListChats.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListChats implements mm_appv1alpha.AppPublicServiceServer
func (mmListChats *AppPublicServiceServerMock) ListChats(ctx context.Context, lp1 *mm_appv1alpha.ListChatsRequest) (lp2 *mm_appv1alpha.ListChatsResponse, err error) {
	mm_atomic.AddUint64(&mmListChats.beforeListChatsCounter, 1)
	defer mm_atomic.AddUint64(&mmListChats.afterListChatsCounter, 1)

	mmListChats.t.Helper()

	if mmListChats.inspectFuncListChats != nil {
		mmListChats.inspectFuncListChats(ctx, lp1)
	}

	mm_params := AppPublicServiceServerMockListChatsParams{ctx, lp1}

	// Record call args
	mmListChats.ListChatsMock.mutex.Lock()
	mmListChats.ListChatsMock.callArgs = append(mmListChats.ListChatsMock.callArgs, &mm_params)
	mmListChats.ListChatsMock.mutex.Unlock()

	for _, e := range mmListChats.ListChatsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmListChats.ListChatsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListChats.ListChatsMock.defaultExpectation.Counter, 1)
		mm_want := mmListChats.ListChatsMock.defaultExpectation.params
		mm_want_ptrs := mmListChats.ListChatsMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockListChatsParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListChats.t.Errorf("AppPublicServiceServerMock.ListChats got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListChats.ListChatsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmListChats.t.Errorf("AppPublicServiceServerMock.ListChats got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListChats.ListChatsMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListChats.t.Errorf("AppPublicServiceServerMock.ListChats got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListChats.ListChatsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListChats.ListChatsMock.defaultExpectation.results
		if mm_results == nil {
			mmListChats.t.Fatal("No results are set for the AppPublicServiceServerMock.ListChats")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmListChats.funcListChats != nil {
		return mmListChats.funcListChats(ctx, lp1)
	}
	mmListChats.t.Fatalf("Unexpected call to AppPublicServiceServerMock.ListChats. %v %v", ctx, lp1)
	return
}

// ListChatsAfterCounter returns a count of finished AppPublicServiceServerMock.ListChats invocations
func (mmListChats *AppPublicServiceServerMock) ListChatsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListChats.afterListChatsCounter)
}

// ListChatsBeforeCounter returns a count of AppPublicServiceServerMock.ListChats invocations
func (mmListChats *AppPublicServiceServerMock) ListChatsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListChats.beforeListChatsCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.ListChats.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListChats *mAppPublicServiceServerMockListChats) Calls() []*AppPublicServiceServerMockListChatsParams {
	mmListChats.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockListChatsParams, len(mmListChats.callArgs))
	copy(argCopy, mmListChats.callArgs)

	mmListChats.mutex.RUnlock()

	return argCopy
}

// MinimockListChatsDone returns true if the count of the ListChats invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockListChatsDone() bool {
	if m.ListChatsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListChatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListChatsMock.invocationsDone()
}

// MinimockListChatsInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockListChatsInspect() {
	for _, e := range m.ListChatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListChats at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListChatsCounter := mm_atomic.LoadUint64(&m.afterListChatsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListChatsMock.defaultExpectation != nil && afterListChatsCounter < 1 {
		if m.ListChatsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListChats at\n%s", m.ListChatsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListChats at\n%s with params: %#v", m.ListChatsMock.defaultExpectation.expectationOrigins.origin, *m.ListChatsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListChats != nil && afterListChatsCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.ListChats at\n%s", m.funcListChatsOrigin)
	}

	if !m.ListChatsMock.invocationsDone() && afterListChatsCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.ListChats at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListChatsMock.expectedInvocations), m.ListChatsMock.expectedInvocationsOrigin, afterListChatsCounter)
	}
}

type mAppPublicServiceServerMockListConversations struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockListConversationsExpectation
	expectations       []*AppPublicServiceServerMockListConversationsExpectation

	callArgs []*AppPublicServiceServerMockListConversationsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockListConversationsExpectation specifies expectation struct of the AppPublicServiceServer.ListConversations
type AppPublicServiceServerMockListConversationsExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockListConversationsParams
	paramPtrs          *AppPublicServiceServerMockListConversationsParamPtrs
	expectationOrigins AppPublicServiceServerMockListConversationsExpectationOrigins
	results            *AppPublicServiceServerMockListConversationsResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockListConversationsParams contains parameters of the AppPublicServiceServer.ListConversations
type AppPublicServiceServerMockListConversationsParams struct {
	ctx context.Context
	lp1 *mm_appv1alpha.ListConversationsRequest
}

// AppPublicServiceServerMockListConversationsParamPtrs contains pointers to parameters of the AppPublicServiceServer.ListConversations
type AppPublicServiceServerMockListConversationsParamPtrs struct {
	ctx *context.Context
	lp1 **mm_appv1alpha.ListConversationsRequest
}

// AppPublicServiceServerMockListConversationsResults contains results of the AppPublicServiceServer.ListConversations
type AppPublicServiceServerMockListConversationsResults struct {
	lp2 *mm_appv1alpha.ListConversationsResponse
	err error
}

// AppPublicServiceServerMockListConversationsOrigins contains origins of expectations of the AppPublicServiceServer.ListConversations
type AppPublicServiceServerMockListConversationsExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListConversations *mAppPublicServiceServerMockListConversations) Optional() *mAppPublicServiceServerMockListConversations {
	mmListConversations.optional = true
	return mmListConversations
}

// Expect sets up expected params for AppPublicServiceServer.ListConversations
func (mmListConversations *mAppPublicServiceServerMockListConversations) Expect(ctx context.Context, lp1 *mm_appv1alpha.ListConversationsRequest) *mAppPublicServiceServerMockListConversations {
	if mmListConversations.mock.funcListConversations != nil {
		mmListConversations.mock.t.Fatalf("AppPublicServiceServerMock.ListConversations mock is already set by Set")
	}

	if mmListConversations.defaultExpectation == nil {
		mmListConversations.defaultExpectation = &AppPublicServiceServerMockListConversationsExpectation{}
	}

	if mmListConversations.defaultExpectation.paramPtrs != nil {
		mmListConversations.mock.t.Fatalf("AppPublicServiceServerMock.ListConversations mock is already set by ExpectParams functions")
	}

	mmListConversations.defaultExpectation.params = &AppPublicServiceServerMockListConversationsParams{ctx, lp1}
	mmListConversations.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListConversations.expectations {
		if minimock.Equal(e.params, mmListConversations.defaultExpectation.params) {
			mmListConversations.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListConversations.defaultExpectation.params)
		}
	}

	return mmListConversations
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.ListConversations
func (mmListConversations *mAppPublicServiceServerMockListConversations) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockListConversations {
	if mmListConversations.mock.funcListConversations != nil {
		mmListConversations.mock.t.Fatalf("AppPublicServiceServerMock.ListConversations mock is already set by Set")
	}

	if mmListConversations.defaultExpectation == nil {
		mmListConversations.defaultExpectation = &AppPublicServiceServerMockListConversationsExpectation{}
	}

	if mmListConversations.defaultExpectation.params != nil {
		mmListConversations.mock.t.Fatalf("AppPublicServiceServerMock.ListConversations mock is already set by Expect")
	}

	if mmListConversations.defaultExpectation.paramPtrs == nil {
		mmListConversations.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListConversationsParamPtrs{}
	}
	mmListConversations.defaultExpectation.paramPtrs.ctx = &ctx
	mmListConversations.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListConversations
}

// ExpectLp1Param2 sets up expected param lp1 for AppPublicServiceServer.ListConversations
func (mmListConversations *mAppPublicServiceServerMockListConversations) ExpectLp1Param2(lp1 *mm_appv1alpha.ListConversationsRequest) *mAppPublicServiceServerMockListConversations {
	if mmListConversations.mock.funcListConversations != nil {
		mmListConversations.mock.t.Fatalf("AppPublicServiceServerMock.ListConversations mock is already set by Set")
	}

	if mmListConversations.defaultExpectation == nil {
		mmListConversations.defaultExpectation = &AppPublicServiceServerMockListConversationsExpectation{}
	}

	if mmListConversations.defaultExpectation.params != nil {
		mmListConversations.mock.t.Fatalf("AppPublicServiceServerMock.ListConversations mock is already set by Expect")
	}

	if mmListConversations.defaultExpectation.paramPtrs == nil {
		mmListConversations.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListConversationsParamPtrs{}
	}
	mmListConversations.defaultExpectation.paramPtrs.lp1 = &lp1
	mmListConversations.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmListConversations
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.ListConversations
func (mmListConversations *mAppPublicServiceServerMockListConversations) Inspect(f func(ctx context.Context, lp1 *mm_appv1alpha.ListConversationsRequest)) *mAppPublicServiceServerMockListConversations {
	if mmListConversations.mock.inspectFuncListConversations != nil {
		mmListConversations.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.ListConversations")
	}

	mmListConversations.mock.inspectFuncListConversations = f

	return mmListConversations
}

// Return sets up results that will be returned by AppPublicServiceServer.ListConversations
func (mmListConversations *mAppPublicServiceServerMockListConversations) Return(lp2 *mm_appv1alpha.ListConversationsResponse, err error) *AppPublicServiceServerMock {
	if mmListConversations.mock.funcListConversations != nil {
		mmListConversations.mock.t.Fatalf("AppPublicServiceServerMock.ListConversations mock is already set by Set")
	}

	if mmListConversations.defaultExpectation == nil {
		mmListConversations.defaultExpectation = &AppPublicServiceServerMockListConversationsExpectation{mock: mmListConversations.mock}
	}
	mmListConversations.defaultExpectation.results = &AppPublicServiceServerMockListConversationsResults{lp2, err}
	mmListConversations.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListConversations.mock
}

// Set uses given function f to mock the AppPublicServiceServer.ListConversations method
func (mmListConversations *mAppPublicServiceServerMockListConversations) Set(f func(ctx context.Context, lp1 *mm_appv1alpha.ListConversationsRequest) (lp2 *mm_appv1alpha.ListConversationsResponse, err error)) *AppPublicServiceServerMock {
	if mmListConversations.defaultExpectation != nil {
		mmListConversations.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.ListConversations method")
	}

	if len(mmListConversations.expectations) > 0 {
		mmListConversations.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.ListConversations method")
	}

	mmListConversations.mock.funcListConversations = f
	mmListConversations.mock.funcListConversationsOrigin = minimock.CallerInfo(1)
	return mmListConversations.mock
}

// When sets expectation for the AppPublicServiceServer.ListConversations which will trigger the result defined by the following
// Then helper
func (mmListConversations *mAppPublicServiceServerMockListConversations) When(ctx context.Context, lp1 *mm_appv1alpha.ListConversationsRequest) *AppPublicServiceServerMockListConversationsExpectation {
	if mmListConversations.mock.funcListConversations != nil {
		mmListConversations.mock.t.Fatalf("AppPublicServiceServerMock.ListConversations mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockListConversationsExpectation{
		mock:               mmListConversations.mock,
		params:             &AppPublicServiceServerMockListConversationsParams{ctx, lp1},
		expectationOrigins: AppPublicServiceServerMockListConversationsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListConversations.expectations = append(mmListConversations.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.ListConversations return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockListConversationsExpectation) Then(lp2 *mm_appv1alpha.ListConversationsResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockListConversationsResults{lp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.ListConversations should be invoked
func (mmListConversations *mAppPublicServiceServerMockListConversations) Times(n uint64) *mAppPublicServiceServerMockListConversations {
	if n == 0 {
		mmListConversations.mock.t.Fatalf("Times of AppPublicServiceServerMock.ListConversations mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListConversations.expectedInvocations, n)
	mmListConversations.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListConversations
}

func (mmListConversations *mAppPublicServiceServerMockListConversations) invocationsDone() bool {
	if len(mmListConversations.expectations) == 0 && mmListConversations.defaultExpectation == nil && mmListConversations.mock.funcListConversations == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListConversations.mock.afterListConversationsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListConversations.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListConversations implements mm_appv1alpha.AppPublicServiceServer
func (mmListConversations *AppPublicServiceServerMock) ListConversations(ctx context.Context, lp1 *mm_appv1alpha.ListConversationsRequest) (lp2 *mm_appv1alpha.ListConversationsResponse, err error) {
	mm_atomic.AddUint64(&mmListConversations.beforeListConversationsCounter, 1)
	defer mm_atomic.AddUint64(&mmListConversations.afterListConversationsCounter, 1)

	mmListConversations.t.Helper()

	if mmListConversations.inspectFuncListConversations != nil {
		mmListConversations.inspectFuncListConversations(ctx, lp1)
	}

	mm_params := AppPublicServiceServerMockListConversationsParams{ctx, lp1}

	// Record call args
	mmListConversations.ListConversationsMock.mutex.Lock()
	mmListConversations.ListConversationsMock.callArgs = append(mmListConversations.ListConversationsMock.callArgs, &mm_params)
	mmListConversations.ListConversationsMock.mutex.Unlock()

	for _, e := range mmListConversations.ListConversationsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmListConversations.ListConversationsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListConversations.ListConversationsMock.defaultExpectation.Counter, 1)
		mm_want := mmListConversations.ListConversationsMock.defaultExpectation.params
		mm_want_ptrs := mmListConversations.ListConversationsMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockListConversationsParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListConversations.t.Errorf("AppPublicServiceServerMock.ListConversations got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListConversations.ListConversationsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmListConversations.t.Errorf("AppPublicServiceServerMock.ListConversations got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListConversations.ListConversationsMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListConversations.t.Errorf("AppPublicServiceServerMock.ListConversations got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListConversations.ListConversationsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListConversations.ListConversationsMock.defaultExpectation.results
		if mm_results == nil {
			mmListConversations.t.Fatal("No results are set for the AppPublicServiceServerMock.ListConversations")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmListConversations.funcListConversations != nil {
		return mmListConversations.funcListConversations(ctx, lp1)
	}
	mmListConversations.t.Fatalf("Unexpected call to AppPublicServiceServerMock.ListConversations. %v %v", ctx, lp1)
	return
}

// ListConversationsAfterCounter returns a count of finished AppPublicServiceServerMock.ListConversations invocations
func (mmListConversations *AppPublicServiceServerMock) ListConversationsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListConversations.afterListConversationsCounter)
}

// ListConversationsBeforeCounter returns a count of AppPublicServiceServerMock.ListConversations invocations
func (mmListConversations *AppPublicServiceServerMock) ListConversationsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListConversations.beforeListConversationsCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.ListConversations.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListConversations *mAppPublicServiceServerMockListConversations) Calls() []*AppPublicServiceServerMockListConversationsParams {
	mmListConversations.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockListConversationsParams, len(mmListConversations.callArgs))
	copy(argCopy, mmListConversations.callArgs)

	mmListConversations.mutex.RUnlock()

	return argCopy
}

// MinimockListConversationsDone returns true if the count of the ListConversations invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockListConversationsDone() bool {
	if m.ListConversationsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListConversationsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListConversationsMock.invocationsDone()
}

// MinimockListConversationsInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockListConversationsInspect() {
	for _, e := range m.ListConversationsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListConversations at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListConversationsCounter := mm_atomic.LoadUint64(&m.afterListConversationsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListConversationsMock.defaultExpectation != nil && afterListConversationsCounter < 1 {
		if m.ListConversationsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListConversations at\n%s", m.ListConversationsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListConversations at\n%s with params: %#v", m.ListConversationsMock.defaultExpectation.expectationOrigins.origin, *m.ListConversationsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListConversations != nil && afterListConversationsCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.ListConversations at\n%s", m.funcListConversationsOrigin)
	}

	if !m.ListConversationsMock.invocationsDone() && afterListConversationsCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.ListConversations at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListConversationsMock.expectedInvocations), m.ListConversationsMock.expectedInvocationsOrigin, afterListConversationsCounter)
	}
}

type mAppPublicServiceServerMockListMessages struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockListMessagesExpectation
	expectations       []*AppPublicServiceServerMockListMessagesExpectation

	callArgs []*AppPublicServiceServerMockListMessagesParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockListMessagesExpectation specifies expectation struct of the AppPublicServiceServer.ListMessages
type AppPublicServiceServerMockListMessagesExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockListMessagesParams
	paramPtrs          *AppPublicServiceServerMockListMessagesParamPtrs
	expectationOrigins AppPublicServiceServerMockListMessagesExpectationOrigins
	results            *AppPublicServiceServerMockListMessagesResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockListMessagesParams contains parameters of the AppPublicServiceServer.ListMessages
type AppPublicServiceServerMockListMessagesParams struct {
	ctx context.Context
	lp1 *mm_appv1alpha.ListMessagesRequest
}

// AppPublicServiceServerMockListMessagesParamPtrs contains pointers to parameters of the AppPublicServiceServer.ListMessages
type AppPublicServiceServerMockListMessagesParamPtrs struct {
	ctx *context.Context
	lp1 **mm_appv1alpha.ListMessagesRequest
}

// AppPublicServiceServerMockListMessagesResults contains results of the AppPublicServiceServer.ListMessages
type AppPublicServiceServerMockListMessagesResults struct {
	lp2 *mm_appv1alpha.ListMessagesResponse
	err error
}

// AppPublicServiceServerMockListMessagesOrigins contains origins of expectations of the AppPublicServiceServer.ListMessages
type AppPublicServiceServerMockListMessagesExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListMessages *mAppPublicServiceServerMockListMessages) Optional() *mAppPublicServiceServerMockListMessages {
	mmListMessages.optional = true
	return mmListMessages
}

// Expect sets up expected params for AppPublicServiceServer.ListMessages
func (mmListMessages *mAppPublicServiceServerMockListMessages) Expect(ctx context.Context, lp1 *mm_appv1alpha.ListMessagesRequest) *mAppPublicServiceServerMockListMessages {
	if mmListMessages.mock.funcListMessages != nil {
		mmListMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListMessages mock is already set by Set")
	}

	if mmListMessages.defaultExpectation == nil {
		mmListMessages.defaultExpectation = &AppPublicServiceServerMockListMessagesExpectation{}
	}

	if mmListMessages.defaultExpectation.paramPtrs != nil {
		mmListMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListMessages mock is already set by ExpectParams functions")
	}

	mmListMessages.defaultExpectation.params = &AppPublicServiceServerMockListMessagesParams{ctx, lp1}
	mmListMessages.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListMessages.expectations {
		if minimock.Equal(e.params, mmListMessages.defaultExpectation.params) {
			mmListMessages.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListMessages.defaultExpectation.params)
		}
	}

	return mmListMessages
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.ListMessages
func (mmListMessages *mAppPublicServiceServerMockListMessages) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockListMessages {
	if mmListMessages.mock.funcListMessages != nil {
		mmListMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListMessages mock is already set by Set")
	}

	if mmListMessages.defaultExpectation == nil {
		mmListMessages.defaultExpectation = &AppPublicServiceServerMockListMessagesExpectation{}
	}

	if mmListMessages.defaultExpectation.params != nil {
		mmListMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListMessages mock is already set by Expect")
	}

	if mmListMessages.defaultExpectation.paramPtrs == nil {
		mmListMessages.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListMessagesParamPtrs{}
	}
	mmListMessages.defaultExpectation.paramPtrs.ctx = &ctx
	mmListMessages.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListMessages
}

// ExpectLp1Param2 sets up expected param lp1 for AppPublicServiceServer.ListMessages
func (mmListMessages *mAppPublicServiceServerMockListMessages) ExpectLp1Param2(lp1 *mm_appv1alpha.ListMessagesRequest) *mAppPublicServiceServerMockListMessages {
	if mmListMessages.mock.funcListMessages != nil {
		mmListMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListMessages mock is already set by Set")
	}

	if mmListMessages.defaultExpectation == nil {
		mmListMessages.defaultExpectation = &AppPublicServiceServerMockListMessagesExpectation{}
	}

	if mmListMessages.defaultExpectation.params != nil {
		mmListMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListMessages mock is already set by Expect")
	}

	if mmListMessages.defaultExpectation.paramPtrs == nil {
		mmListMessages.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListMessagesParamPtrs{}
	}
	mmListMessages.defaultExpectation.paramPtrs.lp1 = &lp1
	mmListMessages.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmListMessages
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.ListMessages
func (mmListMessages *mAppPublicServiceServerMockListMessages) Inspect(f func(ctx context.Context, lp1 *mm_appv1alpha.ListMessagesRequest)) *mAppPublicServiceServerMockListMessages {
	if mmListMessages.mock.inspectFuncListMessages != nil {
		mmListMessages.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.ListMessages")
	}

	mmListMessages.mock.inspectFuncListMessages = f

	return mmListMessages
}

// Return sets up results that will be returned by AppPublicServiceServer.ListMessages
func (mmListMessages *mAppPublicServiceServerMockListMessages) Return(lp2 *mm_appv1alpha.ListMessagesResponse, err error) *AppPublicServiceServerMock {
	if mmListMessages.mock.funcListMessages != nil {
		mmListMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListMessages mock is already set by Set")
	}

	if mmListMessages.defaultExpectation == nil {
		mmListMessages.defaultExpectation = &AppPublicServiceServerMockListMessagesExpectation{mock: mmListMessages.mock}
	}
	mmListMessages.defaultExpectation.results = &AppPublicServiceServerMockListMessagesResults{lp2, err}
	mmListMessages.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListMessages.mock
}

// Set uses given function f to mock the AppPublicServiceServer.ListMessages method
func (mmListMessages *mAppPublicServiceServerMockListMessages) Set(f func(ctx context.Context, lp1 *mm_appv1alpha.ListMessagesRequest) (lp2 *mm_appv1alpha.ListMessagesResponse, err error)) *AppPublicServiceServerMock {
	if mmListMessages.defaultExpectation != nil {
		mmListMessages.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.ListMessages method")
	}

	if len(mmListMessages.expectations) > 0 {
		mmListMessages.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.ListMessages method")
	}

	mmListMessages.mock.funcListMessages = f
	mmListMessages.mock.funcListMessagesOrigin = minimock.CallerInfo(1)
	return mmListMessages.mock
}

// When sets expectation for the AppPublicServiceServer.ListMessages which will trigger the result defined by the following
// Then helper
func (mmListMessages *mAppPublicServiceServerMockListMessages) When(ctx context.Context, lp1 *mm_appv1alpha.ListMessagesRequest) *AppPublicServiceServerMockListMessagesExpectation {
	if mmListMessages.mock.funcListMessages != nil {
		mmListMessages.mock.t.Fatalf("AppPublicServiceServerMock.ListMessages mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockListMessagesExpectation{
		mock:               mmListMessages.mock,
		params:             &AppPublicServiceServerMockListMessagesParams{ctx, lp1},
		expectationOrigins: AppPublicServiceServerMockListMessagesExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListMessages.expectations = append(mmListMessages.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.ListMessages return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockListMessagesExpectation) Then(lp2 *mm_appv1alpha.ListMessagesResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockListMessagesResults{lp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.ListMessages should be invoked
func (mmListMessages *mAppPublicServiceServerMockListMessages) Times(n uint64) *mAppPublicServiceServerMockListMessages {
	if n == 0 {
		mmListMessages.mock.t.Fatalf("Times of AppPublicServiceServerMock.ListMessages mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListMessages.expectedInvocations, n)
	mmListMessages.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListMessages
}

func (mmListMessages *mAppPublicServiceServerMockListMessages) invocationsDone() bool {
	if len(mmListMessages.expectations) == 0 && mmListMessages.defaultExpectation == nil && mmListMessages.mock.funcListMessages == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListMessages.mock.afterListMessagesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListMessages.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListMessages implements mm_appv1alpha.AppPublicServiceServer
func (mmListMessages *AppPublicServiceServerMock) ListMessages(ctx context.Context, lp1 *mm_appv1alpha.ListMessagesRequest) (lp2 *mm_appv1alpha.ListMessagesResponse, err error) {
	mm_atomic.AddUint64(&mmListMessages.beforeListMessagesCounter, 1)
	defer mm_atomic.AddUint64(&mmListMessages.afterListMessagesCounter, 1)

	mmListMessages.t.Helper()

	if mmListMessages.inspectFuncListMessages != nil {
		mmListMessages.inspectFuncListMessages(ctx, lp1)
	}

	mm_params := AppPublicServiceServerMockListMessagesParams{ctx, lp1}

	// Record call args
	mmListMessages.ListMessagesMock.mutex.Lock()
	mmListMessages.ListMessagesMock.callArgs = append(mmListMessages.ListMessagesMock.callArgs, &mm_params)
	mmListMessages.ListMessagesMock.mutex.Unlock()

	for _, e := range mmListMessages.ListMessagesMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmListMessages.ListMessagesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListMessages.ListMessagesMock.defaultExpectation.Counter, 1)
		mm_want := mmListMessages.ListMessagesMock.defaultExpectation.params
		mm_want_ptrs := mmListMessages.ListMessagesMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockListMessagesParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListMessages.t.Errorf("AppPublicServiceServerMock.ListMessages got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListMessages.ListMessagesMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmListMessages.t.Errorf("AppPublicServiceServerMock.ListMessages got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListMessages.ListMessagesMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListMessages.t.Errorf("AppPublicServiceServerMock.ListMessages got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListMessages.ListMessagesMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListMessages.ListMessagesMock.defaultExpectation.results
		if mm_results == nil {
			mmListMessages.t.Fatal("No results are set for the AppPublicServiceServerMock.ListMessages")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmListMessages.funcListMessages != nil {
		return mmListMessages.funcListMessages(ctx, lp1)
	}
	mmListMessages.t.Fatalf("Unexpected call to AppPublicServiceServerMock.ListMessages. %v %v", ctx, lp1)
	return
}

// ListMessagesAfterCounter returns a count of finished AppPublicServiceServerMock.ListMessages invocations
func (mmListMessages *AppPublicServiceServerMock) ListMessagesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListMessages.afterListMessagesCounter)
}

// ListMessagesBeforeCounter returns a count of AppPublicServiceServerMock.ListMessages invocations
func (mmListMessages *AppPublicServiceServerMock) ListMessagesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListMessages.beforeListMessagesCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.ListMessages.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListMessages *mAppPublicServiceServerMockListMessages) Calls() []*AppPublicServiceServerMockListMessagesParams {
	mmListMessages.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockListMessagesParams, len(mmListMessages.callArgs))
	copy(argCopy, mmListMessages.callArgs)

	mmListMessages.mutex.RUnlock()

	return argCopy
}

// MinimockListMessagesDone returns true if the count of the ListMessages invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockListMessagesDone() bool {
	if m.ListMessagesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListMessagesMock.invocationsDone()
}

// MinimockListMessagesInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockListMessagesInspect() {
	for _, e := range m.ListMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListMessages at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListMessagesCounter := mm_atomic.LoadUint64(&m.afterListMessagesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListMessagesMock.defaultExpectation != nil && afterListMessagesCounter < 1 {
		if m.ListMessagesMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListMessages at\n%s", m.ListMessagesMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListMessages at\n%s with params: %#v", m.ListMessagesMock.defaultExpectation.expectationOrigins.origin, *m.ListMessagesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListMessages != nil && afterListMessagesCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.ListMessages at\n%s", m.funcListMessagesOrigin)
	}

	if !m.ListMessagesMock.invocationsDone() && afterListMessagesCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.ListMessages at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListMessagesMock.expectedInvocations), m.ListMessagesMock.expectedInvocationsOrigin, afterListMessagesCounter)
	}
}

type mAppPublicServiceServerMockListRows struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockListRowsExpectation
	expectations       []*AppPublicServiceServerMockListRowsExpectation

	callArgs []*AppPublicServiceServerMockListRowsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockListRowsExpectation specifies expectation struct of the AppPublicServiceServer.ListRows
type AppPublicServiceServerMockListRowsExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockListRowsParams
	paramPtrs          *AppPublicServiceServerMockListRowsParamPtrs
	expectationOrigins AppPublicServiceServerMockListRowsExpectationOrigins
	results            *AppPublicServiceServerMockListRowsResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockListRowsParams contains parameters of the AppPublicServiceServer.ListRows
type AppPublicServiceServerMockListRowsParams struct {
	ctx context.Context
	lp1 *mm_appv1alpha.ListRowsRequest
}

// AppPublicServiceServerMockListRowsParamPtrs contains pointers to parameters of the AppPublicServiceServer.ListRows
type AppPublicServiceServerMockListRowsParamPtrs struct {
	ctx *context.Context
	lp1 **mm_appv1alpha.ListRowsRequest
}

// AppPublicServiceServerMockListRowsResults contains results of the AppPublicServiceServer.ListRows
type AppPublicServiceServerMockListRowsResults struct {
	lp2 *mm_appv1alpha.ListRowsResponse
	err error
}

// AppPublicServiceServerMockListRowsOrigins contains origins of expectations of the AppPublicServiceServer.ListRows
type AppPublicServiceServerMockListRowsExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListRows *mAppPublicServiceServerMockListRows) Optional() *mAppPublicServiceServerMockListRows {
	mmListRows.optional = true
	return mmListRows
}

// Expect sets up expected params for AppPublicServiceServer.ListRows
func (mmListRows *mAppPublicServiceServerMockListRows) Expect(ctx context.Context, lp1 *mm_appv1alpha.ListRowsRequest) *mAppPublicServiceServerMockListRows {
	if mmListRows.mock.funcListRows != nil {
		mmListRows.mock.t.Fatalf("AppPublicServiceServerMock.ListRows mock is already set by Set")
	}

	if mmListRows.defaultExpectation == nil {
		mmListRows.defaultExpectation = &AppPublicServiceServerMockListRowsExpectation{}
	}

	if mmListRows.defaultExpectation.paramPtrs != nil {
		mmListRows.mock.t.Fatalf("AppPublicServiceServerMock.ListRows mock is already set by ExpectParams functions")
	}

	mmListRows.defaultExpectation.params = &AppPublicServiceServerMockListRowsParams{ctx, lp1}
	mmListRows.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListRows.expectations {
		if minimock.Equal(e.params, mmListRows.defaultExpectation.params) {
			mmListRows.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListRows.defaultExpectation.params)
		}
	}

	return mmListRows
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.ListRows
func (mmListRows *mAppPublicServiceServerMockListRows) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockListRows {
	if mmListRows.mock.funcListRows != nil {
		mmListRows.mock.t.Fatalf("AppPublicServiceServerMock.ListRows mock is already set by Set")
	}

	if mmListRows.defaultExpectation == nil {
		mmListRows.defaultExpectation = &AppPublicServiceServerMockListRowsExpectation{}
	}

	if mmListRows.defaultExpectation.params != nil {
		mmListRows.mock.t.Fatalf("AppPublicServiceServerMock.ListRows mock is already set by Expect")
	}

	if mmListRows.defaultExpectation.paramPtrs == nil {
		mmListRows.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListRowsParamPtrs{}
	}
	mmListRows.defaultExpectation.paramPtrs.ctx = &ctx
	mmListRows.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListRows
}

// ExpectLp1Param2 sets up expected param lp1 for AppPublicServiceServer.ListRows
func (mmListRows *mAppPublicServiceServerMockListRows) ExpectLp1Param2(lp1 *mm_appv1alpha.ListRowsRequest) *mAppPublicServiceServerMockListRows {
	if mmListRows.mock.funcListRows != nil {
		mmListRows.mock.t.Fatalf("AppPublicServiceServerMock.ListRows mock is already set by Set")
	}

	if mmListRows.defaultExpectation == nil {
		mmListRows.defaultExpectation = &AppPublicServiceServerMockListRowsExpectation{}
	}

	if mmListRows.defaultExpectation.params != nil {
		mmListRows.mock.t.Fatalf("AppPublicServiceServerMock.ListRows mock is already set by Expect")
	}

	if mmListRows.defaultExpectation.paramPtrs == nil {
		mmListRows.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListRowsParamPtrs{}
	}
	mmListRows.defaultExpectation.paramPtrs.lp1 = &lp1
	mmListRows.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmListRows
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.ListRows
func (mmListRows *mAppPublicServiceServerMockListRows) Inspect(f func(ctx context.Context, lp1 *mm_appv1alpha.ListRowsRequest)) *mAppPublicServiceServerMockListRows {
	if mmListRows.mock.inspectFuncListRows != nil {
		mmListRows.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.ListRows")
	}

	mmListRows.mock.inspectFuncListRows = f

	return mmListRows
}

// Return sets up results that will be returned by AppPublicServiceServer.ListRows
func (mmListRows *mAppPublicServiceServerMockListRows) Return(lp2 *mm_appv1alpha.ListRowsResponse, err error) *AppPublicServiceServerMock {
	if mmListRows.mock.funcListRows != nil {
		mmListRows.mock.t.Fatalf("AppPublicServiceServerMock.ListRows mock is already set by Set")
	}

	if mmListRows.defaultExpectation == nil {
		mmListRows.defaultExpectation = &AppPublicServiceServerMockListRowsExpectation{mock: mmListRows.mock}
	}
	mmListRows.defaultExpectation.results = &AppPublicServiceServerMockListRowsResults{lp2, err}
	mmListRows.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListRows.mock
}

// Set uses given function f to mock the AppPublicServiceServer.ListRows method
func (mmListRows *mAppPublicServiceServerMockListRows) Set(f func(ctx context.Context, lp1 *mm_appv1alpha.ListRowsRequest) (lp2 *mm_appv1alpha.ListRowsResponse, err error)) *AppPublicServiceServerMock {
	if mmListRows.defaultExpectation != nil {
		mmListRows.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.ListRows method")
	}

	if len(mmListRows.expectations) > 0 {
		mmListRows.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.ListRows method")
	}

	mmListRows.mock.funcListRows = f
	mmListRows.mock.funcListRowsOrigin = minimock.CallerInfo(1)
	return mmListRows.mock
}

// When sets expectation for the AppPublicServiceServer.ListRows which will trigger the result defined by the following
// Then helper
func (mmListRows *mAppPublicServiceServerMockListRows) When(ctx context.Context, lp1 *mm_appv1alpha.ListRowsRequest) *AppPublicServiceServerMockListRowsExpectation {
	if mmListRows.mock.funcListRows != nil {
		mmListRows.mock.t.Fatalf("AppPublicServiceServerMock.ListRows mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockListRowsExpectation{
		mock:               mmListRows.mock,
		params:             &AppPublicServiceServerMockListRowsParams{ctx, lp1},
		expectationOrigins: AppPublicServiceServerMockListRowsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListRows.expectations = append(mmListRows.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.ListRows return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockListRowsExpectation) Then(lp2 *mm_appv1alpha.ListRowsResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockListRowsResults{lp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.ListRows should be invoked
func (mmListRows *mAppPublicServiceServerMockListRows) Times(n uint64) *mAppPublicServiceServerMockListRows {
	if n == 0 {
		mmListRows.mock.t.Fatalf("Times of AppPublicServiceServerMock.ListRows mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListRows.expectedInvocations, n)
	mmListRows.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListRows
}

func (mmListRows *mAppPublicServiceServerMockListRows) invocationsDone() bool {
	if len(mmListRows.expectations) == 0 && mmListRows.defaultExpectation == nil && mmListRows.mock.funcListRows == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListRows.mock.afterListRowsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListRows.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListRows implements mm_appv1alpha.AppPublicServiceServer
func (mmListRows *AppPublicServiceServerMock) ListRows(ctx context.Context, lp1 *mm_appv1alpha.ListRowsRequest) (lp2 *mm_appv1alpha.ListRowsResponse, err error) {
	mm_atomic.AddUint64(&mmListRows.beforeListRowsCounter, 1)
	defer mm_atomic.AddUint64(&mmListRows.afterListRowsCounter, 1)

	mmListRows.t.Helper()

	if mmListRows.inspectFuncListRows != nil {
		mmListRows.inspectFuncListRows(ctx, lp1)
	}

	mm_params := AppPublicServiceServerMockListRowsParams{ctx, lp1}

	// Record call args
	mmListRows.ListRowsMock.mutex.Lock()
	mmListRows.ListRowsMock.callArgs = append(mmListRows.ListRowsMock.callArgs, &mm_params)
	mmListRows.ListRowsMock.mutex.Unlock()

	for _, e := range mmListRows.ListRowsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmListRows.ListRowsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListRows.ListRowsMock.defaultExpectation.Counter, 1)
		mm_want := mmListRows.ListRowsMock.defaultExpectation.params
		mm_want_ptrs := mmListRows.ListRowsMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockListRowsParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListRows.t.Errorf("AppPublicServiceServerMock.ListRows got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListRows.ListRowsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmListRows.t.Errorf("AppPublicServiceServerMock.ListRows got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListRows.ListRowsMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListRows.t.Errorf("AppPublicServiceServerMock.ListRows got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListRows.ListRowsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListRows.ListRowsMock.defaultExpectation.results
		if mm_results == nil {
			mmListRows.t.Fatal("No results are set for the AppPublicServiceServerMock.ListRows")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmListRows.funcListRows != nil {
		return mmListRows.funcListRows(ctx, lp1)
	}
	mmListRows.t.Fatalf("Unexpected call to AppPublicServiceServerMock.ListRows. %v %v", ctx, lp1)
	return
}

// ListRowsAfterCounter returns a count of finished AppPublicServiceServerMock.ListRows invocations
func (mmListRows *AppPublicServiceServerMock) ListRowsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListRows.afterListRowsCounter)
}

// ListRowsBeforeCounter returns a count of AppPublicServiceServerMock.ListRows invocations
func (mmListRows *AppPublicServiceServerMock) ListRowsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListRows.beforeListRowsCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.ListRows.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListRows *mAppPublicServiceServerMockListRows) Calls() []*AppPublicServiceServerMockListRowsParams {
	mmListRows.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockListRowsParams, len(mmListRows.callArgs))
	copy(argCopy, mmListRows.callArgs)

	mmListRows.mutex.RUnlock()

	return argCopy
}

// MinimockListRowsDone returns true if the count of the ListRows invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockListRowsDone() bool {
	if m.ListRowsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListRowsMock.invocationsDone()
}

// MinimockListRowsInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockListRowsInspect() {
	for _, e := range m.ListRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListRows at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListRowsCounter := mm_atomic.LoadUint64(&m.afterListRowsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListRowsMock.defaultExpectation != nil && afterListRowsCounter < 1 {
		if m.ListRowsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListRows at\n%s", m.ListRowsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListRows at\n%s with params: %#v", m.ListRowsMock.defaultExpectation.expectationOrigins.origin, *m.ListRowsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListRows != nil && afterListRowsCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.ListRows at\n%s", m.funcListRowsOrigin)
	}

	if !m.ListRowsMock.invocationsDone() && afterListRowsCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.ListRows at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListRowsMock.expectedInvocations), m.ListRowsMock.expectedInvocationsOrigin, afterListRowsCounter)
	}
}

type mAppPublicServiceServerMockListTables struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockListTablesExpectation
	expectations       []*AppPublicServiceServerMockListTablesExpectation

	callArgs []*AppPublicServiceServerMockListTablesParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockListTablesExpectation specifies expectation struct of the AppPublicServiceServer.ListTables
type AppPublicServiceServerMockListTablesExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockListTablesParams
	paramPtrs          *AppPublicServiceServerMockListTablesParamPtrs
	expectationOrigins AppPublicServiceServerMockListTablesExpectationOrigins
	results            *AppPublicServiceServerMockListTablesResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockListTablesParams contains parameters of the AppPublicServiceServer.ListTables
type AppPublicServiceServerMockListTablesParams struct {
	ctx context.Context
	lp1 *mm_appv1alpha.ListTablesRequest
}

// AppPublicServiceServerMockListTablesParamPtrs contains pointers to parameters of the AppPublicServiceServer.ListTables
type AppPublicServiceServerMockListTablesParamPtrs struct {
	ctx *context.Context
	lp1 **mm_appv1alpha.ListTablesRequest
}

// AppPublicServiceServerMockListTablesResults contains results of the AppPublicServiceServer.ListTables
type AppPublicServiceServerMockListTablesResults struct {
	lp2 *mm_appv1alpha.ListTablesResponse
	err error
}

// AppPublicServiceServerMockListTablesOrigins contains origins of expectations of the AppPublicServiceServer.ListTables
type AppPublicServiceServerMockListTablesExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListTables *mAppPublicServiceServerMockListTables) Optional() *mAppPublicServiceServerMockListTables {
	mmListTables.optional = true
	return mmListTables
}

// Expect sets up expected params for AppPublicServiceServer.ListTables
func (mmListTables *mAppPublicServiceServerMockListTables) Expect(ctx context.Context, lp1 *mm_appv1alpha.ListTablesRequest) *mAppPublicServiceServerMockListTables {
	if mmListTables.mock.funcListTables != nil {
		mmListTables.mock.t.Fatalf("AppPublicServiceServerMock.ListTables mock is already set by Set")
	}

	if mmListTables.defaultExpectation == nil {
		mmListTables.defaultExpectation = &AppPublicServiceServerMockListTablesExpectation{}
	}

	if mmListTables.defaultExpectation.paramPtrs != nil {
		mmListTables.mock.t.Fatalf("AppPublicServiceServerMock.ListTables mock is already set by ExpectParams functions")
	}

	mmListTables.defaultExpectation.params = &AppPublicServiceServerMockListTablesParams{ctx, lp1}
	mmListTables.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListTables.expectations {
		if minimock.Equal(e.params, mmListTables.defaultExpectation.params) {
			mmListTables.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListTables.defaultExpectation.params)
		}
	}

	return mmListTables
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.ListTables
func (mmListTables *mAppPublicServiceServerMockListTables) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockListTables {
	if mmListTables.mock.funcListTables != nil {
		mmListTables.mock.t.Fatalf("AppPublicServiceServerMock.ListTables mock is already set by Set")
	}

	if mmListTables.defaultExpectation == nil {
		mmListTables.defaultExpectation = &AppPublicServiceServerMockListTablesExpectation{}
	}

	if mmListTables.defaultExpectation.params != nil {
		mmListTables.mock.t.Fatalf("AppPublicServiceServerMock.ListTables mock is already set by Expect")
	}

	if mmListTables.defaultExpectation.paramPtrs == nil {
		mmListTables.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListTablesParamPtrs{}
	}
	mmListTables.defaultExpectation.paramPtrs.ctx = &ctx
	mmListTables.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListTables
}

// ExpectLp1Param2 sets up expected param lp1 for AppPublicServiceServer.ListTables
func (mmListTables *mAppPublicServiceServerMockListTables) ExpectLp1Param2(lp1 *mm_appv1alpha.ListTablesRequest) *mAppPublicServiceServerMockListTables {
	if mmListTables.mock.funcListTables != nil {
		mmListTables.mock.t.Fatalf("AppPublicServiceServerMock.ListTables mock is already set by Set")
	}

	if mmListTables.defaultExpectation == nil {
		mmListTables.defaultExpectation = &AppPublicServiceServerMockListTablesExpectation{}
	}

	if mmListTables.defaultExpectation.params != nil {
		mmListTables.mock.t.Fatalf("AppPublicServiceServerMock.ListTables mock is already set by Expect")
	}

	if mmListTables.defaultExpectation.paramPtrs == nil {
		mmListTables.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListTablesParamPtrs{}
	}
	mmListTables.defaultExpectation.paramPtrs.lp1 = &lp1
	mmListTables.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmListTables
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.ListTables
func (mmListTables *mAppPublicServiceServerMockListTables) Inspect(f func(ctx context.Context, lp1 *mm_appv1alpha.ListTablesRequest)) *mAppPublicServiceServerMockListTables {
	if mmListTables.mock.inspectFuncListTables != nil {
		mmListTables.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.ListTables")
	}

	mmListTables.mock.inspectFuncListTables = f

	return mmListTables
}

// Return sets up results that will be returned by AppPublicServiceServer.ListTables
func (mmListTables *mAppPublicServiceServerMockListTables) Return(lp2 *mm_appv1alpha.ListTablesResponse, err error) *AppPublicServiceServerMock {
	if mmListTables.mock.funcListTables != nil {
		mmListTables.mock.t.Fatalf("AppPublicServiceServerMock.ListTables mock is already set by Set")
	}

	if mmListTables.defaultExpectation == nil {
		mmListTables.defaultExpectation = &AppPublicServiceServerMockListTablesExpectation{mock: mmListTables.mock}
	}
	mmListTables.defaultExpectation.results = &AppPublicServiceServerMockListTablesResults{lp2, err}
	mmListTables.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListTables.mock
}

// Set uses given function f to mock the AppPublicServiceServer.ListTables method
func (mmListTables *mAppPublicServiceServerMockListTables) Set(f func(ctx context.Context, lp1 *mm_appv1alpha.ListTablesRequest) (lp2 *mm_appv1alpha.ListTablesResponse, err error)) *AppPublicServiceServerMock {
	if mmListTables.defaultExpectation != nil {
		mmListTables.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.ListTables method")
	}

	if len(mmListTables.expectations) > 0 {
		mmListTables.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.ListTables method")
	}

	mmListTables.mock.funcListTables = f
	mmListTables.mock.funcListTablesOrigin = minimock.CallerInfo(1)
	return mmListTables.mock
}

// When sets expectation for the AppPublicServiceServer.ListTables which will trigger the result defined by the following
// Then helper
func (mmListTables *mAppPublicServiceServerMockListTables) When(ctx context.Context, lp1 *mm_appv1alpha.ListTablesRequest) *AppPublicServiceServerMockListTablesExpectation {
	if mmListTables.mock.funcListTables != nil {
		mmListTables.mock.t.Fatalf("AppPublicServiceServerMock.ListTables mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockListTablesExpectation{
		mock:               mmListTables.mock,
		params:             &AppPublicServiceServerMockListTablesParams{ctx, lp1},
		expectationOrigins: AppPublicServiceServerMockListTablesExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListTables.expectations = append(mmListTables.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.ListTables return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockListTablesExpectation) Then(lp2 *mm_appv1alpha.ListTablesResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockListTablesResults{lp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.ListTables should be invoked
func (mmListTables *mAppPublicServiceServerMockListTables) Times(n uint64) *mAppPublicServiceServerMockListTables {
	if n == 0 {
		mmListTables.mock.t.Fatalf("Times of AppPublicServiceServerMock.ListTables mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListTables.expectedInvocations, n)
	mmListTables.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListTables
}

func (mmListTables *mAppPublicServiceServerMockListTables) invocationsDone() bool {
	if len(mmListTables.expectations) == 0 && mmListTables.defaultExpectation == nil && mmListTables.mock.funcListTables == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListTables.mock.afterListTablesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListTables.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListTables implements mm_appv1alpha.AppPublicServiceServer
func (mmListTables *AppPublicServiceServerMock) ListTables(ctx context.Context, lp1 *mm_appv1alpha.ListTablesRequest) (lp2 *mm_appv1alpha.ListTablesResponse, err error) {
	mm_atomic.AddUint64(&mmListTables.beforeListTablesCounter, 1)
	defer mm_atomic.AddUint64(&mmListTables.afterListTablesCounter, 1)

	mmListTables.t.Helper()

	if mmListTables.inspectFuncListTables != nil {
		mmListTables.inspectFuncListTables(ctx, lp1)
	}

	mm_params := AppPublicServiceServerMockListTablesParams{ctx, lp1}

	// Record call args
	mmListTables.ListTablesMock.mutex.Lock()
	mmListTables.ListTablesMock.callArgs = append(mmListTables.ListTablesMock.callArgs, &mm_params)
	mmListTables.ListTablesMock.mutex.Unlock()

	for _, e := range mmListTables.ListTablesMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmListTables.ListTablesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListTables.ListTablesMock.defaultExpectation.Counter, 1)
		mm_want := mmListTables.ListTablesMock.defaultExpectation.params
		mm_want_ptrs := mmListTables.ListTablesMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockListTablesParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListTables.t.Errorf("AppPublicServiceServerMock.ListTables got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListTables.ListTablesMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmListTables.t.Errorf("AppPublicServiceServerMock.ListTables got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListTables.ListTablesMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListTables.t.Errorf("AppPublicServiceServerMock.ListTables got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListTables.ListTablesMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListTables.ListTablesMock.defaultExpectation.results
		if mm_results == nil {
			mmListTables.t.Fatal("No results are set for the AppPublicServiceServerMock.ListTables")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmListTables.funcListTables != nil {
		return mmListTables.funcListTables(ctx, lp1)
	}
	mmListTables.t.Fatalf("Unexpected call to AppPublicServiceServerMock.ListTables. %v %v", ctx, lp1)
	return
}

// ListTablesAfterCounter returns a count of finished AppPublicServiceServerMock.ListTables invocations
func (mmListTables *AppPublicServiceServerMock) ListTablesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListTables.afterListTablesCounter)
}

// ListTablesBeforeCounter returns a count of AppPublicServiceServerMock.ListTables invocations
func (mmListTables *AppPublicServiceServerMock) ListTablesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListTables.beforeListTablesCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.ListTables.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListTables *mAppPublicServiceServerMockListTables) Calls() []*AppPublicServiceServerMockListTablesParams {
	mmListTables.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockListTablesParams, len(mmListTables.callArgs))
	copy(argCopy, mmListTables.callArgs)

	mmListTables.mutex.RUnlock()

	return argCopy
}

// MinimockListTablesDone returns true if the count of the ListTables invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockListTablesDone() bool {
	if m.ListTablesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListTablesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListTablesMock.invocationsDone()
}

// MinimockListTablesInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockListTablesInspect() {
	for _, e := range m.ListTablesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListTables at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListTablesCounter := mm_atomic.LoadUint64(&m.afterListTablesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListTablesMock.defaultExpectation != nil && afterListTablesCounter < 1 {
		if m.ListTablesMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListTables at\n%s", m.ListTablesMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListTables at\n%s with params: %#v", m.ListTablesMock.defaultExpectation.expectationOrigins.origin, *m.ListTablesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListTables != nil && afterListTablesCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.ListTables at\n%s", m.funcListTablesOrigin)
	}

	if !m.ListTablesMock.invocationsDone() && afterListTablesCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.ListTables at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListTablesMock.expectedInvocations), m.ListTablesMock.expectedInvocationsOrigin, afterListTablesCounter)
	}
}

type mAppPublicServiceServerMockListTools struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockListToolsExpectation
	expectations       []*AppPublicServiceServerMockListToolsExpectation

	callArgs []*AppPublicServiceServerMockListToolsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockListToolsExpectation specifies expectation struct of the AppPublicServiceServer.ListTools
type AppPublicServiceServerMockListToolsExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockListToolsParams
	paramPtrs          *AppPublicServiceServerMockListToolsParamPtrs
	expectationOrigins AppPublicServiceServerMockListToolsExpectationOrigins
	results            *AppPublicServiceServerMockListToolsResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockListToolsParams contains parameters of the AppPublicServiceServer.ListTools
type AppPublicServiceServerMockListToolsParams struct {
	ctx context.Context
	lp1 *mm_appv1alpha.ListToolsRequest
}

// AppPublicServiceServerMockListToolsParamPtrs contains pointers to parameters of the AppPublicServiceServer.ListTools
type AppPublicServiceServerMockListToolsParamPtrs struct {
	ctx *context.Context
	lp1 **mm_appv1alpha.ListToolsRequest
}

// AppPublicServiceServerMockListToolsResults contains results of the AppPublicServiceServer.ListTools
type AppPublicServiceServerMockListToolsResults struct {
	lp2 *mm_appv1alpha.ListToolsResponse
	err error
}

// AppPublicServiceServerMockListToolsOrigins contains origins of expectations of the AppPublicServiceServer.ListTools
type AppPublicServiceServerMockListToolsExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListTools *mAppPublicServiceServerMockListTools) Optional() *mAppPublicServiceServerMockListTools {
	mmListTools.optional = true
	return mmListTools
}

// Expect sets up expected params for AppPublicServiceServer.ListTools
func (mmListTools *mAppPublicServiceServerMockListTools) Expect(ctx context.Context, lp1 *mm_appv1alpha.ListToolsRequest) *mAppPublicServiceServerMockListTools {
	if mmListTools.mock.funcListTools != nil {
		mmListTools.mock.t.Fatalf("AppPublicServiceServerMock.ListTools mock is already set by Set")
	}

	if mmListTools.defaultExpectation == nil {
		mmListTools.defaultExpectation = &AppPublicServiceServerMockListToolsExpectation{}
	}

	if mmListTools.defaultExpectation.paramPtrs != nil {
		mmListTools.mock.t.Fatalf("AppPublicServiceServerMock.ListTools mock is already set by ExpectParams functions")
	}

	mmListTools.defaultExpectation.params = &AppPublicServiceServerMockListToolsParams{ctx, lp1}
	mmListTools.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmListTools.expectations {
		if minimock.Equal(e.params, mmListTools.defaultExpectation.params) {
			mmListTools.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListTools.defaultExpectation.params)
		}
	}

	return mmListTools
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.ListTools
func (mmListTools *mAppPublicServiceServerMockListTools) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockListTools {
	if mmListTools.mock.funcListTools != nil {
		mmListTools.mock.t.Fatalf("AppPublicServiceServerMock.ListTools mock is already set by Set")
	}

	if mmListTools.defaultExpectation == nil {
		mmListTools.defaultExpectation = &AppPublicServiceServerMockListToolsExpectation{}
	}

	if mmListTools.defaultExpectation.params != nil {
		mmListTools.mock.t.Fatalf("AppPublicServiceServerMock.ListTools mock is already set by Expect")
	}

	if mmListTools.defaultExpectation.paramPtrs == nil {
		mmListTools.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListToolsParamPtrs{}
	}
	mmListTools.defaultExpectation.paramPtrs.ctx = &ctx
	mmListTools.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmListTools
}

// ExpectLp1Param2 sets up expected param lp1 for AppPublicServiceServer.ListTools
func (mmListTools *mAppPublicServiceServerMockListTools) ExpectLp1Param2(lp1 *mm_appv1alpha.ListToolsRequest) *mAppPublicServiceServerMockListTools {
	if mmListTools.mock.funcListTools != nil {
		mmListTools.mock.t.Fatalf("AppPublicServiceServerMock.ListTools mock is already set by Set")
	}

	if mmListTools.defaultExpectation == nil {
		mmListTools.defaultExpectation = &AppPublicServiceServerMockListToolsExpectation{}
	}

	if mmListTools.defaultExpectation.params != nil {
		mmListTools.mock.t.Fatalf("AppPublicServiceServerMock.ListTools mock is already set by Expect")
	}

	if mmListTools.defaultExpectation.paramPtrs == nil {
		mmListTools.defaultExpectation.paramPtrs = &AppPublicServiceServerMockListToolsParamPtrs{}
	}
	mmListTools.defaultExpectation.paramPtrs.lp1 = &lp1
	mmListTools.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmListTools
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.ListTools
func (mmListTools *mAppPublicServiceServerMockListTools) Inspect(f func(ctx context.Context, lp1 *mm_appv1alpha.ListToolsRequest)) *mAppPublicServiceServerMockListTools {
	if mmListTools.mock.inspectFuncListTools != nil {
		mmListTools.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.ListTools")
	}

	mmListTools.mock.inspectFuncListTools = f

	return mmListTools
}

// Return sets up results that will be returned by AppPublicServiceServer.ListTools
func (mmListTools *mAppPublicServiceServerMockListTools) Return(lp2 *mm_appv1alpha.ListToolsResponse, err error) *AppPublicServiceServerMock {
	if mmListTools.mock.funcListTools != nil {
		mmListTools.mock.t.Fatalf("AppPublicServiceServerMock.ListTools mock is already set by Set")
	}

	if mmListTools.defaultExpectation == nil {
		mmListTools.defaultExpectation = &AppPublicServiceServerMockListToolsExpectation{mock: mmListTools.mock}
	}
	mmListTools.defaultExpectation.results = &AppPublicServiceServerMockListToolsResults{lp2, err}
	mmListTools.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmListTools.mock
}

// Set uses given function f to mock the AppPublicServiceServer.ListTools method
func (mmListTools *mAppPublicServiceServerMockListTools) Set(f func(ctx context.Context, lp1 *mm_appv1alpha.ListToolsRequest) (lp2 *mm_appv1alpha.ListToolsResponse, err error)) *AppPublicServiceServerMock {
	if mmListTools.defaultExpectation != nil {
		mmListTools.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.ListTools method")
	}

	if len(mmListTools.expectations) > 0 {
		mmListTools.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.ListTools method")
	}

	mmListTools.mock.funcListTools = f
	mmListTools.mock.funcListToolsOrigin = minimock.CallerInfo(1)
	return mmListTools.mock
}

// When sets expectation for the AppPublicServiceServer.ListTools which will trigger the result defined by the following
// Then helper
func (mmListTools *mAppPublicServiceServerMockListTools) When(ctx context.Context, lp1 *mm_appv1alpha.ListToolsRequest) *AppPublicServiceServerMockListToolsExpectation {
	if mmListTools.mock.funcListTools != nil {
		mmListTools.mock.t.Fatalf("AppPublicServiceServerMock.ListTools mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockListToolsExpectation{
		mock:               mmListTools.mock,
		params:             &AppPublicServiceServerMockListToolsParams{ctx, lp1},
		expectationOrigins: AppPublicServiceServerMockListToolsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmListTools.expectations = append(mmListTools.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.ListTools return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockListToolsExpectation) Then(lp2 *mm_appv1alpha.ListToolsResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockListToolsResults{lp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.ListTools should be invoked
func (mmListTools *mAppPublicServiceServerMockListTools) Times(n uint64) *mAppPublicServiceServerMockListTools {
	if n == 0 {
		mmListTools.mock.t.Fatalf("Times of AppPublicServiceServerMock.ListTools mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListTools.expectedInvocations, n)
	mmListTools.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmListTools
}

func (mmListTools *mAppPublicServiceServerMockListTools) invocationsDone() bool {
	if len(mmListTools.expectations) == 0 && mmListTools.defaultExpectation == nil && mmListTools.mock.funcListTools == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListTools.mock.afterListToolsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListTools.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListTools implements mm_appv1alpha.AppPublicServiceServer
func (mmListTools *AppPublicServiceServerMock) ListTools(ctx context.Context, lp1 *mm_appv1alpha.ListToolsRequest) (lp2 *mm_appv1alpha.ListToolsResponse, err error) {
	mm_atomic.AddUint64(&mmListTools.beforeListToolsCounter, 1)
	defer mm_atomic.AddUint64(&mmListTools.afterListToolsCounter, 1)

	mmListTools.t.Helper()

	if mmListTools.inspectFuncListTools != nil {
		mmListTools.inspectFuncListTools(ctx, lp1)
	}

	mm_params := AppPublicServiceServerMockListToolsParams{ctx, lp1}

	// Record call args
	mmListTools.ListToolsMock.mutex.Lock()
	mmListTools.ListToolsMock.callArgs = append(mmListTools.ListToolsMock.callArgs, &mm_params)
	mmListTools.ListToolsMock.mutex.Unlock()

	for _, e := range mmListTools.ListToolsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmListTools.ListToolsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListTools.ListToolsMock.defaultExpectation.Counter, 1)
		mm_want := mmListTools.ListToolsMock.defaultExpectation.params
		mm_want_ptrs := mmListTools.ListToolsMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockListToolsParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListTools.t.Errorf("AppPublicServiceServerMock.ListTools got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListTools.ListToolsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmListTools.t.Errorf("AppPublicServiceServerMock.ListTools got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmListTools.ListToolsMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListTools.t.Errorf("AppPublicServiceServerMock.ListTools got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmListTools.ListToolsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListTools.ListToolsMock.defaultExpectation.results
		if mm_results == nil {
			mmListTools.t.Fatal("No results are set for the AppPublicServiceServerMock.ListTools")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmListTools.funcListTools != nil {
		return mmListTools.funcListTools(ctx, lp1)
	}
	mmListTools.t.Fatalf("Unexpected call to AppPublicServiceServerMock.ListTools. %v %v", ctx, lp1)
	return
}

// ListToolsAfterCounter returns a count of finished AppPublicServiceServerMock.ListTools invocations
func (mmListTools *AppPublicServiceServerMock) ListToolsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListTools.afterListToolsCounter)
}

// ListToolsBeforeCounter returns a count of AppPublicServiceServerMock.ListTools invocations
func (mmListTools *AppPublicServiceServerMock) ListToolsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListTools.beforeListToolsCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.ListTools.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListTools *mAppPublicServiceServerMockListTools) Calls() []*AppPublicServiceServerMockListToolsParams {
	mmListTools.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockListToolsParams, len(mmListTools.callArgs))
	copy(argCopy, mmListTools.callArgs)

	mmListTools.mutex.RUnlock()

	return argCopy
}

// MinimockListToolsDone returns true if the count of the ListTools invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockListToolsDone() bool {
	if m.ListToolsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListToolsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListToolsMock.invocationsDone()
}

// MinimockListToolsInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockListToolsInspect() {
	for _, e := range m.ListToolsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListTools at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterListToolsCounter := mm_atomic.LoadUint64(&m.afterListToolsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListToolsMock.defaultExpectation != nil && afterListToolsCounter < 1 {
		if m.ListToolsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListTools at\n%s", m.ListToolsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.ListTools at\n%s with params: %#v", m.ListToolsMock.defaultExpectation.expectationOrigins.origin, *m.ListToolsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListTools != nil && afterListToolsCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.ListTools at\n%s", m.funcListToolsOrigin)
	}

	if !m.ListToolsMock.invocationsDone() && afterListToolsCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.ListTools at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ListToolsMock.expectedInvocations), m.ListToolsMock.expectedInvocationsOrigin, afterListToolsCounter)
	}
}

type mAppPublicServiceServerMockLiveness struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockLivenessExpectation
	expectations       []*AppPublicServiceServerMockLivenessExpectation

	callArgs []*AppPublicServiceServerMockLivenessParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockLivenessExpectation specifies expectation struct of the AppPublicServiceServer.Liveness
type AppPublicServiceServerMockLivenessExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockLivenessParams
	paramPtrs          *AppPublicServiceServerMockLivenessParamPtrs
	expectationOrigins AppPublicServiceServerMockLivenessExpectationOrigins
	results            *AppPublicServiceServerMockLivenessResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockLivenessParams contains parameters of the AppPublicServiceServer.Liveness
type AppPublicServiceServerMockLivenessParams struct {
	ctx context.Context
	lp1 *mm_appv1alpha.LivenessRequest
}

// AppPublicServiceServerMockLivenessParamPtrs contains pointers to parameters of the AppPublicServiceServer.Liveness
type AppPublicServiceServerMockLivenessParamPtrs struct {
	ctx *context.Context
	lp1 **mm_appv1alpha.LivenessRequest
}

// AppPublicServiceServerMockLivenessResults contains results of the AppPublicServiceServer.Liveness
type AppPublicServiceServerMockLivenessResults struct {
	lp2 *mm_appv1alpha.LivenessResponse
	err error
}

// AppPublicServiceServerMockLivenessOrigins contains origins of expectations of the AppPublicServiceServer.Liveness
type AppPublicServiceServerMockLivenessExpectationOrigins struct {
	origin    string
	originCtx string
	originLp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmLiveness *mAppPublicServiceServerMockLiveness) Optional() *mAppPublicServiceServerMockLiveness {
	mmLiveness.optional = true
	return mmLiveness
}

// Expect sets up expected params for AppPublicServiceServer.Liveness
func (mmLiveness *mAppPublicServiceServerMockLiveness) Expect(ctx context.Context, lp1 *mm_appv1alpha.LivenessRequest) *mAppPublicServiceServerMockLiveness {
	if mmLiveness.mock.funcLiveness != nil {
		mmLiveness.mock.t.Fatalf("AppPublicServiceServerMock.Liveness mock is already set by Set")
	}

	if mmLiveness.defaultExpectation == nil {
		mmLiveness.defaultExpectation = &AppPublicServiceServerMockLivenessExpectation{}
	}

	if mmLiveness.defaultExpectation.paramPtrs != nil {
		mmLiveness.mock.t.Fatalf("AppPublicServiceServerMock.Liveness mock is already set by ExpectParams functions")
	}

	mmLiveness.defaultExpectation.params = &AppPublicServiceServerMockLivenessParams{ctx, lp1}
	mmLiveness.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmLiveness.expectations {
		if minimock.Equal(e.params, mmLiveness.defaultExpectation.params) {
			mmLiveness.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLiveness.defaultExpectation.params)
		}
	}

	return mmLiveness
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.Liveness
func (mmLiveness *mAppPublicServiceServerMockLiveness) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockLiveness {
	if mmLiveness.mock.funcLiveness != nil {
		mmLiveness.mock.t.Fatalf("AppPublicServiceServerMock.Liveness mock is already set by Set")
	}

	if mmLiveness.defaultExpectation == nil {
		mmLiveness.defaultExpectation = &AppPublicServiceServerMockLivenessExpectation{}
	}

	if mmLiveness.defaultExpectation.params != nil {
		mmLiveness.mock.t.Fatalf("AppPublicServiceServerMock.Liveness mock is already set by Expect")
	}

	if mmLiveness.defaultExpectation.paramPtrs == nil {
		mmLiveness.defaultExpectation.paramPtrs = &AppPublicServiceServerMockLivenessParamPtrs{}
	}
	mmLiveness.defaultExpectation.paramPtrs.ctx = &ctx
	mmLiveness.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmLiveness
}

// ExpectLp1Param2 sets up expected param lp1 for AppPublicServiceServer.Liveness
func (mmLiveness *mAppPublicServiceServerMockLiveness) ExpectLp1Param2(lp1 *mm_appv1alpha.LivenessRequest) *mAppPublicServiceServerMockLiveness {
	if mmLiveness.mock.funcLiveness != nil {
		mmLiveness.mock.t.Fatalf("AppPublicServiceServerMock.Liveness mock is already set by Set")
	}

	if mmLiveness.defaultExpectation == nil {
		mmLiveness.defaultExpectation = &AppPublicServiceServerMockLivenessExpectation{}
	}

	if mmLiveness.defaultExpectation.params != nil {
		mmLiveness.mock.t.Fatalf("AppPublicServiceServerMock.Liveness mock is already set by Expect")
	}

	if mmLiveness.defaultExpectation.paramPtrs == nil {
		mmLiveness.defaultExpectation.paramPtrs = &AppPublicServiceServerMockLivenessParamPtrs{}
	}
	mmLiveness.defaultExpectation.paramPtrs.lp1 = &lp1
	mmLiveness.defaultExpectation.expectationOrigins.originLp1 = minimock.CallerInfo(1)

	return mmLiveness
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.Liveness
func (mmLiveness *mAppPublicServiceServerMockLiveness) Inspect(f func(ctx context.Context, lp1 *mm_appv1alpha.LivenessRequest)) *mAppPublicServiceServerMockLiveness {
	if mmLiveness.mock.inspectFuncLiveness != nil {
		mmLiveness.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.Liveness")
	}

	mmLiveness.mock.inspectFuncLiveness = f

	return mmLiveness
}

// Return sets up results that will be returned by AppPublicServiceServer.Liveness
func (mmLiveness *mAppPublicServiceServerMockLiveness) Return(lp2 *mm_appv1alpha.LivenessResponse, err error) *AppPublicServiceServerMock {
	if mmLiveness.mock.funcLiveness != nil {
		mmLiveness.mock.t.Fatalf("AppPublicServiceServerMock.Liveness mock is already set by Set")
	}

	if mmLiveness.defaultExpectation == nil {
		mmLiveness.defaultExpectation = &AppPublicServiceServerMockLivenessExpectation{mock: mmLiveness.mock}
	}
	mmLiveness.defaultExpectation.results = &AppPublicServiceServerMockLivenessResults{lp2, err}
	mmLiveness.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmLiveness.mock
}

// Set uses given function f to mock the AppPublicServiceServer.Liveness method
func (mmLiveness *mAppPublicServiceServerMockLiveness) Set(f func(ctx context.Context, lp1 *mm_appv1alpha.LivenessRequest) (lp2 *mm_appv1alpha.LivenessResponse, err error)) *AppPublicServiceServerMock {
	if mmLiveness.defaultExpectation != nil {
		mmLiveness.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.Liveness method")
	}

	if len(mmLiveness.expectations) > 0 {
		mmLiveness.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.Liveness method")
	}

	mmLiveness.mock.funcLiveness = f
	mmLiveness.mock.funcLivenessOrigin = minimock.CallerInfo(1)
	return mmLiveness.mock
}

// When sets expectation for the AppPublicServiceServer.Liveness which will trigger the result defined by the following
// Then helper
func (mmLiveness *mAppPublicServiceServerMockLiveness) When(ctx context.Context, lp1 *mm_appv1alpha.LivenessRequest) *AppPublicServiceServerMockLivenessExpectation {
	if mmLiveness.mock.funcLiveness != nil {
		mmLiveness.mock.t.Fatalf("AppPublicServiceServerMock.Liveness mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockLivenessExpectation{
		mock:               mmLiveness.mock,
		params:             &AppPublicServiceServerMockLivenessParams{ctx, lp1},
		expectationOrigins: AppPublicServiceServerMockLivenessExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmLiveness.expectations = append(mmLiveness.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.Liveness return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockLivenessExpectation) Then(lp2 *mm_appv1alpha.LivenessResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockLivenessResults{lp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.Liveness should be invoked
func (mmLiveness *mAppPublicServiceServerMockLiveness) Times(n uint64) *mAppPublicServiceServerMockLiveness {
	if n == 0 {
		mmLiveness.mock.t.Fatalf("Times of AppPublicServiceServerMock.Liveness mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmLiveness.expectedInvocations, n)
	mmLiveness.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmLiveness
}

func (mmLiveness *mAppPublicServiceServerMockLiveness) invocationsDone() bool {
	if len(mmLiveness.expectations) == 0 && mmLiveness.defaultExpectation == nil && mmLiveness.mock.funcLiveness == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmLiveness.mock.afterLivenessCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmLiveness.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Liveness implements mm_appv1alpha.AppPublicServiceServer
func (mmLiveness *AppPublicServiceServerMock) Liveness(ctx context.Context, lp1 *mm_appv1alpha.LivenessRequest) (lp2 *mm_appv1alpha.LivenessResponse, err error) {
	mm_atomic.AddUint64(&mmLiveness.beforeLivenessCounter, 1)
	defer mm_atomic.AddUint64(&mmLiveness.afterLivenessCounter, 1)

	mmLiveness.t.Helper()

	if mmLiveness.inspectFuncLiveness != nil {
		mmLiveness.inspectFuncLiveness(ctx, lp1)
	}

	mm_params := AppPublicServiceServerMockLivenessParams{ctx, lp1}

	// Record call args
	mmLiveness.LivenessMock.mutex.Lock()
	mmLiveness.LivenessMock.callArgs = append(mmLiveness.LivenessMock.callArgs, &mm_params)
	mmLiveness.LivenessMock.mutex.Unlock()

	for _, e := range mmLiveness.LivenessMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp2, e.results.err
		}
	}

	if mmLiveness.LivenessMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLiveness.LivenessMock.defaultExpectation.Counter, 1)
		mm_want := mmLiveness.LivenessMock.defaultExpectation.params
		mm_want_ptrs := mmLiveness.LivenessMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockLivenessParams{ctx, lp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmLiveness.t.Errorf("AppPublicServiceServerMock.Liveness got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLiveness.LivenessMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.lp1 != nil && !minimock.Equal(*mm_want_ptrs.lp1, mm_got.lp1) {
				mmLiveness.t.Errorf("AppPublicServiceServerMock.Liveness got unexpected parameter lp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmLiveness.LivenessMock.defaultExpectation.expectationOrigins.originLp1, *mm_want_ptrs.lp1, mm_got.lp1, minimock.Diff(*mm_want_ptrs.lp1, mm_got.lp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLiveness.t.Errorf("AppPublicServiceServerMock.Liveness got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmLiveness.LivenessMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLiveness.LivenessMock.defaultExpectation.results
		if mm_results == nil {
			mmLiveness.t.Fatal("No results are set for the AppPublicServiceServerMock.Liveness")
		}
		return (*mm_results).lp2, (*mm_results).err
	}
	if mmLiveness.funcLiveness != nil {
		return mmLiveness.funcLiveness(ctx, lp1)
	}
	mmLiveness.t.Fatalf("Unexpected call to AppPublicServiceServerMock.Liveness. %v %v", ctx, lp1)
	return
}

// LivenessAfterCounter returns a count of finished AppPublicServiceServerMock.Liveness invocations
func (mmLiveness *AppPublicServiceServerMock) LivenessAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLiveness.afterLivenessCounter)
}

// LivenessBeforeCounter returns a count of AppPublicServiceServerMock.Liveness invocations
func (mmLiveness *AppPublicServiceServerMock) LivenessBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLiveness.beforeLivenessCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.Liveness.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLiveness *mAppPublicServiceServerMockLiveness) Calls() []*AppPublicServiceServerMockLivenessParams {
	mmLiveness.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockLivenessParams, len(mmLiveness.callArgs))
	copy(argCopy, mmLiveness.callArgs)

	mmLiveness.mutex.RUnlock()

	return argCopy
}

// MinimockLivenessDone returns true if the count of the Liveness invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockLivenessDone() bool {
	if m.LivenessMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.LivenessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.LivenessMock.invocationsDone()
}

// MinimockLivenessInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockLivenessInspect() {
	for _, e := range m.LivenessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.Liveness at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterLivenessCounter := mm_atomic.LoadUint64(&m.afterLivenessCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.LivenessMock.defaultExpectation != nil && afterLivenessCounter < 1 {
		if m.LivenessMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.Liveness at\n%s", m.LivenessMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.Liveness at\n%s with params: %#v", m.LivenessMock.defaultExpectation.expectationOrigins.origin, *m.LivenessMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLiveness != nil && afterLivenessCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.Liveness at\n%s", m.funcLivenessOrigin)
	}

	if !m.LivenessMock.invocationsDone() && afterLivenessCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.Liveness at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.LivenessMock.expectedInvocations), m.LivenessMock.expectedInvocationsOrigin, afterLivenessCounter)
	}
}

type mAppPublicServiceServerMockMoveRows struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockMoveRowsExpectation
	expectations       []*AppPublicServiceServerMockMoveRowsExpectation

	callArgs []*AppPublicServiceServerMockMoveRowsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockMoveRowsExpectation specifies expectation struct of the AppPublicServiceServer.MoveRows
type AppPublicServiceServerMockMoveRowsExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockMoveRowsParams
	paramPtrs          *AppPublicServiceServerMockMoveRowsParamPtrs
	expectationOrigins AppPublicServiceServerMockMoveRowsExpectationOrigins
	results            *AppPublicServiceServerMockMoveRowsResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockMoveRowsParams contains parameters of the AppPublicServiceServer.MoveRows
type AppPublicServiceServerMockMoveRowsParams struct {
	ctx context.Context
	mp1 *mm_appv1alpha.MoveRowsRequest
}

// AppPublicServiceServerMockMoveRowsParamPtrs contains pointers to parameters of the AppPublicServiceServer.MoveRows
type AppPublicServiceServerMockMoveRowsParamPtrs struct {
	ctx *context.Context
	mp1 **mm_appv1alpha.MoveRowsRequest
}

// AppPublicServiceServerMockMoveRowsResults contains results of the AppPublicServiceServer.MoveRows
type AppPublicServiceServerMockMoveRowsResults struct {
	mp2 *mm_appv1alpha.MoveRowsResponse
	err error
}

// AppPublicServiceServerMockMoveRowsOrigins contains origins of expectations of the AppPublicServiceServer.MoveRows
type AppPublicServiceServerMockMoveRowsExpectationOrigins struct {
	origin    string
	originCtx string
	originMp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmMoveRows *mAppPublicServiceServerMockMoveRows) Optional() *mAppPublicServiceServerMockMoveRows {
	mmMoveRows.optional = true
	return mmMoveRows
}

// Expect sets up expected params for AppPublicServiceServer.MoveRows
func (mmMoveRows *mAppPublicServiceServerMockMoveRows) Expect(ctx context.Context, mp1 *mm_appv1alpha.MoveRowsRequest) *mAppPublicServiceServerMockMoveRows {
	if mmMoveRows.mock.funcMoveRows != nil {
		mmMoveRows.mock.t.Fatalf("AppPublicServiceServerMock.MoveRows mock is already set by Set")
	}

	if mmMoveRows.defaultExpectation == nil {
		mmMoveRows.defaultExpectation = &AppPublicServiceServerMockMoveRowsExpectation{}
	}

	if mmMoveRows.defaultExpectation.paramPtrs != nil {
		mmMoveRows.mock.t.Fatalf("AppPublicServiceServerMock.MoveRows mock is already set by ExpectParams functions")
	}

	mmMoveRows.defaultExpectation.params = &AppPublicServiceServerMockMoveRowsParams{ctx, mp1}
	mmMoveRows.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmMoveRows.expectations {
		if minimock.Equal(e.params, mmMoveRows.defaultExpectation.params) {
			mmMoveRows.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmMoveRows.defaultExpectation.params)
		}
	}

	return mmMoveRows
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.MoveRows
func (mmMoveRows *mAppPublicServiceServerMockMoveRows) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockMoveRows {
	if mmMoveRows.mock.funcMoveRows != nil {
		mmMoveRows.mock.t.Fatalf("AppPublicServiceServerMock.MoveRows mock is already set by Set")
	}

	if mmMoveRows.defaultExpectation == nil {
		mmMoveRows.defaultExpectation = &AppPublicServiceServerMockMoveRowsExpectation{}
	}

	if mmMoveRows.defaultExpectation.params != nil {
		mmMoveRows.mock.t.Fatalf("AppPublicServiceServerMock.MoveRows mock is already set by Expect")
	}

	if mmMoveRows.defaultExpectation.paramPtrs == nil {
		mmMoveRows.defaultExpectation.paramPtrs = &AppPublicServiceServerMockMoveRowsParamPtrs{}
	}
	mmMoveRows.defaultExpectation.paramPtrs.ctx = &ctx
	mmMoveRows.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmMoveRows
}

// ExpectMp1Param2 sets up expected param mp1 for AppPublicServiceServer.MoveRows
func (mmMoveRows *mAppPublicServiceServerMockMoveRows) ExpectMp1Param2(mp1 *mm_appv1alpha.MoveRowsRequest) *mAppPublicServiceServerMockMoveRows {
	if mmMoveRows.mock.funcMoveRows != nil {
		mmMoveRows.mock.t.Fatalf("AppPublicServiceServerMock.MoveRows mock is already set by Set")
	}

	if mmMoveRows.defaultExpectation == nil {
		mmMoveRows.defaultExpectation = &AppPublicServiceServerMockMoveRowsExpectation{}
	}

	if mmMoveRows.defaultExpectation.params != nil {
		mmMoveRows.mock.t.Fatalf("AppPublicServiceServerMock.MoveRows mock is already set by Expect")
	}

	if mmMoveRows.defaultExpectation.paramPtrs == nil {
		mmMoveRows.defaultExpectation.paramPtrs = &AppPublicServiceServerMockMoveRowsParamPtrs{}
	}
	mmMoveRows.defaultExpectation.paramPtrs.mp1 = &mp1
	mmMoveRows.defaultExpectation.expectationOrigins.originMp1 = minimock.CallerInfo(1)

	return mmMoveRows
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.MoveRows
func (mmMoveRows *mAppPublicServiceServerMockMoveRows) Inspect(f func(ctx context.Context, mp1 *mm_appv1alpha.MoveRowsRequest)) *mAppPublicServiceServerMockMoveRows {
	if mmMoveRows.mock.inspectFuncMoveRows != nil {
		mmMoveRows.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.MoveRows")
	}

	mmMoveRows.mock.inspectFuncMoveRows = f

	return mmMoveRows
}

// Return sets up results that will be returned by AppPublicServiceServer.MoveRows
func (mmMoveRows *mAppPublicServiceServerMockMoveRows) Return(mp2 *mm_appv1alpha.MoveRowsResponse, err error) *AppPublicServiceServerMock {
	if mmMoveRows.mock.funcMoveRows != nil {
		mmMoveRows.mock.t.Fatalf("AppPublicServiceServerMock.MoveRows mock is already set by Set")
	}

	if mmMoveRows.defaultExpectation == nil {
		mmMoveRows.defaultExpectation = &AppPublicServiceServerMockMoveRowsExpectation{mock: mmMoveRows.mock}
	}
	mmMoveRows.defaultExpectation.results = &AppPublicServiceServerMockMoveRowsResults{mp2, err}
	mmMoveRows.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmMoveRows.mock
}

// Set uses given function f to mock the AppPublicServiceServer.MoveRows method
func (mmMoveRows *mAppPublicServiceServerMockMoveRows) Set(f func(ctx context.Context, mp1 *mm_appv1alpha.MoveRowsRequest) (mp2 *mm_appv1alpha.MoveRowsResponse, err error)) *AppPublicServiceServerMock {
	if mmMoveRows.defaultExpectation != nil {
		mmMoveRows.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.MoveRows method")
	}

	if len(mmMoveRows.expectations) > 0 {
		mmMoveRows.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.MoveRows method")
	}

	mmMoveRows.mock.funcMoveRows = f
	mmMoveRows.mock.funcMoveRowsOrigin = minimock.CallerInfo(1)
	return mmMoveRows.mock
}

// When sets expectation for the AppPublicServiceServer.MoveRows which will trigger the result defined by the following
// Then helper
func (mmMoveRows *mAppPublicServiceServerMockMoveRows) When(ctx context.Context, mp1 *mm_appv1alpha.MoveRowsRequest) *AppPublicServiceServerMockMoveRowsExpectation {
	if mmMoveRows.mock.funcMoveRows != nil {
		mmMoveRows.mock.t.Fatalf("AppPublicServiceServerMock.MoveRows mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockMoveRowsExpectation{
		mock:               mmMoveRows.mock,
		params:             &AppPublicServiceServerMockMoveRowsParams{ctx, mp1},
		expectationOrigins: AppPublicServiceServerMockMoveRowsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmMoveRows.expectations = append(mmMoveRows.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.MoveRows return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockMoveRowsExpectation) Then(mp2 *mm_appv1alpha.MoveRowsResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockMoveRowsResults{mp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.MoveRows should be invoked
func (mmMoveRows *mAppPublicServiceServerMockMoveRows) Times(n uint64) *mAppPublicServiceServerMockMoveRows {
	if n == 0 {
		mmMoveRows.mock.t.Fatalf("Times of AppPublicServiceServerMock.MoveRows mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmMoveRows.expectedInvocations, n)
	mmMoveRows.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmMoveRows
}

func (mmMoveRows *mAppPublicServiceServerMockMoveRows) invocationsDone() bool {
	if len(mmMoveRows.expectations) == 0 && mmMoveRows.defaultExpectation == nil && mmMoveRows.mock.funcMoveRows == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmMoveRows.mock.afterMoveRowsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmMoveRows.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// MoveRows implements mm_appv1alpha.AppPublicServiceServer
func (mmMoveRows *AppPublicServiceServerMock) MoveRows(ctx context.Context, mp1 *mm_appv1alpha.MoveRowsRequest) (mp2 *mm_appv1alpha.MoveRowsResponse, err error) {
	mm_atomic.AddUint64(&mmMoveRows.beforeMoveRowsCounter, 1)
	defer mm_atomic.AddUint64(&mmMoveRows.afterMoveRowsCounter, 1)

	mmMoveRows.t.Helper()

	if mmMoveRows.inspectFuncMoveRows != nil {
		mmMoveRows.inspectFuncMoveRows(ctx, mp1)
	}

	mm_params := AppPublicServiceServerMockMoveRowsParams{ctx, mp1}

	// Record call args
	mmMoveRows.MoveRowsMock.mutex.Lock()
	mmMoveRows.MoveRowsMock.callArgs = append(mmMoveRows.MoveRowsMock.callArgs, &mm_params)
	mmMoveRows.MoveRowsMock.mutex.Unlock()

	for _, e := range mmMoveRows.MoveRowsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.mp2, e.results.err
		}
	}

	if mmMoveRows.MoveRowsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmMoveRows.MoveRowsMock.defaultExpectation.Counter, 1)
		mm_want := mmMoveRows.MoveRowsMock.defaultExpectation.params
		mm_want_ptrs := mmMoveRows.MoveRowsMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockMoveRowsParams{ctx, mp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmMoveRows.t.Errorf("AppPublicServiceServerMock.MoveRows got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmMoveRows.MoveRowsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.mp1 != nil && !minimock.Equal(*mm_want_ptrs.mp1, mm_got.mp1) {
				mmMoveRows.t.Errorf("AppPublicServiceServerMock.MoveRows got unexpected parameter mp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmMoveRows.MoveRowsMock.defaultExpectation.expectationOrigins.originMp1, *mm_want_ptrs.mp1, mm_got.mp1, minimock.Diff(*mm_want_ptrs.mp1, mm_got.mp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmMoveRows.t.Errorf("AppPublicServiceServerMock.MoveRows got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmMoveRows.MoveRowsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmMoveRows.MoveRowsMock.defaultExpectation.results
		if mm_results == nil {
			mmMoveRows.t.Fatal("No results are set for the AppPublicServiceServerMock.MoveRows")
		}
		return (*mm_results).mp2, (*mm_results).err
	}
	if mmMoveRows.funcMoveRows != nil {
		return mmMoveRows.funcMoveRows(ctx, mp1)
	}
	mmMoveRows.t.Fatalf("Unexpected call to AppPublicServiceServerMock.MoveRows. %v %v", ctx, mp1)
	return
}

// MoveRowsAfterCounter returns a count of finished AppPublicServiceServerMock.MoveRows invocations
func (mmMoveRows *AppPublicServiceServerMock) MoveRowsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMoveRows.afterMoveRowsCounter)
}

// MoveRowsBeforeCounter returns a count of AppPublicServiceServerMock.MoveRows invocations
func (mmMoveRows *AppPublicServiceServerMock) MoveRowsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMoveRows.beforeMoveRowsCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.MoveRows.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmMoveRows *mAppPublicServiceServerMockMoveRows) Calls() []*AppPublicServiceServerMockMoveRowsParams {
	mmMoveRows.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockMoveRowsParams, len(mmMoveRows.callArgs))
	copy(argCopy, mmMoveRows.callArgs)

	mmMoveRows.mutex.RUnlock()

	return argCopy
}

// MinimockMoveRowsDone returns true if the count of the MoveRows invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockMoveRowsDone() bool {
	if m.MoveRowsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.MoveRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.MoveRowsMock.invocationsDone()
}

// MinimockMoveRowsInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockMoveRowsInspect() {
	for _, e := range m.MoveRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.MoveRows at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterMoveRowsCounter := mm_atomic.LoadUint64(&m.afterMoveRowsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.MoveRowsMock.defaultExpectation != nil && afterMoveRowsCounter < 1 {
		if m.MoveRowsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.MoveRows at\n%s", m.MoveRowsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.MoveRows at\n%s with params: %#v", m.MoveRowsMock.defaultExpectation.expectationOrigins.origin, *m.MoveRowsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMoveRows != nil && afterMoveRowsCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.MoveRows at\n%s", m.funcMoveRowsOrigin)
	}

	if !m.MoveRowsMock.invocationsDone() && afterMoveRowsCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.MoveRows at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.MoveRowsMock.expectedInvocations), m.MoveRowsMock.expectedInvocationsOrigin, afterMoveRowsCounter)
	}
}

type mAppPublicServiceServerMockReadiness struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockReadinessExpectation
	expectations       []*AppPublicServiceServerMockReadinessExpectation

	callArgs []*AppPublicServiceServerMockReadinessParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockReadinessExpectation specifies expectation struct of the AppPublicServiceServer.Readiness
type AppPublicServiceServerMockReadinessExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockReadinessParams
	paramPtrs          *AppPublicServiceServerMockReadinessParamPtrs
	expectationOrigins AppPublicServiceServerMockReadinessExpectationOrigins
	results            *AppPublicServiceServerMockReadinessResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockReadinessParams contains parameters of the AppPublicServiceServer.Readiness
type AppPublicServiceServerMockReadinessParams struct {
	ctx context.Context
	rp1 *mm_appv1alpha.ReadinessRequest
}

// AppPublicServiceServerMockReadinessParamPtrs contains pointers to parameters of the AppPublicServiceServer.Readiness
type AppPublicServiceServerMockReadinessParamPtrs struct {
	ctx *context.Context
	rp1 **mm_appv1alpha.ReadinessRequest
}

// AppPublicServiceServerMockReadinessResults contains results of the AppPublicServiceServer.Readiness
type AppPublicServiceServerMockReadinessResults struct {
	rp2 *mm_appv1alpha.ReadinessResponse
	err error
}

// AppPublicServiceServerMockReadinessOrigins contains origins of expectations of the AppPublicServiceServer.Readiness
type AppPublicServiceServerMockReadinessExpectationOrigins struct {
	origin    string
	originCtx string
	originRp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReadiness *mAppPublicServiceServerMockReadiness) Optional() *mAppPublicServiceServerMockReadiness {
	mmReadiness.optional = true
	return mmReadiness
}

// Expect sets up expected params for AppPublicServiceServer.Readiness
func (mmReadiness *mAppPublicServiceServerMockReadiness) Expect(ctx context.Context, rp1 *mm_appv1alpha.ReadinessRequest) *mAppPublicServiceServerMockReadiness {
	if mmReadiness.mock.funcReadiness != nil {
		mmReadiness.mock.t.Fatalf("AppPublicServiceServerMock.Readiness mock is already set by Set")
	}

	if mmReadiness.defaultExpectation == nil {
		mmReadiness.defaultExpectation = &AppPublicServiceServerMockReadinessExpectation{}
	}

	if mmReadiness.defaultExpectation.paramPtrs != nil {
		mmReadiness.mock.t.Fatalf("AppPublicServiceServerMock.Readiness mock is already set by ExpectParams functions")
	}

	mmReadiness.defaultExpectation.params = &AppPublicServiceServerMockReadinessParams{ctx, rp1}
	mmReadiness.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmReadiness.expectations {
		if minimock.Equal(e.params, mmReadiness.defaultExpectation.params) {
			mmReadiness.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReadiness.defaultExpectation.params)
		}
	}

	return mmReadiness
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.Readiness
func (mmReadiness *mAppPublicServiceServerMockReadiness) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockReadiness {
	if mmReadiness.mock.funcReadiness != nil {
		mmReadiness.mock.t.Fatalf("AppPublicServiceServerMock.Readiness mock is already set by Set")
	}

	if mmReadiness.defaultExpectation == nil {
		mmReadiness.defaultExpectation = &AppPublicServiceServerMockReadinessExpectation{}
	}

	if mmReadiness.defaultExpectation.params != nil {
		mmReadiness.mock.t.Fatalf("AppPublicServiceServerMock.Readiness mock is already set by Expect")
	}

	if mmReadiness.defaultExpectation.paramPtrs == nil {
		mmReadiness.defaultExpectation.paramPtrs = &AppPublicServiceServerMockReadinessParamPtrs{}
	}
	mmReadiness.defaultExpectation.paramPtrs.ctx = &ctx
	mmReadiness.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmReadiness
}

// ExpectRp1Param2 sets up expected param rp1 for AppPublicServiceServer.Readiness
func (mmReadiness *mAppPublicServiceServerMockReadiness) ExpectRp1Param2(rp1 *mm_appv1alpha.ReadinessRequest) *mAppPublicServiceServerMockReadiness {
	if mmReadiness.mock.funcReadiness != nil {
		mmReadiness.mock.t.Fatalf("AppPublicServiceServerMock.Readiness mock is already set by Set")
	}

	if mmReadiness.defaultExpectation == nil {
		mmReadiness.defaultExpectation = &AppPublicServiceServerMockReadinessExpectation{}
	}

	if mmReadiness.defaultExpectation.params != nil {
		mmReadiness.mock.t.Fatalf("AppPublicServiceServerMock.Readiness mock is already set by Expect")
	}

	if mmReadiness.defaultExpectation.paramPtrs == nil {
		mmReadiness.defaultExpectation.paramPtrs = &AppPublicServiceServerMockReadinessParamPtrs{}
	}
	mmReadiness.defaultExpectation.paramPtrs.rp1 = &rp1
	mmReadiness.defaultExpectation.expectationOrigins.originRp1 = minimock.CallerInfo(1)

	return mmReadiness
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.Readiness
func (mmReadiness *mAppPublicServiceServerMockReadiness) Inspect(f func(ctx context.Context, rp1 *mm_appv1alpha.ReadinessRequest)) *mAppPublicServiceServerMockReadiness {
	if mmReadiness.mock.inspectFuncReadiness != nil {
		mmReadiness.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.Readiness")
	}

	mmReadiness.mock.inspectFuncReadiness = f

	return mmReadiness
}

// Return sets up results that will be returned by AppPublicServiceServer.Readiness
func (mmReadiness *mAppPublicServiceServerMockReadiness) Return(rp2 *mm_appv1alpha.ReadinessResponse, err error) *AppPublicServiceServerMock {
	if mmReadiness.mock.funcReadiness != nil {
		mmReadiness.mock.t.Fatalf("AppPublicServiceServerMock.Readiness mock is already set by Set")
	}

	if mmReadiness.defaultExpectation == nil {
		mmReadiness.defaultExpectation = &AppPublicServiceServerMockReadinessExpectation{mock: mmReadiness.mock}
	}
	mmReadiness.defaultExpectation.results = &AppPublicServiceServerMockReadinessResults{rp2, err}
	mmReadiness.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmReadiness.mock
}

// Set uses given function f to mock the AppPublicServiceServer.Readiness method
func (mmReadiness *mAppPublicServiceServerMockReadiness) Set(f func(ctx context.Context, rp1 *mm_appv1alpha.ReadinessRequest) (rp2 *mm_appv1alpha.ReadinessResponse, err error)) *AppPublicServiceServerMock {
	if mmReadiness.defaultExpectation != nil {
		mmReadiness.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.Readiness method")
	}

	if len(mmReadiness.expectations) > 0 {
		mmReadiness.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.Readiness method")
	}

	mmReadiness.mock.funcReadiness = f
	mmReadiness.mock.funcReadinessOrigin = minimock.CallerInfo(1)
	return mmReadiness.mock
}

// When sets expectation for the AppPublicServiceServer.Readiness which will trigger the result defined by the following
// Then helper
func (mmReadiness *mAppPublicServiceServerMockReadiness) When(ctx context.Context, rp1 *mm_appv1alpha.ReadinessRequest) *AppPublicServiceServerMockReadinessExpectation {
	if mmReadiness.mock.funcReadiness != nil {
		mmReadiness.mock.t.Fatalf("AppPublicServiceServerMock.Readiness mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockReadinessExpectation{
		mock:               mmReadiness.mock,
		params:             &AppPublicServiceServerMockReadinessParams{ctx, rp1},
		expectationOrigins: AppPublicServiceServerMockReadinessExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmReadiness.expectations = append(mmReadiness.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.Readiness return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockReadinessExpectation) Then(rp2 *mm_appv1alpha.ReadinessResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockReadinessResults{rp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.Readiness should be invoked
func (mmReadiness *mAppPublicServiceServerMockReadiness) Times(n uint64) *mAppPublicServiceServerMockReadiness {
	if n == 0 {
		mmReadiness.mock.t.Fatalf("Times of AppPublicServiceServerMock.Readiness mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReadiness.expectedInvocations, n)
	mmReadiness.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmReadiness
}

func (mmReadiness *mAppPublicServiceServerMockReadiness) invocationsDone() bool {
	if len(mmReadiness.expectations) == 0 && mmReadiness.defaultExpectation == nil && mmReadiness.mock.funcReadiness == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReadiness.mock.afterReadinessCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReadiness.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Readiness implements mm_appv1alpha.AppPublicServiceServer
func (mmReadiness *AppPublicServiceServerMock) Readiness(ctx context.Context, rp1 *mm_appv1alpha.ReadinessRequest) (rp2 *mm_appv1alpha.ReadinessResponse, err error) {
	mm_atomic.AddUint64(&mmReadiness.beforeReadinessCounter, 1)
	defer mm_atomic.AddUint64(&mmReadiness.afterReadinessCounter, 1)

	mmReadiness.t.Helper()

	if mmReadiness.inspectFuncReadiness != nil {
		mmReadiness.inspectFuncReadiness(ctx, rp1)
	}

	mm_params := AppPublicServiceServerMockReadinessParams{ctx, rp1}

	// Record call args
	mmReadiness.ReadinessMock.mutex.Lock()
	mmReadiness.ReadinessMock.callArgs = append(mmReadiness.ReadinessMock.callArgs, &mm_params)
	mmReadiness.ReadinessMock.mutex.Unlock()

	for _, e := range mmReadiness.ReadinessMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp2, e.results.err
		}
	}

	if mmReadiness.ReadinessMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReadiness.ReadinessMock.defaultExpectation.Counter, 1)
		mm_want := mmReadiness.ReadinessMock.defaultExpectation.params
		mm_want_ptrs := mmReadiness.ReadinessMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockReadinessParams{ctx, rp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReadiness.t.Errorf("AppPublicServiceServerMock.Readiness got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReadiness.ReadinessMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.rp1 != nil && !minimock.Equal(*mm_want_ptrs.rp1, mm_got.rp1) {
				mmReadiness.t.Errorf("AppPublicServiceServerMock.Readiness got unexpected parameter rp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReadiness.ReadinessMock.defaultExpectation.expectationOrigins.originRp1, *mm_want_ptrs.rp1, mm_got.rp1, minimock.Diff(*mm_want_ptrs.rp1, mm_got.rp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReadiness.t.Errorf("AppPublicServiceServerMock.Readiness got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmReadiness.ReadinessMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReadiness.ReadinessMock.defaultExpectation.results
		if mm_results == nil {
			mmReadiness.t.Fatal("No results are set for the AppPublicServiceServerMock.Readiness")
		}
		return (*mm_results).rp2, (*mm_results).err
	}
	if mmReadiness.funcReadiness != nil {
		return mmReadiness.funcReadiness(ctx, rp1)
	}
	mmReadiness.t.Fatalf("Unexpected call to AppPublicServiceServerMock.Readiness. %v %v", ctx, rp1)
	return
}

// ReadinessAfterCounter returns a count of finished AppPublicServiceServerMock.Readiness invocations
func (mmReadiness *AppPublicServiceServerMock) ReadinessAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReadiness.afterReadinessCounter)
}

// ReadinessBeforeCounter returns a count of AppPublicServiceServerMock.Readiness invocations
func (mmReadiness *AppPublicServiceServerMock) ReadinessBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReadiness.beforeReadinessCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.Readiness.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReadiness *mAppPublicServiceServerMockReadiness) Calls() []*AppPublicServiceServerMockReadinessParams {
	mmReadiness.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockReadinessParams, len(mmReadiness.callArgs))
	copy(argCopy, mmReadiness.callArgs)

	mmReadiness.mutex.RUnlock()

	return argCopy
}

// MinimockReadinessDone returns true if the count of the Readiness invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockReadinessDone() bool {
	if m.ReadinessMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReadinessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReadinessMock.invocationsDone()
}

// MinimockReadinessInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockReadinessInspect() {
	for _, e := range m.ReadinessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.Readiness at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterReadinessCounter := mm_atomic.LoadUint64(&m.afterReadinessCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReadinessMock.defaultExpectation != nil && afterReadinessCounter < 1 {
		if m.ReadinessMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.Readiness at\n%s", m.ReadinessMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.Readiness at\n%s with params: %#v", m.ReadinessMock.defaultExpectation.expectationOrigins.origin, *m.ReadinessMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReadiness != nil && afterReadinessCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.Readiness at\n%s", m.funcReadinessOrigin)
	}

	if !m.ReadinessMock.invocationsDone() && afterReadinessCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.Readiness at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ReadinessMock.expectedInvocations), m.ReadinessMock.expectedInvocationsOrigin, afterReadinessCounter)
	}
}

type mAppPublicServiceServerMockRestartPlaygroundConversation struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockRestartPlaygroundConversationExpectation
	expectations       []*AppPublicServiceServerMockRestartPlaygroundConversationExpectation

	callArgs []*AppPublicServiceServerMockRestartPlaygroundConversationParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockRestartPlaygroundConversationExpectation specifies expectation struct of the AppPublicServiceServer.RestartPlaygroundConversation
type AppPublicServiceServerMockRestartPlaygroundConversationExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockRestartPlaygroundConversationParams
	paramPtrs          *AppPublicServiceServerMockRestartPlaygroundConversationParamPtrs
	expectationOrigins AppPublicServiceServerMockRestartPlaygroundConversationExpectationOrigins
	results            *AppPublicServiceServerMockRestartPlaygroundConversationResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockRestartPlaygroundConversationParams contains parameters of the AppPublicServiceServer.RestartPlaygroundConversation
type AppPublicServiceServerMockRestartPlaygroundConversationParams struct {
	ctx context.Context
	rp1 *mm_appv1alpha.RestartPlaygroundConversationRequest
}

// AppPublicServiceServerMockRestartPlaygroundConversationParamPtrs contains pointers to parameters of the AppPublicServiceServer.RestartPlaygroundConversation
type AppPublicServiceServerMockRestartPlaygroundConversationParamPtrs struct {
	ctx *context.Context
	rp1 **mm_appv1alpha.RestartPlaygroundConversationRequest
}

// AppPublicServiceServerMockRestartPlaygroundConversationResults contains results of the AppPublicServiceServer.RestartPlaygroundConversation
type AppPublicServiceServerMockRestartPlaygroundConversationResults struct {
	rp2 *mm_appv1alpha.RestartPlaygroundConversationResponse
	err error
}

// AppPublicServiceServerMockRestartPlaygroundConversationOrigins contains origins of expectations of the AppPublicServiceServer.RestartPlaygroundConversation
type AppPublicServiceServerMockRestartPlaygroundConversationExpectationOrigins struct {
	origin    string
	originCtx string
	originRp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRestartPlaygroundConversation *mAppPublicServiceServerMockRestartPlaygroundConversation) Optional() *mAppPublicServiceServerMockRestartPlaygroundConversation {
	mmRestartPlaygroundConversation.optional = true
	return mmRestartPlaygroundConversation
}

// Expect sets up expected params for AppPublicServiceServer.RestartPlaygroundConversation
func (mmRestartPlaygroundConversation *mAppPublicServiceServerMockRestartPlaygroundConversation) Expect(ctx context.Context, rp1 *mm_appv1alpha.RestartPlaygroundConversationRequest) *mAppPublicServiceServerMockRestartPlaygroundConversation {
	if mmRestartPlaygroundConversation.mock.funcRestartPlaygroundConversation != nil {
		mmRestartPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.RestartPlaygroundConversation mock is already set by Set")
	}

	if mmRestartPlaygroundConversation.defaultExpectation == nil {
		mmRestartPlaygroundConversation.defaultExpectation = &AppPublicServiceServerMockRestartPlaygroundConversationExpectation{}
	}

	if mmRestartPlaygroundConversation.defaultExpectation.paramPtrs != nil {
		mmRestartPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.RestartPlaygroundConversation mock is already set by ExpectParams functions")
	}

	mmRestartPlaygroundConversation.defaultExpectation.params = &AppPublicServiceServerMockRestartPlaygroundConversationParams{ctx, rp1}
	mmRestartPlaygroundConversation.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmRestartPlaygroundConversation.expectations {
		if minimock.Equal(e.params, mmRestartPlaygroundConversation.defaultExpectation.params) {
			mmRestartPlaygroundConversation.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRestartPlaygroundConversation.defaultExpectation.params)
		}
	}

	return mmRestartPlaygroundConversation
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.RestartPlaygroundConversation
func (mmRestartPlaygroundConversation *mAppPublicServiceServerMockRestartPlaygroundConversation) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockRestartPlaygroundConversation {
	if mmRestartPlaygroundConversation.mock.funcRestartPlaygroundConversation != nil {
		mmRestartPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.RestartPlaygroundConversation mock is already set by Set")
	}

	if mmRestartPlaygroundConversation.defaultExpectation == nil {
		mmRestartPlaygroundConversation.defaultExpectation = &AppPublicServiceServerMockRestartPlaygroundConversationExpectation{}
	}

	if mmRestartPlaygroundConversation.defaultExpectation.params != nil {
		mmRestartPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.RestartPlaygroundConversation mock is already set by Expect")
	}

	if mmRestartPlaygroundConversation.defaultExpectation.paramPtrs == nil {
		mmRestartPlaygroundConversation.defaultExpectation.paramPtrs = &AppPublicServiceServerMockRestartPlaygroundConversationParamPtrs{}
	}
	mmRestartPlaygroundConversation.defaultExpectation.paramPtrs.ctx = &ctx
	mmRestartPlaygroundConversation.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmRestartPlaygroundConversation
}

// ExpectRp1Param2 sets up expected param rp1 for AppPublicServiceServer.RestartPlaygroundConversation
func (mmRestartPlaygroundConversation *mAppPublicServiceServerMockRestartPlaygroundConversation) ExpectRp1Param2(rp1 *mm_appv1alpha.RestartPlaygroundConversationRequest) *mAppPublicServiceServerMockRestartPlaygroundConversation {
	if mmRestartPlaygroundConversation.mock.funcRestartPlaygroundConversation != nil {
		mmRestartPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.RestartPlaygroundConversation mock is already set by Set")
	}

	if mmRestartPlaygroundConversation.defaultExpectation == nil {
		mmRestartPlaygroundConversation.defaultExpectation = &AppPublicServiceServerMockRestartPlaygroundConversationExpectation{}
	}

	if mmRestartPlaygroundConversation.defaultExpectation.params != nil {
		mmRestartPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.RestartPlaygroundConversation mock is already set by Expect")
	}

	if mmRestartPlaygroundConversation.defaultExpectation.paramPtrs == nil {
		mmRestartPlaygroundConversation.defaultExpectation.paramPtrs = &AppPublicServiceServerMockRestartPlaygroundConversationParamPtrs{}
	}
	mmRestartPlaygroundConversation.defaultExpectation.paramPtrs.rp1 = &rp1
	mmRestartPlaygroundConversation.defaultExpectation.expectationOrigins.originRp1 = minimock.CallerInfo(1)

	return mmRestartPlaygroundConversation
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.RestartPlaygroundConversation
func (mmRestartPlaygroundConversation *mAppPublicServiceServerMockRestartPlaygroundConversation) Inspect(f func(ctx context.Context, rp1 *mm_appv1alpha.RestartPlaygroundConversationRequest)) *mAppPublicServiceServerMockRestartPlaygroundConversation {
	if mmRestartPlaygroundConversation.mock.inspectFuncRestartPlaygroundConversation != nil {
		mmRestartPlaygroundConversation.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.RestartPlaygroundConversation")
	}

	mmRestartPlaygroundConversation.mock.inspectFuncRestartPlaygroundConversation = f

	return mmRestartPlaygroundConversation
}

// Return sets up results that will be returned by AppPublicServiceServer.RestartPlaygroundConversation
func (mmRestartPlaygroundConversation *mAppPublicServiceServerMockRestartPlaygroundConversation) Return(rp2 *mm_appv1alpha.RestartPlaygroundConversationResponse, err error) *AppPublicServiceServerMock {
	if mmRestartPlaygroundConversation.mock.funcRestartPlaygroundConversation != nil {
		mmRestartPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.RestartPlaygroundConversation mock is already set by Set")
	}

	if mmRestartPlaygroundConversation.defaultExpectation == nil {
		mmRestartPlaygroundConversation.defaultExpectation = &AppPublicServiceServerMockRestartPlaygroundConversationExpectation{mock: mmRestartPlaygroundConversation.mock}
	}
	mmRestartPlaygroundConversation.defaultExpectation.results = &AppPublicServiceServerMockRestartPlaygroundConversationResults{rp2, err}
	mmRestartPlaygroundConversation.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmRestartPlaygroundConversation.mock
}

// Set uses given function f to mock the AppPublicServiceServer.RestartPlaygroundConversation method
func (mmRestartPlaygroundConversation *mAppPublicServiceServerMockRestartPlaygroundConversation) Set(f func(ctx context.Context, rp1 *mm_appv1alpha.RestartPlaygroundConversationRequest) (rp2 *mm_appv1alpha.RestartPlaygroundConversationResponse, err error)) *AppPublicServiceServerMock {
	if mmRestartPlaygroundConversation.defaultExpectation != nil {
		mmRestartPlaygroundConversation.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.RestartPlaygroundConversation method")
	}

	if len(mmRestartPlaygroundConversation.expectations) > 0 {
		mmRestartPlaygroundConversation.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.RestartPlaygroundConversation method")
	}

	mmRestartPlaygroundConversation.mock.funcRestartPlaygroundConversation = f
	mmRestartPlaygroundConversation.mock.funcRestartPlaygroundConversationOrigin = minimock.CallerInfo(1)
	return mmRestartPlaygroundConversation.mock
}

// When sets expectation for the AppPublicServiceServer.RestartPlaygroundConversation which will trigger the result defined by the following
// Then helper
func (mmRestartPlaygroundConversation *mAppPublicServiceServerMockRestartPlaygroundConversation) When(ctx context.Context, rp1 *mm_appv1alpha.RestartPlaygroundConversationRequest) *AppPublicServiceServerMockRestartPlaygroundConversationExpectation {
	if mmRestartPlaygroundConversation.mock.funcRestartPlaygroundConversation != nil {
		mmRestartPlaygroundConversation.mock.t.Fatalf("AppPublicServiceServerMock.RestartPlaygroundConversation mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockRestartPlaygroundConversationExpectation{
		mock:               mmRestartPlaygroundConversation.mock,
		params:             &AppPublicServiceServerMockRestartPlaygroundConversationParams{ctx, rp1},
		expectationOrigins: AppPublicServiceServerMockRestartPlaygroundConversationExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmRestartPlaygroundConversation.expectations = append(mmRestartPlaygroundConversation.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.RestartPlaygroundConversation return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockRestartPlaygroundConversationExpectation) Then(rp2 *mm_appv1alpha.RestartPlaygroundConversationResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockRestartPlaygroundConversationResults{rp2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.RestartPlaygroundConversation should be invoked
func (mmRestartPlaygroundConversation *mAppPublicServiceServerMockRestartPlaygroundConversation) Times(n uint64) *mAppPublicServiceServerMockRestartPlaygroundConversation {
	if n == 0 {
		mmRestartPlaygroundConversation.mock.t.Fatalf("Times of AppPublicServiceServerMock.RestartPlaygroundConversation mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRestartPlaygroundConversation.expectedInvocations, n)
	mmRestartPlaygroundConversation.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmRestartPlaygroundConversation
}

func (mmRestartPlaygroundConversation *mAppPublicServiceServerMockRestartPlaygroundConversation) invocationsDone() bool {
	if len(mmRestartPlaygroundConversation.expectations) == 0 && mmRestartPlaygroundConversation.defaultExpectation == nil && mmRestartPlaygroundConversation.mock.funcRestartPlaygroundConversation == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRestartPlaygroundConversation.mock.afterRestartPlaygroundConversationCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRestartPlaygroundConversation.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// RestartPlaygroundConversation implements mm_appv1alpha.AppPublicServiceServer
func (mmRestartPlaygroundConversation *AppPublicServiceServerMock) RestartPlaygroundConversation(ctx context.Context, rp1 *mm_appv1alpha.RestartPlaygroundConversationRequest) (rp2 *mm_appv1alpha.RestartPlaygroundConversationResponse, err error) {
	mm_atomic.AddUint64(&mmRestartPlaygroundConversation.beforeRestartPlaygroundConversationCounter, 1)
	defer mm_atomic.AddUint64(&mmRestartPlaygroundConversation.afterRestartPlaygroundConversationCounter, 1)

	mmRestartPlaygroundConversation.t.Helper()

	if mmRestartPlaygroundConversation.inspectFuncRestartPlaygroundConversation != nil {
		mmRestartPlaygroundConversation.inspectFuncRestartPlaygroundConversation(ctx, rp1)
	}

	mm_params := AppPublicServiceServerMockRestartPlaygroundConversationParams{ctx, rp1}

	// Record call args
	mmRestartPlaygroundConversation.RestartPlaygroundConversationMock.mutex.Lock()
	mmRestartPlaygroundConversation.RestartPlaygroundConversationMock.callArgs = append(mmRestartPlaygroundConversation.RestartPlaygroundConversationMock.callArgs, &mm_params)
	mmRestartPlaygroundConversation.RestartPlaygroundConversationMock.mutex.Unlock()

	for _, e := range mmRestartPlaygroundConversation.RestartPlaygroundConversationMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp2, e.results.err
		}
	}

	if mmRestartPlaygroundConversation.RestartPlaygroundConversationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRestartPlaygroundConversation.RestartPlaygroundConversationMock.defaultExpectation.Counter, 1)
		mm_want := mmRestartPlaygroundConversation.RestartPlaygroundConversationMock.defaultExpectation.params
		mm_want_ptrs := mmRestartPlaygroundConversation.RestartPlaygroundConversationMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockRestartPlaygroundConversationParams{ctx, rp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmRestartPlaygroundConversation.t.Errorf("AppPublicServiceServerMock.RestartPlaygroundConversation got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRestartPlaygroundConversation.RestartPlaygroundConversationMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.rp1 != nil && !minimock.Equal(*mm_want_ptrs.rp1, mm_got.rp1) {
				mmRestartPlaygroundConversation.t.Errorf("AppPublicServiceServerMock.RestartPlaygroundConversation got unexpected parameter rp1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRestartPlaygroundConversation.RestartPlaygroundConversationMock.defaultExpectation.expectationOrigins.originRp1, *mm_want_ptrs.rp1, mm_got.rp1, minimock.Diff(*mm_want_ptrs.rp1, mm_got.rp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRestartPlaygroundConversation.t.Errorf("AppPublicServiceServerMock.RestartPlaygroundConversation got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmRestartPlaygroundConversation.RestartPlaygroundConversationMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRestartPlaygroundConversation.RestartPlaygroundConversationMock.defaultExpectation.results
		if mm_results == nil {
			mmRestartPlaygroundConversation.t.Fatal("No results are set for the AppPublicServiceServerMock.RestartPlaygroundConversation")
		}
		return (*mm_results).rp2, (*mm_results).err
	}
	if mmRestartPlaygroundConversation.funcRestartPlaygroundConversation != nil {
		return mmRestartPlaygroundConversation.funcRestartPlaygroundConversation(ctx, rp1)
	}
	mmRestartPlaygroundConversation.t.Fatalf("Unexpected call to AppPublicServiceServerMock.RestartPlaygroundConversation. %v %v", ctx, rp1)
	return
}

// RestartPlaygroundConversationAfterCounter returns a count of finished AppPublicServiceServerMock.RestartPlaygroundConversation invocations
func (mmRestartPlaygroundConversation *AppPublicServiceServerMock) RestartPlaygroundConversationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRestartPlaygroundConversation.afterRestartPlaygroundConversationCounter)
}

// RestartPlaygroundConversationBeforeCounter returns a count of AppPublicServiceServerMock.RestartPlaygroundConversation invocations
func (mmRestartPlaygroundConversation *AppPublicServiceServerMock) RestartPlaygroundConversationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRestartPlaygroundConversation.beforeRestartPlaygroundConversationCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.RestartPlaygroundConversation.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRestartPlaygroundConversation *mAppPublicServiceServerMockRestartPlaygroundConversation) Calls() []*AppPublicServiceServerMockRestartPlaygroundConversationParams {
	mmRestartPlaygroundConversation.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockRestartPlaygroundConversationParams, len(mmRestartPlaygroundConversation.callArgs))
	copy(argCopy, mmRestartPlaygroundConversation.callArgs)

	mmRestartPlaygroundConversation.mutex.RUnlock()

	return argCopy
}

// MinimockRestartPlaygroundConversationDone returns true if the count of the RestartPlaygroundConversation invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockRestartPlaygroundConversationDone() bool {
	if m.RestartPlaygroundConversationMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.RestartPlaygroundConversationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.RestartPlaygroundConversationMock.invocationsDone()
}

// MinimockRestartPlaygroundConversationInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockRestartPlaygroundConversationInspect() {
	for _, e := range m.RestartPlaygroundConversationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.RestartPlaygroundConversation at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterRestartPlaygroundConversationCounter := mm_atomic.LoadUint64(&m.afterRestartPlaygroundConversationCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.RestartPlaygroundConversationMock.defaultExpectation != nil && afterRestartPlaygroundConversationCounter < 1 {
		if m.RestartPlaygroundConversationMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.RestartPlaygroundConversation at\n%s", m.RestartPlaygroundConversationMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.RestartPlaygroundConversation at\n%s with params: %#v", m.RestartPlaygroundConversationMock.defaultExpectation.expectationOrigins.origin, *m.RestartPlaygroundConversationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRestartPlaygroundConversation != nil && afterRestartPlaygroundConversationCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.RestartPlaygroundConversation at\n%s", m.funcRestartPlaygroundConversationOrigin)
	}

	if !m.RestartPlaygroundConversationMock.invocationsDone() && afterRestartPlaygroundConversationCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.RestartPlaygroundConversation at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.RestartPlaygroundConversationMock.expectedInvocations), m.RestartPlaygroundConversationMock.expectedInvocationsOrigin, afterRestartPlaygroundConversationCounter)
	}
}

type mAppPublicServiceServerMockUpdateAgent struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockUpdateAgentExpectation
	expectations       []*AppPublicServiceServerMockUpdateAgentExpectation

	callArgs []*AppPublicServiceServerMockUpdateAgentParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockUpdateAgentExpectation specifies expectation struct of the AppPublicServiceServer.UpdateAgent
type AppPublicServiceServerMockUpdateAgentExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockUpdateAgentParams
	paramPtrs          *AppPublicServiceServerMockUpdateAgentParamPtrs
	expectationOrigins AppPublicServiceServerMockUpdateAgentExpectationOrigins
	results            *AppPublicServiceServerMockUpdateAgentResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockUpdateAgentParams contains parameters of the AppPublicServiceServer.UpdateAgent
type AppPublicServiceServerMockUpdateAgentParams struct {
	ctx context.Context
	up1 *mm_appv1alpha.UpdateAgentRequest
}

// AppPublicServiceServerMockUpdateAgentParamPtrs contains pointers to parameters of the AppPublicServiceServer.UpdateAgent
type AppPublicServiceServerMockUpdateAgentParamPtrs struct {
	ctx *context.Context
	up1 **mm_appv1alpha.UpdateAgentRequest
}

// AppPublicServiceServerMockUpdateAgentResults contains results of the AppPublicServiceServer.UpdateAgent
type AppPublicServiceServerMockUpdateAgentResults struct {
	up2 *mm_appv1alpha.UpdateAgentResponse
	err error
}

// AppPublicServiceServerMockUpdateAgentOrigins contains origins of expectations of the AppPublicServiceServer.UpdateAgent
type AppPublicServiceServerMockUpdateAgentExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateAgent *mAppPublicServiceServerMockUpdateAgent) Optional() *mAppPublicServiceServerMockUpdateAgent {
	mmUpdateAgent.optional = true
	return mmUpdateAgent
}

// Expect sets up expected params for AppPublicServiceServer.UpdateAgent
func (mmUpdateAgent *mAppPublicServiceServerMockUpdateAgent) Expect(ctx context.Context, up1 *mm_appv1alpha.UpdateAgentRequest) *mAppPublicServiceServerMockUpdateAgent {
	if mmUpdateAgent.mock.funcUpdateAgent != nil {
		mmUpdateAgent.mock.t.Fatalf("AppPublicServiceServerMock.UpdateAgent mock is already set by Set")
	}

	if mmUpdateAgent.defaultExpectation == nil {
		mmUpdateAgent.defaultExpectation = &AppPublicServiceServerMockUpdateAgentExpectation{}
	}

	if mmUpdateAgent.defaultExpectation.paramPtrs != nil {
		mmUpdateAgent.mock.t.Fatalf("AppPublicServiceServerMock.UpdateAgent mock is already set by ExpectParams functions")
	}

	mmUpdateAgent.defaultExpectation.params = &AppPublicServiceServerMockUpdateAgentParams{ctx, up1}
	mmUpdateAgent.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateAgent.expectations {
		if minimock.Equal(e.params, mmUpdateAgent.defaultExpectation.params) {
			mmUpdateAgent.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateAgent.defaultExpectation.params)
		}
	}

	return mmUpdateAgent
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.UpdateAgent
func (mmUpdateAgent *mAppPublicServiceServerMockUpdateAgent) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockUpdateAgent {
	if mmUpdateAgent.mock.funcUpdateAgent != nil {
		mmUpdateAgent.mock.t.Fatalf("AppPublicServiceServerMock.UpdateAgent mock is already set by Set")
	}

	if mmUpdateAgent.defaultExpectation == nil {
		mmUpdateAgent.defaultExpectation = &AppPublicServiceServerMockUpdateAgentExpectation{}
	}

	if mmUpdateAgent.defaultExpectation.params != nil {
		mmUpdateAgent.mock.t.Fatalf("AppPublicServiceServerMock.UpdateAgent mock is already set by Expect")
	}

	if mmUpdateAgent.defaultExpectation.paramPtrs == nil {
		mmUpdateAgent.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateAgentParamPtrs{}
	}
	mmUpdateAgent.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateAgent.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateAgent
}

// ExpectUp1Param2 sets up expected param up1 for AppPublicServiceServer.UpdateAgent
func (mmUpdateAgent *mAppPublicServiceServerMockUpdateAgent) ExpectUp1Param2(up1 *mm_appv1alpha.UpdateAgentRequest) *mAppPublicServiceServerMockUpdateAgent {
	if mmUpdateAgent.mock.funcUpdateAgent != nil {
		mmUpdateAgent.mock.t.Fatalf("AppPublicServiceServerMock.UpdateAgent mock is already set by Set")
	}

	if mmUpdateAgent.defaultExpectation == nil {
		mmUpdateAgent.defaultExpectation = &AppPublicServiceServerMockUpdateAgentExpectation{}
	}

	if mmUpdateAgent.defaultExpectation.params != nil {
		mmUpdateAgent.mock.t.Fatalf("AppPublicServiceServerMock.UpdateAgent mock is already set by Expect")
	}

	if mmUpdateAgent.defaultExpectation.paramPtrs == nil {
		mmUpdateAgent.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateAgentParamPtrs{}
	}
	mmUpdateAgent.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateAgent.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateAgent
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.UpdateAgent
func (mmUpdateAgent *mAppPublicServiceServerMockUpdateAgent) Inspect(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateAgentRequest)) *mAppPublicServiceServerMockUpdateAgent {
	if mmUpdateAgent.mock.inspectFuncUpdateAgent != nil {
		mmUpdateAgent.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.UpdateAgent")
	}

	mmUpdateAgent.mock.inspectFuncUpdateAgent = f

	return mmUpdateAgent
}

// Return sets up results that will be returned by AppPublicServiceServer.UpdateAgent
func (mmUpdateAgent *mAppPublicServiceServerMockUpdateAgent) Return(up2 *mm_appv1alpha.UpdateAgentResponse, err error) *AppPublicServiceServerMock {
	if mmUpdateAgent.mock.funcUpdateAgent != nil {
		mmUpdateAgent.mock.t.Fatalf("AppPublicServiceServerMock.UpdateAgent mock is already set by Set")
	}

	if mmUpdateAgent.defaultExpectation == nil {
		mmUpdateAgent.defaultExpectation = &AppPublicServiceServerMockUpdateAgentExpectation{mock: mmUpdateAgent.mock}
	}
	mmUpdateAgent.defaultExpectation.results = &AppPublicServiceServerMockUpdateAgentResults{up2, err}
	mmUpdateAgent.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateAgent.mock
}

// Set uses given function f to mock the AppPublicServiceServer.UpdateAgent method
func (mmUpdateAgent *mAppPublicServiceServerMockUpdateAgent) Set(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateAgentRequest) (up2 *mm_appv1alpha.UpdateAgentResponse, err error)) *AppPublicServiceServerMock {
	if mmUpdateAgent.defaultExpectation != nil {
		mmUpdateAgent.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.UpdateAgent method")
	}

	if len(mmUpdateAgent.expectations) > 0 {
		mmUpdateAgent.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.UpdateAgent method")
	}

	mmUpdateAgent.mock.funcUpdateAgent = f
	mmUpdateAgent.mock.funcUpdateAgentOrigin = minimock.CallerInfo(1)
	return mmUpdateAgent.mock
}

// When sets expectation for the AppPublicServiceServer.UpdateAgent which will trigger the result defined by the following
// Then helper
func (mmUpdateAgent *mAppPublicServiceServerMockUpdateAgent) When(ctx context.Context, up1 *mm_appv1alpha.UpdateAgentRequest) *AppPublicServiceServerMockUpdateAgentExpectation {
	if mmUpdateAgent.mock.funcUpdateAgent != nil {
		mmUpdateAgent.mock.t.Fatalf("AppPublicServiceServerMock.UpdateAgent mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockUpdateAgentExpectation{
		mock:               mmUpdateAgent.mock,
		params:             &AppPublicServiceServerMockUpdateAgentParams{ctx, up1},
		expectationOrigins: AppPublicServiceServerMockUpdateAgentExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateAgent.expectations = append(mmUpdateAgent.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.UpdateAgent return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockUpdateAgentExpectation) Then(up2 *mm_appv1alpha.UpdateAgentResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockUpdateAgentResults{up2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.UpdateAgent should be invoked
func (mmUpdateAgent *mAppPublicServiceServerMockUpdateAgent) Times(n uint64) *mAppPublicServiceServerMockUpdateAgent {
	if n == 0 {
		mmUpdateAgent.mock.t.Fatalf("Times of AppPublicServiceServerMock.UpdateAgent mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateAgent.expectedInvocations, n)
	mmUpdateAgent.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateAgent
}

func (mmUpdateAgent *mAppPublicServiceServerMockUpdateAgent) invocationsDone() bool {
	if len(mmUpdateAgent.expectations) == 0 && mmUpdateAgent.defaultExpectation == nil && mmUpdateAgent.mock.funcUpdateAgent == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateAgent.mock.afterUpdateAgentCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateAgent.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateAgent implements mm_appv1alpha.AppPublicServiceServer
func (mmUpdateAgent *AppPublicServiceServerMock) UpdateAgent(ctx context.Context, up1 *mm_appv1alpha.UpdateAgentRequest) (up2 *mm_appv1alpha.UpdateAgentResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateAgent.beforeUpdateAgentCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateAgent.afterUpdateAgentCounter, 1)

	mmUpdateAgent.t.Helper()

	if mmUpdateAgent.inspectFuncUpdateAgent != nil {
		mmUpdateAgent.inspectFuncUpdateAgent(ctx, up1)
	}

	mm_params := AppPublicServiceServerMockUpdateAgentParams{ctx, up1}

	// Record call args
	mmUpdateAgent.UpdateAgentMock.mutex.Lock()
	mmUpdateAgent.UpdateAgentMock.callArgs = append(mmUpdateAgent.UpdateAgentMock.callArgs, &mm_params)
	mmUpdateAgent.UpdateAgentMock.mutex.Unlock()

	for _, e := range mmUpdateAgent.UpdateAgentMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateAgent.UpdateAgentMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateAgent.UpdateAgentMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateAgent.UpdateAgentMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateAgent.UpdateAgentMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockUpdateAgentParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateAgent.t.Errorf("AppPublicServiceServerMock.UpdateAgent got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateAgent.UpdateAgentMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateAgent.t.Errorf("AppPublicServiceServerMock.UpdateAgent got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateAgent.UpdateAgentMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateAgent.t.Errorf("AppPublicServiceServerMock.UpdateAgent got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateAgent.UpdateAgentMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateAgent.UpdateAgentMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateAgent.t.Fatal("No results are set for the AppPublicServiceServerMock.UpdateAgent")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateAgent.funcUpdateAgent != nil {
		return mmUpdateAgent.funcUpdateAgent(ctx, up1)
	}
	mmUpdateAgent.t.Fatalf("Unexpected call to AppPublicServiceServerMock.UpdateAgent. %v %v", ctx, up1)
	return
}

// UpdateAgentAfterCounter returns a count of finished AppPublicServiceServerMock.UpdateAgent invocations
func (mmUpdateAgent *AppPublicServiceServerMock) UpdateAgentAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateAgent.afterUpdateAgentCounter)
}

// UpdateAgentBeforeCounter returns a count of AppPublicServiceServerMock.UpdateAgent invocations
func (mmUpdateAgent *AppPublicServiceServerMock) UpdateAgentBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateAgent.beforeUpdateAgentCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.UpdateAgent.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateAgent *mAppPublicServiceServerMockUpdateAgent) Calls() []*AppPublicServiceServerMockUpdateAgentParams {
	mmUpdateAgent.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockUpdateAgentParams, len(mmUpdateAgent.callArgs))
	copy(argCopy, mmUpdateAgent.callArgs)

	mmUpdateAgent.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateAgentDone returns true if the count of the UpdateAgent invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockUpdateAgentDone() bool {
	if m.UpdateAgentMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateAgentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateAgentMock.invocationsDone()
}

// MinimockUpdateAgentInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockUpdateAgentInspect() {
	for _, e := range m.UpdateAgentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateAgent at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateAgentCounter := mm_atomic.LoadUint64(&m.afterUpdateAgentCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAgentMock.defaultExpectation != nil && afterUpdateAgentCounter < 1 {
		if m.UpdateAgentMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateAgent at\n%s", m.UpdateAgentMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateAgent at\n%s with params: %#v", m.UpdateAgentMock.defaultExpectation.expectationOrigins.origin, *m.UpdateAgentMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAgent != nil && afterUpdateAgentCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateAgent at\n%s", m.funcUpdateAgentOrigin)
	}

	if !m.UpdateAgentMock.invocationsDone() && afterUpdateAgentCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.UpdateAgent at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateAgentMock.expectedInvocations), m.UpdateAgentMock.expectedInvocationsOrigin, afterUpdateAgentCounter)
	}
}

type mAppPublicServiceServerMockUpdateApp struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockUpdateAppExpectation
	expectations       []*AppPublicServiceServerMockUpdateAppExpectation

	callArgs []*AppPublicServiceServerMockUpdateAppParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockUpdateAppExpectation specifies expectation struct of the AppPublicServiceServer.UpdateApp
type AppPublicServiceServerMockUpdateAppExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockUpdateAppParams
	paramPtrs          *AppPublicServiceServerMockUpdateAppParamPtrs
	expectationOrigins AppPublicServiceServerMockUpdateAppExpectationOrigins
	results            *AppPublicServiceServerMockUpdateAppResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockUpdateAppParams contains parameters of the AppPublicServiceServer.UpdateApp
type AppPublicServiceServerMockUpdateAppParams struct {
	ctx context.Context
	up1 *mm_appv1alpha.UpdateAppRequest
}

// AppPublicServiceServerMockUpdateAppParamPtrs contains pointers to parameters of the AppPublicServiceServer.UpdateApp
type AppPublicServiceServerMockUpdateAppParamPtrs struct {
	ctx *context.Context
	up1 **mm_appv1alpha.UpdateAppRequest
}

// AppPublicServiceServerMockUpdateAppResults contains results of the AppPublicServiceServer.UpdateApp
type AppPublicServiceServerMockUpdateAppResults struct {
	up2 *mm_appv1alpha.UpdateAppResponse
	err error
}

// AppPublicServiceServerMockUpdateAppOrigins contains origins of expectations of the AppPublicServiceServer.UpdateApp
type AppPublicServiceServerMockUpdateAppExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateApp *mAppPublicServiceServerMockUpdateApp) Optional() *mAppPublicServiceServerMockUpdateApp {
	mmUpdateApp.optional = true
	return mmUpdateApp
}

// Expect sets up expected params for AppPublicServiceServer.UpdateApp
func (mmUpdateApp *mAppPublicServiceServerMockUpdateApp) Expect(ctx context.Context, up1 *mm_appv1alpha.UpdateAppRequest) *mAppPublicServiceServerMockUpdateApp {
	if mmUpdateApp.mock.funcUpdateApp != nil {
		mmUpdateApp.mock.t.Fatalf("AppPublicServiceServerMock.UpdateApp mock is already set by Set")
	}

	if mmUpdateApp.defaultExpectation == nil {
		mmUpdateApp.defaultExpectation = &AppPublicServiceServerMockUpdateAppExpectation{}
	}

	if mmUpdateApp.defaultExpectation.paramPtrs != nil {
		mmUpdateApp.mock.t.Fatalf("AppPublicServiceServerMock.UpdateApp mock is already set by ExpectParams functions")
	}

	mmUpdateApp.defaultExpectation.params = &AppPublicServiceServerMockUpdateAppParams{ctx, up1}
	mmUpdateApp.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateApp.expectations {
		if minimock.Equal(e.params, mmUpdateApp.defaultExpectation.params) {
			mmUpdateApp.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateApp.defaultExpectation.params)
		}
	}

	return mmUpdateApp
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.UpdateApp
func (mmUpdateApp *mAppPublicServiceServerMockUpdateApp) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockUpdateApp {
	if mmUpdateApp.mock.funcUpdateApp != nil {
		mmUpdateApp.mock.t.Fatalf("AppPublicServiceServerMock.UpdateApp mock is already set by Set")
	}

	if mmUpdateApp.defaultExpectation == nil {
		mmUpdateApp.defaultExpectation = &AppPublicServiceServerMockUpdateAppExpectation{}
	}

	if mmUpdateApp.defaultExpectation.params != nil {
		mmUpdateApp.mock.t.Fatalf("AppPublicServiceServerMock.UpdateApp mock is already set by Expect")
	}

	if mmUpdateApp.defaultExpectation.paramPtrs == nil {
		mmUpdateApp.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateAppParamPtrs{}
	}
	mmUpdateApp.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateApp.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateApp
}

// ExpectUp1Param2 sets up expected param up1 for AppPublicServiceServer.UpdateApp
func (mmUpdateApp *mAppPublicServiceServerMockUpdateApp) ExpectUp1Param2(up1 *mm_appv1alpha.UpdateAppRequest) *mAppPublicServiceServerMockUpdateApp {
	if mmUpdateApp.mock.funcUpdateApp != nil {
		mmUpdateApp.mock.t.Fatalf("AppPublicServiceServerMock.UpdateApp mock is already set by Set")
	}

	if mmUpdateApp.defaultExpectation == nil {
		mmUpdateApp.defaultExpectation = &AppPublicServiceServerMockUpdateAppExpectation{}
	}

	if mmUpdateApp.defaultExpectation.params != nil {
		mmUpdateApp.mock.t.Fatalf("AppPublicServiceServerMock.UpdateApp mock is already set by Expect")
	}

	if mmUpdateApp.defaultExpectation.paramPtrs == nil {
		mmUpdateApp.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateAppParamPtrs{}
	}
	mmUpdateApp.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateApp.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateApp
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.UpdateApp
func (mmUpdateApp *mAppPublicServiceServerMockUpdateApp) Inspect(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateAppRequest)) *mAppPublicServiceServerMockUpdateApp {
	if mmUpdateApp.mock.inspectFuncUpdateApp != nil {
		mmUpdateApp.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.UpdateApp")
	}

	mmUpdateApp.mock.inspectFuncUpdateApp = f

	return mmUpdateApp
}

// Return sets up results that will be returned by AppPublicServiceServer.UpdateApp
func (mmUpdateApp *mAppPublicServiceServerMockUpdateApp) Return(up2 *mm_appv1alpha.UpdateAppResponse, err error) *AppPublicServiceServerMock {
	if mmUpdateApp.mock.funcUpdateApp != nil {
		mmUpdateApp.mock.t.Fatalf("AppPublicServiceServerMock.UpdateApp mock is already set by Set")
	}

	if mmUpdateApp.defaultExpectation == nil {
		mmUpdateApp.defaultExpectation = &AppPublicServiceServerMockUpdateAppExpectation{mock: mmUpdateApp.mock}
	}
	mmUpdateApp.defaultExpectation.results = &AppPublicServiceServerMockUpdateAppResults{up2, err}
	mmUpdateApp.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateApp.mock
}

// Set uses given function f to mock the AppPublicServiceServer.UpdateApp method
func (mmUpdateApp *mAppPublicServiceServerMockUpdateApp) Set(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateAppRequest) (up2 *mm_appv1alpha.UpdateAppResponse, err error)) *AppPublicServiceServerMock {
	if mmUpdateApp.defaultExpectation != nil {
		mmUpdateApp.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.UpdateApp method")
	}

	if len(mmUpdateApp.expectations) > 0 {
		mmUpdateApp.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.UpdateApp method")
	}

	mmUpdateApp.mock.funcUpdateApp = f
	mmUpdateApp.mock.funcUpdateAppOrigin = minimock.CallerInfo(1)
	return mmUpdateApp.mock
}

// When sets expectation for the AppPublicServiceServer.UpdateApp which will trigger the result defined by the following
// Then helper
func (mmUpdateApp *mAppPublicServiceServerMockUpdateApp) When(ctx context.Context, up1 *mm_appv1alpha.UpdateAppRequest) *AppPublicServiceServerMockUpdateAppExpectation {
	if mmUpdateApp.mock.funcUpdateApp != nil {
		mmUpdateApp.mock.t.Fatalf("AppPublicServiceServerMock.UpdateApp mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockUpdateAppExpectation{
		mock:               mmUpdateApp.mock,
		params:             &AppPublicServiceServerMockUpdateAppParams{ctx, up1},
		expectationOrigins: AppPublicServiceServerMockUpdateAppExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateApp.expectations = append(mmUpdateApp.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.UpdateApp return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockUpdateAppExpectation) Then(up2 *mm_appv1alpha.UpdateAppResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockUpdateAppResults{up2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.UpdateApp should be invoked
func (mmUpdateApp *mAppPublicServiceServerMockUpdateApp) Times(n uint64) *mAppPublicServiceServerMockUpdateApp {
	if n == 0 {
		mmUpdateApp.mock.t.Fatalf("Times of AppPublicServiceServerMock.UpdateApp mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateApp.expectedInvocations, n)
	mmUpdateApp.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateApp
}

func (mmUpdateApp *mAppPublicServiceServerMockUpdateApp) invocationsDone() bool {
	if len(mmUpdateApp.expectations) == 0 && mmUpdateApp.defaultExpectation == nil && mmUpdateApp.mock.funcUpdateApp == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateApp.mock.afterUpdateAppCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateApp.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateApp implements mm_appv1alpha.AppPublicServiceServer
func (mmUpdateApp *AppPublicServiceServerMock) UpdateApp(ctx context.Context, up1 *mm_appv1alpha.UpdateAppRequest) (up2 *mm_appv1alpha.UpdateAppResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateApp.beforeUpdateAppCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateApp.afterUpdateAppCounter, 1)

	mmUpdateApp.t.Helper()

	if mmUpdateApp.inspectFuncUpdateApp != nil {
		mmUpdateApp.inspectFuncUpdateApp(ctx, up1)
	}

	mm_params := AppPublicServiceServerMockUpdateAppParams{ctx, up1}

	// Record call args
	mmUpdateApp.UpdateAppMock.mutex.Lock()
	mmUpdateApp.UpdateAppMock.callArgs = append(mmUpdateApp.UpdateAppMock.callArgs, &mm_params)
	mmUpdateApp.UpdateAppMock.mutex.Unlock()

	for _, e := range mmUpdateApp.UpdateAppMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateApp.UpdateAppMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateApp.UpdateAppMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateApp.UpdateAppMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateApp.UpdateAppMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockUpdateAppParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateApp.t.Errorf("AppPublicServiceServerMock.UpdateApp got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateApp.UpdateAppMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateApp.t.Errorf("AppPublicServiceServerMock.UpdateApp got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateApp.UpdateAppMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateApp.t.Errorf("AppPublicServiceServerMock.UpdateApp got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateApp.UpdateAppMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateApp.UpdateAppMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateApp.t.Fatal("No results are set for the AppPublicServiceServerMock.UpdateApp")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateApp.funcUpdateApp != nil {
		return mmUpdateApp.funcUpdateApp(ctx, up1)
	}
	mmUpdateApp.t.Fatalf("Unexpected call to AppPublicServiceServerMock.UpdateApp. %v %v", ctx, up1)
	return
}

// UpdateAppAfterCounter returns a count of finished AppPublicServiceServerMock.UpdateApp invocations
func (mmUpdateApp *AppPublicServiceServerMock) UpdateAppAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateApp.afterUpdateAppCounter)
}

// UpdateAppBeforeCounter returns a count of AppPublicServiceServerMock.UpdateApp invocations
func (mmUpdateApp *AppPublicServiceServerMock) UpdateAppBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateApp.beforeUpdateAppCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.UpdateApp.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateApp *mAppPublicServiceServerMockUpdateApp) Calls() []*AppPublicServiceServerMockUpdateAppParams {
	mmUpdateApp.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockUpdateAppParams, len(mmUpdateApp.callArgs))
	copy(argCopy, mmUpdateApp.callArgs)

	mmUpdateApp.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateAppDone returns true if the count of the UpdateApp invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockUpdateAppDone() bool {
	if m.UpdateAppMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateAppMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateAppMock.invocationsDone()
}

// MinimockUpdateAppInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockUpdateAppInspect() {
	for _, e := range m.UpdateAppMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateApp at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateAppCounter := mm_atomic.LoadUint64(&m.afterUpdateAppCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAppMock.defaultExpectation != nil && afterUpdateAppCounter < 1 {
		if m.UpdateAppMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateApp at\n%s", m.UpdateAppMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateApp at\n%s with params: %#v", m.UpdateAppMock.defaultExpectation.expectationOrigins.origin, *m.UpdateAppMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateApp != nil && afterUpdateAppCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateApp at\n%s", m.funcUpdateAppOrigin)
	}

	if !m.UpdateAppMock.invocationsDone() && afterUpdateAppCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.UpdateApp at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateAppMock.expectedInvocations), m.UpdateAppMock.expectedInvocationsOrigin, afterUpdateAppCounter)
	}
}

type mAppPublicServiceServerMockUpdateChat struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockUpdateChatExpectation
	expectations       []*AppPublicServiceServerMockUpdateChatExpectation

	callArgs []*AppPublicServiceServerMockUpdateChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockUpdateChatExpectation specifies expectation struct of the AppPublicServiceServer.UpdateChat
type AppPublicServiceServerMockUpdateChatExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockUpdateChatParams
	paramPtrs          *AppPublicServiceServerMockUpdateChatParamPtrs
	expectationOrigins AppPublicServiceServerMockUpdateChatExpectationOrigins
	results            *AppPublicServiceServerMockUpdateChatResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockUpdateChatParams contains parameters of the AppPublicServiceServer.UpdateChat
type AppPublicServiceServerMockUpdateChatParams struct {
	ctx context.Context
	up1 *mm_appv1alpha.UpdateChatRequest
}

// AppPublicServiceServerMockUpdateChatParamPtrs contains pointers to parameters of the AppPublicServiceServer.UpdateChat
type AppPublicServiceServerMockUpdateChatParamPtrs struct {
	ctx *context.Context
	up1 **mm_appv1alpha.UpdateChatRequest
}

// AppPublicServiceServerMockUpdateChatResults contains results of the AppPublicServiceServer.UpdateChat
type AppPublicServiceServerMockUpdateChatResults struct {
	up2 *mm_appv1alpha.UpdateChatResponse
	err error
}

// AppPublicServiceServerMockUpdateChatOrigins contains origins of expectations of the AppPublicServiceServer.UpdateChat
type AppPublicServiceServerMockUpdateChatExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateChat *mAppPublicServiceServerMockUpdateChat) Optional() *mAppPublicServiceServerMockUpdateChat {
	mmUpdateChat.optional = true
	return mmUpdateChat
}

// Expect sets up expected params for AppPublicServiceServer.UpdateChat
func (mmUpdateChat *mAppPublicServiceServerMockUpdateChat) Expect(ctx context.Context, up1 *mm_appv1alpha.UpdateChatRequest) *mAppPublicServiceServerMockUpdateChat {
	if mmUpdateChat.mock.funcUpdateChat != nil {
		mmUpdateChat.mock.t.Fatalf("AppPublicServiceServerMock.UpdateChat mock is already set by Set")
	}

	if mmUpdateChat.defaultExpectation == nil {
		mmUpdateChat.defaultExpectation = &AppPublicServiceServerMockUpdateChatExpectation{}
	}

	if mmUpdateChat.defaultExpectation.paramPtrs != nil {
		mmUpdateChat.mock.t.Fatalf("AppPublicServiceServerMock.UpdateChat mock is already set by ExpectParams functions")
	}

	mmUpdateChat.defaultExpectation.params = &AppPublicServiceServerMockUpdateChatParams{ctx, up1}
	mmUpdateChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateChat.expectations {
		if minimock.Equal(e.params, mmUpdateChat.defaultExpectation.params) {
			mmUpdateChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateChat.defaultExpectation.params)
		}
	}

	return mmUpdateChat
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.UpdateChat
func (mmUpdateChat *mAppPublicServiceServerMockUpdateChat) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockUpdateChat {
	if mmUpdateChat.mock.funcUpdateChat != nil {
		mmUpdateChat.mock.t.Fatalf("AppPublicServiceServerMock.UpdateChat mock is already set by Set")
	}

	if mmUpdateChat.defaultExpectation == nil {
		mmUpdateChat.defaultExpectation = &AppPublicServiceServerMockUpdateChatExpectation{}
	}

	if mmUpdateChat.defaultExpectation.params != nil {
		mmUpdateChat.mock.t.Fatalf("AppPublicServiceServerMock.UpdateChat mock is already set by Expect")
	}

	if mmUpdateChat.defaultExpectation.paramPtrs == nil {
		mmUpdateChat.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateChatParamPtrs{}
	}
	mmUpdateChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateChat
}

// ExpectUp1Param2 sets up expected param up1 for AppPublicServiceServer.UpdateChat
func (mmUpdateChat *mAppPublicServiceServerMockUpdateChat) ExpectUp1Param2(up1 *mm_appv1alpha.UpdateChatRequest) *mAppPublicServiceServerMockUpdateChat {
	if mmUpdateChat.mock.funcUpdateChat != nil {
		mmUpdateChat.mock.t.Fatalf("AppPublicServiceServerMock.UpdateChat mock is already set by Set")
	}

	if mmUpdateChat.defaultExpectation == nil {
		mmUpdateChat.defaultExpectation = &AppPublicServiceServerMockUpdateChatExpectation{}
	}

	if mmUpdateChat.defaultExpectation.params != nil {
		mmUpdateChat.mock.t.Fatalf("AppPublicServiceServerMock.UpdateChat mock is already set by Expect")
	}

	if mmUpdateChat.defaultExpectation.paramPtrs == nil {
		mmUpdateChat.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateChatParamPtrs{}
	}
	mmUpdateChat.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateChat.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateChat
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.UpdateChat
func (mmUpdateChat *mAppPublicServiceServerMockUpdateChat) Inspect(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateChatRequest)) *mAppPublicServiceServerMockUpdateChat {
	if mmUpdateChat.mock.inspectFuncUpdateChat != nil {
		mmUpdateChat.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.UpdateChat")
	}

	mmUpdateChat.mock.inspectFuncUpdateChat = f

	return mmUpdateChat
}

// Return sets up results that will be returned by AppPublicServiceServer.UpdateChat
func (mmUpdateChat *mAppPublicServiceServerMockUpdateChat) Return(up2 *mm_appv1alpha.UpdateChatResponse, err error) *AppPublicServiceServerMock {
	if mmUpdateChat.mock.funcUpdateChat != nil {
		mmUpdateChat.mock.t.Fatalf("AppPublicServiceServerMock.UpdateChat mock is already set by Set")
	}

	if mmUpdateChat.defaultExpectation == nil {
		mmUpdateChat.defaultExpectation = &AppPublicServiceServerMockUpdateChatExpectation{mock: mmUpdateChat.mock}
	}
	mmUpdateChat.defaultExpectation.results = &AppPublicServiceServerMockUpdateChatResults{up2, err}
	mmUpdateChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateChat.mock
}

// Set uses given function f to mock the AppPublicServiceServer.UpdateChat method
func (mmUpdateChat *mAppPublicServiceServerMockUpdateChat) Set(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateChatRequest) (up2 *mm_appv1alpha.UpdateChatResponse, err error)) *AppPublicServiceServerMock {
	if mmUpdateChat.defaultExpectation != nil {
		mmUpdateChat.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.UpdateChat method")
	}

	if len(mmUpdateChat.expectations) > 0 {
		mmUpdateChat.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.UpdateChat method")
	}

	mmUpdateChat.mock.funcUpdateChat = f
	mmUpdateChat.mock.funcUpdateChatOrigin = minimock.CallerInfo(1)
	return mmUpdateChat.mock
}

// When sets expectation for the AppPublicServiceServer.UpdateChat which will trigger the result defined by the following
// Then helper
func (mmUpdateChat *mAppPublicServiceServerMockUpdateChat) When(ctx context.Context, up1 *mm_appv1alpha.UpdateChatRequest) *AppPublicServiceServerMockUpdateChatExpectation {
	if mmUpdateChat.mock.funcUpdateChat != nil {
		mmUpdateChat.mock.t.Fatalf("AppPublicServiceServerMock.UpdateChat mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockUpdateChatExpectation{
		mock:               mmUpdateChat.mock,
		params:             &AppPublicServiceServerMockUpdateChatParams{ctx, up1},
		expectationOrigins: AppPublicServiceServerMockUpdateChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateChat.expectations = append(mmUpdateChat.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.UpdateChat return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockUpdateChatExpectation) Then(up2 *mm_appv1alpha.UpdateChatResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockUpdateChatResults{up2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.UpdateChat should be invoked
func (mmUpdateChat *mAppPublicServiceServerMockUpdateChat) Times(n uint64) *mAppPublicServiceServerMockUpdateChat {
	if n == 0 {
		mmUpdateChat.mock.t.Fatalf("Times of AppPublicServiceServerMock.UpdateChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateChat.expectedInvocations, n)
	mmUpdateChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateChat
}

func (mmUpdateChat *mAppPublicServiceServerMockUpdateChat) invocationsDone() bool {
	if len(mmUpdateChat.expectations) == 0 && mmUpdateChat.defaultExpectation == nil && mmUpdateChat.mock.funcUpdateChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateChat.mock.afterUpdateChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateChat implements mm_appv1alpha.AppPublicServiceServer
func (mmUpdateChat *AppPublicServiceServerMock) UpdateChat(ctx context.Context, up1 *mm_appv1alpha.UpdateChatRequest) (up2 *mm_appv1alpha.UpdateChatResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateChat.beforeUpdateChatCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateChat.afterUpdateChatCounter, 1)

	mmUpdateChat.t.Helper()

	if mmUpdateChat.inspectFuncUpdateChat != nil {
		mmUpdateChat.inspectFuncUpdateChat(ctx, up1)
	}

	mm_params := AppPublicServiceServerMockUpdateChatParams{ctx, up1}

	// Record call args
	mmUpdateChat.UpdateChatMock.mutex.Lock()
	mmUpdateChat.UpdateChatMock.callArgs = append(mmUpdateChat.UpdateChatMock.callArgs, &mm_params)
	mmUpdateChat.UpdateChatMock.mutex.Unlock()

	for _, e := range mmUpdateChat.UpdateChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateChat.UpdateChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateChat.UpdateChatMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateChat.UpdateChatMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateChat.UpdateChatMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockUpdateChatParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateChat.t.Errorf("AppPublicServiceServerMock.UpdateChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateChat.UpdateChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateChat.t.Errorf("AppPublicServiceServerMock.UpdateChat got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateChat.UpdateChatMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateChat.t.Errorf("AppPublicServiceServerMock.UpdateChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateChat.UpdateChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateChat.UpdateChatMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateChat.t.Fatal("No results are set for the AppPublicServiceServerMock.UpdateChat")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateChat.funcUpdateChat != nil {
		return mmUpdateChat.funcUpdateChat(ctx, up1)
	}
	mmUpdateChat.t.Fatalf("Unexpected call to AppPublicServiceServerMock.UpdateChat. %v %v", ctx, up1)
	return
}

// UpdateChatAfterCounter returns a count of finished AppPublicServiceServerMock.UpdateChat invocations
func (mmUpdateChat *AppPublicServiceServerMock) UpdateChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateChat.afterUpdateChatCounter)
}

// UpdateChatBeforeCounter returns a count of AppPublicServiceServerMock.UpdateChat invocations
func (mmUpdateChat *AppPublicServiceServerMock) UpdateChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateChat.beforeUpdateChatCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.UpdateChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateChat *mAppPublicServiceServerMockUpdateChat) Calls() []*AppPublicServiceServerMockUpdateChatParams {
	mmUpdateChat.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockUpdateChatParams, len(mmUpdateChat.callArgs))
	copy(argCopy, mmUpdateChat.callArgs)

	mmUpdateChat.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateChatDone returns true if the count of the UpdateChat invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockUpdateChatDone() bool {
	if m.UpdateChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateChatMock.invocationsDone()
}

// MinimockUpdateChatInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockUpdateChatInspect() {
	for _, e := range m.UpdateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateChatCounter := mm_atomic.LoadUint64(&m.afterUpdateChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateChatMock.defaultExpectation != nil && afterUpdateChatCounter < 1 {
		if m.UpdateChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateChat at\n%s", m.UpdateChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateChat at\n%s with params: %#v", m.UpdateChatMock.defaultExpectation.expectationOrigins.origin, *m.UpdateChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateChat != nil && afterUpdateChatCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateChat at\n%s", m.funcUpdateChatOrigin)
	}

	if !m.UpdateChatMock.invocationsDone() && afterUpdateChatCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.UpdateChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateChatMock.expectedInvocations), m.UpdateChatMock.expectedInvocationsOrigin, afterUpdateChatCounter)
	}
}

type mAppPublicServiceServerMockUpdateColumnDefinitions struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockUpdateColumnDefinitionsExpectation
	expectations       []*AppPublicServiceServerMockUpdateColumnDefinitionsExpectation

	callArgs []*AppPublicServiceServerMockUpdateColumnDefinitionsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockUpdateColumnDefinitionsExpectation specifies expectation struct of the AppPublicServiceServer.UpdateColumnDefinitions
type AppPublicServiceServerMockUpdateColumnDefinitionsExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockUpdateColumnDefinitionsParams
	paramPtrs          *AppPublicServiceServerMockUpdateColumnDefinitionsParamPtrs
	expectationOrigins AppPublicServiceServerMockUpdateColumnDefinitionsExpectationOrigins
	results            *AppPublicServiceServerMockUpdateColumnDefinitionsResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockUpdateColumnDefinitionsParams contains parameters of the AppPublicServiceServer.UpdateColumnDefinitions
type AppPublicServiceServerMockUpdateColumnDefinitionsParams struct {
	ctx context.Context
	up1 *mm_appv1alpha.UpdateColumnDefinitionsRequest
}

// AppPublicServiceServerMockUpdateColumnDefinitionsParamPtrs contains pointers to parameters of the AppPublicServiceServer.UpdateColumnDefinitions
type AppPublicServiceServerMockUpdateColumnDefinitionsParamPtrs struct {
	ctx *context.Context
	up1 **mm_appv1alpha.UpdateColumnDefinitionsRequest
}

// AppPublicServiceServerMockUpdateColumnDefinitionsResults contains results of the AppPublicServiceServer.UpdateColumnDefinitions
type AppPublicServiceServerMockUpdateColumnDefinitionsResults struct {
	up2 *mm_appv1alpha.UpdateColumnDefinitionsResponse
	err error
}

// AppPublicServiceServerMockUpdateColumnDefinitionsOrigins contains origins of expectations of the AppPublicServiceServer.UpdateColumnDefinitions
type AppPublicServiceServerMockUpdateColumnDefinitionsExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateColumnDefinitions *mAppPublicServiceServerMockUpdateColumnDefinitions) Optional() *mAppPublicServiceServerMockUpdateColumnDefinitions {
	mmUpdateColumnDefinitions.optional = true
	return mmUpdateColumnDefinitions
}

// Expect sets up expected params for AppPublicServiceServer.UpdateColumnDefinitions
func (mmUpdateColumnDefinitions *mAppPublicServiceServerMockUpdateColumnDefinitions) Expect(ctx context.Context, up1 *mm_appv1alpha.UpdateColumnDefinitionsRequest) *mAppPublicServiceServerMockUpdateColumnDefinitions {
	if mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitions != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.UpdateColumnDefinitions mock is already set by Set")
	}

	if mmUpdateColumnDefinitions.defaultExpectation == nil {
		mmUpdateColumnDefinitions.defaultExpectation = &AppPublicServiceServerMockUpdateColumnDefinitionsExpectation{}
	}

	if mmUpdateColumnDefinitions.defaultExpectation.paramPtrs != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.UpdateColumnDefinitions mock is already set by ExpectParams functions")
	}

	mmUpdateColumnDefinitions.defaultExpectation.params = &AppPublicServiceServerMockUpdateColumnDefinitionsParams{ctx, up1}
	mmUpdateColumnDefinitions.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateColumnDefinitions.expectations {
		if minimock.Equal(e.params, mmUpdateColumnDefinitions.defaultExpectation.params) {
			mmUpdateColumnDefinitions.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateColumnDefinitions.defaultExpectation.params)
		}
	}

	return mmUpdateColumnDefinitions
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.UpdateColumnDefinitions
func (mmUpdateColumnDefinitions *mAppPublicServiceServerMockUpdateColumnDefinitions) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockUpdateColumnDefinitions {
	if mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitions != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.UpdateColumnDefinitions mock is already set by Set")
	}

	if mmUpdateColumnDefinitions.defaultExpectation == nil {
		mmUpdateColumnDefinitions.defaultExpectation = &AppPublicServiceServerMockUpdateColumnDefinitionsExpectation{}
	}

	if mmUpdateColumnDefinitions.defaultExpectation.params != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.UpdateColumnDefinitions mock is already set by Expect")
	}

	if mmUpdateColumnDefinitions.defaultExpectation.paramPtrs == nil {
		mmUpdateColumnDefinitions.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateColumnDefinitionsParamPtrs{}
	}
	mmUpdateColumnDefinitions.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateColumnDefinitions.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateColumnDefinitions
}

// ExpectUp1Param2 sets up expected param up1 for AppPublicServiceServer.UpdateColumnDefinitions
func (mmUpdateColumnDefinitions *mAppPublicServiceServerMockUpdateColumnDefinitions) ExpectUp1Param2(up1 *mm_appv1alpha.UpdateColumnDefinitionsRequest) *mAppPublicServiceServerMockUpdateColumnDefinitions {
	if mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitions != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.UpdateColumnDefinitions mock is already set by Set")
	}

	if mmUpdateColumnDefinitions.defaultExpectation == nil {
		mmUpdateColumnDefinitions.defaultExpectation = &AppPublicServiceServerMockUpdateColumnDefinitionsExpectation{}
	}

	if mmUpdateColumnDefinitions.defaultExpectation.params != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.UpdateColumnDefinitions mock is already set by Expect")
	}

	if mmUpdateColumnDefinitions.defaultExpectation.paramPtrs == nil {
		mmUpdateColumnDefinitions.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateColumnDefinitionsParamPtrs{}
	}
	mmUpdateColumnDefinitions.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateColumnDefinitions.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateColumnDefinitions
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.UpdateColumnDefinitions
func (mmUpdateColumnDefinitions *mAppPublicServiceServerMockUpdateColumnDefinitions) Inspect(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateColumnDefinitionsRequest)) *mAppPublicServiceServerMockUpdateColumnDefinitions {
	if mmUpdateColumnDefinitions.mock.inspectFuncUpdateColumnDefinitions != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.UpdateColumnDefinitions")
	}

	mmUpdateColumnDefinitions.mock.inspectFuncUpdateColumnDefinitions = f

	return mmUpdateColumnDefinitions
}

// Return sets up results that will be returned by AppPublicServiceServer.UpdateColumnDefinitions
func (mmUpdateColumnDefinitions *mAppPublicServiceServerMockUpdateColumnDefinitions) Return(up2 *mm_appv1alpha.UpdateColumnDefinitionsResponse, err error) *AppPublicServiceServerMock {
	if mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitions != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.UpdateColumnDefinitions mock is already set by Set")
	}

	if mmUpdateColumnDefinitions.defaultExpectation == nil {
		mmUpdateColumnDefinitions.defaultExpectation = &AppPublicServiceServerMockUpdateColumnDefinitionsExpectation{mock: mmUpdateColumnDefinitions.mock}
	}
	mmUpdateColumnDefinitions.defaultExpectation.results = &AppPublicServiceServerMockUpdateColumnDefinitionsResults{up2, err}
	mmUpdateColumnDefinitions.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateColumnDefinitions.mock
}

// Set uses given function f to mock the AppPublicServiceServer.UpdateColumnDefinitions method
func (mmUpdateColumnDefinitions *mAppPublicServiceServerMockUpdateColumnDefinitions) Set(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateColumnDefinitionsRequest) (up2 *mm_appv1alpha.UpdateColumnDefinitionsResponse, err error)) *AppPublicServiceServerMock {
	if mmUpdateColumnDefinitions.defaultExpectation != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.UpdateColumnDefinitions method")
	}

	if len(mmUpdateColumnDefinitions.expectations) > 0 {
		mmUpdateColumnDefinitions.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.UpdateColumnDefinitions method")
	}

	mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitions = f
	mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitionsOrigin = minimock.CallerInfo(1)
	return mmUpdateColumnDefinitions.mock
}

// When sets expectation for the AppPublicServiceServer.UpdateColumnDefinitions which will trigger the result defined by the following
// Then helper
func (mmUpdateColumnDefinitions *mAppPublicServiceServerMockUpdateColumnDefinitions) When(ctx context.Context, up1 *mm_appv1alpha.UpdateColumnDefinitionsRequest) *AppPublicServiceServerMockUpdateColumnDefinitionsExpectation {
	if mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitions != nil {
		mmUpdateColumnDefinitions.mock.t.Fatalf("AppPublicServiceServerMock.UpdateColumnDefinitions mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockUpdateColumnDefinitionsExpectation{
		mock:               mmUpdateColumnDefinitions.mock,
		params:             &AppPublicServiceServerMockUpdateColumnDefinitionsParams{ctx, up1},
		expectationOrigins: AppPublicServiceServerMockUpdateColumnDefinitionsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateColumnDefinitions.expectations = append(mmUpdateColumnDefinitions.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.UpdateColumnDefinitions return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockUpdateColumnDefinitionsExpectation) Then(up2 *mm_appv1alpha.UpdateColumnDefinitionsResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockUpdateColumnDefinitionsResults{up2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.UpdateColumnDefinitions should be invoked
func (mmUpdateColumnDefinitions *mAppPublicServiceServerMockUpdateColumnDefinitions) Times(n uint64) *mAppPublicServiceServerMockUpdateColumnDefinitions {
	if n == 0 {
		mmUpdateColumnDefinitions.mock.t.Fatalf("Times of AppPublicServiceServerMock.UpdateColumnDefinitions mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateColumnDefinitions.expectedInvocations, n)
	mmUpdateColumnDefinitions.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateColumnDefinitions
}

func (mmUpdateColumnDefinitions *mAppPublicServiceServerMockUpdateColumnDefinitions) invocationsDone() bool {
	if len(mmUpdateColumnDefinitions.expectations) == 0 && mmUpdateColumnDefinitions.defaultExpectation == nil && mmUpdateColumnDefinitions.mock.funcUpdateColumnDefinitions == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateColumnDefinitions.mock.afterUpdateColumnDefinitionsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateColumnDefinitions.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateColumnDefinitions implements mm_appv1alpha.AppPublicServiceServer
func (mmUpdateColumnDefinitions *AppPublicServiceServerMock) UpdateColumnDefinitions(ctx context.Context, up1 *mm_appv1alpha.UpdateColumnDefinitionsRequest) (up2 *mm_appv1alpha.UpdateColumnDefinitionsResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateColumnDefinitions.beforeUpdateColumnDefinitionsCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateColumnDefinitions.afterUpdateColumnDefinitionsCounter, 1)

	mmUpdateColumnDefinitions.t.Helper()

	if mmUpdateColumnDefinitions.inspectFuncUpdateColumnDefinitions != nil {
		mmUpdateColumnDefinitions.inspectFuncUpdateColumnDefinitions(ctx, up1)
	}

	mm_params := AppPublicServiceServerMockUpdateColumnDefinitionsParams{ctx, up1}

	// Record call args
	mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.mutex.Lock()
	mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.callArgs = append(mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.callArgs, &mm_params)
	mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.mutex.Unlock()

	for _, e := range mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockUpdateColumnDefinitionsParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateColumnDefinitions.t.Errorf("AppPublicServiceServerMock.UpdateColumnDefinitions got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateColumnDefinitions.t.Errorf("AppPublicServiceServerMock.UpdateColumnDefinitions got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateColumnDefinitions.t.Errorf("AppPublicServiceServerMock.UpdateColumnDefinitions got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateColumnDefinitions.UpdateColumnDefinitionsMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateColumnDefinitions.t.Fatal("No results are set for the AppPublicServiceServerMock.UpdateColumnDefinitions")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateColumnDefinitions.funcUpdateColumnDefinitions != nil {
		return mmUpdateColumnDefinitions.funcUpdateColumnDefinitions(ctx, up1)
	}
	mmUpdateColumnDefinitions.t.Fatalf("Unexpected call to AppPublicServiceServerMock.UpdateColumnDefinitions. %v %v", ctx, up1)
	return
}

// UpdateColumnDefinitionsAfterCounter returns a count of finished AppPublicServiceServerMock.UpdateColumnDefinitions invocations
func (mmUpdateColumnDefinitions *AppPublicServiceServerMock) UpdateColumnDefinitionsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateColumnDefinitions.afterUpdateColumnDefinitionsCounter)
}

// UpdateColumnDefinitionsBeforeCounter returns a count of AppPublicServiceServerMock.UpdateColumnDefinitions invocations
func (mmUpdateColumnDefinitions *AppPublicServiceServerMock) UpdateColumnDefinitionsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateColumnDefinitions.beforeUpdateColumnDefinitionsCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.UpdateColumnDefinitions.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateColumnDefinitions *mAppPublicServiceServerMockUpdateColumnDefinitions) Calls() []*AppPublicServiceServerMockUpdateColumnDefinitionsParams {
	mmUpdateColumnDefinitions.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockUpdateColumnDefinitionsParams, len(mmUpdateColumnDefinitions.callArgs))
	copy(argCopy, mmUpdateColumnDefinitions.callArgs)

	mmUpdateColumnDefinitions.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateColumnDefinitionsDone returns true if the count of the UpdateColumnDefinitions invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockUpdateColumnDefinitionsDone() bool {
	if m.UpdateColumnDefinitionsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateColumnDefinitionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateColumnDefinitionsMock.invocationsDone()
}

// MinimockUpdateColumnDefinitionsInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockUpdateColumnDefinitionsInspect() {
	for _, e := range m.UpdateColumnDefinitionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateColumnDefinitions at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateColumnDefinitionsCounter := mm_atomic.LoadUint64(&m.afterUpdateColumnDefinitionsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateColumnDefinitionsMock.defaultExpectation != nil && afterUpdateColumnDefinitionsCounter < 1 {
		if m.UpdateColumnDefinitionsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateColumnDefinitions at\n%s", m.UpdateColumnDefinitionsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateColumnDefinitions at\n%s with params: %#v", m.UpdateColumnDefinitionsMock.defaultExpectation.expectationOrigins.origin, *m.UpdateColumnDefinitionsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateColumnDefinitions != nil && afterUpdateColumnDefinitionsCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateColumnDefinitions at\n%s", m.funcUpdateColumnDefinitionsOrigin)
	}

	if !m.UpdateColumnDefinitionsMock.invocationsDone() && afterUpdateColumnDefinitionsCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.UpdateColumnDefinitions at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateColumnDefinitionsMock.expectedInvocations), m.UpdateColumnDefinitionsMock.expectedInvocationsOrigin, afterUpdateColumnDefinitionsCounter)
	}
}

type mAppPublicServiceServerMockUpdateConversation struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockUpdateConversationExpectation
	expectations       []*AppPublicServiceServerMockUpdateConversationExpectation

	callArgs []*AppPublicServiceServerMockUpdateConversationParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockUpdateConversationExpectation specifies expectation struct of the AppPublicServiceServer.UpdateConversation
type AppPublicServiceServerMockUpdateConversationExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockUpdateConversationParams
	paramPtrs          *AppPublicServiceServerMockUpdateConversationParamPtrs
	expectationOrigins AppPublicServiceServerMockUpdateConversationExpectationOrigins
	results            *AppPublicServiceServerMockUpdateConversationResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockUpdateConversationParams contains parameters of the AppPublicServiceServer.UpdateConversation
type AppPublicServiceServerMockUpdateConversationParams struct {
	ctx context.Context
	up1 *mm_appv1alpha.UpdateConversationRequest
}

// AppPublicServiceServerMockUpdateConversationParamPtrs contains pointers to parameters of the AppPublicServiceServer.UpdateConversation
type AppPublicServiceServerMockUpdateConversationParamPtrs struct {
	ctx *context.Context
	up1 **mm_appv1alpha.UpdateConversationRequest
}

// AppPublicServiceServerMockUpdateConversationResults contains results of the AppPublicServiceServer.UpdateConversation
type AppPublicServiceServerMockUpdateConversationResults struct {
	up2 *mm_appv1alpha.UpdateConversationResponse
	err error
}

// AppPublicServiceServerMockUpdateConversationOrigins contains origins of expectations of the AppPublicServiceServer.UpdateConversation
type AppPublicServiceServerMockUpdateConversationExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateConversation *mAppPublicServiceServerMockUpdateConversation) Optional() *mAppPublicServiceServerMockUpdateConversation {
	mmUpdateConversation.optional = true
	return mmUpdateConversation
}

// Expect sets up expected params for AppPublicServiceServer.UpdateConversation
func (mmUpdateConversation *mAppPublicServiceServerMockUpdateConversation) Expect(ctx context.Context, up1 *mm_appv1alpha.UpdateConversationRequest) *mAppPublicServiceServerMockUpdateConversation {
	if mmUpdateConversation.mock.funcUpdateConversation != nil {
		mmUpdateConversation.mock.t.Fatalf("AppPublicServiceServerMock.UpdateConversation mock is already set by Set")
	}

	if mmUpdateConversation.defaultExpectation == nil {
		mmUpdateConversation.defaultExpectation = &AppPublicServiceServerMockUpdateConversationExpectation{}
	}

	if mmUpdateConversation.defaultExpectation.paramPtrs != nil {
		mmUpdateConversation.mock.t.Fatalf("AppPublicServiceServerMock.UpdateConversation mock is already set by ExpectParams functions")
	}

	mmUpdateConversation.defaultExpectation.params = &AppPublicServiceServerMockUpdateConversationParams{ctx, up1}
	mmUpdateConversation.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateConversation.expectations {
		if minimock.Equal(e.params, mmUpdateConversation.defaultExpectation.params) {
			mmUpdateConversation.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateConversation.defaultExpectation.params)
		}
	}

	return mmUpdateConversation
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.UpdateConversation
func (mmUpdateConversation *mAppPublicServiceServerMockUpdateConversation) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockUpdateConversation {
	if mmUpdateConversation.mock.funcUpdateConversation != nil {
		mmUpdateConversation.mock.t.Fatalf("AppPublicServiceServerMock.UpdateConversation mock is already set by Set")
	}

	if mmUpdateConversation.defaultExpectation == nil {
		mmUpdateConversation.defaultExpectation = &AppPublicServiceServerMockUpdateConversationExpectation{}
	}

	if mmUpdateConversation.defaultExpectation.params != nil {
		mmUpdateConversation.mock.t.Fatalf("AppPublicServiceServerMock.UpdateConversation mock is already set by Expect")
	}

	if mmUpdateConversation.defaultExpectation.paramPtrs == nil {
		mmUpdateConversation.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateConversationParamPtrs{}
	}
	mmUpdateConversation.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateConversation.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateConversation
}

// ExpectUp1Param2 sets up expected param up1 for AppPublicServiceServer.UpdateConversation
func (mmUpdateConversation *mAppPublicServiceServerMockUpdateConversation) ExpectUp1Param2(up1 *mm_appv1alpha.UpdateConversationRequest) *mAppPublicServiceServerMockUpdateConversation {
	if mmUpdateConversation.mock.funcUpdateConversation != nil {
		mmUpdateConversation.mock.t.Fatalf("AppPublicServiceServerMock.UpdateConversation mock is already set by Set")
	}

	if mmUpdateConversation.defaultExpectation == nil {
		mmUpdateConversation.defaultExpectation = &AppPublicServiceServerMockUpdateConversationExpectation{}
	}

	if mmUpdateConversation.defaultExpectation.params != nil {
		mmUpdateConversation.mock.t.Fatalf("AppPublicServiceServerMock.UpdateConversation mock is already set by Expect")
	}

	if mmUpdateConversation.defaultExpectation.paramPtrs == nil {
		mmUpdateConversation.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateConversationParamPtrs{}
	}
	mmUpdateConversation.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateConversation.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateConversation
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.UpdateConversation
func (mmUpdateConversation *mAppPublicServiceServerMockUpdateConversation) Inspect(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateConversationRequest)) *mAppPublicServiceServerMockUpdateConversation {
	if mmUpdateConversation.mock.inspectFuncUpdateConversation != nil {
		mmUpdateConversation.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.UpdateConversation")
	}

	mmUpdateConversation.mock.inspectFuncUpdateConversation = f

	return mmUpdateConversation
}

// Return sets up results that will be returned by AppPublicServiceServer.UpdateConversation
func (mmUpdateConversation *mAppPublicServiceServerMockUpdateConversation) Return(up2 *mm_appv1alpha.UpdateConversationResponse, err error) *AppPublicServiceServerMock {
	if mmUpdateConversation.mock.funcUpdateConversation != nil {
		mmUpdateConversation.mock.t.Fatalf("AppPublicServiceServerMock.UpdateConversation mock is already set by Set")
	}

	if mmUpdateConversation.defaultExpectation == nil {
		mmUpdateConversation.defaultExpectation = &AppPublicServiceServerMockUpdateConversationExpectation{mock: mmUpdateConversation.mock}
	}
	mmUpdateConversation.defaultExpectation.results = &AppPublicServiceServerMockUpdateConversationResults{up2, err}
	mmUpdateConversation.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateConversation.mock
}

// Set uses given function f to mock the AppPublicServiceServer.UpdateConversation method
func (mmUpdateConversation *mAppPublicServiceServerMockUpdateConversation) Set(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateConversationRequest) (up2 *mm_appv1alpha.UpdateConversationResponse, err error)) *AppPublicServiceServerMock {
	if mmUpdateConversation.defaultExpectation != nil {
		mmUpdateConversation.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.UpdateConversation method")
	}

	if len(mmUpdateConversation.expectations) > 0 {
		mmUpdateConversation.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.UpdateConversation method")
	}

	mmUpdateConversation.mock.funcUpdateConversation = f
	mmUpdateConversation.mock.funcUpdateConversationOrigin = minimock.CallerInfo(1)
	return mmUpdateConversation.mock
}

// When sets expectation for the AppPublicServiceServer.UpdateConversation which will trigger the result defined by the following
// Then helper
func (mmUpdateConversation *mAppPublicServiceServerMockUpdateConversation) When(ctx context.Context, up1 *mm_appv1alpha.UpdateConversationRequest) *AppPublicServiceServerMockUpdateConversationExpectation {
	if mmUpdateConversation.mock.funcUpdateConversation != nil {
		mmUpdateConversation.mock.t.Fatalf("AppPublicServiceServerMock.UpdateConversation mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockUpdateConversationExpectation{
		mock:               mmUpdateConversation.mock,
		params:             &AppPublicServiceServerMockUpdateConversationParams{ctx, up1},
		expectationOrigins: AppPublicServiceServerMockUpdateConversationExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateConversation.expectations = append(mmUpdateConversation.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.UpdateConversation return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockUpdateConversationExpectation) Then(up2 *mm_appv1alpha.UpdateConversationResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockUpdateConversationResults{up2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.UpdateConversation should be invoked
func (mmUpdateConversation *mAppPublicServiceServerMockUpdateConversation) Times(n uint64) *mAppPublicServiceServerMockUpdateConversation {
	if n == 0 {
		mmUpdateConversation.mock.t.Fatalf("Times of AppPublicServiceServerMock.UpdateConversation mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateConversation.expectedInvocations, n)
	mmUpdateConversation.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateConversation
}

func (mmUpdateConversation *mAppPublicServiceServerMockUpdateConversation) invocationsDone() bool {
	if len(mmUpdateConversation.expectations) == 0 && mmUpdateConversation.defaultExpectation == nil && mmUpdateConversation.mock.funcUpdateConversation == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateConversation.mock.afterUpdateConversationCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateConversation.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateConversation implements mm_appv1alpha.AppPublicServiceServer
func (mmUpdateConversation *AppPublicServiceServerMock) UpdateConversation(ctx context.Context, up1 *mm_appv1alpha.UpdateConversationRequest) (up2 *mm_appv1alpha.UpdateConversationResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateConversation.beforeUpdateConversationCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateConversation.afterUpdateConversationCounter, 1)

	mmUpdateConversation.t.Helper()

	if mmUpdateConversation.inspectFuncUpdateConversation != nil {
		mmUpdateConversation.inspectFuncUpdateConversation(ctx, up1)
	}

	mm_params := AppPublicServiceServerMockUpdateConversationParams{ctx, up1}

	// Record call args
	mmUpdateConversation.UpdateConversationMock.mutex.Lock()
	mmUpdateConversation.UpdateConversationMock.callArgs = append(mmUpdateConversation.UpdateConversationMock.callArgs, &mm_params)
	mmUpdateConversation.UpdateConversationMock.mutex.Unlock()

	for _, e := range mmUpdateConversation.UpdateConversationMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateConversation.UpdateConversationMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateConversation.UpdateConversationMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateConversation.UpdateConversationMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateConversation.UpdateConversationMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockUpdateConversationParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateConversation.t.Errorf("AppPublicServiceServerMock.UpdateConversation got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateConversation.UpdateConversationMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateConversation.t.Errorf("AppPublicServiceServerMock.UpdateConversation got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateConversation.UpdateConversationMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateConversation.t.Errorf("AppPublicServiceServerMock.UpdateConversation got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateConversation.UpdateConversationMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateConversation.UpdateConversationMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateConversation.t.Fatal("No results are set for the AppPublicServiceServerMock.UpdateConversation")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateConversation.funcUpdateConversation != nil {
		return mmUpdateConversation.funcUpdateConversation(ctx, up1)
	}
	mmUpdateConversation.t.Fatalf("Unexpected call to AppPublicServiceServerMock.UpdateConversation. %v %v", ctx, up1)
	return
}

// UpdateConversationAfterCounter returns a count of finished AppPublicServiceServerMock.UpdateConversation invocations
func (mmUpdateConversation *AppPublicServiceServerMock) UpdateConversationAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateConversation.afterUpdateConversationCounter)
}

// UpdateConversationBeforeCounter returns a count of AppPublicServiceServerMock.UpdateConversation invocations
func (mmUpdateConversation *AppPublicServiceServerMock) UpdateConversationBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateConversation.beforeUpdateConversationCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.UpdateConversation.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateConversation *mAppPublicServiceServerMockUpdateConversation) Calls() []*AppPublicServiceServerMockUpdateConversationParams {
	mmUpdateConversation.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockUpdateConversationParams, len(mmUpdateConversation.callArgs))
	copy(argCopy, mmUpdateConversation.callArgs)

	mmUpdateConversation.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateConversationDone returns true if the count of the UpdateConversation invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockUpdateConversationDone() bool {
	if m.UpdateConversationMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateConversationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateConversationMock.invocationsDone()
}

// MinimockUpdateConversationInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockUpdateConversationInspect() {
	for _, e := range m.UpdateConversationMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateConversation at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateConversationCounter := mm_atomic.LoadUint64(&m.afterUpdateConversationCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateConversationMock.defaultExpectation != nil && afterUpdateConversationCounter < 1 {
		if m.UpdateConversationMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateConversation at\n%s", m.UpdateConversationMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateConversation at\n%s with params: %#v", m.UpdateConversationMock.defaultExpectation.expectationOrigins.origin, *m.UpdateConversationMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateConversation != nil && afterUpdateConversationCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateConversation at\n%s", m.funcUpdateConversationOrigin)
	}

	if !m.UpdateConversationMock.invocationsDone() && afterUpdateConversationCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.UpdateConversation at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateConversationMock.expectedInvocations), m.UpdateConversationMock.expectedInvocationsOrigin, afterUpdateConversationCounter)
	}
}

type mAppPublicServiceServerMockUpdateMessage struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockUpdateMessageExpectation
	expectations       []*AppPublicServiceServerMockUpdateMessageExpectation

	callArgs []*AppPublicServiceServerMockUpdateMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockUpdateMessageExpectation specifies expectation struct of the AppPublicServiceServer.UpdateMessage
type AppPublicServiceServerMockUpdateMessageExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockUpdateMessageParams
	paramPtrs          *AppPublicServiceServerMockUpdateMessageParamPtrs
	expectationOrigins AppPublicServiceServerMockUpdateMessageExpectationOrigins
	results            *AppPublicServiceServerMockUpdateMessageResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockUpdateMessageParams contains parameters of the AppPublicServiceServer.UpdateMessage
type AppPublicServiceServerMockUpdateMessageParams struct {
	ctx context.Context
	up1 *mm_appv1alpha.UpdateMessageRequest
}

// AppPublicServiceServerMockUpdateMessageParamPtrs contains pointers to parameters of the AppPublicServiceServer.UpdateMessage
type AppPublicServiceServerMockUpdateMessageParamPtrs struct {
	ctx *context.Context
	up1 **mm_appv1alpha.UpdateMessageRequest
}

// AppPublicServiceServerMockUpdateMessageResults contains results of the AppPublicServiceServer.UpdateMessage
type AppPublicServiceServerMockUpdateMessageResults struct {
	up2 *mm_appv1alpha.UpdateMessageResponse
	err error
}

// AppPublicServiceServerMockUpdateMessageOrigins contains origins of expectations of the AppPublicServiceServer.UpdateMessage
type AppPublicServiceServerMockUpdateMessageExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateMessage *mAppPublicServiceServerMockUpdateMessage) Optional() *mAppPublicServiceServerMockUpdateMessage {
	mmUpdateMessage.optional = true
	return mmUpdateMessage
}

// Expect sets up expected params for AppPublicServiceServer.UpdateMessage
func (mmUpdateMessage *mAppPublicServiceServerMockUpdateMessage) Expect(ctx context.Context, up1 *mm_appv1alpha.UpdateMessageRequest) *mAppPublicServiceServerMockUpdateMessage {
	if mmUpdateMessage.mock.funcUpdateMessage != nil {
		mmUpdateMessage.mock.t.Fatalf("AppPublicServiceServerMock.UpdateMessage mock is already set by Set")
	}

	if mmUpdateMessage.defaultExpectation == nil {
		mmUpdateMessage.defaultExpectation = &AppPublicServiceServerMockUpdateMessageExpectation{}
	}

	if mmUpdateMessage.defaultExpectation.paramPtrs != nil {
		mmUpdateMessage.mock.t.Fatalf("AppPublicServiceServerMock.UpdateMessage mock is already set by ExpectParams functions")
	}

	mmUpdateMessage.defaultExpectation.params = &AppPublicServiceServerMockUpdateMessageParams{ctx, up1}
	mmUpdateMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateMessage.expectations {
		if minimock.Equal(e.params, mmUpdateMessage.defaultExpectation.params) {
			mmUpdateMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateMessage.defaultExpectation.params)
		}
	}

	return mmUpdateMessage
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.UpdateMessage
func (mmUpdateMessage *mAppPublicServiceServerMockUpdateMessage) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockUpdateMessage {
	if mmUpdateMessage.mock.funcUpdateMessage != nil {
		mmUpdateMessage.mock.t.Fatalf("AppPublicServiceServerMock.UpdateMessage mock is already set by Set")
	}

	if mmUpdateMessage.defaultExpectation == nil {
		mmUpdateMessage.defaultExpectation = &AppPublicServiceServerMockUpdateMessageExpectation{}
	}

	if mmUpdateMessage.defaultExpectation.params != nil {
		mmUpdateMessage.mock.t.Fatalf("AppPublicServiceServerMock.UpdateMessage mock is already set by Expect")
	}

	if mmUpdateMessage.defaultExpectation.paramPtrs == nil {
		mmUpdateMessage.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateMessageParamPtrs{}
	}
	mmUpdateMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateMessage
}

// ExpectUp1Param2 sets up expected param up1 for AppPublicServiceServer.UpdateMessage
func (mmUpdateMessage *mAppPublicServiceServerMockUpdateMessage) ExpectUp1Param2(up1 *mm_appv1alpha.UpdateMessageRequest) *mAppPublicServiceServerMockUpdateMessage {
	if mmUpdateMessage.mock.funcUpdateMessage != nil {
		mmUpdateMessage.mock.t.Fatalf("AppPublicServiceServerMock.UpdateMessage mock is already set by Set")
	}

	if mmUpdateMessage.defaultExpectation == nil {
		mmUpdateMessage.defaultExpectation = &AppPublicServiceServerMockUpdateMessageExpectation{}
	}

	if mmUpdateMessage.defaultExpectation.params != nil {
		mmUpdateMessage.mock.t.Fatalf("AppPublicServiceServerMock.UpdateMessage mock is already set by Expect")
	}

	if mmUpdateMessage.defaultExpectation.paramPtrs == nil {
		mmUpdateMessage.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateMessageParamPtrs{}
	}
	mmUpdateMessage.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateMessage.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateMessage
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.UpdateMessage
func (mmUpdateMessage *mAppPublicServiceServerMockUpdateMessage) Inspect(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateMessageRequest)) *mAppPublicServiceServerMockUpdateMessage {
	if mmUpdateMessage.mock.inspectFuncUpdateMessage != nil {
		mmUpdateMessage.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.UpdateMessage")
	}

	mmUpdateMessage.mock.inspectFuncUpdateMessage = f

	return mmUpdateMessage
}

// Return sets up results that will be returned by AppPublicServiceServer.UpdateMessage
func (mmUpdateMessage *mAppPublicServiceServerMockUpdateMessage) Return(up2 *mm_appv1alpha.UpdateMessageResponse, err error) *AppPublicServiceServerMock {
	if mmUpdateMessage.mock.funcUpdateMessage != nil {
		mmUpdateMessage.mock.t.Fatalf("AppPublicServiceServerMock.UpdateMessage mock is already set by Set")
	}

	if mmUpdateMessage.defaultExpectation == nil {
		mmUpdateMessage.defaultExpectation = &AppPublicServiceServerMockUpdateMessageExpectation{mock: mmUpdateMessage.mock}
	}
	mmUpdateMessage.defaultExpectation.results = &AppPublicServiceServerMockUpdateMessageResults{up2, err}
	mmUpdateMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateMessage.mock
}

// Set uses given function f to mock the AppPublicServiceServer.UpdateMessage method
func (mmUpdateMessage *mAppPublicServiceServerMockUpdateMessage) Set(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateMessageRequest) (up2 *mm_appv1alpha.UpdateMessageResponse, err error)) *AppPublicServiceServerMock {
	if mmUpdateMessage.defaultExpectation != nil {
		mmUpdateMessage.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.UpdateMessage method")
	}

	if len(mmUpdateMessage.expectations) > 0 {
		mmUpdateMessage.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.UpdateMessage method")
	}

	mmUpdateMessage.mock.funcUpdateMessage = f
	mmUpdateMessage.mock.funcUpdateMessageOrigin = minimock.CallerInfo(1)
	return mmUpdateMessage.mock
}

// When sets expectation for the AppPublicServiceServer.UpdateMessage which will trigger the result defined by the following
// Then helper
func (mmUpdateMessage *mAppPublicServiceServerMockUpdateMessage) When(ctx context.Context, up1 *mm_appv1alpha.UpdateMessageRequest) *AppPublicServiceServerMockUpdateMessageExpectation {
	if mmUpdateMessage.mock.funcUpdateMessage != nil {
		mmUpdateMessage.mock.t.Fatalf("AppPublicServiceServerMock.UpdateMessage mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockUpdateMessageExpectation{
		mock:               mmUpdateMessage.mock,
		params:             &AppPublicServiceServerMockUpdateMessageParams{ctx, up1},
		expectationOrigins: AppPublicServiceServerMockUpdateMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateMessage.expectations = append(mmUpdateMessage.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.UpdateMessage return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockUpdateMessageExpectation) Then(up2 *mm_appv1alpha.UpdateMessageResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockUpdateMessageResults{up2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.UpdateMessage should be invoked
func (mmUpdateMessage *mAppPublicServiceServerMockUpdateMessage) Times(n uint64) *mAppPublicServiceServerMockUpdateMessage {
	if n == 0 {
		mmUpdateMessage.mock.t.Fatalf("Times of AppPublicServiceServerMock.UpdateMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateMessage.expectedInvocations, n)
	mmUpdateMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateMessage
}

func (mmUpdateMessage *mAppPublicServiceServerMockUpdateMessage) invocationsDone() bool {
	if len(mmUpdateMessage.expectations) == 0 && mmUpdateMessage.defaultExpectation == nil && mmUpdateMessage.mock.funcUpdateMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateMessage.mock.afterUpdateMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateMessage implements mm_appv1alpha.AppPublicServiceServer
func (mmUpdateMessage *AppPublicServiceServerMock) UpdateMessage(ctx context.Context, up1 *mm_appv1alpha.UpdateMessageRequest) (up2 *mm_appv1alpha.UpdateMessageResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateMessage.beforeUpdateMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateMessage.afterUpdateMessageCounter, 1)

	mmUpdateMessage.t.Helper()

	if mmUpdateMessage.inspectFuncUpdateMessage != nil {
		mmUpdateMessage.inspectFuncUpdateMessage(ctx, up1)
	}

	mm_params := AppPublicServiceServerMockUpdateMessageParams{ctx, up1}

	// Record call args
	mmUpdateMessage.UpdateMessageMock.mutex.Lock()
	mmUpdateMessage.UpdateMessageMock.callArgs = append(mmUpdateMessage.UpdateMessageMock.callArgs, &mm_params)
	mmUpdateMessage.UpdateMessageMock.mutex.Unlock()

	for _, e := range mmUpdateMessage.UpdateMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateMessage.UpdateMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateMessage.UpdateMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateMessage.UpdateMessageMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateMessage.UpdateMessageMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockUpdateMessageParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateMessage.t.Errorf("AppPublicServiceServerMock.UpdateMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateMessage.UpdateMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateMessage.t.Errorf("AppPublicServiceServerMock.UpdateMessage got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateMessage.UpdateMessageMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateMessage.t.Errorf("AppPublicServiceServerMock.UpdateMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateMessage.UpdateMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateMessage.UpdateMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateMessage.t.Fatal("No results are set for the AppPublicServiceServerMock.UpdateMessage")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateMessage.funcUpdateMessage != nil {
		return mmUpdateMessage.funcUpdateMessage(ctx, up1)
	}
	mmUpdateMessage.t.Fatalf("Unexpected call to AppPublicServiceServerMock.UpdateMessage. %v %v", ctx, up1)
	return
}

// UpdateMessageAfterCounter returns a count of finished AppPublicServiceServerMock.UpdateMessage invocations
func (mmUpdateMessage *AppPublicServiceServerMock) UpdateMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateMessage.afterUpdateMessageCounter)
}

// UpdateMessageBeforeCounter returns a count of AppPublicServiceServerMock.UpdateMessage invocations
func (mmUpdateMessage *AppPublicServiceServerMock) UpdateMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateMessage.beforeUpdateMessageCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.UpdateMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateMessage *mAppPublicServiceServerMockUpdateMessage) Calls() []*AppPublicServiceServerMockUpdateMessageParams {
	mmUpdateMessage.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockUpdateMessageParams, len(mmUpdateMessage.callArgs))
	copy(argCopy, mmUpdateMessage.callArgs)

	mmUpdateMessage.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateMessageDone returns true if the count of the UpdateMessage invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockUpdateMessageDone() bool {
	if m.UpdateMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateMessageMock.invocationsDone()
}

// MinimockUpdateMessageInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockUpdateMessageInspect() {
	for _, e := range m.UpdateMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateMessageCounter := mm_atomic.LoadUint64(&m.afterUpdateMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMessageMock.defaultExpectation != nil && afterUpdateMessageCounter < 1 {
		if m.UpdateMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateMessage at\n%s", m.UpdateMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateMessage at\n%s with params: %#v", m.UpdateMessageMock.defaultExpectation.expectationOrigins.origin, *m.UpdateMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateMessage != nil && afterUpdateMessageCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateMessage at\n%s", m.funcUpdateMessageOrigin)
	}

	if !m.UpdateMessageMock.invocationsDone() && afterUpdateMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.UpdateMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateMessageMock.expectedInvocations), m.UpdateMessageMock.expectedInvocationsOrigin, afterUpdateMessageCounter)
	}
}

type mAppPublicServiceServerMockUpdateRow struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockUpdateRowExpectation
	expectations       []*AppPublicServiceServerMockUpdateRowExpectation

	callArgs []*AppPublicServiceServerMockUpdateRowParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockUpdateRowExpectation specifies expectation struct of the AppPublicServiceServer.UpdateRow
type AppPublicServiceServerMockUpdateRowExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockUpdateRowParams
	paramPtrs          *AppPublicServiceServerMockUpdateRowParamPtrs
	expectationOrigins AppPublicServiceServerMockUpdateRowExpectationOrigins
	results            *AppPublicServiceServerMockUpdateRowResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockUpdateRowParams contains parameters of the AppPublicServiceServer.UpdateRow
type AppPublicServiceServerMockUpdateRowParams struct {
	ctx context.Context
	up1 *mm_appv1alpha.UpdateRowRequest
}

// AppPublicServiceServerMockUpdateRowParamPtrs contains pointers to parameters of the AppPublicServiceServer.UpdateRow
type AppPublicServiceServerMockUpdateRowParamPtrs struct {
	ctx *context.Context
	up1 **mm_appv1alpha.UpdateRowRequest
}

// AppPublicServiceServerMockUpdateRowResults contains results of the AppPublicServiceServer.UpdateRow
type AppPublicServiceServerMockUpdateRowResults struct {
	up2 *mm_appv1alpha.UpdateRowResponse
	err error
}

// AppPublicServiceServerMockUpdateRowOrigins contains origins of expectations of the AppPublicServiceServer.UpdateRow
type AppPublicServiceServerMockUpdateRowExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateRow *mAppPublicServiceServerMockUpdateRow) Optional() *mAppPublicServiceServerMockUpdateRow {
	mmUpdateRow.optional = true
	return mmUpdateRow
}

// Expect sets up expected params for AppPublicServiceServer.UpdateRow
func (mmUpdateRow *mAppPublicServiceServerMockUpdateRow) Expect(ctx context.Context, up1 *mm_appv1alpha.UpdateRowRequest) *mAppPublicServiceServerMockUpdateRow {
	if mmUpdateRow.mock.funcUpdateRow != nil {
		mmUpdateRow.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRow mock is already set by Set")
	}

	if mmUpdateRow.defaultExpectation == nil {
		mmUpdateRow.defaultExpectation = &AppPublicServiceServerMockUpdateRowExpectation{}
	}

	if mmUpdateRow.defaultExpectation.paramPtrs != nil {
		mmUpdateRow.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRow mock is already set by ExpectParams functions")
	}

	mmUpdateRow.defaultExpectation.params = &AppPublicServiceServerMockUpdateRowParams{ctx, up1}
	mmUpdateRow.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateRow.expectations {
		if minimock.Equal(e.params, mmUpdateRow.defaultExpectation.params) {
			mmUpdateRow.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateRow.defaultExpectation.params)
		}
	}

	return mmUpdateRow
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.UpdateRow
func (mmUpdateRow *mAppPublicServiceServerMockUpdateRow) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockUpdateRow {
	if mmUpdateRow.mock.funcUpdateRow != nil {
		mmUpdateRow.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRow mock is already set by Set")
	}

	if mmUpdateRow.defaultExpectation == nil {
		mmUpdateRow.defaultExpectation = &AppPublicServiceServerMockUpdateRowExpectation{}
	}

	if mmUpdateRow.defaultExpectation.params != nil {
		mmUpdateRow.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRow mock is already set by Expect")
	}

	if mmUpdateRow.defaultExpectation.paramPtrs == nil {
		mmUpdateRow.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateRowParamPtrs{}
	}
	mmUpdateRow.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateRow.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateRow
}

// ExpectUp1Param2 sets up expected param up1 for AppPublicServiceServer.UpdateRow
func (mmUpdateRow *mAppPublicServiceServerMockUpdateRow) ExpectUp1Param2(up1 *mm_appv1alpha.UpdateRowRequest) *mAppPublicServiceServerMockUpdateRow {
	if mmUpdateRow.mock.funcUpdateRow != nil {
		mmUpdateRow.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRow mock is already set by Set")
	}

	if mmUpdateRow.defaultExpectation == nil {
		mmUpdateRow.defaultExpectation = &AppPublicServiceServerMockUpdateRowExpectation{}
	}

	if mmUpdateRow.defaultExpectation.params != nil {
		mmUpdateRow.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRow mock is already set by Expect")
	}

	if mmUpdateRow.defaultExpectation.paramPtrs == nil {
		mmUpdateRow.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateRowParamPtrs{}
	}
	mmUpdateRow.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateRow.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateRow
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.UpdateRow
func (mmUpdateRow *mAppPublicServiceServerMockUpdateRow) Inspect(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateRowRequest)) *mAppPublicServiceServerMockUpdateRow {
	if mmUpdateRow.mock.inspectFuncUpdateRow != nil {
		mmUpdateRow.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.UpdateRow")
	}

	mmUpdateRow.mock.inspectFuncUpdateRow = f

	return mmUpdateRow
}

// Return sets up results that will be returned by AppPublicServiceServer.UpdateRow
func (mmUpdateRow *mAppPublicServiceServerMockUpdateRow) Return(up2 *mm_appv1alpha.UpdateRowResponse, err error) *AppPublicServiceServerMock {
	if mmUpdateRow.mock.funcUpdateRow != nil {
		mmUpdateRow.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRow mock is already set by Set")
	}

	if mmUpdateRow.defaultExpectation == nil {
		mmUpdateRow.defaultExpectation = &AppPublicServiceServerMockUpdateRowExpectation{mock: mmUpdateRow.mock}
	}
	mmUpdateRow.defaultExpectation.results = &AppPublicServiceServerMockUpdateRowResults{up2, err}
	mmUpdateRow.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateRow.mock
}

// Set uses given function f to mock the AppPublicServiceServer.UpdateRow method
func (mmUpdateRow *mAppPublicServiceServerMockUpdateRow) Set(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateRowRequest) (up2 *mm_appv1alpha.UpdateRowResponse, err error)) *AppPublicServiceServerMock {
	if mmUpdateRow.defaultExpectation != nil {
		mmUpdateRow.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.UpdateRow method")
	}

	if len(mmUpdateRow.expectations) > 0 {
		mmUpdateRow.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.UpdateRow method")
	}

	mmUpdateRow.mock.funcUpdateRow = f
	mmUpdateRow.mock.funcUpdateRowOrigin = minimock.CallerInfo(1)
	return mmUpdateRow.mock
}

// When sets expectation for the AppPublicServiceServer.UpdateRow which will trigger the result defined by the following
// Then helper
func (mmUpdateRow *mAppPublicServiceServerMockUpdateRow) When(ctx context.Context, up1 *mm_appv1alpha.UpdateRowRequest) *AppPublicServiceServerMockUpdateRowExpectation {
	if mmUpdateRow.mock.funcUpdateRow != nil {
		mmUpdateRow.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRow mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockUpdateRowExpectation{
		mock:               mmUpdateRow.mock,
		params:             &AppPublicServiceServerMockUpdateRowParams{ctx, up1},
		expectationOrigins: AppPublicServiceServerMockUpdateRowExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateRow.expectations = append(mmUpdateRow.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.UpdateRow return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockUpdateRowExpectation) Then(up2 *mm_appv1alpha.UpdateRowResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockUpdateRowResults{up2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.UpdateRow should be invoked
func (mmUpdateRow *mAppPublicServiceServerMockUpdateRow) Times(n uint64) *mAppPublicServiceServerMockUpdateRow {
	if n == 0 {
		mmUpdateRow.mock.t.Fatalf("Times of AppPublicServiceServerMock.UpdateRow mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateRow.expectedInvocations, n)
	mmUpdateRow.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateRow
}

func (mmUpdateRow *mAppPublicServiceServerMockUpdateRow) invocationsDone() bool {
	if len(mmUpdateRow.expectations) == 0 && mmUpdateRow.defaultExpectation == nil && mmUpdateRow.mock.funcUpdateRow == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateRow.mock.afterUpdateRowCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateRow.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateRow implements mm_appv1alpha.AppPublicServiceServer
func (mmUpdateRow *AppPublicServiceServerMock) UpdateRow(ctx context.Context, up1 *mm_appv1alpha.UpdateRowRequest) (up2 *mm_appv1alpha.UpdateRowResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateRow.beforeUpdateRowCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateRow.afterUpdateRowCounter, 1)

	mmUpdateRow.t.Helper()

	if mmUpdateRow.inspectFuncUpdateRow != nil {
		mmUpdateRow.inspectFuncUpdateRow(ctx, up1)
	}

	mm_params := AppPublicServiceServerMockUpdateRowParams{ctx, up1}

	// Record call args
	mmUpdateRow.UpdateRowMock.mutex.Lock()
	mmUpdateRow.UpdateRowMock.callArgs = append(mmUpdateRow.UpdateRowMock.callArgs, &mm_params)
	mmUpdateRow.UpdateRowMock.mutex.Unlock()

	for _, e := range mmUpdateRow.UpdateRowMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateRow.UpdateRowMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateRow.UpdateRowMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateRow.UpdateRowMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateRow.UpdateRowMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockUpdateRowParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateRow.t.Errorf("AppPublicServiceServerMock.UpdateRow got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateRow.UpdateRowMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateRow.t.Errorf("AppPublicServiceServerMock.UpdateRow got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateRow.UpdateRowMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateRow.t.Errorf("AppPublicServiceServerMock.UpdateRow got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateRow.UpdateRowMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateRow.UpdateRowMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateRow.t.Fatal("No results are set for the AppPublicServiceServerMock.UpdateRow")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateRow.funcUpdateRow != nil {
		return mmUpdateRow.funcUpdateRow(ctx, up1)
	}
	mmUpdateRow.t.Fatalf("Unexpected call to AppPublicServiceServerMock.UpdateRow. %v %v", ctx, up1)
	return
}

// UpdateRowAfterCounter returns a count of finished AppPublicServiceServerMock.UpdateRow invocations
func (mmUpdateRow *AppPublicServiceServerMock) UpdateRowAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateRow.afterUpdateRowCounter)
}

// UpdateRowBeforeCounter returns a count of AppPublicServiceServerMock.UpdateRow invocations
func (mmUpdateRow *AppPublicServiceServerMock) UpdateRowBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateRow.beforeUpdateRowCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.UpdateRow.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateRow *mAppPublicServiceServerMockUpdateRow) Calls() []*AppPublicServiceServerMockUpdateRowParams {
	mmUpdateRow.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockUpdateRowParams, len(mmUpdateRow.callArgs))
	copy(argCopy, mmUpdateRow.callArgs)

	mmUpdateRow.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateRowDone returns true if the count of the UpdateRow invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockUpdateRowDone() bool {
	if m.UpdateRowMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateRowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateRowMock.invocationsDone()
}

// MinimockUpdateRowInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockUpdateRowInspect() {
	for _, e := range m.UpdateRowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateRow at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateRowCounter := mm_atomic.LoadUint64(&m.afterUpdateRowCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateRowMock.defaultExpectation != nil && afterUpdateRowCounter < 1 {
		if m.UpdateRowMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateRow at\n%s", m.UpdateRowMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateRow at\n%s with params: %#v", m.UpdateRowMock.defaultExpectation.expectationOrigins.origin, *m.UpdateRowMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateRow != nil && afterUpdateRowCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateRow at\n%s", m.funcUpdateRowOrigin)
	}

	if !m.UpdateRowMock.invocationsDone() && afterUpdateRowCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.UpdateRow at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateRowMock.expectedInvocations), m.UpdateRowMock.expectedInvocationsOrigin, afterUpdateRowCounter)
	}
}

type mAppPublicServiceServerMockUpdateRows struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockUpdateRowsExpectation
	expectations       []*AppPublicServiceServerMockUpdateRowsExpectation

	callArgs []*AppPublicServiceServerMockUpdateRowsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockUpdateRowsExpectation specifies expectation struct of the AppPublicServiceServer.UpdateRows
type AppPublicServiceServerMockUpdateRowsExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockUpdateRowsParams
	paramPtrs          *AppPublicServiceServerMockUpdateRowsParamPtrs
	expectationOrigins AppPublicServiceServerMockUpdateRowsExpectationOrigins
	results            *AppPublicServiceServerMockUpdateRowsResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockUpdateRowsParams contains parameters of the AppPublicServiceServer.UpdateRows
type AppPublicServiceServerMockUpdateRowsParams struct {
	ctx context.Context
	up1 *mm_appv1alpha.UpdateRowsRequest
}

// AppPublicServiceServerMockUpdateRowsParamPtrs contains pointers to parameters of the AppPublicServiceServer.UpdateRows
type AppPublicServiceServerMockUpdateRowsParamPtrs struct {
	ctx *context.Context
	up1 **mm_appv1alpha.UpdateRowsRequest
}

// AppPublicServiceServerMockUpdateRowsResults contains results of the AppPublicServiceServer.UpdateRows
type AppPublicServiceServerMockUpdateRowsResults struct {
	up2 *mm_appv1alpha.UpdateRowsResponse
	err error
}

// AppPublicServiceServerMockUpdateRowsOrigins contains origins of expectations of the AppPublicServiceServer.UpdateRows
type AppPublicServiceServerMockUpdateRowsExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateRows *mAppPublicServiceServerMockUpdateRows) Optional() *mAppPublicServiceServerMockUpdateRows {
	mmUpdateRows.optional = true
	return mmUpdateRows
}

// Expect sets up expected params for AppPublicServiceServer.UpdateRows
func (mmUpdateRows *mAppPublicServiceServerMockUpdateRows) Expect(ctx context.Context, up1 *mm_appv1alpha.UpdateRowsRequest) *mAppPublicServiceServerMockUpdateRows {
	if mmUpdateRows.mock.funcUpdateRows != nil {
		mmUpdateRows.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRows mock is already set by Set")
	}

	if mmUpdateRows.defaultExpectation == nil {
		mmUpdateRows.defaultExpectation = &AppPublicServiceServerMockUpdateRowsExpectation{}
	}

	if mmUpdateRows.defaultExpectation.paramPtrs != nil {
		mmUpdateRows.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRows mock is already set by ExpectParams functions")
	}

	mmUpdateRows.defaultExpectation.params = &AppPublicServiceServerMockUpdateRowsParams{ctx, up1}
	mmUpdateRows.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateRows.expectations {
		if minimock.Equal(e.params, mmUpdateRows.defaultExpectation.params) {
			mmUpdateRows.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateRows.defaultExpectation.params)
		}
	}

	return mmUpdateRows
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.UpdateRows
func (mmUpdateRows *mAppPublicServiceServerMockUpdateRows) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockUpdateRows {
	if mmUpdateRows.mock.funcUpdateRows != nil {
		mmUpdateRows.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRows mock is already set by Set")
	}

	if mmUpdateRows.defaultExpectation == nil {
		mmUpdateRows.defaultExpectation = &AppPublicServiceServerMockUpdateRowsExpectation{}
	}

	if mmUpdateRows.defaultExpectation.params != nil {
		mmUpdateRows.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRows mock is already set by Expect")
	}

	if mmUpdateRows.defaultExpectation.paramPtrs == nil {
		mmUpdateRows.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateRowsParamPtrs{}
	}
	mmUpdateRows.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateRows.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateRows
}

// ExpectUp1Param2 sets up expected param up1 for AppPublicServiceServer.UpdateRows
func (mmUpdateRows *mAppPublicServiceServerMockUpdateRows) ExpectUp1Param2(up1 *mm_appv1alpha.UpdateRowsRequest) *mAppPublicServiceServerMockUpdateRows {
	if mmUpdateRows.mock.funcUpdateRows != nil {
		mmUpdateRows.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRows mock is already set by Set")
	}

	if mmUpdateRows.defaultExpectation == nil {
		mmUpdateRows.defaultExpectation = &AppPublicServiceServerMockUpdateRowsExpectation{}
	}

	if mmUpdateRows.defaultExpectation.params != nil {
		mmUpdateRows.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRows mock is already set by Expect")
	}

	if mmUpdateRows.defaultExpectation.paramPtrs == nil {
		mmUpdateRows.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateRowsParamPtrs{}
	}
	mmUpdateRows.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateRows.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateRows
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.UpdateRows
func (mmUpdateRows *mAppPublicServiceServerMockUpdateRows) Inspect(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateRowsRequest)) *mAppPublicServiceServerMockUpdateRows {
	if mmUpdateRows.mock.inspectFuncUpdateRows != nil {
		mmUpdateRows.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.UpdateRows")
	}

	mmUpdateRows.mock.inspectFuncUpdateRows = f

	return mmUpdateRows
}

// Return sets up results that will be returned by AppPublicServiceServer.UpdateRows
func (mmUpdateRows *mAppPublicServiceServerMockUpdateRows) Return(up2 *mm_appv1alpha.UpdateRowsResponse, err error) *AppPublicServiceServerMock {
	if mmUpdateRows.mock.funcUpdateRows != nil {
		mmUpdateRows.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRows mock is already set by Set")
	}

	if mmUpdateRows.defaultExpectation == nil {
		mmUpdateRows.defaultExpectation = &AppPublicServiceServerMockUpdateRowsExpectation{mock: mmUpdateRows.mock}
	}
	mmUpdateRows.defaultExpectation.results = &AppPublicServiceServerMockUpdateRowsResults{up2, err}
	mmUpdateRows.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateRows.mock
}

// Set uses given function f to mock the AppPublicServiceServer.UpdateRows method
func (mmUpdateRows *mAppPublicServiceServerMockUpdateRows) Set(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateRowsRequest) (up2 *mm_appv1alpha.UpdateRowsResponse, err error)) *AppPublicServiceServerMock {
	if mmUpdateRows.defaultExpectation != nil {
		mmUpdateRows.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.UpdateRows method")
	}

	if len(mmUpdateRows.expectations) > 0 {
		mmUpdateRows.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.UpdateRows method")
	}

	mmUpdateRows.mock.funcUpdateRows = f
	mmUpdateRows.mock.funcUpdateRowsOrigin = minimock.CallerInfo(1)
	return mmUpdateRows.mock
}

// When sets expectation for the AppPublicServiceServer.UpdateRows which will trigger the result defined by the following
// Then helper
func (mmUpdateRows *mAppPublicServiceServerMockUpdateRows) When(ctx context.Context, up1 *mm_appv1alpha.UpdateRowsRequest) *AppPublicServiceServerMockUpdateRowsExpectation {
	if mmUpdateRows.mock.funcUpdateRows != nil {
		mmUpdateRows.mock.t.Fatalf("AppPublicServiceServerMock.UpdateRows mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockUpdateRowsExpectation{
		mock:               mmUpdateRows.mock,
		params:             &AppPublicServiceServerMockUpdateRowsParams{ctx, up1},
		expectationOrigins: AppPublicServiceServerMockUpdateRowsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateRows.expectations = append(mmUpdateRows.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.UpdateRows return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockUpdateRowsExpectation) Then(up2 *mm_appv1alpha.UpdateRowsResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockUpdateRowsResults{up2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.UpdateRows should be invoked
func (mmUpdateRows *mAppPublicServiceServerMockUpdateRows) Times(n uint64) *mAppPublicServiceServerMockUpdateRows {
	if n == 0 {
		mmUpdateRows.mock.t.Fatalf("Times of AppPublicServiceServerMock.UpdateRows mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateRows.expectedInvocations, n)
	mmUpdateRows.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateRows
}

func (mmUpdateRows *mAppPublicServiceServerMockUpdateRows) invocationsDone() bool {
	if len(mmUpdateRows.expectations) == 0 && mmUpdateRows.defaultExpectation == nil && mmUpdateRows.mock.funcUpdateRows == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateRows.mock.afterUpdateRowsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateRows.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateRows implements mm_appv1alpha.AppPublicServiceServer
func (mmUpdateRows *AppPublicServiceServerMock) UpdateRows(ctx context.Context, up1 *mm_appv1alpha.UpdateRowsRequest) (up2 *mm_appv1alpha.UpdateRowsResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateRows.beforeUpdateRowsCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateRows.afterUpdateRowsCounter, 1)

	mmUpdateRows.t.Helper()

	if mmUpdateRows.inspectFuncUpdateRows != nil {
		mmUpdateRows.inspectFuncUpdateRows(ctx, up1)
	}

	mm_params := AppPublicServiceServerMockUpdateRowsParams{ctx, up1}

	// Record call args
	mmUpdateRows.UpdateRowsMock.mutex.Lock()
	mmUpdateRows.UpdateRowsMock.callArgs = append(mmUpdateRows.UpdateRowsMock.callArgs, &mm_params)
	mmUpdateRows.UpdateRowsMock.mutex.Unlock()

	for _, e := range mmUpdateRows.UpdateRowsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateRows.UpdateRowsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateRows.UpdateRowsMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateRows.UpdateRowsMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateRows.UpdateRowsMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockUpdateRowsParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateRows.t.Errorf("AppPublicServiceServerMock.UpdateRows got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateRows.UpdateRowsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateRows.t.Errorf("AppPublicServiceServerMock.UpdateRows got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateRows.UpdateRowsMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateRows.t.Errorf("AppPublicServiceServerMock.UpdateRows got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateRows.UpdateRowsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateRows.UpdateRowsMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateRows.t.Fatal("No results are set for the AppPublicServiceServerMock.UpdateRows")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateRows.funcUpdateRows != nil {
		return mmUpdateRows.funcUpdateRows(ctx, up1)
	}
	mmUpdateRows.t.Fatalf("Unexpected call to AppPublicServiceServerMock.UpdateRows. %v %v", ctx, up1)
	return
}

// UpdateRowsAfterCounter returns a count of finished AppPublicServiceServerMock.UpdateRows invocations
func (mmUpdateRows *AppPublicServiceServerMock) UpdateRowsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateRows.afterUpdateRowsCounter)
}

// UpdateRowsBeforeCounter returns a count of AppPublicServiceServerMock.UpdateRows invocations
func (mmUpdateRows *AppPublicServiceServerMock) UpdateRowsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateRows.beforeUpdateRowsCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.UpdateRows.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateRows *mAppPublicServiceServerMockUpdateRows) Calls() []*AppPublicServiceServerMockUpdateRowsParams {
	mmUpdateRows.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockUpdateRowsParams, len(mmUpdateRows.callArgs))
	copy(argCopy, mmUpdateRows.callArgs)

	mmUpdateRows.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateRowsDone returns true if the count of the UpdateRows invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockUpdateRowsDone() bool {
	if m.UpdateRowsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateRowsMock.invocationsDone()
}

// MinimockUpdateRowsInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockUpdateRowsInspect() {
	for _, e := range m.UpdateRowsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateRows at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateRowsCounter := mm_atomic.LoadUint64(&m.afterUpdateRowsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateRowsMock.defaultExpectation != nil && afterUpdateRowsCounter < 1 {
		if m.UpdateRowsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateRows at\n%s", m.UpdateRowsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateRows at\n%s with params: %#v", m.UpdateRowsMock.defaultExpectation.expectationOrigins.origin, *m.UpdateRowsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateRows != nil && afterUpdateRowsCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateRows at\n%s", m.funcUpdateRowsOrigin)
	}

	if !m.UpdateRowsMock.invocationsDone() && afterUpdateRowsCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.UpdateRows at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateRowsMock.expectedInvocations), m.UpdateRowsMock.expectedInvocationsOrigin, afterUpdateRowsCounter)
	}
}

type mAppPublicServiceServerMockUpdateTable struct {
	optional           bool
	mock               *AppPublicServiceServerMock
	defaultExpectation *AppPublicServiceServerMockUpdateTableExpectation
	expectations       []*AppPublicServiceServerMockUpdateTableExpectation

	callArgs []*AppPublicServiceServerMockUpdateTableParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AppPublicServiceServerMockUpdateTableExpectation specifies expectation struct of the AppPublicServiceServer.UpdateTable
type AppPublicServiceServerMockUpdateTableExpectation struct {
	mock               *AppPublicServiceServerMock
	params             *AppPublicServiceServerMockUpdateTableParams
	paramPtrs          *AppPublicServiceServerMockUpdateTableParamPtrs
	expectationOrigins AppPublicServiceServerMockUpdateTableExpectationOrigins
	results            *AppPublicServiceServerMockUpdateTableResults
	returnOrigin       string
	Counter            uint64
}

// AppPublicServiceServerMockUpdateTableParams contains parameters of the AppPublicServiceServer.UpdateTable
type AppPublicServiceServerMockUpdateTableParams struct {
	ctx context.Context
	up1 *mm_appv1alpha.UpdateTableRequest
}

// AppPublicServiceServerMockUpdateTableParamPtrs contains pointers to parameters of the AppPublicServiceServer.UpdateTable
type AppPublicServiceServerMockUpdateTableParamPtrs struct {
	ctx *context.Context
	up1 **mm_appv1alpha.UpdateTableRequest
}

// AppPublicServiceServerMockUpdateTableResults contains results of the AppPublicServiceServer.UpdateTable
type AppPublicServiceServerMockUpdateTableResults struct {
	up2 *mm_appv1alpha.UpdateTableResponse
	err error
}

// AppPublicServiceServerMockUpdateTableOrigins contains origins of expectations of the AppPublicServiceServer.UpdateTable
type AppPublicServiceServerMockUpdateTableExpectationOrigins struct {
	origin    string
	originCtx string
	originUp1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateTable *mAppPublicServiceServerMockUpdateTable) Optional() *mAppPublicServiceServerMockUpdateTable {
	mmUpdateTable.optional = true
	return mmUpdateTable
}

// Expect sets up expected params for AppPublicServiceServer.UpdateTable
func (mmUpdateTable *mAppPublicServiceServerMockUpdateTable) Expect(ctx context.Context, up1 *mm_appv1alpha.UpdateTableRequest) *mAppPublicServiceServerMockUpdateTable {
	if mmUpdateTable.mock.funcUpdateTable != nil {
		mmUpdateTable.mock.t.Fatalf("AppPublicServiceServerMock.UpdateTable mock is already set by Set")
	}

	if mmUpdateTable.defaultExpectation == nil {
		mmUpdateTable.defaultExpectation = &AppPublicServiceServerMockUpdateTableExpectation{}
	}

	if mmUpdateTable.defaultExpectation.paramPtrs != nil {
		mmUpdateTable.mock.t.Fatalf("AppPublicServiceServerMock.UpdateTable mock is already set by ExpectParams functions")
	}

	mmUpdateTable.defaultExpectation.params = &AppPublicServiceServerMockUpdateTableParams{ctx, up1}
	mmUpdateTable.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateTable.expectations {
		if minimock.Equal(e.params, mmUpdateTable.defaultExpectation.params) {
			mmUpdateTable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateTable.defaultExpectation.params)
		}
	}

	return mmUpdateTable
}

// ExpectCtxParam1 sets up expected param ctx for AppPublicServiceServer.UpdateTable
func (mmUpdateTable *mAppPublicServiceServerMockUpdateTable) ExpectCtxParam1(ctx context.Context) *mAppPublicServiceServerMockUpdateTable {
	if mmUpdateTable.mock.funcUpdateTable != nil {
		mmUpdateTable.mock.t.Fatalf("AppPublicServiceServerMock.UpdateTable mock is already set by Set")
	}

	if mmUpdateTable.defaultExpectation == nil {
		mmUpdateTable.defaultExpectation = &AppPublicServiceServerMockUpdateTableExpectation{}
	}

	if mmUpdateTable.defaultExpectation.params != nil {
		mmUpdateTable.mock.t.Fatalf("AppPublicServiceServerMock.UpdateTable mock is already set by Expect")
	}

	if mmUpdateTable.defaultExpectation.paramPtrs == nil {
		mmUpdateTable.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateTableParamPtrs{}
	}
	mmUpdateTable.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateTable.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateTable
}

// ExpectUp1Param2 sets up expected param up1 for AppPublicServiceServer.UpdateTable
func (mmUpdateTable *mAppPublicServiceServerMockUpdateTable) ExpectUp1Param2(up1 *mm_appv1alpha.UpdateTableRequest) *mAppPublicServiceServerMockUpdateTable {
	if mmUpdateTable.mock.funcUpdateTable != nil {
		mmUpdateTable.mock.t.Fatalf("AppPublicServiceServerMock.UpdateTable mock is already set by Set")
	}

	if mmUpdateTable.defaultExpectation == nil {
		mmUpdateTable.defaultExpectation = &AppPublicServiceServerMockUpdateTableExpectation{}
	}

	if mmUpdateTable.defaultExpectation.params != nil {
		mmUpdateTable.mock.t.Fatalf("AppPublicServiceServerMock.UpdateTable mock is already set by Expect")
	}

	if mmUpdateTable.defaultExpectation.paramPtrs == nil {
		mmUpdateTable.defaultExpectation.paramPtrs = &AppPublicServiceServerMockUpdateTableParamPtrs{}
	}
	mmUpdateTable.defaultExpectation.paramPtrs.up1 = &up1
	mmUpdateTable.defaultExpectation.expectationOrigins.originUp1 = minimock.CallerInfo(1)

	return mmUpdateTable
}

// Inspect accepts an inspector function that has same arguments as the AppPublicServiceServer.UpdateTable
func (mmUpdateTable *mAppPublicServiceServerMockUpdateTable) Inspect(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateTableRequest)) *mAppPublicServiceServerMockUpdateTable {
	if mmUpdateTable.mock.inspectFuncUpdateTable != nil {
		mmUpdateTable.mock.t.Fatalf("Inspect function is already set for AppPublicServiceServerMock.UpdateTable")
	}

	mmUpdateTable.mock.inspectFuncUpdateTable = f

	return mmUpdateTable
}

// Return sets up results that will be returned by AppPublicServiceServer.UpdateTable
func (mmUpdateTable *mAppPublicServiceServerMockUpdateTable) Return(up2 *mm_appv1alpha.UpdateTableResponse, err error) *AppPublicServiceServerMock {
	if mmUpdateTable.mock.funcUpdateTable != nil {
		mmUpdateTable.mock.t.Fatalf("AppPublicServiceServerMock.UpdateTable mock is already set by Set")
	}

	if mmUpdateTable.defaultExpectation == nil {
		mmUpdateTable.defaultExpectation = &AppPublicServiceServerMockUpdateTableExpectation{mock: mmUpdateTable.mock}
	}
	mmUpdateTable.defaultExpectation.results = &AppPublicServiceServerMockUpdateTableResults{up2, err}
	mmUpdateTable.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateTable.mock
}

// Set uses given function f to mock the AppPublicServiceServer.UpdateTable method
func (mmUpdateTable *mAppPublicServiceServerMockUpdateTable) Set(f func(ctx context.Context, up1 *mm_appv1alpha.UpdateTableRequest) (up2 *mm_appv1alpha.UpdateTableResponse, err error)) *AppPublicServiceServerMock {
	if mmUpdateTable.defaultExpectation != nil {
		mmUpdateTable.mock.t.Fatalf("Default expectation is already set for the AppPublicServiceServer.UpdateTable method")
	}

	if len(mmUpdateTable.expectations) > 0 {
		mmUpdateTable.mock.t.Fatalf("Some expectations are already set for the AppPublicServiceServer.UpdateTable method")
	}

	mmUpdateTable.mock.funcUpdateTable = f
	mmUpdateTable.mock.funcUpdateTableOrigin = minimock.CallerInfo(1)
	return mmUpdateTable.mock
}

// When sets expectation for the AppPublicServiceServer.UpdateTable which will trigger the result defined by the following
// Then helper
func (mmUpdateTable *mAppPublicServiceServerMockUpdateTable) When(ctx context.Context, up1 *mm_appv1alpha.UpdateTableRequest) *AppPublicServiceServerMockUpdateTableExpectation {
	if mmUpdateTable.mock.funcUpdateTable != nil {
		mmUpdateTable.mock.t.Fatalf("AppPublicServiceServerMock.UpdateTable mock is already set by Set")
	}

	expectation := &AppPublicServiceServerMockUpdateTableExpectation{
		mock:               mmUpdateTable.mock,
		params:             &AppPublicServiceServerMockUpdateTableParams{ctx, up1},
		expectationOrigins: AppPublicServiceServerMockUpdateTableExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateTable.expectations = append(mmUpdateTable.expectations, expectation)
	return expectation
}

// Then sets up AppPublicServiceServer.UpdateTable return parameters for the expectation previously defined by the When method
func (e *AppPublicServiceServerMockUpdateTableExpectation) Then(up2 *mm_appv1alpha.UpdateTableResponse, err error) *AppPublicServiceServerMock {
	e.results = &AppPublicServiceServerMockUpdateTableResults{up2, err}
	return e.mock
}

// Times sets number of times AppPublicServiceServer.UpdateTable should be invoked
func (mmUpdateTable *mAppPublicServiceServerMockUpdateTable) Times(n uint64) *mAppPublicServiceServerMockUpdateTable {
	if n == 0 {
		mmUpdateTable.mock.t.Fatalf("Times of AppPublicServiceServerMock.UpdateTable mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateTable.expectedInvocations, n)
	mmUpdateTable.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateTable
}

func (mmUpdateTable *mAppPublicServiceServerMockUpdateTable) invocationsDone() bool {
	if len(mmUpdateTable.expectations) == 0 && mmUpdateTable.defaultExpectation == nil && mmUpdateTable.mock.funcUpdateTable == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateTable.mock.afterUpdateTableCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateTable.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateTable implements mm_appv1alpha.AppPublicServiceServer
func (mmUpdateTable *AppPublicServiceServerMock) UpdateTable(ctx context.Context, up1 *mm_appv1alpha.UpdateTableRequest) (up2 *mm_appv1alpha.UpdateTableResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateTable.beforeUpdateTableCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateTable.afterUpdateTableCounter, 1)

	mmUpdateTable.t.Helper()

	if mmUpdateTable.inspectFuncUpdateTable != nil {
		mmUpdateTable.inspectFuncUpdateTable(ctx, up1)
	}

	mm_params := AppPublicServiceServerMockUpdateTableParams{ctx, up1}

	// Record call args
	mmUpdateTable.UpdateTableMock.mutex.Lock()
	mmUpdateTable.UpdateTableMock.callArgs = append(mmUpdateTable.UpdateTableMock.callArgs, &mm_params)
	mmUpdateTable.UpdateTableMock.mutex.Unlock()

	for _, e := range mmUpdateTable.UpdateTableMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up2, e.results.err
		}
	}

	if mmUpdateTable.UpdateTableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateTable.UpdateTableMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateTable.UpdateTableMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateTable.UpdateTableMock.defaultExpectation.paramPtrs

		mm_got := AppPublicServiceServerMockUpdateTableParams{ctx, up1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateTable.t.Errorf("AppPublicServiceServerMock.UpdateTable got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateTable.UpdateTableMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.up1 != nil && !minimock.Equal(*mm_want_ptrs.up1, mm_got.up1) {
				mmUpdateTable.t.Errorf("AppPublicServiceServerMock.UpdateTable got unexpected parameter up1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateTable.UpdateTableMock.defaultExpectation.expectationOrigins.originUp1, *mm_want_ptrs.up1, mm_got.up1, minimock.Diff(*mm_want_ptrs.up1, mm_got.up1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateTable.t.Errorf("AppPublicServiceServerMock.UpdateTable got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateTable.UpdateTableMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateTable.UpdateTableMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateTable.t.Fatal("No results are set for the AppPublicServiceServerMock.UpdateTable")
		}
		return (*mm_results).up2, (*mm_results).err
	}
	if mmUpdateTable.funcUpdateTable != nil {
		return mmUpdateTable.funcUpdateTable(ctx, up1)
	}
	mmUpdateTable.t.Fatalf("Unexpected call to AppPublicServiceServerMock.UpdateTable. %v %v", ctx, up1)
	return
}

// UpdateTableAfterCounter returns a count of finished AppPublicServiceServerMock.UpdateTable invocations
func (mmUpdateTable *AppPublicServiceServerMock) UpdateTableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateTable.afterUpdateTableCounter)
}

// UpdateTableBeforeCounter returns a count of AppPublicServiceServerMock.UpdateTable invocations
func (mmUpdateTable *AppPublicServiceServerMock) UpdateTableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateTable.beforeUpdateTableCounter)
}

// Calls returns a list of arguments used in each call to AppPublicServiceServerMock.UpdateTable.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateTable *mAppPublicServiceServerMockUpdateTable) Calls() []*AppPublicServiceServerMockUpdateTableParams {
	mmUpdateTable.mutex.RLock()

	argCopy := make([]*AppPublicServiceServerMockUpdateTableParams, len(mmUpdateTable.callArgs))
	copy(argCopy, mmUpdateTable.callArgs)

	mmUpdateTable.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateTableDone returns true if the count of the UpdateTable invocations corresponds
// the number of defined expectations
func (m *AppPublicServiceServerMock) MinimockUpdateTableDone() bool {
	if m.UpdateTableMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateTableMock.invocationsDone()
}

// MinimockUpdateTableInspect logs each unmet expectation
func (m *AppPublicServiceServerMock) MinimockUpdateTableInspect() {
	for _, e := range m.UpdateTableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateTable at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateTableCounter := mm_atomic.LoadUint64(&m.afterUpdateTableCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateTableMock.defaultExpectation != nil && afterUpdateTableCounter < 1 {
		if m.UpdateTableMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateTable at\n%s", m.UpdateTableMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateTable at\n%s with params: %#v", m.UpdateTableMock.defaultExpectation.expectationOrigins.origin, *m.UpdateTableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateTable != nil && afterUpdateTableCounter < 1 {
		m.t.Errorf("Expected call to AppPublicServiceServerMock.UpdateTable at\n%s", m.funcUpdateTableOrigin)
	}

	if !m.UpdateTableMock.invocationsDone() && afterUpdateTableCounter > 0 {
		m.t.Errorf("Expected %d calls to AppPublicServiceServerMock.UpdateTable at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateTableMock.expectedInvocations), m.UpdateTableMock.expectedInvocationsOrigin, afterUpdateTableCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AppPublicServiceServerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockChatInspect()

			m.MinimockCreateAgentInspect()

			m.MinimockCreateAppInspect()

			m.MinimockCreateChatInspect()

			m.MinimockCreateConversationInspect()

			m.MinimockCreateMessageInspect()

			m.MinimockCreateTableInspect()

			m.MinimockDeleteAgentInspect()

			m.MinimockDeleteAppInspect()

			m.MinimockDeleteChatInspect()

			m.MinimockDeleteConversationInspect()

			m.MinimockDeleteMessageInspect()

			m.MinimockDeleteRowInspect()

			m.MinimockDeleteRowsInspect()

			m.MinimockDeleteTableInspect()

			m.MinimockExportInspect()

			m.MinimockGetColumnDefinitionsInspect()

			m.MinimockGetPlaygroundConversationInspect()

			m.MinimockGetTableInspect()

			m.MinimockGetTableEventsInspect()

			m.MinimockInsertRowInspect()

			m.MinimockListAgentsInspect()

			m.MinimockListAppsInspect()

			m.MinimockListChatMessagesInspect()

			m.MinimockListChatsInspect()

			m.MinimockListConversationsInspect()

			m.MinimockListMessagesInspect()

			m.MinimockListRowsInspect()

			m.MinimockListTablesInspect()

			m.MinimockListToolsInspect()

			m.MinimockLivenessInspect()

			m.MinimockMoveRowsInspect()

			m.MinimockReadinessInspect()

			m.MinimockRestartPlaygroundConversationInspect()

			m.MinimockUpdateAgentInspect()

			m.MinimockUpdateAppInspect()

			m.MinimockUpdateChatInspect()

			m.MinimockUpdateColumnDefinitionsInspect()

			m.MinimockUpdateConversationInspect()

			m.MinimockUpdateMessageInspect()

			m.MinimockUpdateRowInspect()

			m.MinimockUpdateRowsInspect()

			m.MinimockUpdateTableInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AppPublicServiceServerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AppPublicServiceServerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockChatDone() &&
		m.MinimockCreateAgentDone() &&
		m.MinimockCreateAppDone() &&
		m.MinimockCreateChatDone() &&
		m.MinimockCreateConversationDone() &&
		m.MinimockCreateMessageDone() &&
		m.MinimockCreateTableDone() &&
		m.MinimockDeleteAgentDone() &&
		m.MinimockDeleteAppDone() &&
		m.MinimockDeleteChatDone() &&
		m.MinimockDeleteConversationDone() &&
		m.MinimockDeleteMessageDone() &&
		m.MinimockDeleteRowDone() &&
		m.MinimockDeleteRowsDone() &&
		m.MinimockDeleteTableDone() &&
		m.MinimockExportDone() &&
		m.MinimockGetColumnDefinitionsDone() &&
		m.MinimockGetPlaygroundConversationDone() &&
		m.MinimockGetTableDone() &&
		m.MinimockGetTableEventsDone() &&
		m.MinimockInsertRowDone() &&
		m.MinimockListAgentsDone() &&
		m.MinimockListAppsDone() &&
		m.MinimockListChatMessagesDone() &&
		m.MinimockListChatsDone() &&
		m.MinimockListConversationsDone() &&
		m.MinimockListMessagesDone() &&
		m.MinimockListRowsDone() &&
		m.MinimockListTablesDone() &&
		m.MinimockListToolsDone() &&
		m.MinimockLivenessDone() &&
		m.MinimockMoveRowsDone() &&
		m.MinimockReadinessDone() &&
		m.MinimockRestartPlaygroundConversationDone() &&
		m.MinimockUpdateAgentDone() &&
		m.MinimockUpdateAppDone() &&
		m.MinimockUpdateChatDone() &&
		m.MinimockUpdateColumnDefinitionsDone() &&
		m.MinimockUpdateConversationDone() &&
		m.MinimockUpdateMessageDone() &&
		m.MinimockUpdateRowDone() &&
		m.MinimockUpdateRowsDone() &&
		m.MinimockUpdateTableDone()
}
