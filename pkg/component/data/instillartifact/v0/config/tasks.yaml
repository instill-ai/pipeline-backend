$defs:
  file:
    description: Base64 encoded PDF/DOCX/DOC/PPTX/PPT/HTML file to be uploaded into catalog.
    uiOrder: 2
    acceptFormats:
      - '*/*'
    title: File
    format: string
  files:
    description: Base64 encoded PDF/DOCX/DOC/PPTX/PPT/HTML files to be uploaded into catalog.
    uiOrder: 2
    acceptFormats:
      - array
    items:
      format: string
    title: Files
    format: array
  file-item:
    properties:
      file-uid:
        description: Unique identifier of the file.
        uiOrder: 0
        title: File UID
        format: string
      file-name:
        description: Name of the file.
        uiOrder: 1
        title: File Name
        format: string
      file-type:
        description: Type of the file.
        uiOrder: 2
        title: Type
        format: string
      create-time:
        description: Creation time of the file in ISO 8601 format.
        uiOrder: 3
        title: Create Time
        format: string
      update-time:
        description: Update time of the file in ISO 8601 format.
        uiOrder: 4
        title: Update Time
        format: string
      size:
        description: Size of the file in bytes.
        uiOrder: 5
        title: Size
        format: number
      catalog-id:
        description: ID of the catalog that you upload files.
        uiOrder: 8
        title: Catalog ID
        format: string
    required:
      - catalog-id
    title: File
    format: object
  chunk-item:
    properties:
      chunk-uid:
        description: The unique identifier of the chunk.
        uiOrder: 0
        title: Chunk UID
        format: string
      similarity-score:
        description: The similarity score of the chunk.
        uiOrder: 1
        title: Similarity
        format: number
      text-content:
        description: The text content of the chunk.
        uiOrder: 2
        title: Text Content
        format: string
      source-file-name:
        description: The name of the source file.
        uiOrder: 3
        title: Source File Name
        format: string
    required:
      - chunk-uid
      - similarity-score
      - text-content
      - source-file-name
    title: Chunk
    format: object
  namespace:
    description: Fill in your namespace, you can get namespace through the tab of switching namespace.
    acceptFormats:
      - string
    uiOrder: 0
    title: Namespace
    format: string
  third-party-files:
    description: File contents and metadata from third-part data storage.
    uiOrder: 2
    acceptFormats:
      - array
    items:
      properties:
        id:
          description: Unique ID of the file from third-party data storage.
          uiOrder: 0
          title: ID
          format: string
        name:
          description: Name of the file from third-party data storage.
          uiOrder: 1
          title: Name
          format: string
        content:
          description: Base64 encoded content of the binary file without the `data:[MIME_TYPE];base64,` prefix.
          uiOrder: 2
          title: Content
          format: string
        created-time:
          description: 'Time when the file was created. Format: `YYYY-MM-DDTHH:MM:SSZ`.'
          uiOrder: 3
          title: Created time
          format: string
        modified-time:
          description: 'Time when the file was last modified. Format: `YYYY-MM-DDTHH:MM:SSZ`. It will be used to check if the file has been updated.'
          uiOrder: 4
          title: Modified time
          format: string
        size:
          description: Size of the file in bytes.
          uiOrder: 5
          title: Size
          format: integer
        mime-type:
          description: MIME type of the file.
          uiOrder: 6
          title: MIME type
          format: string
        md5-checksum:
          description: MD5 checksum of the file. This reflects every change made to the file on the server, even those not visible to the user.
          uiOrder: 7
          title: MD5 checksum
          format: string
        version:
          description: Version of the file.
          uiOrder: 8
          title: Version
          format: integer
        web-view-link:
          description: Link for opening the file in a relevant third-party data storage editor or viewer in a browser. It will be used to check the source
            of the file.
          uiOrder: 9
          title: Web View Link
          format: string
        web-content-link:
          description: Link for downloading the content of the file in a browser.
          uiOrder: 10
          title: Web Content Link
          format: string
      required:
        - id
        - name
        - created-time
        - modified-time
        - size
        - mime-type
        - version
        - web-view-link
      title: Third Party File
      format: object
    title: Third Party Files
    format: array
TASK_UPLOAD_FILE:
  shortDescription: Upload and process the files into chunks into Catalog.
  input:
    description: Input.
    uiOrder: 0
    properties:
      options:
        description: Choose to upload the files to existing catalog or create a new catalog.
        title: Options
        additionalProperties: true
        uiOrder: 0
        required:
          - option
        oneOf:
          - properties:
              option:
                const: existing catalog
                title: Option
                description: Existing catalog.
                uiOrder: 0
                format: string
              namespace:
                $ref: '#/$defs/namespace'
              catalog-id:
                description: Catalog ID that you input in the Catalog.
                uiOrder: 1
                acceptFormats:
                  - string
                title: Catalog ID
                format: string
              file:
                $ref: '#/$defs/file'
              file-name:
                description: Name of the file, including the extension (e.g. `example.pdf`). The length of this field is limited to 100 characters.
                uiOrder: 2
                acceptFormats:
                  - string
                title: File Name
                format: string
            required:
              - option
              - namespace
              - catalog-id
              - file
              - file-name
            title: Existing Catalog
            format: object
          - properties:
              option:
                const: create new catalog
                title: Option
                description: Create new catalog.
                uiOrder: 0
                format: string
              namespace:
                $ref: '#/$defs/namespace'
              catalog-id:
                description: Catalog ID for new catalog you want to create.
                uiOrder: 1
                acceptFormats:
                  - string
                title: Catalog ID
                format: string
              file:
                $ref: '#/$defs/file'
              file-name:
                description: Name of the file, including the extension (e.g. `example.pdf`). The length of this field is limited to 100 characters.
                uiOrder: 3
                acceptFormats:
                  - string
                title: File Name
                format: string
              description:
                description: Description of the catalog.
                uiOrder: 4
                acceptFormats:
                  - string
                title: Description
                format: string
              tags:
                description: Tags for the catalog.
                uiOrder: 5
                acceptFormats:
                  - array
                items:
                  format: string
                title: Tags
                format: array
            required:
              - option
              - namespace
              - catalog-id
              - file
              - file-name
            title: Create New Catalog
            format: object
        format: object
    required:
      - options
    title: Input
    format: object
  output:
    description: Result of uploading file into catalog.
    properties:
      file:
        description: Result of uploading file into catalog.
        uiOrder: 0
        properties:
          $ref: '#/$defs/file-item/properties'
        required:
          - file-uid
          - file-name
          - file-type
          - create-time
          - update-time
          - size
          - catalog-id
        title: File
        format: object
      status:
        description: The status of trigger file processing, if succeeded, return true.
        uiOrder: 1
        title: Status
        format: boolean
    required:
      - file
      - status
    title: Output
    format: object
TASK_UPLOAD_FILES:
  shortDescription: Upload and process the files into chunks into Catalog.
  input:
    description: Input.
    uiOrder: 0
    properties:
      options:
        description: Choose to upload the files to existing catalog or create a new catalog.
        title: Options
        additionalProperties: true
        uiOrder: 0
        required:
          - option
        oneOf:
          - properties:
              option:
                const: existing catalog
                title: Option
                description: Existing catalog.
                uiOrder: 0
                format: string
              namespace:
                $ref: '#/$defs/namespace'
              catalog-id:
                description: Catalog ID that you input in the Catalog.
                uiOrder: 1
                acceptFormats:
                  - string
                title: Catalog ID
                format: string
              files:
                $ref: '#/$defs/files'
              file-names:
                description: Name of the file, including the extension (e.g. `example.pdf`). The length of this field is limited to 100 characters.
                uiOrder: 2
                acceptFormats:
                  - array
                items:
                  format: string
                title: File Names
                format: array
            required:
              - option
              - namespace
              - catalog-id
              - files
              - file-names
            title: Existing Catalog
            format: object
          - properties:
              option:
                const: create new catalog
                title: Option
                description: Create new catalog.
                uiOrder: 0
                format: string
              namespace:
                $ref: '#/$defs/namespace'
              catalog-id:
                description: Catalog ID for new catalog you want to create.
                uiOrder: 1
                acceptFormats:
                  - string
                title: Catalog ID
                format: string
              files:
                $ref: '#/$defs/files'
              file-names:
                description: Name of the file, including the extension (e.g. `example.pdf`). The length of this field is limited to 100 characters.
                uiOrder: 3
                acceptFormats:
                  - array
                items:
                  format: string
                title: File Names
                format: array
              description:
                description: Description of the catalog.
                uiOrder: 4
                acceptFormats:
                  - string
                title: Description
                format: string
              tags:
                description: Tags for the catalog.
                uiOrder: 5
                acceptFormats:
                  - array
                items:
                  format: string
                title: Tags
                format: array
            required:
              - option
              - namespace
              - catalog-id
              - files
              - file-names
            title: Create New Catalog
            format: object
        format: object
    required:
      - options
    title: Input
    format: object
  output:
    description: Result of uploading files into catalog.
    properties:
      files:
        description: Files metadata in catalog.
        uiOrder: 0
        items:
          $ref: '#/$defs/file-item'
        title: Files
        format: array
      status:
        description: The status of trigger file processing, if ALL succeeded, return true.
        uiOrder: 1
        title: Status
        format: boolean
    required:
      - files
      - status
    title: Output
    format: object
TASK_GET_FILES_METADATA:
  shortDescription: get the metadata of the files in the catalog.
  input:
    uiOrder: 0
    properties:
      namespace:
        $ref: '#/$defs/namespace'
      catalog-id:
        description: Catalog ID that you input to search files in the Catalog.
        uiOrder: 1
        acceptFormats:
          - string
        title: Catalog ID
        format: string
    required:
      - namespace
      - catalog-id
    title: Input
    format: object
  output:
    description: Files metadata into catalog.
    uiOrder: 1
    properties:
      files:
        description: Files metadata in catalog.
        uiOrder: 0
        items:
          $ref: '#/$defs/file-item'
        title: Files
        format: array
    required:
      - files
    title: Output
    format: object
TASK_GET_CHUNKS_METADATA:
  shortDescription: get the metadata of the chunks from a file in the catalog.
  input:
    uiOrder: 0
    properties:
      namespace:
        $ref: '#/$defs/namespace'
      catalog-id:
        description: Catalog ID that you input to search files in the Catalog.
        uiOrder: 0
        acceptFormats:
          - string
        title: Catalog ID
        format: string
      file-uid:
        description: The unique identifier of the file.
        uiOrder: 1
        acceptFormats:
          - string
        title: File UID
        format: string
    required:
      - namespace
      - catalog-id
      - file-uid
    title: Input
    format: object
  output:
    description: Chunks metadata of the file in catalog.
    uiOrder: 1
    properties:
      chunks:
        description: Chunks metadata of the file in catalog.
        uiOrder: 0
        items:
          properties:
            chunk-uid:
              description: The unique identifier of the chunk.
              uiOrder: 0
              title: Chunk UID
              format: string
            retrievable:
              description: The retrievable status of the chunk.
              uiOrder: 1
              title: Retrievable
              format: boolean
            start-position:
              description: The start position of the chunk in the file.
              uiOrder: 2
              title: Start Position
              format: integer
            end-position:
              description: The end position of the chunk in the file.
              uiOrder: 3
              title: End Position
              format: integer
            token-count:
              description: The token count of the chunk.
              uiOrder: 4
              title: Token Count
              format: integer
            create-time:
              description: The creation time of the chunk in ISO 8601 format.
              uiOrder: 5
              title: Create Time
              format: string
            original-file-uid:
              description: The unique identifier of the file.
              uiOrder: 6
              title: File UID
              format: string
          required:
            - chunk-uid
            - retrievable
            - start-position
            - end-position
            - token-count
            - create-time
            - original-file-uid
          title: Chunk
          format: object
        title: Chunks
        format: array
    required:
      - chunks
    title: Output
    format: object
TASK_GET_FILE_IN_MARKDOWN:
  shortDescription: get the file content in markdown format.
  input:
    uiOrder: 0
    properties:
      namespace:
        $ref: '#/$defs/namespace'
      catalog-id:
        description: Catalog ID that you input to search files in the Catalog.
        uiOrder: 0
        acceptFormats:
          - string
        title: Catalog ID
        format: string
      file-uid:
        description: The unique identifier of the file.
        uiOrder: 1
        acceptFormats:
          - string
        title: File UID
        format: string
    required:
      - namespace
      - catalog-id
      - file-uid
    title: Input
    format: object
  output:
    description: File content in markdown format.
    uiOrder: 1
    properties:
      original-file-uid:
        description: The unique identifier of the file.
        uiOrder: 0
        title: File UID
        format: string
      content:
        description: The content of the file in markdown format.
        uiOrder: 1
        title: Content
        format: string
      create-time:
        description: The creation time of the source file in ISO 8601 format.
        uiOrder: 2
        title: Create Time
        format: string
      update-time:
        description: The update time of the source file in ISO 8601 format.
        uiOrder: 3
        title: Update Time
        format: string
    required:
      - original-file-uid
      - content
      - create-time
      - update-time
    title: Output
    format: object
TASK_RETRIEVE:
  shortDescription: search the chunks in the catalog.
  input:
    uiOrder: 0
    properties:
      namespace:
        $ref: '#/$defs/namespace'
      catalog-id:
        description: Catalog ID that you input to search files in the Catalog.
        uiOrder: 0
        acceptFormats:
          - string
        title: Catalog ID
        format: string
      text-prompt:
        description: The prompt string to search the chunks.
        uiOrder: 1
        acceptFormats:
          - string
        title: Text Prompt
        format: string
      top-k:
        description: The number of top chunks to return. The range is from 1~20, and default is 5.
        default: 5
        uiOrder: 2
        acceptFormats:
          - integer
        title: Top K
        format: integer
    required:
      - namespace
      - catalog-id
      - text-prompt
    title: Input
    format: object
  output:
    uiOrder: 1
    properties:
      chunks:
        description: Chunks data from smart search.
        uiOrder: 0
        items:
          $ref: '#/$defs/chunk-item'
        title: Chunks
        format: array
    required:
      - chunks
    title: Output
    format: object
TASK_ASK:
  shortDescription: Reply the questions based on the files in the catalog.
  input:
    uiOrder: 0
    properties:
      namespace:
        $ref: '#/$defs/namespace'
      catalog-id:
        description: Catalog ID that you input to search files in the Catalog.
        uiOrder: 0
        acceptFormats:
          - string
        title: Catalog ID
        format: string
      question:
        description: The question to reply.
        uiOrder: 1
        acceptFormats:
          - string
        title: Question
        format: string
      top-k:
        description: The number of top answers to return. The range is from 1~20, and default is 5.
        default: 5
        uiOrder: 2
        acceptFormats:
          - integer
        title: Top K
        format: integer
    required:
      - namespace
      - catalog-id
      - question
    title: Input
    format: object
  output:
    uiOrder: 1
    properties:
      answer:
        description: Answers data from smart search.
        uiOrder: 0
        title: Answer
        format: string
      chunks:
        description: Chunks data to answer question.
        uiOrder: 1
        items:
          $ref: '#/$defs/chunk-item'
        title: Chunks
        format: array
    required:
      - answer
    title: Output
    format: object
TASK_MATCH_FILE_STATUS:
  shortDescription: Check if the specified file's processing status is done.
  input:
    uiOrder: 0
    properties:
      namespace:
        $ref: '#/$defs/namespace'
      catalog-id:
        description: Catalog ID that you input to check files' processing status in the Catalog.
        uiOrder: 0
        acceptFormats:
          - string
        title: Catalog ID
        format: string
      file-uid:
        description: The unique identifier of the file.
        uiOrder: 1
        acceptFormats:
          - string
        title: File UID
        format: string
    required:
      - namespace
      - catalog-id
      - file-uid
    title: Input
    format: object
  output:
    uiOrder: 1
    properties:
      succeeded:
        description: The status of the file processing, if succeeded, return true.
        uiOrder: 0
        title: Status
        format: boolean
    required:
      - succeeded
    title: Output
    format: object
TASK_SYNC_FILES:
  shortDescription: This task synchronizes files from third-party storage to Instill Catalog. New files are uploaded, and updated files are overwritten
    based on third-party metadata. Files added through other channels, like the Artifact API or additional storage services, will not be removed. Currently,
    only Google Drive is supported as a third-party storage service.
  input:
    uiOrder: 0
    properties:
      namespace:
        $ref: '#/$defs/namespace'
      catalog-id:
        description: Catalog ID that you input to synchronize files from third-party data storage to catalog.
        uiOrder: 1
        acceptFormats:
          - string
        title: Catalog ID
        format: string
      third-party-files:
        $ref: '#/$defs/third-party-files'
    required:
      - namespace
      - catalog-id
      - third-party-files
    title: Input
    format: object
  output:
    uiOrder: 1
    properties:
      uploaded-files:
        description: Files metadata in catalog. The metadata here is from Instill Artifact rather than third-party storage.
        uiOrder: 0
        items:
          $ref: '#/$defs/file-item'
        title: Uploaded Files
        format: array
      updated_files:
        description: Files that were updated. The metadata here is from Instill Artifact rather than third-party storage.
        uiOrder: 1
        items:
          $ref: '#/$defs/file-item'
        title: Updated Files
        format: array
      failure-files:
        description: Files that failed to upload or overwrite. The metadata here is from third-party storage.
        uiOrder: 2
        items:
          $ref: '#/$defs/third-party-files/items'
        title: Failure Files
        format: array
      error-messages:
        description: Error messages for files that failed to upload or overwrite.
        uiOrder: 3
        items:
          format: string
        title: Error Messages
        format: array
      status:
        description: The status of the triggering processing files, if succeeded, return true.
        uiOrder: 4
        title: Status
        format: boolean
    required: []
    title: Output
    format: object
