TASK_QUERY:
  shortDescription: Retrieve the ids of the most similar items in a namespace, along with their similarity scores.
  input:
    uiOrder: 0
    properties:
      id:
        description: The unique ID of the vector to be used as a query vector. If present, the vector parameter will be ignored.
        acceptFormats:
          - string
        shortDescription: Query by vector ID instead of by vector
        uiOrder: 0
        title: ID
        format: string
      vector:
        description: An array of dimensions for the query vector.
        acceptFormats:
          - array
          - array
        uiOrder: 1
        items:
          description: A dimension of the vector.
          example: 0.8167237
          format: number
        minItems: 1
        title: Vector
        format: array
      top-k:
        description: The number of results to return for each query.
        acceptFormats:
          - integer
        uiOrder: 2
        title: Top K
        format: integer
      namespace:
        description: The namespace to query.
        acceptFormats:
          - string
        uiOrder: 3
        title: Namespace
        format: string
      filter:
        description: The filter to apply. You can use vector metadata to limit your search. See more details <a href="https://www.pinecone.io/docs/metadata-filtering/">here</a>.
        acceptFormats:
          - json
        shortDescription: The filter to apply on vector metadata
        uiOrder: 4
        order: 1
        required: []
        title: Filter
        format: object
      min-score:
        description: Exclude results whose score is below this value.
        acceptFormats:
          - number
          - integer
        uiOrder: 5
        title: Minimum Score
        format: number
      include-metadata:
        default: false
        description: Indicates whether metadata is included in the response as well as the IDs.
        acceptFormats:
          - boolean
        uiOrder: 6
        title: Include Metadata
        format: boolean
      include-values:
        default: false
        description: Indicates whether vector values are included in the response.
        acceptFormats:
          - boolean
        uiOrder: 7
        title: Include Values
        format: boolean
    required:
      - top-k
      - vector
    title: Input
    format: object
  output:
    uiOrder: 0
    properties:
      matches:
        description: The matches returned for the query.
        uiOrder: 1
        items:
          properties:
            id:
              description: The ID of the matched vector.
              uiOrder: 0
              title: ID
              format: string
            metadata:
              description: Metadata.
              uiOrder: 3
              required: []
              title: Metadata
              format: json
            score:
              description: A measure of similarity between this vector and the query vector. The higher the score, the more similar they are.
              uiOrder: 1
              title: Score
              format: number
            values:
              description: Vector data values.
              uiOrder: 2
              items:
                description: Each float value represents one dimension.
                title: Value
                format: number
              title: Values
              format: array
          required:
            - id
            - score
          title: Match
          format: object
        title: Matches
        format: array
      namespace:
        description: The namespace of the query.
        uiOrder: 0
        title: Namespace
        format: string
    required:
      - namespace
      - matches
    title: Output
    format: object
TASK_UPSERT:
  shortDescription: Writes vectors into a namespace. If a new value is upserted for an existing vector id, it will overwrite the previous value.
  description: Writes vectors into a namespace. If a new value is upserted for an existing vector id, it will overwrite the previous value. This task will
    be soon replaced by `TASK_BATCH_UPSERT`, which extends its functionality.
  input:
    uiOrder: 0
    properties:
      id:
        description: This is the vector's unique id.
        acceptFormats:
          - string
        uiOrder: 0
        title: ID
        format: string
      metadata:
        description: The vector metadata.
        acceptFormats:
          - json
        shortDescription: The vector metadata
        uiOrder: 3
        order: 1
        required: []
        title: Metadata
        format: object
      values:
        description: An array of dimensions for the vector to be saved.
        acceptFormats:
          - array
          - array
        uiOrder: 1
        items:
          description: A dimension of the vector.
          example: 0.8167237
          format: number
        minItems: 1
        title: Values
        format: array
      namespace:
        description: The namespace to query.
        acceptFormats:
          - string
        uiOrder: 2
        title: Namespace
        format: string
    required:
      - id
      - values
    title: Input
    format: object
  output:
    uiOrder: 0
    properties:
      upserted-count:
        description: Number of records modified or added.
        uiOrder: 0
        title: Upserted Count
        format: integer
    required:
      - upserted-count
    title: Output
    format: object
TASK_BATCH_UPSERT:
  shortDescription: Writes vectors into a namespace. If a new value is upserted for an existing vector ID, it will overwrite the previous value.
  input:
    uiOrder: 0
    properties:
      vectors:
        description: Array of vectors to upsert
        uiOrder: 0
        items:
          properties:
            id:
              description: The unique ID of the vector.
              uiOrder: 0
              acceptFormats:
                - string
              title: ID
              format: string
            metadata:
              description: 'The vector metadata. This is a set of key-value pairs that can be used to store additional information about the vector. The
                values can have the following types: string, number, boolean, or array of strings.'
              uiOrder: 1
              acceptFormats:
                - json
              shortDescription: The vector metadata
              required: []
              title: Metadata
              format: object
            values:
              description: An array of dimensions for the vector to be saved.
              uiOrder: 2
              acceptFormats:
                - array
                - array
              items:
                description: A dimension of the vector.
                example: 0.8167237
                format: number
              minItems: 1
              title: Values
              format: array
          required:
            - id
            - values
          format: object
        minItems: 1
        title: Vectors
        format: array
      namespace:
        description: The namespace to query.
        acceptFormats:
          - string
        uiOrder: 1
        title: Namespace
        format: string
    required:
      - vectors
    title: Input
    format: object
  output:
    uiOrder: 0
    properties:
      upserted-count:
        description: Number of records modified or added.
        uiOrder: 0
        title: Upserted Count
        format: integer
    required:
      - upserted-count
    title: Output
    format: object
TASK_RERANK:
  shortDescription: Rerank documents, such as text passages, according to their relevance to a query.
  description: Rerank documents, such as text passages, according to their relevance to a query. The input is a list of documents and a query. The output
    is a list of documents, sorted by relevance to the query.
  input:
    uiOrder: 0
    properties:
      query:
        description: The query to rerank the documents.
        acceptFormats:
          - string
        instullUIMultiline: false
        uiOrder: 0
        title: Query
        format: string
      documents:
        description: The documents to rerank.
        uiOrder: 1
        items:
          format: string
        minItems: 1
        title: Documents
        format: array
      top-n:
        description: The number of results to return sorted by relevance. Defaults to the number of inputs.
        acceptFormats:
          - integer
        uiOrder: 2
        title: Top N
        format: integer
    required:
      - query
      - documents
    title: Input
    format: object
  output:
    uiOrder: 0
    properties:
      documents:
        description: Reranked documents.
        items:
          title: Documents
          format: string
        uiOrder: 0
        title: Reranked documents.
        format: array
      scores:
        description: The relevance score of the documents normalized between 0 and 1.
        items:
          title: Score
          format: number
        uiOrder: 1
        title: Scores
        format: array
    required:
      - documents
      - scores
    title: Output
    format: object
