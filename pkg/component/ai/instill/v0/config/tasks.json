{
  "TASK_EMBEDDING": {
    "title": "Embedding",
    "instillShortDescription": "This task refers to the process of generating vector embeddings from input data, which can be text or images. This transformation converts the data into a dense, fixed-length numerical representation that captures the essential features of the original input. These embeddings are typically used in machine learning tasks to represent complex data in a more structured, simplified form.",
    "input": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Embedding Input",
      "description": "Input schema of the embedding task.",
      "instillShortDescription": "Input schema of the embedding task.",
      "type": "object",
      "properties": {
        "data": {
          "description": "Input data.",
          "instillShortDescription": "Input data.",
          "type": "object",
          "properties": {
            "model": {
              "description": "The model to be used for generating embeddings. It should be `namespace/model-name/version`. i.e. `abrc/yolov7-stomata/v0.1.0`. You can see the version from the Versions tab of Model page.",
              "instillShortDescription": "The model to be used.",
              "instillAcceptFormats": [
                "string"
              ],
              "instillUIOrder": 0,
              "title": "Model",
              "type": "string"
            },
            "embeddings": {
              "title": "Embeddings",
              "type": "array",
              "items": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "text": {
                        "title": "Text Content",
                        "description": "When the input is text, the raw text is tokenized and processed into a dense, fixed-length vector that captures semantic information such as word meanings and relationships. These text embeddings enable tasks like sentiment analysis, search, or classification.",
                        "instillShortDescription": "Text content.",
                        "instillAcceptFormats": [
                          "string"
                        ],
                        "type": "string",
                        "instillUIOrder": 1
                      },
                      "type": {
                        "title": "Text",
                        "description": "Text input content type.",
                        "instillShortDescription": "Text input content type.",
                        "instillAcceptFormats": [
                          "string"
                        ],
                        "type": "string",
                        "const": "text",
                        "instillUIOrder": 0
                      }
                    },
                    "title": "Text",
                    "required": [
                      "text",
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "image-url": {
                        "title": "Image URL",
                        "description": "When the input is an image from a URL, the image is first fetched from the URL and then decoded into its original format. It is then processed into a fixed-length vector representing essential visual features like shapes and colors. These image embeddings are useful for tasks like image classification or similarity search, providing structured numerical data for complex visual inputs.",
                        "instillShortDescription": "Image content URL.",
                        "instillAcceptFormats": [
                          "string"
                        ],
                        "type": "string",
                        "instillUIOrder": 1
                      },
                      "type": {
                        "title": "Image URL",
                        "description": "Image URL input content type",
                        "instillShortDescription": "Image URL input content type",
                        "instillAcceptFormats": [
                          "string"
                        ],
                        "type": "string",
                        "const": "image-url",
                        "instillUIOrder": 0
                      }
                    },
                    "title": "Image URL",
                    "required": [
                      "image-url",
                      "type"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "image-base64": {
                        "title": "Image File",
                        "description": "When the input is an image in base64 format, the base64-encoded data is first decoded into its original image form. The image is then processed and transformed into a dense, fixed-length numerical vector, capturing key visual features like shapes, colors, or textures.",
                        "instillShortDescription": "Image file input.",
                        "instillAcceptFormats": [
                          "image/*"
                        ],
                        "type": "string",
                        "instillUIOrder": 1
                      },
                      "type": {
                        "title": "Image File",
                        "description": "Image file input content type.",
                        "instillShortDescription": "Image file input content type.",
                        "instillAcceptFormats": [
                          "string"
                        ],
                        "type": "string",
                        "const": "image-base64",
                        "instillUIOrder": 0
                      }
                    },
                    "title": "Image Base64",
                    "required": [
                      "image-base64",
                      "type"
                    ]
                  }
                ],
                "title": "Embedding",
                "description": "Input data to be embedded.",
                "instillUIOrder": 0,
                "required": [
                  "type"
                ]
              },
              "description": "List of input data to be embedded.",
              "instillUIOrder": 1
            }
          },
          "required": [
            "model",
            "embeddings"
          ],
          "instillUIOrder": 0,
          "title": "Data"
        },
        "parameter": {
          "description": "Input parameter.",
          "instillShortDescription": "Input parameter.",
          "type": "object",
          "properties": {
            "format": {
              "title": "Data Format",
              "type": "string",
              "description": "The data format of the embeddings. Defaults to float.",
              "instillShortDescription": "Data format",
              "instillAcceptFormats": [
                "string"
              ],
              "enum": [
                "float",
                "base64"
              ],
              "default": "float",
              "instillUIOrder": 0
            },
            "dimensions": {
              "title": "Dimensions",
              "type": "integer",
              "description": "Number of dimensions in the output embedding vectors.",
              "instillShortDescription": "Number of dimensions",
              "instillAcceptFormats": [
                "integer"
              ],
              "default": 512,
              "instillUIOrder": 1
            },
            "input-type": {
              "title": "Input Type",
              "type": "string",
              "description": "The type of input data to be embedded (e.g., query, document).",
              "instillShortDescription": "Type of input data",
              "instillAcceptFormats": [
                "string"
              ],
              "instillUIOrder": 2
            },
            "truncate": {
              "title": "Truncate",
              "type": "string",
              "description": "How to handle inputs longer than the max token length. Defaults to 'End'.",
              "instillShortDescription": "Truncation handling",
              "instillAcceptFormats": [
                "string"
              ],
              "enum": [
                "None",
                "End",
                "Start"
              ],
              "default": "End",
              "instillUIOrder": 3
            }
          },
          "title": "Parameter",
          "instillUIOrder": 1,
          "required": []
        }
      },
      "required": [
        "data"
      ]
    },
    "output": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Embedding Output",
      "description": "Output schema of the embedding task.",
      "instillShortDescription": "Output schema of the embedding task.",
      "type": "object",
      "properties": {
        "data": {
          "description": "Output data.",
          "instillShortDescription": "Output data.",
          "type": "object",
          "properties": {
            "embeddings": {
              "title": "Embeddings",
              "type": "array",
              "description": "List of generated embeddings.",
              "instillShortDescription": "List of embeddings.",
              "instillFormat": "array",
              "items": {
                "type": "object",
                "properties": {
                  "index": {
                    "title": "Index",
                    "type": "integer",
                    "description": "The index of the embedding vector in the array.",
                    "instillShortDescription": "Index in the array",
                    "instillFormat": "integer",
                    "instillUIOrder": 0
                  },
                  "vector": {
                    "title": "Embedding Vector",
                    "type": "array",
                    "description": "The embedding vector.",
                    "instillShortDescription": "Embedding vector.",
                    "instillFormat": "array",
                    "items": {
                      "type": "number"
                    },
                    "instillUIOrder": 1
                  },
                  "created": {
                    "title": "Created",
                    "type": "integer",
                    "description": "The Unix timestamp (in seconds) of when the embedding was created.",
                    "instillShortDescription": "Timestamp of creation",
                    "instillFormat": "integer",
                    "instillUIOrder": 2
                  }
                },
                "required": [
                  "index",
                  "vector",
                  "created"
                ]
              },
              "instillUIOrder": 0
            }
          },
          "required": [
            "embeddings"
          ],
          "instillUIOrder": 0,
          "title": "Data"
        }
      },
      "required": [
        "data"
      ]
    }
  },
  "TASK_CHAT": {
    "title": "Chat",
    "instillShortDescription": "This task involves generating contextually relevant text responses based on input data, such as user queries or prompts. The generated responses include metadata like token usage, which can help track and calculate the cost of the operation. This metadata can also be useful for performance monitoring and analysis.",
    "input": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Chat Input",
      "description": "This is the schema for the input required to perform the chat task. It defines the structure of the data that must be provided, including the types of messages, roles, and optional parameters that guide the model's response generation.",
      "instillShortDescription": "Input schema for the chat task, defining data format and necessary attributes.",
      "type": "object",
      "properties": {
        "data": {
          "title": "Chat Data",
          "description": "The data that will be passed to the chat model. This typically includes the messages exchanged between the user and the assistant, alongside any additional information to guide the conversation.",
          "instillShortDescription": "The main input data for the chat task, such as the conversation content.",
          "type": "object",
          "properties": {
            "messages": {
              "description": "A collection of individual messages exchanged during the chat session. Each message includes content and other attributes like role and optional participant name.",
              "instillShortDescription": "The messages that make up the conversation. Each message has content and a role, such as 'user', 'assistant', or 'system'.",
              "title": "Chat Messages",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "content": {
                    "description": "The actual content of the message. It can be a text message, an image URL, or a base64 encoded image.",
                    "instillShortDescription": "The main content of the message, which can be text or image-based, and defines what the user or assistant is saying.",
                    "title": "Content",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "text": {
                              "title": "Text Message",
                              "description": "A text-based message, which is the most common format for chat communication.",
                              "instillShortDescription": "Plain text content of the message.",
                              "instillAcceptFormats": [
                                "string"
                              ],
                              "type": "string",
                              "instillUIOrder": 1
                            },
                            "type": {
                              "title": "Text",
                              "description": "Type of the message content. In this case, it is text.",
                              "instillShortDescription": "Type of the message content. In this case, it is text.",
                              "instillAcceptFormats": [
                                "string"
                              ],
                              "type": "string",
                              "const": "text",
                              "instillUIOrder": 0
                            }
                          },
                          "required": [
                            "text",
                            "type"
                          ],
                          "title": "Text"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "image-url": {
                              "title": "Image URL",
                              "description": "A URL that links to an image that is being shared in the chat.",
                              "instillShortDescription": "A message that shares an image through a URL link.",
                              "instillAcceptFormats": [
                                "string"
                              ],
                              "type": "string",
                              "instillUIOrder": 1
                            },
                            "type": {
                              "title": "Image URL",
                              "description": "Type of the message content. In this case, it is an image URL.",
                              "instillShortDescription": "Type of the message content. In this case, it is an image URL.",
                              "instillAcceptFormats": [
                                "string"
                              ],
                              "type": "string",
                              "const": "image-url",
                              "instillUIOrder": 0
                            }
                          },
                          "required": [
                            "image-url",
                            "type"
                          ],
                          "title": "Image URL"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "image-base64": {
                              "title": "Image Base64",
                              "description": "An image encoded as a base64 string, allowing for the direct transfer of image data in the message.",
                              "instillShortDescription": "A base64-encoded image message for directly embedding image content.",
                              "instillAcceptFormats": [
                                "image/*"
                              ],
                              "type": "string",
                              "instillUIOrder": 1
                            },
                            "type": {
                              "title": "Image File",
                              "description": "Type of the message content. In this case, it is an image file.",
                              "instillShortDescription": "Type of the message content. In this case, it is an image file.",
                              "instillAcceptFormats": [
                                "string"
                              ],
                              "type": "string",
                              "const": "image-base64",
                              "instillUIOrder": 0
                            }
                          },
                          "required": [
                            "image-base64",
                            "type"
                          ],
                          "title": "Image Base64"
                        }
                      ],
                      "required": []
                    },
                    "instillUIOrder": 0
                  },
                  "role": {
                    "description": "Indicates the role of the message sender, such as 'user', 'assistant', or 'system'. This helps the model understand the context in which the message was sent.",
                    "instillShortDescription": "The role of the message sender, such as 'user', 'assistant', or 'system'.",
                    "instillAcceptFormats": [
                      "string"
                    ],
                    "title": "Role",
                    "type": "string",
                    "enum": [
                      "system",
                      "user",
                      "assistant"
                    ],
                    "instillUIOrder": 1
                  },
                  "name": {
                    "description": "An optional name for the participant sending the message. This can be used to distinguish between different users or assistants if there are multiple participants with the same role.",
                    "instillShortDescription": "An optional name for the participant sending the message.",
                    "instillAcceptFormats": [
                      "string"
                    ],
                    "title": "Name",
                    "type": "string",
                    "instillUIOrder": 2
                  }
                },
                "required": [
                  "content",
                  "role"
                ]
              },
              "instillUIOrder": 0
            }
          },
          "required": [
            "messages"
          ],
          "instillUIOrder": 0
        },
        "parameter": {
          "description": "The parameters used to control how the model generates responses. These include settings for token limits, randomness, and the number of response choices.",
          "instillShortDescription": "Parameters that control the model's response generation, such as token limits and randomness settings.",
          "type": "object",
          "properties": {
            "max-tokens": {
              "title": "Max New Tokens",
              "type": "integer",
              "description": "Defines the maximum number of tokens that the model can generate in response to a given input.",
              "instillShortDescription": "The maximum number of tokens the model can generate in response to a single input message.",
              "instillAcceptFormats": [
                "integer"
              ],
              "default": 50,
              "instillUIOrder": 0
            },
            "seed": {
              "title": "Seed",
              "type": "integer",
              "description": "A random seed used for controlling the randomness of the model's output. Setting a seed can make the model's responses deterministic and reproducible.",
              "instillShortDescription": "A random seed used to control the model's output randomness.",
              "instillAcceptFormats": [
                "integer"
              ],
              "default": 0,
              "instillUIOrder": 1
            },
            "n": {
              "title": "Number of Choices",
              "type": "integer",
              "description": "Determines how many different response options the model should generate for a single input. This allows the user to choose between multiple potential responses.",
              "instillShortDescription": "The number of response choices the model should generate for a single input.",
              "instillAcceptFormats": [
                "integer"
              ],
              "default": 1,
              "instillUIOrder": 2
            },
            "temperature": {
              "title": "Temperature",
              "type": "number",
              "description": "A parameter that controls how random or creative the model's responses are. Higher values make the responses more diverse and creative, while lower values make them more focused and deterministic. The default value is 0.7.",
              "instillShortDescription": "A parameter that controls the randomness of the model's responses. Higher values make the responses more diverse and creative.",
              "instillAcceptFormats": [
                "number"
              ],
              "default": 0.7,
              "instillUIOrder": 3
            },
            "top-p": {
              "title": "Top P",
              "type": "number",
              "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
              "instillShortDescription": "An alternative to temperature sampling, where the model considers the top_p probability mass of tokens.",
              "instillAcceptFormats": [
                "number"
              ],
              "default": 1,
              "instillUIOrder": 4
            },
            "stream": {
              "title": "Stream",
              "type": "boolean",
              "description": "If set to true, the model will send tokens as they are generated in a streaming manner, rather than waiting for the entire response to be ready.",
              "instillShortDescription": "If set to true, the model will send tokens as they are generated in a streaming manner.",
              "instillAcceptFormats": [
                "boolean"
              ],
              "default": false,
              "instillUIOrder": 5
            }
          },
          "required": [],
          "instillUIOrder": 1,
          "title": "Input Parameter"
        }
      },
      "required": [
        "data"
      ]
    },
    "output": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Chat output",
      "description": "This defines the structure of the output returned by the model after processing the input. It includes the generated chat messages, metadata such as token usage, and other information about the response.",
      "instillShortDescription": "This defines the structure of the output returned by the model after processing the input.",
      "type": "object",
      "properties": {
        "data": {
          "description": "This section defines the structure of the output data returned by the chat task. The output includes chat completion choices generated by the model along with metadata such as the reason for finishing, message content, and creation timestamp. Each generated response is structured as a choice that includes details about the model’s reasoning for ending the response generation, the message content, and the role of the message's author.",
          "instillShortDescription": "This section defines the structure of the output data returned by the chat task.",
          "type": "object",
          "properties": {
            "choices": {
              "title": "Choices",
              "type": "array",
              "description": "This is a list of all the possible chat completion choices generated by the model for a given input. Each choice represents a potential response the model can provide based on the input message.",
              "instillShortDescription": "A list of all the possible chat completion choices generated by the model for a given input.",
              "instillFormat": "array",
              "items": {
                "type": "object",
                "properties": {
                  "finish-reason": {
                    "title": "Finish Reason",
                    "type": "string",
                    "description": "The reason why the model stopped generating tokens for this particular response. It could indicate that the model finished the response naturally, or there could be another stopping criterion.",
                    "instillShortDescription": "The reason why the model stopped generating tokens for this particular response.",
                    "instillFormat": "string",
                    "instillUIOrder": 0
                  },
                  "index": {
                    "title": "Index",
                    "type": "integer",
                    "description": "The index or position of this choice in the list of possible responses. This helps to identify which option is being referred to in a set of choices.",
                    "instillShortDescription": "The index or position of this choice in the list of possible responses.",
                    "instillFormat": "integer",
                    "instillUIOrder": 1
                  },
                  "message": {
                    "title": "Message",
                    "type": "object",
                    "description": "The chat message generated by the model as a response to the input. This includes the text content and the role of the message sender (e.g., user, system, assistant).",
                    "instillShortDescription": "The chat message generated by the model as a response to the input.",
                    "properties": {
                      "content": {
                        "title": "Content",
                        "type": "string",
                        "description": "The actual text content of the generated message. This is what the model suggests as the response based on the given input.",
                        "instillShortDescription": "The actual text content of the generated message.",
                        "instillFormat": "string",
                        "instillUIOrder": 0
                      },
                      "role": {
                        "title": "Role",
                        "type": "string",
                        "description": "The role of the entity that generated the message, such as 'system, 'user', or 'assistant'. This allows differentiation between who is sending the message.",
                        "instillShortDescription": "The role of the entity that generated the message.",
                        "instillFormat": "string",
                        "instillUIOrder": 1
                      }
                    },
                    "required": [],
                    "instillUIOrder": 2
                  },
                  "created": {
                    "title": "Created",
                    "type": "integer",
                    "description": "The Unix timestamp (in seconds) indicating when the chat completion was generated. This timestamp can be used to track when the response was created.",
                    "instillShortDescription": "The Unix timestamp indicating when the chat completion was generated.",
                    "instillFormat": "integer",
                    "instillUIOrder": 3
                  }
                },
                "required": [
                  "finish-reason",
                  "index",
                  "message",
                  "created"
                ]
              },
              "instillUIOrder": 0
            }
          },
          "required": [
            "choices"
          ],
          "instillUIOrder": 0,
          "title": "Output Data"
        },
        "metadata": {
          "description": "This section provides metadata about the task completion, including statistics on the usage of tokens. The metadata helps track how many tokens were used in generating the response and how many tokens were included in the input prompt.",
          "instillShortDescription": "This section provides metadata about the task completion, including statistics on the usage of tokens.",
          "type": "object",
          "properties": {
            "usage": {
              "description": "Provides information about the number of tokens involved in the request and the completion process. It includes prompt tokens, completion tokens, and the total number of tokens used.",
              "instillShortDescription": "Information about the number of tokens involved in the request and the completion process.",
              "type": "object",
              "properties": {
                "completion-tokens": {
                  "title": "Completion Tokens",
                  "type": "integer",
                  "description": "The number of tokens generated in the response. This indicates how many tokens were used in the model's reply.",
                  "instillShortDescription": "The number of tokens generated in the response.",
                  "instillFormat": "integer",
                  "instillUIOrder": 0
                },
                "prompt-tokens": {
                  "title": "Prompt Tokens",
                  "type": "integer",
                  "description": "The number of tokens that were in the input prompt. This counts how many tokens were consumed in processing the initial user query or input.",
                  "instillShortDescription": "The number of tokens in the input prompt.",
                  "instillFormat": "integer",
                  "instillUIOrder": 1
                },
                "total-tokens": {
                  "title": "Total Tokens",
                  "type": "integer",
                  "description": "The total number of tokens used in the entire request, which is the sum of prompt tokens and completion tokens.",
                  "instillShortDescription": "The total number of tokens used in the entire request, which is the sum of prompt tokens and completion tokens.",
                  "instillFormat": "integer",
                  "instillUIOrder": 2
                }
              },
              "required": [
                "completion-tokens",
                "prompt-tokens",
                "total-tokens"
              ],
              "instillUIOrder": 0,
              "title": "Usage"
            }
          },
          "required": [],
          "title": "Output Metadata",
          "instillUIOrder": 1
        }
      },
      "required": [
        "data"
      ]
    }
  }
}
