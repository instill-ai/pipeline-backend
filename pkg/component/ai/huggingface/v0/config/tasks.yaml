$defs:
  model:
    description: The Hugging Face model to be used.
    type: string
    title: Model
  options:
    properties:
      use-cache:
        description: There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models
          are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent
          the caching mechanism from being used resulting in a real new query.
        type: boolean
        shortDescription: Enable the cache of inference API
        uiOrder: 1
        title: Use Cache
      wait-for-model:
        description: If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done.
          It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places.
        type: boolean
        shortDescription: Wait for model ready
        uiOrder: 0
        title: Wait For Model
    required: []
    description: Options for the model.
    title: Options
    type: object
  string-input:
    description: String input.
    type: string
    uiOrder: 0
    title: String Input
TASK_AUDIO_CLASSIFICATION:
  shortDescription: Audio classification is the task of assigning a label or class to a given audio.
  description: Audio classification is the task of assigning a label or class to a given audio. It can be used for recognizing which command a user is giving
    or the emotion of a statement, as well as identifying a speaker.
  input:
    uiOrder: 0
    properties:
      audio:
        description: The audio file.
        type: string
        uiOrder: 1
        title: Audio
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
    required:
      - audio
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      classes:
        uiOrder: 0
        items:
          properties:
            label:
              description: The label for the class (model specific).
              uiOrder: 0
              title: Label
              type: string
            score:
              description: A float that represents how likely it is that the audio file belongs to this class.
              uiOrder: 1
              title: Score
              type: number
          required:
            - label
            - score
          description: Class.
          title: Class
          type: object
        description: Classes.
        title: Classes
        type: array
    required:
      - classes
    title: Output
    type: object
TASK_CONVERSATIONAL:
  shortDescription: Conversational response modelling is the task of generating conversational text that is relevant, coherent and knowledgable given a
    prompt.
  description: Conversational response modelling is the task of generating conversational text that is relevant, coherent and knowledgable given a prompt.
    These models have applications in chatbots, and as a part of voice assistants.
  input:
    uiOrder: 0
    properties:
      inputs:
        uiOrder: 1
        properties:
          generated-responses:
            description: A list of strings corresponding to the earlier replies from the model.
            type: array
            uiOrder: 0
            items:
              description: Items.
              type: string
            title: Generated Responses
          past-user-inputs:
            description: A list of strings corresponding to the earlier replies from the user. Should be of the same length of generated-responses.
            type: array
            shortDescription: A list of strings corresponding to the earlier replies from the user.
            uiOrder: 1
            items:
              description: Items.
              type: string
            title: Past User Inputs
          text:
            description: The last input from the user in the conversation.
            type: string
            uiOrder: 2
            title: Text
        required:
          - text
        description: Inputs.
        title: Inputs
        type: object
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
      options:
        $ref: '#/$defs/options'
        uiOrder: 3
      parameters:
        uiOrder: 2
        properties:
          max-length:
            description: Integer to define the maximum length in tokens of the output summary.
            type: integer
            uiOrder: 0
            title: Max Length
          max-time:
            description: The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit.
            type: number
            shortDescription: The amount of time in seconds that the query should take maximum.
            uiOrder: 1
            maximum: 120.0
            minimum: 0.0
            title: Max Time
          min-length:
            description: Integer to define the minimum length in tokens of the output summary.
            type: integer
            uiOrder: 2
            title: Min Length
          repetition-penalty:
            description: The more a token is used within generation the more it is penalized to not be picked in successive generation passes.
            type: number
            uiOrder: 3
            maximum: 100.0
            minimum: 0.0
            title: Repetition Penalty
          temperature:
            default: 1.0
            description: The temperature of the sampling operation. 1 means regular sampling, 0 means always take the highest score, 100.0 is getting closer
              to uniform probability.
            type: number
            shortDescription: The temperature of the sampling operation.
            uiOrder: 4
            maximum: 100.0
            minimum: 0.0
            title: Temperature
          top-k:
            description: Integer to define the top tokens considered within the sample operation to create new text.
            type: integer
            uiOrder: 5
            title: Top K
          top-p:
            description: Float to define the tokens that are within the sample operation of text generation. Add tokens in the sample for more probable
              to least probable until the sum of the probabilities is greater than top-p.
            type: number
            shortDescription: Float to define the tokens that are within the sample operation of text generation.
            uiOrder: 6
            title: Top P
        required: []
        description: Parameters.
        title: Parameters
        type: object
    required:
      - inputs
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      conversation:
        description: A facility dictionary to send back for the next input (with the new user input addition).
        uiOrder: 0
        properties:
          generated-responses:
            description: List of strings. The last outputs from the model in the conversation, after the model has run.
            uiOrder: 0
            items:
              title: Generated Response
              description: Generated Response.
              type: string
            title: Generated Responses
            type: array
          past-user-inputs:
            description: List of strings. The last inputs from the user in the conversation, after the model has run.
            uiOrder: 1
            items:
              title: Past User Input
              description: Past User Input.
              type: string
            title: Past User Inputs
            type: array
        required:
          - generated-responses
          - past-user-inputs
        title: Conversation
        type: object
      generated-text:
        description: The answer of the bot.
        uiOrder: 1
        title: Generated Text
        type: string
    required:
      - generated-text
    title: Output
    type: object
TASK_FILL_MASK:
  shortDescription: Masked language modeling is the task of masking some of the words in a sentence and predicting which words should replace those masks.
  description: Masked language modeling is the task of masking some of the words in a sentence and predicting which words should replace those masks. These
    models are useful when we want to get a statistical understanding of the language in which the model is trained in.
  input:
    uiOrder: 0
    properties:
      inputs:
        $ref: '#/$defs/string-input'
        description: a string to be filled from, must contain the [MASK] token (check model card for exact name of the mask).
        uiOrder: 1
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
      options:
        $ref: '#/$defs/options'
        uiOrder: 2
    required:
      - inputs
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      results:
        uiOrder: 0
        items:
          properties:
            score:
              description: The probability for this token.
              uiOrder: 0
              title: Score
              type: number
            sequence:
              description: The actual sequence of tokens that ran against the model (may contain special tokens).
              uiOrder: 1
              title: Sequence
              type: string
            token:
              description: The id of the token.
              uiOrder: 2
              title: Token
              type: integer
            token-str:
              description: The string representation of the token.
              uiOrder: 3
              title: Token Str
              type: string
          description: Result.
          title: Result
          required: []
          type: object
        description: Results.
        title: Results
        type: array
    required:
      - results
    title: Output
    type: object
TASK_IMAGE_CLASSIFICATION:
  shortDescription: Image classification is the task of assigning a label or class to an entire image.
  description: Image classification is the task of assigning a label or class to an entire image. Images are expected to have only one class for each image.
    Image classification models take an image as input and return a prediction about which class the image belongs to.
  input:
    uiOrder: 0
    properties:
      image:
        description: The image file.
        type: string
        uiOrder: 1
        title: Image
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
    required:
      - image
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      classes:
        uiOrder: 0
        items:
          properties:
            label:
              description: The label for the class (model specific).
              uiOrder: 0
              title: Label
              type: string
            score:
              description: A float that represents how likely it is that the image file belongs to this class.
              uiOrder: 0
              title: Score
              type: number
          required:
            - label
            - score
          description: Class.
          title: Class
          type: object
        description: Classes.
        title: Classes
        type: array
    required:
      - classes
    title: Output
    type: object
TASK_IMAGE_SEGMENTATION:
  shortDescription: Image Segmentation divides an image into segments where each pixel in the image is mapped to an object.
  description: Image Segmentation divides an image into segments where each pixel in the image is mapped to an object. This task has multiple variants such
    as instance segmentation, panoptic segmentation and semantic segmentation.
  input:
    uiOrder: 0
    properties:
      image:
        description: The image file.
        type: string
        uiOrder: 1
        title: Image
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
    required:
      - image
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      segments:
        uiOrder: 0
        items:
          properties:
            label:
              description: The label for the class (model specific) of a segment.
              uiOrder: 0
              title: Label
              type: string
            mask:
              description: A str (base64 str of a single channel black-and-white img) representing the mask of a segment.
              uiOrder: 1
              title: Mask
              type: image/png
            score:
              description: A float that represents how likely it is that the segment belongs to the given class.
              uiOrder: 2
              title: Score
              type: number
          required:
            - label
            - mask
            - score
          description: Segment.
          title: Segment
          type: object
        description: Segments.
        title: Segments
        type: array
    required:
      - segments
    title: Output
    type: object
TASK_IMAGE_TO_TEXT:
  shortDescription: Image to text models output a text from a given image.
  description: Image to text models output a text from a given image. Image captioning or optical character recognition can be considered as the most common
    applications of image to text.
  input:
    uiOrder: 0
    properties:
      image:
        description: The image file.
        type: string
        uiOrder: 1
        title: Image
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
    required:
      - image
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      text:
        description: Generated text.
        uiOrder: 0
        title: Text
        type: string
    required:
      - text
    title: Output
    type: object
TASK_OBJECT_DETECTION:
  shortDescription: Object Detection models allow users to identify objects of certain defined classes.
  description: Object Detection models allow users to identify objects of certain defined classes. Object detection models receive an image as input and
    output the images with bounding boxes and labels on detected objects.
  input:
    uiOrder: 0
    properties:
      image:
        description: The image file.
        type: string
        uiOrder: 1
        title: Image
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
    required:
      - image
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      objects:
        uiOrder: 0
        items:
          properties:
            box:
              description: A dict (with keys [xmin,ymin,xmax,ymax]) representing the bounding box of a detected object.
              uiOrder: 0
              properties:
                xmax:
                  description: X max.
                  uiOrder: 0
                  title: X Max
                  type: number
                xmin:
                  description: X min.
                  uiOrder: 1
                  title: X Min
                  type: number
                ymax:
                  description: Y Max.
                  uiOrder: 2
                  title: Y Max
                  type: number
                ymin:
                  description: Y min.
                  uiOrder: 3
                  title: Y min
                  type: number
              required:
                - xmax
                - xmin
                - ymax
                - ymin
              title: Box
              type: object
            label:
              description: The label for the class (model specific) of a detected object.
              uiOrder: 1
              title: Label
              type: string
            score:
              description: A float that represents how likely it is that the detected object belongs to the given class.
              uiOrder: 2
              title: Score
              type: number
          required:
            - box
            - label
            - score
          description: Object.
          title: Object
          type: object
        description: Objects.
        title: Objects
        type: array
    required:
      - objects
    title: Output
    type: object
TASK_QUESTION_ANSWERING:
  shortDescription: Question Answering models can retrieve the answer to a question from a given text, which is useful for searching for an answer in a
    document.
  description: Question Answering models can retrieve the answer to a question from a given text, which is useful for searching for an answer in a document.
    Some question answering models can generate answers without context!.
  input:
    uiOrder: 0
    properties:
      inputs:
        uiOrder: 1
        properties:
          context:
            description: The context for answering the question.
            type: string
            uiOrder: 0
            title: Context
          question:
            description: The question.
            type: string
            uiOrder: 1
            title: Question
        required:
          - question
          - context
        description: Inputs.
        title: Inputs
        type: object
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
      options:
        $ref: '#/$defs/options'
        uiOrder: 2
    required:
      - inputs
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      answer:
        description: A string that’s the answer within the text.
        uiOrder: 0
        title: Answer
        type: string
      score:
        description: A float that represents how likely that the answer is correct.
        uiOrder: 2
        title: Score
        type: number
      start:
        description: The index (string wise) of the start of the answer within context.
        uiOrder: 3
        title: Start
        type: integer
      stop:
        description: The index (string wise) of the stop of the answer within context.
        uiOrder: 1
        title: Stop
        type: integer
    required:
      - answer
    title: Output
    type: object
TASK_SENTENCE_SIMILARITY:
  shortDescription: Sentence Similarity is the task of determining how similar two texts are.
  description: Sentence Similarity is the task of determining how similar two texts are. Sentence similarity models convert input texts into vectors (embeddings)
    that capture semantic information and calculate how close (similar) they are between them. This task is particularly useful for information retrieval
    and clustering/grouping.
  input:
    uiOrder: 0
    properties:
      inputs:
        uiOrder: 1
        properties:
          sentences:
            description: A list of strings which will be compared against the source-sentence.
            type: array
            uiOrder: 0
            items:
              description: Items.
              type: string
            title: Sentences
          source-sentence:
            description: The string that you wish to compare the other strings with. This can be a phrase, sentence, or longer passage, depending on the
              model being used.
            type: string
            shortDescription: The string that you wish to compare the other strings with.
            uiOrder: 1
            title: Source Sentence
        required:
          - source-sentence
          - sentences
        description: Inputs.
        title: Inputs
        type: object
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
      options:
        $ref: '#/$defs/options'
        uiOrder: 2
    required:
      - inputs
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      scores:
        description: The associated similarity score for each of the given strings.
        uiOrder: 0
        items:
          description: The associated similarity score for of the given string.
          title: Score
          type: number
        title: Scores
        type: array
    required:
      - scores
    title: Output
    type: object
TASK_SPEECH_RECOGNITION:
  shortDescription: Automatic Speech Recognition (ASR), also known as Speech to Text (STT), is the task of transcribing a given audio to text.
  description: Automatic Speech Recognition (ASR), also known as Speech to Text (STT), is the task of transcribing a given audio to text. It has many applications,
    such as voice user interfaces.
  input:
    uiOrder: 0
    properties:
      audio:
        description: The audio file.
        type: string
        uiOrder: 1
        title: Audio
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
    required:
      - audio
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      text:
        description: The string that was recognized within the audio file.
        uiOrder: 0
        title: Text
        type: string
    required:
      - text
    title: Output
    type: object
TASK_SUMMARIZATION:
  shortDescription: Summarization is the task of producing a shorter version of a document while preserving its important information.
  description: Summarization is the task of producing a shorter version of a document while preserving its important information. Some models can extract
    text from the original input, while other models can generate entirely new text.
  input:
    uiOrder: 0
    properties:
      inputs:
        $ref: '#/$defs/string-input'
        uiOrder: 1
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
      options:
        $ref: '#/$defs/options'
        uiOrder: 3
      parameters:
        uiOrder: 2
        properties:
          max-length:
            description: Integer to define the maximum length in tokens of the output summary.
            type: integer
            uiOrder: 0
            title: Max Length
          max-time:
            type: number
            uiOrder: 1
            maximum: 120.0
            minimum: 0.0
            description: The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit.
            title: Max Time
          min-length:
            description: Integer to define the minimum length in tokens of the output summary.
            type: integer
            uiOrder: 2
            title: Min Length
          repetition-penalty:
            description: The more a token is used within generation the more it is penalized to not be picked in successive generation passes.
            type: number
            uiOrder: 3
            maximum: 100.0
            minimum: 0.0
            title: Repetition Penalty
          temperature:
            default: 1.0
            description: The temperature of the sampling operation. 1 means regular sampling, 0 means always take the highest score, 100.0 is getting closer
              to uniform probability.
            type: number
            shortDescription: The temperature of the sampling operation.
            uiOrder: 4
            maximum: 100.0
            minimum: 0.0
            title: Temperature
          top-k:
            description: Integer to define the top tokens considered within the sample operation to create new text.
            type: integer
            uiOrder: 5
            title: Top K
          top-p:
            description: Float to define the tokens that are within the sample operation of text generation. Add tokens in the sample for more probable
              to least probable until the sum of the probabilities is greater than top-p.
            type: number
            shortDescription: Float to define the tokens that are within the sample operation of text generation.
            uiOrder: 6
            title: Top P
        required: []
        description: Parameters.
        title: Parameters
        type: object
    required:
      - inputs
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      summary-text:
        description: The string after summarization.
        uiOrder: 0
        title: Summary Text
        type: string
    required:
      - summary-text
    title: Output
    type: object
TASK_TABLE_QUESTION_ANSWERING:
  shortDescription: Table Question Answering (Table QA) is the answering a question about an information on a given table.
  input:
    uiOrder: 0
    properties:
      inputs:
        uiOrder: 1
        properties:
          query:
            description: The query in plain text that you want to ask the table.
            type: string
            uiOrder: 0
            title: Query
          table:
            description: A table of data represented as a dict of list where entries are headers and the lists are all the values, all lists must have the
              same size.
            type: object
            uiOrder: 1
            required: []
            title: Table
        required:
          - query
          - table
        description: Inputs.
        title: Inputs
        type: object
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
      options:
        $ref: '#/$defs/options'
        uiOrder: 2
    required:
      - inputs
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      aggregator:
        description: The aggregator used to get the answer.
        uiOrder: 0
        title: Aggregator
        type: string
      answer:
        description: The plaintext answer.
        uiOrder: 1
        title: Answer
        type: string
      cells:
        description: a list of coordinates of the cells contents.
        uiOrder: 2
        items:
          description: coordinate of the cell content.
          title: Cell
          type: string
        title: Cells
        type: array
      coordinates:
        description: a list of coordinates of the cells referenced in the answer.
        uiOrder: 3
        items:
          items:
            description: coordinate of the cell referenced in the answer.
            title: Coordinate
            type: integer
          type: array
        title: Coordinates
        type: array
    required:
      - answer
    title: Output
    type: object
TASK_TEXT_CLASSIFICATION:
  shortDescription: Text Classification is the task of assigning a label or class to a given text.
  description: Text Classification is the task of assigning a label or class to a given text. Some use cases are sentiment analysis, natural language inference,
    and assessing grammatical correctness.
  input:
    uiOrder: 0
    properties:
      inputs:
        $ref: '#/$defs/string-input'
        uiOrder: 1
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
      options:
        $ref: '#/$defs/options'
        uiOrder: 2
    required:
      - inputs
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      results:
        uiOrder: 0
        items:
          properties:
            label:
              description: The label for the class (model specific).
              uiOrder: 0
              title: Label
              type: string
            score:
              description: A floats that represents how likely is that the text belongs the this class.
              uiOrder: 1
              title: Score
              type: number
          required:
            - label
            - score
          description: Result.
          title: Result
          type: object
        description: Results.
        title: Results
        type: array
    required:
      - results
    title: Output
    type: object
TASK_TEXT_GENERATION:
  shortDescription: Generating text is the task of producing new text. These models can, for example, fill in incomplete text or paraphrase.
  description: Generating text is the task of producing new text. These models can, for example, fill in incomplete text or paraphrase.
  input:
    uiOrder: 0
    properties:
      inputs:
        $ref: '#/$defs/string-input'
        uiOrder: 1
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
      options:
        $ref: '#/$defs/options'
        uiOrder: 3
      parameters:
        uiOrder: 2
        properties:
          do-sample:
            description: Whether or not to use sampling, use greedy decoding otherwise.
            type: boolean
            uiOrder: 0
            title: Do Sample
          max-new-tokens:
            description: The amount of new tokens to be generated, this does not include the input length it is a estimate of the size of generated text
              you want. Each new tokens slows down the request, so look for balance between response times and length of text generated.
            type: integer
            shortDescription: The amount of new tokens to be generated.
            uiOrder: 1
            title: Max New Tokens
          max-time:
            description: The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit. Use
              that in combination with max-new-tokens for best results.
            type: number
            shortDescription: The amount of time in seconds that the query should take maximum.
            uiOrder: 2
            title: Max Time
          num-return-sequences:
            description: The number of proposition you want to be returned.
            type: integer
            uiOrder: 3
            title: Num Return Sequences
          repetition-penalty:
            description: The more a token is used within generation the more it is penalized to not be picked in successive generation passes.
            type: number
            uiOrder: 4
            title: Repetition Penalty
          return-full-text:
            description: If set to False, the return results will not contain the original query making it easier for prompting.
            type: boolean
            uiOrder: 5
            title: Return Full Text
          temperature:
            description: The temperature of the sampling operation. 1 means regular sampling, 0 means always take the highest score, 100.0 is getting closer
              to uniform probability.
            type: number
            shortDescription: The temperature of the sampling operation.
            uiOrder: 6
            title: Temperature
          top-k:
            description: Integer to define the top tokens considered within the sample operation to create new text.
            type: integer
            uiOrder: 7
            title: Top K
          top-p:
            description: Float to define the tokens that are within the sample operation of text generation. Add tokens in the sample for more probable
              to least probable until the sum of the probabilities is greater than top-p.
            type: number
            shortDescription: Float to define the tokens that are within the sample operation of text generation.
            uiOrder: 8
            title: Top P
        required: []
        description: Parameters.
        title: Parameters
        type: object
    required:
      - inputs
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      generated-text:
        description: The continuated string.
        uiOrder: 1
        title: Generated Text
        type: string
    required:
      - generated-text
    title: Output
    type: object
TASK_TEXT_TO_IMAGE:
  shortDescription: Generates images from input text.
  description: Generates images from input text. These models can be used to generate and modify images based on text prompts.
  input:
    uiOrder: 0
    properties:
      inputs:
        $ref: '#/$defs/string-input'
        uiOrder: 1
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
      options:
        $ref: '#/$defs/options'
        uiOrder: 3
      parameters:
        uiOrder: 2
        properties:
          guidance-scale:
            description: Guidance scale.
            type: number
            uiOrder: 0
            title: Guidance Scale
          height:
            description: Image Height.
            type: integer
            uiOrder: 1
            title: Height
          negative-prompt:
            description: Negative prompt for generating the image.
            type: string
            uiOrder: 2
            title: Negative Prompt
          num-inference-steps:
            description: Number of inference steps.
            type: integer
            uiOrder: 3
            title: Num Inference Steps
          width:
            description: Image width.
            type: integer
            uiOrder: 4
            title: Width
        required: []
        description: Parameters.
        title: Parameters
        type: object
    required:
      - inputs
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      image:
        uiOrder: 0
        description: Image.
        title: Image
        type: image/jpeg
    required:
      - image
    title: Output
    type: object
TASK_TOKEN_CLASSIFICATION:
  shortDescription: Token classification is a natural language understanding task in which a label is assigned to some tokens in a text.
  description: Token classification is a natural language understanding task in which a label is assigned to some tokens in a text. Some popular token classification
    subtasks are Named Entity Recognition (NER) and Part-of-Speech (PoS) tagging. NER models could be trained to identify specific entities in a text, such
    as dates, individuals and places; and PoS tagging would identify, for example, which words in a text are verbs, nouns, and punctuation marks.
  input:
    uiOrder: 0
    properties:
      inputs:
        $ref: '#/$defs/string-input'
        uiOrder: 1
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
      options:
        $ref: '#/$defs/options'
        uiOrder: 3
      parameters:
        uiOrder: 2
        properties:
          aggregation-strategy:
            description: 'There are several aggregation strategies:

              none: Every token gets classified without further aggregation.

              simple: Entities are grouped according to the default schema (B-, I- tags get merged when the tag is similar).

              first: Same as the simple strategy except words cannot end up with different tags. Words will use the tag of the first token when there is
              ambiguity.

              average: Same as the simple strategy except words cannot end up with different tags. Scores are averaged across tokens and then the maximum
              label is applied.

              max: Same as the simple strategy except words cannot end up with different tags. Word entity will be the token with the maximum score.'
            type: string
            shortDescription: 'There are several aggregation strategies: none, simple, first, average, and max.'
            uiOrder: 0
            title: Aggregation Strategy
        required: []
        description: Parameters.
        title: Parameters
        type: object
    required:
      - inputs
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      results:
        uiOrder: 0
        items:
          properties:
            end:
              description: The offset stringwise where the answer is located. Useful to disambiguate if word occurs multiple times.
              uiOrder: 0
              title: End
              type: integer
            entity-group:
              description: The type for the entity being recognized (model specific).
              uiOrder: 1
              title: Entity Group
              type: string
            score:
              description: How likely the entity was recognized.
              uiOrder: 2
              title: Score
              type: number
            start:
              description: The offset stringwise where the answer is located. Useful to disambiguate if word occurs multiple times.
              uiOrder: 3
              title: Start
              type: integer
            word:
              description: The string that was captured.
              uiOrder: 4
              title: Word
              type: string
          required: []
          title: Result
          type: object
        description: Results.
        title: Results
        type: array
    required:
      - results
    title: Output
    type: object
TASK_TRANSLATION:
  shortDescription: Translation is the task of converting text from one language to another.
  input:
    uiOrder: 0
    properties:
      inputs:
        $ref: '#/$defs/string-input'
        uiOrder: 1
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
      options:
        $ref: '#/$defs/options'
        uiOrder: 2
    required:
      - inputs
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      translation-text:
        description: The string after translation.
        uiOrder: 0
        title: Translation Text
        type: string
    required:
      - translation-text
    title: Output
    type: object
TASK_ZERO_SHOT_CLASSIFICATION:
  shortDescription: Zero-shot text classification is a task in natural language processing where a model is trained on a set of labeled examples but is
    then able to classify new examples from previously unseen classes.
  input:
    uiOrder: 0
    properties:
      inputs:
        $ref: '#/$defs/string-input'
        uiOrder: 1
      model:
        $ref: '#/$defs/model'
        uiOrder: 0
      options:
        $ref: '#/$defs/options'
        uiOrder: 3
      parameters:
        uiOrder: 2
        properties:
          candidate-labels:
            description: a list of strings that are potential classes for inputs. (max 10 candidate-labels, for more, simply run multiple requests, results
              are going to be misleading if using too many candidate-labels anyway. If you want to keep the exact same, you can simply run multi-label=True
              and do the scaling on your end. ).
            shortDescription: a list of strings that are potential classes for inputs.
            uiOrder: 0
            items:
              description: a string that are potential class for inputs.
              title: candidate-label
              type: string
            title: Candidate Labels
            type: array
          multi-label:
            description: Boolean that is set to True if classes can overlap.
            type: boolean
            uiOrder: 1
            title: Multi Label
        required:
          - candidate-labels
        description: Parameters.
        title: Parameters
        type: object
    required:
      - inputs
      - model
    title: Input
    type: object
  output:
    uiOrder: 0
    properties:
      labels:
        description: The list of strings for labels that you sent (in order).
        uiOrder: 1
        items:
          description: The string for label that you sent (in order).
          title: Label
          type: string
        title: Labels
        type: array
      scores:
        description: a list of floats that correspond the the probability of label, in the same order as labels.
        uiOrder: 0
        items:
          description: float that correspond the the probability of label.
          title: Score
          type: number
        title: Scores
        type: array
      sequence:
        description: The string sent as an input.
        uiOrder: 1
        title: Sequence
        type: string
    required:
      - labels
      - scores
    title: Output
    type: object
