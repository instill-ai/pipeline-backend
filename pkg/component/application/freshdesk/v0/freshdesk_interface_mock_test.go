// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package freshdesk

//go:generate minimock -i github.com/instill-ai/pipeline-backend/pkg/component/application/freshdesk/v0.FreshdeskInterface -o freshdesk_interface_mock_test.go -n FreshdeskInterfaceMock -p freshdesk

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// FreshdeskInterfaceMock implements FreshdeskInterface
type FreshdeskInterfaceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateCompany          func(req *TaskCreateCompanyReq) (tp1 *TaskCreateCompanyResponse, err error)
	funcCreateCompanyOrigin    string
	inspectFuncCreateCompany   func(req *TaskCreateCompanyReq)
	afterCreateCompanyCounter  uint64
	beforeCreateCompanyCounter uint64
	CreateCompanyMock          mFreshdeskInterfaceMockCreateCompany

	funcCreateContact          func(req *TaskCreateContactReq) (tp1 *TaskCreateContactResponse, err error)
	funcCreateContactOrigin    string
	inspectFuncCreateContact   func(req *TaskCreateContactReq)
	afterCreateContactCounter  uint64
	beforeCreateContactCounter uint64
	CreateContactMock          mFreshdeskInterfaceMockCreateContact

	funcCreateTicket          func(req *TaskCreateTicketReq) (tp1 *TaskCreateTicketResponse, err error)
	funcCreateTicketOrigin    string
	inspectFuncCreateTicket   func(req *TaskCreateTicketReq)
	afterCreateTicketCounter  uint64
	beforeCreateTicketCounter uint64
	CreateTicketMock          mFreshdeskInterfaceMockCreateTicket

	funcCreateTicketNote          func(ticketID int64, req *TaskCreateTicketNoteReq) (tp1 *TaskCreateTicketNoteResponse, err error)
	funcCreateTicketNoteOrigin    string
	inspectFuncCreateTicketNote   func(ticketID int64, req *TaskCreateTicketNoteReq)
	afterCreateTicketNoteCounter  uint64
	beforeCreateTicketNoteCounter uint64
	CreateTicketNoteMock          mFreshdeskInterfaceMockCreateTicketNote

	funcGetAgent          func(agentID int64) (tp1 *TaskGetAgentResponse, err error)
	funcGetAgentOrigin    string
	inspectFuncGetAgent   func(agentID int64)
	afterGetAgentCounter  uint64
	beforeGetAgentCounter uint64
	GetAgentMock          mFreshdeskInterfaceMockGetAgent

	funcGetAll          func(objectType string, pagination bool, paginationPath string) (ta1 []TaskGetAllResponse, s1 string, err error)
	funcGetAllOrigin    string
	inspectFuncGetAll   func(objectType string, pagination bool, paginationPath string)
	afterGetAllCounter  uint64
	beforeGetAllCounter uint64
	GetAllMock          mFreshdeskInterfaceMockGetAll

	funcGetAllConversations          func(ticketID int64, pagination bool, paginationPath string) (ta1 []TaskGetAllConversationsResponse, s1 string, err error)
	funcGetAllConversationsOrigin    string
	inspectFuncGetAllConversations   func(ticketID int64, pagination bool, paginationPath string)
	afterGetAllConversationsCounter  uint64
	beforeGetAllConversationsCounter uint64
	GetAllConversationsMock          mFreshdeskInterfaceMockGetAllConversations

	funcGetCompany          func(companyID int64) (tp1 *TaskGetCompanyResponse, err error)
	funcGetCompanyOrigin    string
	inspectFuncGetCompany   func(companyID int64)
	afterGetCompanyCounter  uint64
	beforeGetCompanyCounter uint64
	GetCompanyMock          mFreshdeskInterfaceMockGetCompany

	funcGetContact          func(contactID int64) (tp1 *TaskGetContactResponse, err error)
	funcGetContactOrigin    string
	inspectFuncGetContact   func(contactID int64)
	afterGetContactCounter  uint64
	beforeGetContactCounter uint64
	GetContactMock          mFreshdeskInterfaceMockGetContact

	funcGetGroup          func(groupID int64) (tp1 *TaskGetGroupResponse, err error)
	funcGetGroupOrigin    string
	inspectFuncGetGroup   func(groupID int64)
	afterGetGroupCounter  uint64
	beforeGetGroupCounter uint64
	GetGroupMock          mFreshdeskInterfaceMockGetGroup

	funcGetProduct          func(productID int64) (tp1 *TaskGetProductResponse, err error)
	funcGetProductOrigin    string
	inspectFuncGetProduct   func(productID int64)
	afterGetProductCounter  uint64
	beforeGetProductCounter uint64
	GetProductMock          mFreshdeskInterfaceMockGetProduct

	funcGetRole          func(roleID int64) (tp1 *TaskGetRoleResponse, err error)
	funcGetRoleOrigin    string
	inspectFuncGetRole   func(roleID int64)
	afterGetRoleCounter  uint64
	beforeGetRoleCounter uint64
	GetRoleMock          mFreshdeskInterfaceMockGetRole

	funcGetSkill          func(skillID int64) (tp1 *TaskGetSkillResponse, err error)
	funcGetSkillOrigin    string
	inspectFuncGetSkill   func(skillID int64)
	afterGetSkillCounter  uint64
	beforeGetSkillCounter uint64
	GetSkillMock          mFreshdeskInterfaceMockGetSkill

	funcGetTicket          func(ticketID int64) (tp1 *TaskGetTicketResponse, err error)
	funcGetTicketOrigin    string
	inspectFuncGetTicket   func(ticketID int64)
	afterGetTicketCounter  uint64
	beforeGetTicketCounter uint64
	GetTicketMock          mFreshdeskInterfaceMockGetTicket

	funcReplyToTicket          func(ticketID int64, req *TaskReplyToTicketReq) (tp1 *TaskReplyToTicketResponse, err error)
	funcReplyToTicketOrigin    string
	inspectFuncReplyToTicket   func(ticketID int64, req *TaskReplyToTicketReq)
	afterReplyToTicketCounter  uint64
	beforeReplyToTicketCounter uint64
	ReplyToTicketMock          mFreshdeskInterfaceMockReplyToTicket
}

// NewFreshdeskInterfaceMock returns a mock for FreshdeskInterface
func NewFreshdeskInterfaceMock(t minimock.Tester) *FreshdeskInterfaceMock {
	m := &FreshdeskInterfaceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateCompanyMock = mFreshdeskInterfaceMockCreateCompany{mock: m}
	m.CreateCompanyMock.callArgs = []*FreshdeskInterfaceMockCreateCompanyParams{}

	m.CreateContactMock = mFreshdeskInterfaceMockCreateContact{mock: m}
	m.CreateContactMock.callArgs = []*FreshdeskInterfaceMockCreateContactParams{}

	m.CreateTicketMock = mFreshdeskInterfaceMockCreateTicket{mock: m}
	m.CreateTicketMock.callArgs = []*FreshdeskInterfaceMockCreateTicketParams{}

	m.CreateTicketNoteMock = mFreshdeskInterfaceMockCreateTicketNote{mock: m}
	m.CreateTicketNoteMock.callArgs = []*FreshdeskInterfaceMockCreateTicketNoteParams{}

	m.GetAgentMock = mFreshdeskInterfaceMockGetAgent{mock: m}
	m.GetAgentMock.callArgs = []*FreshdeskInterfaceMockGetAgentParams{}

	m.GetAllMock = mFreshdeskInterfaceMockGetAll{mock: m}
	m.GetAllMock.callArgs = []*FreshdeskInterfaceMockGetAllParams{}

	m.GetAllConversationsMock = mFreshdeskInterfaceMockGetAllConversations{mock: m}
	m.GetAllConversationsMock.callArgs = []*FreshdeskInterfaceMockGetAllConversationsParams{}

	m.GetCompanyMock = mFreshdeskInterfaceMockGetCompany{mock: m}
	m.GetCompanyMock.callArgs = []*FreshdeskInterfaceMockGetCompanyParams{}

	m.GetContactMock = mFreshdeskInterfaceMockGetContact{mock: m}
	m.GetContactMock.callArgs = []*FreshdeskInterfaceMockGetContactParams{}

	m.GetGroupMock = mFreshdeskInterfaceMockGetGroup{mock: m}
	m.GetGroupMock.callArgs = []*FreshdeskInterfaceMockGetGroupParams{}

	m.GetProductMock = mFreshdeskInterfaceMockGetProduct{mock: m}
	m.GetProductMock.callArgs = []*FreshdeskInterfaceMockGetProductParams{}

	m.GetRoleMock = mFreshdeskInterfaceMockGetRole{mock: m}
	m.GetRoleMock.callArgs = []*FreshdeskInterfaceMockGetRoleParams{}

	m.GetSkillMock = mFreshdeskInterfaceMockGetSkill{mock: m}
	m.GetSkillMock.callArgs = []*FreshdeskInterfaceMockGetSkillParams{}

	m.GetTicketMock = mFreshdeskInterfaceMockGetTicket{mock: m}
	m.GetTicketMock.callArgs = []*FreshdeskInterfaceMockGetTicketParams{}

	m.ReplyToTicketMock = mFreshdeskInterfaceMockReplyToTicket{mock: m}
	m.ReplyToTicketMock.callArgs = []*FreshdeskInterfaceMockReplyToTicketParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mFreshdeskInterfaceMockCreateCompany struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockCreateCompanyExpectation
	expectations       []*FreshdeskInterfaceMockCreateCompanyExpectation

	callArgs []*FreshdeskInterfaceMockCreateCompanyParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockCreateCompanyExpectation specifies expectation struct of the FreshdeskInterface.CreateCompany
type FreshdeskInterfaceMockCreateCompanyExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockCreateCompanyParams
	paramPtrs          *FreshdeskInterfaceMockCreateCompanyParamPtrs
	expectationOrigins FreshdeskInterfaceMockCreateCompanyExpectationOrigins
	results            *FreshdeskInterfaceMockCreateCompanyResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockCreateCompanyParams contains parameters of the FreshdeskInterface.CreateCompany
type FreshdeskInterfaceMockCreateCompanyParams struct {
	req *TaskCreateCompanyReq
}

// FreshdeskInterfaceMockCreateCompanyParamPtrs contains pointers to parameters of the FreshdeskInterface.CreateCompany
type FreshdeskInterfaceMockCreateCompanyParamPtrs struct {
	req **TaskCreateCompanyReq
}

// FreshdeskInterfaceMockCreateCompanyResults contains results of the FreshdeskInterface.CreateCompany
type FreshdeskInterfaceMockCreateCompanyResults struct {
	tp1 *TaskCreateCompanyResponse
	err error
}

// FreshdeskInterfaceMockCreateCompanyOrigins contains origins of expectations of the FreshdeskInterface.CreateCompany
type FreshdeskInterfaceMockCreateCompanyExpectationOrigins struct {
	origin    string
	originReq string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateCompany *mFreshdeskInterfaceMockCreateCompany) Optional() *mFreshdeskInterfaceMockCreateCompany {
	mmCreateCompany.optional = true
	return mmCreateCompany
}

// Expect sets up expected params for FreshdeskInterface.CreateCompany
func (mmCreateCompany *mFreshdeskInterfaceMockCreateCompany) Expect(req *TaskCreateCompanyReq) *mFreshdeskInterfaceMockCreateCompany {
	if mmCreateCompany.mock.funcCreateCompany != nil {
		mmCreateCompany.mock.t.Fatalf("FreshdeskInterfaceMock.CreateCompany mock is already set by Set")
	}

	if mmCreateCompany.defaultExpectation == nil {
		mmCreateCompany.defaultExpectation = &FreshdeskInterfaceMockCreateCompanyExpectation{}
	}

	if mmCreateCompany.defaultExpectation.paramPtrs != nil {
		mmCreateCompany.mock.t.Fatalf("FreshdeskInterfaceMock.CreateCompany mock is already set by ExpectParams functions")
	}

	mmCreateCompany.defaultExpectation.params = &FreshdeskInterfaceMockCreateCompanyParams{req}
	mmCreateCompany.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateCompany.expectations {
		if minimock.Equal(e.params, mmCreateCompany.defaultExpectation.params) {
			mmCreateCompany.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateCompany.defaultExpectation.params)
		}
	}

	return mmCreateCompany
}

// ExpectReqParam1 sets up expected param req for FreshdeskInterface.CreateCompany
func (mmCreateCompany *mFreshdeskInterfaceMockCreateCompany) ExpectReqParam1(req *TaskCreateCompanyReq) *mFreshdeskInterfaceMockCreateCompany {
	if mmCreateCompany.mock.funcCreateCompany != nil {
		mmCreateCompany.mock.t.Fatalf("FreshdeskInterfaceMock.CreateCompany mock is already set by Set")
	}

	if mmCreateCompany.defaultExpectation == nil {
		mmCreateCompany.defaultExpectation = &FreshdeskInterfaceMockCreateCompanyExpectation{}
	}

	if mmCreateCompany.defaultExpectation.params != nil {
		mmCreateCompany.mock.t.Fatalf("FreshdeskInterfaceMock.CreateCompany mock is already set by Expect")
	}

	if mmCreateCompany.defaultExpectation.paramPtrs == nil {
		mmCreateCompany.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockCreateCompanyParamPtrs{}
	}
	mmCreateCompany.defaultExpectation.paramPtrs.req = &req
	mmCreateCompany.defaultExpectation.expectationOrigins.originReq = minimock.CallerInfo(1)

	return mmCreateCompany
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.CreateCompany
func (mmCreateCompany *mFreshdeskInterfaceMockCreateCompany) Inspect(f func(req *TaskCreateCompanyReq)) *mFreshdeskInterfaceMockCreateCompany {
	if mmCreateCompany.mock.inspectFuncCreateCompany != nil {
		mmCreateCompany.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.CreateCompany")
	}

	mmCreateCompany.mock.inspectFuncCreateCompany = f

	return mmCreateCompany
}

// Return sets up results that will be returned by FreshdeskInterface.CreateCompany
func (mmCreateCompany *mFreshdeskInterfaceMockCreateCompany) Return(tp1 *TaskCreateCompanyResponse, err error) *FreshdeskInterfaceMock {
	if mmCreateCompany.mock.funcCreateCompany != nil {
		mmCreateCompany.mock.t.Fatalf("FreshdeskInterfaceMock.CreateCompany mock is already set by Set")
	}

	if mmCreateCompany.defaultExpectation == nil {
		mmCreateCompany.defaultExpectation = &FreshdeskInterfaceMockCreateCompanyExpectation{mock: mmCreateCompany.mock}
	}
	mmCreateCompany.defaultExpectation.results = &FreshdeskInterfaceMockCreateCompanyResults{tp1, err}
	mmCreateCompany.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateCompany.mock
}

// Set uses given function f to mock the FreshdeskInterface.CreateCompany method
func (mmCreateCompany *mFreshdeskInterfaceMockCreateCompany) Set(f func(req *TaskCreateCompanyReq) (tp1 *TaskCreateCompanyResponse, err error)) *FreshdeskInterfaceMock {
	if mmCreateCompany.defaultExpectation != nil {
		mmCreateCompany.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.CreateCompany method")
	}

	if len(mmCreateCompany.expectations) > 0 {
		mmCreateCompany.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.CreateCompany method")
	}

	mmCreateCompany.mock.funcCreateCompany = f
	mmCreateCompany.mock.funcCreateCompanyOrigin = minimock.CallerInfo(1)
	return mmCreateCompany.mock
}

// When sets expectation for the FreshdeskInterface.CreateCompany which will trigger the result defined by the following
// Then helper
func (mmCreateCompany *mFreshdeskInterfaceMockCreateCompany) When(req *TaskCreateCompanyReq) *FreshdeskInterfaceMockCreateCompanyExpectation {
	if mmCreateCompany.mock.funcCreateCompany != nil {
		mmCreateCompany.mock.t.Fatalf("FreshdeskInterfaceMock.CreateCompany mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockCreateCompanyExpectation{
		mock:               mmCreateCompany.mock,
		params:             &FreshdeskInterfaceMockCreateCompanyParams{req},
		expectationOrigins: FreshdeskInterfaceMockCreateCompanyExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateCompany.expectations = append(mmCreateCompany.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.CreateCompany return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockCreateCompanyExpectation) Then(tp1 *TaskCreateCompanyResponse, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockCreateCompanyResults{tp1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.CreateCompany should be invoked
func (mmCreateCompany *mFreshdeskInterfaceMockCreateCompany) Times(n uint64) *mFreshdeskInterfaceMockCreateCompany {
	if n == 0 {
		mmCreateCompany.mock.t.Fatalf("Times of FreshdeskInterfaceMock.CreateCompany mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateCompany.expectedInvocations, n)
	mmCreateCompany.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateCompany
}

func (mmCreateCompany *mFreshdeskInterfaceMockCreateCompany) invocationsDone() bool {
	if len(mmCreateCompany.expectations) == 0 && mmCreateCompany.defaultExpectation == nil && mmCreateCompany.mock.funcCreateCompany == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateCompany.mock.afterCreateCompanyCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateCompany.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateCompany implements FreshdeskInterface
func (mmCreateCompany *FreshdeskInterfaceMock) CreateCompany(req *TaskCreateCompanyReq) (tp1 *TaskCreateCompanyResponse, err error) {
	mm_atomic.AddUint64(&mmCreateCompany.beforeCreateCompanyCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateCompany.afterCreateCompanyCounter, 1)

	mmCreateCompany.t.Helper()

	if mmCreateCompany.inspectFuncCreateCompany != nil {
		mmCreateCompany.inspectFuncCreateCompany(req)
	}

	mm_params := FreshdeskInterfaceMockCreateCompanyParams{req}

	// Record call args
	mmCreateCompany.CreateCompanyMock.mutex.Lock()
	mmCreateCompany.CreateCompanyMock.callArgs = append(mmCreateCompany.CreateCompanyMock.callArgs, &mm_params)
	mmCreateCompany.CreateCompanyMock.mutex.Unlock()

	for _, e := range mmCreateCompany.CreateCompanyMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmCreateCompany.CreateCompanyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateCompany.CreateCompanyMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateCompany.CreateCompanyMock.defaultExpectation.params
		mm_want_ptrs := mmCreateCompany.CreateCompanyMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockCreateCompanyParams{req}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmCreateCompany.t.Errorf("FreshdeskInterfaceMock.CreateCompany got unexpected parameter req, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateCompany.CreateCompanyMock.defaultExpectation.expectationOrigins.originReq, *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateCompany.t.Errorf("FreshdeskInterfaceMock.CreateCompany got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateCompany.CreateCompanyMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateCompany.CreateCompanyMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateCompany.t.Fatal("No results are set for the FreshdeskInterfaceMock.CreateCompany")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmCreateCompany.funcCreateCompany != nil {
		return mmCreateCompany.funcCreateCompany(req)
	}
	mmCreateCompany.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.CreateCompany. %v", req)
	return
}

// CreateCompanyAfterCounter returns a count of finished FreshdeskInterfaceMock.CreateCompany invocations
func (mmCreateCompany *FreshdeskInterfaceMock) CreateCompanyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateCompany.afterCreateCompanyCounter)
}

// CreateCompanyBeforeCounter returns a count of FreshdeskInterfaceMock.CreateCompany invocations
func (mmCreateCompany *FreshdeskInterfaceMock) CreateCompanyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateCompany.beforeCreateCompanyCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.CreateCompany.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateCompany *mFreshdeskInterfaceMockCreateCompany) Calls() []*FreshdeskInterfaceMockCreateCompanyParams {
	mmCreateCompany.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockCreateCompanyParams, len(mmCreateCompany.callArgs))
	copy(argCopy, mmCreateCompany.callArgs)

	mmCreateCompany.mutex.RUnlock()

	return argCopy
}

// MinimockCreateCompanyDone returns true if the count of the CreateCompany invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockCreateCompanyDone() bool {
	if m.CreateCompanyMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateCompanyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateCompanyMock.invocationsDone()
}

// MinimockCreateCompanyInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockCreateCompanyInspect() {
	for _, e := range m.CreateCompanyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateCompany at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateCompanyCounter := mm_atomic.LoadUint64(&m.afterCreateCompanyCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateCompanyMock.defaultExpectation != nil && afterCreateCompanyCounter < 1 {
		if m.CreateCompanyMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateCompany at\n%s", m.CreateCompanyMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateCompany at\n%s with params: %#v", m.CreateCompanyMock.defaultExpectation.expectationOrigins.origin, *m.CreateCompanyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateCompany != nil && afterCreateCompanyCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateCompany at\n%s", m.funcCreateCompanyOrigin)
	}

	if !m.CreateCompanyMock.invocationsDone() && afterCreateCompanyCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.CreateCompany at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateCompanyMock.expectedInvocations), m.CreateCompanyMock.expectedInvocationsOrigin, afterCreateCompanyCounter)
	}
}

type mFreshdeskInterfaceMockCreateContact struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockCreateContactExpectation
	expectations       []*FreshdeskInterfaceMockCreateContactExpectation

	callArgs []*FreshdeskInterfaceMockCreateContactParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockCreateContactExpectation specifies expectation struct of the FreshdeskInterface.CreateContact
type FreshdeskInterfaceMockCreateContactExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockCreateContactParams
	paramPtrs          *FreshdeskInterfaceMockCreateContactParamPtrs
	expectationOrigins FreshdeskInterfaceMockCreateContactExpectationOrigins
	results            *FreshdeskInterfaceMockCreateContactResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockCreateContactParams contains parameters of the FreshdeskInterface.CreateContact
type FreshdeskInterfaceMockCreateContactParams struct {
	req *TaskCreateContactReq
}

// FreshdeskInterfaceMockCreateContactParamPtrs contains pointers to parameters of the FreshdeskInterface.CreateContact
type FreshdeskInterfaceMockCreateContactParamPtrs struct {
	req **TaskCreateContactReq
}

// FreshdeskInterfaceMockCreateContactResults contains results of the FreshdeskInterface.CreateContact
type FreshdeskInterfaceMockCreateContactResults struct {
	tp1 *TaskCreateContactResponse
	err error
}

// FreshdeskInterfaceMockCreateContactOrigins contains origins of expectations of the FreshdeskInterface.CreateContact
type FreshdeskInterfaceMockCreateContactExpectationOrigins struct {
	origin    string
	originReq string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateContact *mFreshdeskInterfaceMockCreateContact) Optional() *mFreshdeskInterfaceMockCreateContact {
	mmCreateContact.optional = true
	return mmCreateContact
}

// Expect sets up expected params for FreshdeskInterface.CreateContact
func (mmCreateContact *mFreshdeskInterfaceMockCreateContact) Expect(req *TaskCreateContactReq) *mFreshdeskInterfaceMockCreateContact {
	if mmCreateContact.mock.funcCreateContact != nil {
		mmCreateContact.mock.t.Fatalf("FreshdeskInterfaceMock.CreateContact mock is already set by Set")
	}

	if mmCreateContact.defaultExpectation == nil {
		mmCreateContact.defaultExpectation = &FreshdeskInterfaceMockCreateContactExpectation{}
	}

	if mmCreateContact.defaultExpectation.paramPtrs != nil {
		mmCreateContact.mock.t.Fatalf("FreshdeskInterfaceMock.CreateContact mock is already set by ExpectParams functions")
	}

	mmCreateContact.defaultExpectation.params = &FreshdeskInterfaceMockCreateContactParams{req}
	mmCreateContact.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateContact.expectations {
		if minimock.Equal(e.params, mmCreateContact.defaultExpectation.params) {
			mmCreateContact.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateContact.defaultExpectation.params)
		}
	}

	return mmCreateContact
}

// ExpectReqParam1 sets up expected param req for FreshdeskInterface.CreateContact
func (mmCreateContact *mFreshdeskInterfaceMockCreateContact) ExpectReqParam1(req *TaskCreateContactReq) *mFreshdeskInterfaceMockCreateContact {
	if mmCreateContact.mock.funcCreateContact != nil {
		mmCreateContact.mock.t.Fatalf("FreshdeskInterfaceMock.CreateContact mock is already set by Set")
	}

	if mmCreateContact.defaultExpectation == nil {
		mmCreateContact.defaultExpectation = &FreshdeskInterfaceMockCreateContactExpectation{}
	}

	if mmCreateContact.defaultExpectation.params != nil {
		mmCreateContact.mock.t.Fatalf("FreshdeskInterfaceMock.CreateContact mock is already set by Expect")
	}

	if mmCreateContact.defaultExpectation.paramPtrs == nil {
		mmCreateContact.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockCreateContactParamPtrs{}
	}
	mmCreateContact.defaultExpectation.paramPtrs.req = &req
	mmCreateContact.defaultExpectation.expectationOrigins.originReq = minimock.CallerInfo(1)

	return mmCreateContact
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.CreateContact
func (mmCreateContact *mFreshdeskInterfaceMockCreateContact) Inspect(f func(req *TaskCreateContactReq)) *mFreshdeskInterfaceMockCreateContact {
	if mmCreateContact.mock.inspectFuncCreateContact != nil {
		mmCreateContact.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.CreateContact")
	}

	mmCreateContact.mock.inspectFuncCreateContact = f

	return mmCreateContact
}

// Return sets up results that will be returned by FreshdeskInterface.CreateContact
func (mmCreateContact *mFreshdeskInterfaceMockCreateContact) Return(tp1 *TaskCreateContactResponse, err error) *FreshdeskInterfaceMock {
	if mmCreateContact.mock.funcCreateContact != nil {
		mmCreateContact.mock.t.Fatalf("FreshdeskInterfaceMock.CreateContact mock is already set by Set")
	}

	if mmCreateContact.defaultExpectation == nil {
		mmCreateContact.defaultExpectation = &FreshdeskInterfaceMockCreateContactExpectation{mock: mmCreateContact.mock}
	}
	mmCreateContact.defaultExpectation.results = &FreshdeskInterfaceMockCreateContactResults{tp1, err}
	mmCreateContact.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateContact.mock
}

// Set uses given function f to mock the FreshdeskInterface.CreateContact method
func (mmCreateContact *mFreshdeskInterfaceMockCreateContact) Set(f func(req *TaskCreateContactReq) (tp1 *TaskCreateContactResponse, err error)) *FreshdeskInterfaceMock {
	if mmCreateContact.defaultExpectation != nil {
		mmCreateContact.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.CreateContact method")
	}

	if len(mmCreateContact.expectations) > 0 {
		mmCreateContact.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.CreateContact method")
	}

	mmCreateContact.mock.funcCreateContact = f
	mmCreateContact.mock.funcCreateContactOrigin = minimock.CallerInfo(1)
	return mmCreateContact.mock
}

// When sets expectation for the FreshdeskInterface.CreateContact which will trigger the result defined by the following
// Then helper
func (mmCreateContact *mFreshdeskInterfaceMockCreateContact) When(req *TaskCreateContactReq) *FreshdeskInterfaceMockCreateContactExpectation {
	if mmCreateContact.mock.funcCreateContact != nil {
		mmCreateContact.mock.t.Fatalf("FreshdeskInterfaceMock.CreateContact mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockCreateContactExpectation{
		mock:               mmCreateContact.mock,
		params:             &FreshdeskInterfaceMockCreateContactParams{req},
		expectationOrigins: FreshdeskInterfaceMockCreateContactExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateContact.expectations = append(mmCreateContact.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.CreateContact return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockCreateContactExpectation) Then(tp1 *TaskCreateContactResponse, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockCreateContactResults{tp1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.CreateContact should be invoked
func (mmCreateContact *mFreshdeskInterfaceMockCreateContact) Times(n uint64) *mFreshdeskInterfaceMockCreateContact {
	if n == 0 {
		mmCreateContact.mock.t.Fatalf("Times of FreshdeskInterfaceMock.CreateContact mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateContact.expectedInvocations, n)
	mmCreateContact.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateContact
}

func (mmCreateContact *mFreshdeskInterfaceMockCreateContact) invocationsDone() bool {
	if len(mmCreateContact.expectations) == 0 && mmCreateContact.defaultExpectation == nil && mmCreateContact.mock.funcCreateContact == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateContact.mock.afterCreateContactCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateContact.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateContact implements FreshdeskInterface
func (mmCreateContact *FreshdeskInterfaceMock) CreateContact(req *TaskCreateContactReq) (tp1 *TaskCreateContactResponse, err error) {
	mm_atomic.AddUint64(&mmCreateContact.beforeCreateContactCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateContact.afterCreateContactCounter, 1)

	mmCreateContact.t.Helper()

	if mmCreateContact.inspectFuncCreateContact != nil {
		mmCreateContact.inspectFuncCreateContact(req)
	}

	mm_params := FreshdeskInterfaceMockCreateContactParams{req}

	// Record call args
	mmCreateContact.CreateContactMock.mutex.Lock()
	mmCreateContact.CreateContactMock.callArgs = append(mmCreateContact.CreateContactMock.callArgs, &mm_params)
	mmCreateContact.CreateContactMock.mutex.Unlock()

	for _, e := range mmCreateContact.CreateContactMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmCreateContact.CreateContactMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateContact.CreateContactMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateContact.CreateContactMock.defaultExpectation.params
		mm_want_ptrs := mmCreateContact.CreateContactMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockCreateContactParams{req}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmCreateContact.t.Errorf("FreshdeskInterfaceMock.CreateContact got unexpected parameter req, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateContact.CreateContactMock.defaultExpectation.expectationOrigins.originReq, *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateContact.t.Errorf("FreshdeskInterfaceMock.CreateContact got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateContact.CreateContactMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateContact.CreateContactMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateContact.t.Fatal("No results are set for the FreshdeskInterfaceMock.CreateContact")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmCreateContact.funcCreateContact != nil {
		return mmCreateContact.funcCreateContact(req)
	}
	mmCreateContact.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.CreateContact. %v", req)
	return
}

// CreateContactAfterCounter returns a count of finished FreshdeskInterfaceMock.CreateContact invocations
func (mmCreateContact *FreshdeskInterfaceMock) CreateContactAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateContact.afterCreateContactCounter)
}

// CreateContactBeforeCounter returns a count of FreshdeskInterfaceMock.CreateContact invocations
func (mmCreateContact *FreshdeskInterfaceMock) CreateContactBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateContact.beforeCreateContactCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.CreateContact.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateContact *mFreshdeskInterfaceMockCreateContact) Calls() []*FreshdeskInterfaceMockCreateContactParams {
	mmCreateContact.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockCreateContactParams, len(mmCreateContact.callArgs))
	copy(argCopy, mmCreateContact.callArgs)

	mmCreateContact.mutex.RUnlock()

	return argCopy
}

// MinimockCreateContactDone returns true if the count of the CreateContact invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockCreateContactDone() bool {
	if m.CreateContactMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateContactMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateContactMock.invocationsDone()
}

// MinimockCreateContactInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockCreateContactInspect() {
	for _, e := range m.CreateContactMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateContact at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateContactCounter := mm_atomic.LoadUint64(&m.afterCreateContactCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateContactMock.defaultExpectation != nil && afterCreateContactCounter < 1 {
		if m.CreateContactMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateContact at\n%s", m.CreateContactMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateContact at\n%s with params: %#v", m.CreateContactMock.defaultExpectation.expectationOrigins.origin, *m.CreateContactMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateContact != nil && afterCreateContactCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateContact at\n%s", m.funcCreateContactOrigin)
	}

	if !m.CreateContactMock.invocationsDone() && afterCreateContactCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.CreateContact at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateContactMock.expectedInvocations), m.CreateContactMock.expectedInvocationsOrigin, afterCreateContactCounter)
	}
}

type mFreshdeskInterfaceMockCreateTicket struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockCreateTicketExpectation
	expectations       []*FreshdeskInterfaceMockCreateTicketExpectation

	callArgs []*FreshdeskInterfaceMockCreateTicketParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockCreateTicketExpectation specifies expectation struct of the FreshdeskInterface.CreateTicket
type FreshdeskInterfaceMockCreateTicketExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockCreateTicketParams
	paramPtrs          *FreshdeskInterfaceMockCreateTicketParamPtrs
	expectationOrigins FreshdeskInterfaceMockCreateTicketExpectationOrigins
	results            *FreshdeskInterfaceMockCreateTicketResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockCreateTicketParams contains parameters of the FreshdeskInterface.CreateTicket
type FreshdeskInterfaceMockCreateTicketParams struct {
	req *TaskCreateTicketReq
}

// FreshdeskInterfaceMockCreateTicketParamPtrs contains pointers to parameters of the FreshdeskInterface.CreateTicket
type FreshdeskInterfaceMockCreateTicketParamPtrs struct {
	req **TaskCreateTicketReq
}

// FreshdeskInterfaceMockCreateTicketResults contains results of the FreshdeskInterface.CreateTicket
type FreshdeskInterfaceMockCreateTicketResults struct {
	tp1 *TaskCreateTicketResponse
	err error
}

// FreshdeskInterfaceMockCreateTicketOrigins contains origins of expectations of the FreshdeskInterface.CreateTicket
type FreshdeskInterfaceMockCreateTicketExpectationOrigins struct {
	origin    string
	originReq string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateTicket *mFreshdeskInterfaceMockCreateTicket) Optional() *mFreshdeskInterfaceMockCreateTicket {
	mmCreateTicket.optional = true
	return mmCreateTicket
}

// Expect sets up expected params for FreshdeskInterface.CreateTicket
func (mmCreateTicket *mFreshdeskInterfaceMockCreateTicket) Expect(req *TaskCreateTicketReq) *mFreshdeskInterfaceMockCreateTicket {
	if mmCreateTicket.mock.funcCreateTicket != nil {
		mmCreateTicket.mock.t.Fatalf("FreshdeskInterfaceMock.CreateTicket mock is already set by Set")
	}

	if mmCreateTicket.defaultExpectation == nil {
		mmCreateTicket.defaultExpectation = &FreshdeskInterfaceMockCreateTicketExpectation{}
	}

	if mmCreateTicket.defaultExpectation.paramPtrs != nil {
		mmCreateTicket.mock.t.Fatalf("FreshdeskInterfaceMock.CreateTicket mock is already set by ExpectParams functions")
	}

	mmCreateTicket.defaultExpectation.params = &FreshdeskInterfaceMockCreateTicketParams{req}
	mmCreateTicket.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateTicket.expectations {
		if minimock.Equal(e.params, mmCreateTicket.defaultExpectation.params) {
			mmCreateTicket.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateTicket.defaultExpectation.params)
		}
	}

	return mmCreateTicket
}

// ExpectReqParam1 sets up expected param req for FreshdeskInterface.CreateTicket
func (mmCreateTicket *mFreshdeskInterfaceMockCreateTicket) ExpectReqParam1(req *TaskCreateTicketReq) *mFreshdeskInterfaceMockCreateTicket {
	if mmCreateTicket.mock.funcCreateTicket != nil {
		mmCreateTicket.mock.t.Fatalf("FreshdeskInterfaceMock.CreateTicket mock is already set by Set")
	}

	if mmCreateTicket.defaultExpectation == nil {
		mmCreateTicket.defaultExpectation = &FreshdeskInterfaceMockCreateTicketExpectation{}
	}

	if mmCreateTicket.defaultExpectation.params != nil {
		mmCreateTicket.mock.t.Fatalf("FreshdeskInterfaceMock.CreateTicket mock is already set by Expect")
	}

	if mmCreateTicket.defaultExpectation.paramPtrs == nil {
		mmCreateTicket.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockCreateTicketParamPtrs{}
	}
	mmCreateTicket.defaultExpectation.paramPtrs.req = &req
	mmCreateTicket.defaultExpectation.expectationOrigins.originReq = minimock.CallerInfo(1)

	return mmCreateTicket
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.CreateTicket
func (mmCreateTicket *mFreshdeskInterfaceMockCreateTicket) Inspect(f func(req *TaskCreateTicketReq)) *mFreshdeskInterfaceMockCreateTicket {
	if mmCreateTicket.mock.inspectFuncCreateTicket != nil {
		mmCreateTicket.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.CreateTicket")
	}

	mmCreateTicket.mock.inspectFuncCreateTicket = f

	return mmCreateTicket
}

// Return sets up results that will be returned by FreshdeskInterface.CreateTicket
func (mmCreateTicket *mFreshdeskInterfaceMockCreateTicket) Return(tp1 *TaskCreateTicketResponse, err error) *FreshdeskInterfaceMock {
	if mmCreateTicket.mock.funcCreateTicket != nil {
		mmCreateTicket.mock.t.Fatalf("FreshdeskInterfaceMock.CreateTicket mock is already set by Set")
	}

	if mmCreateTicket.defaultExpectation == nil {
		mmCreateTicket.defaultExpectation = &FreshdeskInterfaceMockCreateTicketExpectation{mock: mmCreateTicket.mock}
	}
	mmCreateTicket.defaultExpectation.results = &FreshdeskInterfaceMockCreateTicketResults{tp1, err}
	mmCreateTicket.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateTicket.mock
}

// Set uses given function f to mock the FreshdeskInterface.CreateTicket method
func (mmCreateTicket *mFreshdeskInterfaceMockCreateTicket) Set(f func(req *TaskCreateTicketReq) (tp1 *TaskCreateTicketResponse, err error)) *FreshdeskInterfaceMock {
	if mmCreateTicket.defaultExpectation != nil {
		mmCreateTicket.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.CreateTicket method")
	}

	if len(mmCreateTicket.expectations) > 0 {
		mmCreateTicket.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.CreateTicket method")
	}

	mmCreateTicket.mock.funcCreateTicket = f
	mmCreateTicket.mock.funcCreateTicketOrigin = minimock.CallerInfo(1)
	return mmCreateTicket.mock
}

// When sets expectation for the FreshdeskInterface.CreateTicket which will trigger the result defined by the following
// Then helper
func (mmCreateTicket *mFreshdeskInterfaceMockCreateTicket) When(req *TaskCreateTicketReq) *FreshdeskInterfaceMockCreateTicketExpectation {
	if mmCreateTicket.mock.funcCreateTicket != nil {
		mmCreateTicket.mock.t.Fatalf("FreshdeskInterfaceMock.CreateTicket mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockCreateTicketExpectation{
		mock:               mmCreateTicket.mock,
		params:             &FreshdeskInterfaceMockCreateTicketParams{req},
		expectationOrigins: FreshdeskInterfaceMockCreateTicketExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateTicket.expectations = append(mmCreateTicket.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.CreateTicket return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockCreateTicketExpectation) Then(tp1 *TaskCreateTicketResponse, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockCreateTicketResults{tp1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.CreateTicket should be invoked
func (mmCreateTicket *mFreshdeskInterfaceMockCreateTicket) Times(n uint64) *mFreshdeskInterfaceMockCreateTicket {
	if n == 0 {
		mmCreateTicket.mock.t.Fatalf("Times of FreshdeskInterfaceMock.CreateTicket mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateTicket.expectedInvocations, n)
	mmCreateTicket.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateTicket
}

func (mmCreateTicket *mFreshdeskInterfaceMockCreateTicket) invocationsDone() bool {
	if len(mmCreateTicket.expectations) == 0 && mmCreateTicket.defaultExpectation == nil && mmCreateTicket.mock.funcCreateTicket == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateTicket.mock.afterCreateTicketCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateTicket.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateTicket implements FreshdeskInterface
func (mmCreateTicket *FreshdeskInterfaceMock) CreateTicket(req *TaskCreateTicketReq) (tp1 *TaskCreateTicketResponse, err error) {
	mm_atomic.AddUint64(&mmCreateTicket.beforeCreateTicketCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateTicket.afterCreateTicketCounter, 1)

	mmCreateTicket.t.Helper()

	if mmCreateTicket.inspectFuncCreateTicket != nil {
		mmCreateTicket.inspectFuncCreateTicket(req)
	}

	mm_params := FreshdeskInterfaceMockCreateTicketParams{req}

	// Record call args
	mmCreateTicket.CreateTicketMock.mutex.Lock()
	mmCreateTicket.CreateTicketMock.callArgs = append(mmCreateTicket.CreateTicketMock.callArgs, &mm_params)
	mmCreateTicket.CreateTicketMock.mutex.Unlock()

	for _, e := range mmCreateTicket.CreateTicketMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmCreateTicket.CreateTicketMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateTicket.CreateTicketMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateTicket.CreateTicketMock.defaultExpectation.params
		mm_want_ptrs := mmCreateTicket.CreateTicketMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockCreateTicketParams{req}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmCreateTicket.t.Errorf("FreshdeskInterfaceMock.CreateTicket got unexpected parameter req, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateTicket.CreateTicketMock.defaultExpectation.expectationOrigins.originReq, *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateTicket.t.Errorf("FreshdeskInterfaceMock.CreateTicket got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateTicket.CreateTicketMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateTicket.CreateTicketMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateTicket.t.Fatal("No results are set for the FreshdeskInterfaceMock.CreateTicket")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmCreateTicket.funcCreateTicket != nil {
		return mmCreateTicket.funcCreateTicket(req)
	}
	mmCreateTicket.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.CreateTicket. %v", req)
	return
}

// CreateTicketAfterCounter returns a count of finished FreshdeskInterfaceMock.CreateTicket invocations
func (mmCreateTicket *FreshdeskInterfaceMock) CreateTicketAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateTicket.afterCreateTicketCounter)
}

// CreateTicketBeforeCounter returns a count of FreshdeskInterfaceMock.CreateTicket invocations
func (mmCreateTicket *FreshdeskInterfaceMock) CreateTicketBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateTicket.beforeCreateTicketCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.CreateTicket.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateTicket *mFreshdeskInterfaceMockCreateTicket) Calls() []*FreshdeskInterfaceMockCreateTicketParams {
	mmCreateTicket.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockCreateTicketParams, len(mmCreateTicket.callArgs))
	copy(argCopy, mmCreateTicket.callArgs)

	mmCreateTicket.mutex.RUnlock()

	return argCopy
}

// MinimockCreateTicketDone returns true if the count of the CreateTicket invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockCreateTicketDone() bool {
	if m.CreateTicketMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateTicketMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateTicketMock.invocationsDone()
}

// MinimockCreateTicketInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockCreateTicketInspect() {
	for _, e := range m.CreateTicketMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateTicket at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateTicketCounter := mm_atomic.LoadUint64(&m.afterCreateTicketCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateTicketMock.defaultExpectation != nil && afterCreateTicketCounter < 1 {
		if m.CreateTicketMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateTicket at\n%s", m.CreateTicketMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateTicket at\n%s with params: %#v", m.CreateTicketMock.defaultExpectation.expectationOrigins.origin, *m.CreateTicketMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateTicket != nil && afterCreateTicketCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateTicket at\n%s", m.funcCreateTicketOrigin)
	}

	if !m.CreateTicketMock.invocationsDone() && afterCreateTicketCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.CreateTicket at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateTicketMock.expectedInvocations), m.CreateTicketMock.expectedInvocationsOrigin, afterCreateTicketCounter)
	}
}

type mFreshdeskInterfaceMockCreateTicketNote struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockCreateTicketNoteExpectation
	expectations       []*FreshdeskInterfaceMockCreateTicketNoteExpectation

	callArgs []*FreshdeskInterfaceMockCreateTicketNoteParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockCreateTicketNoteExpectation specifies expectation struct of the FreshdeskInterface.CreateTicketNote
type FreshdeskInterfaceMockCreateTicketNoteExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockCreateTicketNoteParams
	paramPtrs          *FreshdeskInterfaceMockCreateTicketNoteParamPtrs
	expectationOrigins FreshdeskInterfaceMockCreateTicketNoteExpectationOrigins
	results            *FreshdeskInterfaceMockCreateTicketNoteResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockCreateTicketNoteParams contains parameters of the FreshdeskInterface.CreateTicketNote
type FreshdeskInterfaceMockCreateTicketNoteParams struct {
	ticketID int64
	req      *TaskCreateTicketNoteReq
}

// FreshdeskInterfaceMockCreateTicketNoteParamPtrs contains pointers to parameters of the FreshdeskInterface.CreateTicketNote
type FreshdeskInterfaceMockCreateTicketNoteParamPtrs struct {
	ticketID *int64
	req      **TaskCreateTicketNoteReq
}

// FreshdeskInterfaceMockCreateTicketNoteResults contains results of the FreshdeskInterface.CreateTicketNote
type FreshdeskInterfaceMockCreateTicketNoteResults struct {
	tp1 *TaskCreateTicketNoteResponse
	err error
}

// FreshdeskInterfaceMockCreateTicketNoteOrigins contains origins of expectations of the FreshdeskInterface.CreateTicketNote
type FreshdeskInterfaceMockCreateTicketNoteExpectationOrigins struct {
	origin         string
	originTicketID string
	originReq      string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateTicketNote *mFreshdeskInterfaceMockCreateTicketNote) Optional() *mFreshdeskInterfaceMockCreateTicketNote {
	mmCreateTicketNote.optional = true
	return mmCreateTicketNote
}

// Expect sets up expected params for FreshdeskInterface.CreateTicketNote
func (mmCreateTicketNote *mFreshdeskInterfaceMockCreateTicketNote) Expect(ticketID int64, req *TaskCreateTicketNoteReq) *mFreshdeskInterfaceMockCreateTicketNote {
	if mmCreateTicketNote.mock.funcCreateTicketNote != nil {
		mmCreateTicketNote.mock.t.Fatalf("FreshdeskInterfaceMock.CreateTicketNote mock is already set by Set")
	}

	if mmCreateTicketNote.defaultExpectation == nil {
		mmCreateTicketNote.defaultExpectation = &FreshdeskInterfaceMockCreateTicketNoteExpectation{}
	}

	if mmCreateTicketNote.defaultExpectation.paramPtrs != nil {
		mmCreateTicketNote.mock.t.Fatalf("FreshdeskInterfaceMock.CreateTicketNote mock is already set by ExpectParams functions")
	}

	mmCreateTicketNote.defaultExpectation.params = &FreshdeskInterfaceMockCreateTicketNoteParams{ticketID, req}
	mmCreateTicketNote.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateTicketNote.expectations {
		if minimock.Equal(e.params, mmCreateTicketNote.defaultExpectation.params) {
			mmCreateTicketNote.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateTicketNote.defaultExpectation.params)
		}
	}

	return mmCreateTicketNote
}

// ExpectTicketIDParam1 sets up expected param ticketID for FreshdeskInterface.CreateTicketNote
func (mmCreateTicketNote *mFreshdeskInterfaceMockCreateTicketNote) ExpectTicketIDParam1(ticketID int64) *mFreshdeskInterfaceMockCreateTicketNote {
	if mmCreateTicketNote.mock.funcCreateTicketNote != nil {
		mmCreateTicketNote.mock.t.Fatalf("FreshdeskInterfaceMock.CreateTicketNote mock is already set by Set")
	}

	if mmCreateTicketNote.defaultExpectation == nil {
		mmCreateTicketNote.defaultExpectation = &FreshdeskInterfaceMockCreateTicketNoteExpectation{}
	}

	if mmCreateTicketNote.defaultExpectation.params != nil {
		mmCreateTicketNote.mock.t.Fatalf("FreshdeskInterfaceMock.CreateTicketNote mock is already set by Expect")
	}

	if mmCreateTicketNote.defaultExpectation.paramPtrs == nil {
		mmCreateTicketNote.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockCreateTicketNoteParamPtrs{}
	}
	mmCreateTicketNote.defaultExpectation.paramPtrs.ticketID = &ticketID
	mmCreateTicketNote.defaultExpectation.expectationOrigins.originTicketID = minimock.CallerInfo(1)

	return mmCreateTicketNote
}

// ExpectReqParam2 sets up expected param req for FreshdeskInterface.CreateTicketNote
func (mmCreateTicketNote *mFreshdeskInterfaceMockCreateTicketNote) ExpectReqParam2(req *TaskCreateTicketNoteReq) *mFreshdeskInterfaceMockCreateTicketNote {
	if mmCreateTicketNote.mock.funcCreateTicketNote != nil {
		mmCreateTicketNote.mock.t.Fatalf("FreshdeskInterfaceMock.CreateTicketNote mock is already set by Set")
	}

	if mmCreateTicketNote.defaultExpectation == nil {
		mmCreateTicketNote.defaultExpectation = &FreshdeskInterfaceMockCreateTicketNoteExpectation{}
	}

	if mmCreateTicketNote.defaultExpectation.params != nil {
		mmCreateTicketNote.mock.t.Fatalf("FreshdeskInterfaceMock.CreateTicketNote mock is already set by Expect")
	}

	if mmCreateTicketNote.defaultExpectation.paramPtrs == nil {
		mmCreateTicketNote.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockCreateTicketNoteParamPtrs{}
	}
	mmCreateTicketNote.defaultExpectation.paramPtrs.req = &req
	mmCreateTicketNote.defaultExpectation.expectationOrigins.originReq = minimock.CallerInfo(1)

	return mmCreateTicketNote
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.CreateTicketNote
func (mmCreateTicketNote *mFreshdeskInterfaceMockCreateTicketNote) Inspect(f func(ticketID int64, req *TaskCreateTicketNoteReq)) *mFreshdeskInterfaceMockCreateTicketNote {
	if mmCreateTicketNote.mock.inspectFuncCreateTicketNote != nil {
		mmCreateTicketNote.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.CreateTicketNote")
	}

	mmCreateTicketNote.mock.inspectFuncCreateTicketNote = f

	return mmCreateTicketNote
}

// Return sets up results that will be returned by FreshdeskInterface.CreateTicketNote
func (mmCreateTicketNote *mFreshdeskInterfaceMockCreateTicketNote) Return(tp1 *TaskCreateTicketNoteResponse, err error) *FreshdeskInterfaceMock {
	if mmCreateTicketNote.mock.funcCreateTicketNote != nil {
		mmCreateTicketNote.mock.t.Fatalf("FreshdeskInterfaceMock.CreateTicketNote mock is already set by Set")
	}

	if mmCreateTicketNote.defaultExpectation == nil {
		mmCreateTicketNote.defaultExpectation = &FreshdeskInterfaceMockCreateTicketNoteExpectation{mock: mmCreateTicketNote.mock}
	}
	mmCreateTicketNote.defaultExpectation.results = &FreshdeskInterfaceMockCreateTicketNoteResults{tp1, err}
	mmCreateTicketNote.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateTicketNote.mock
}

// Set uses given function f to mock the FreshdeskInterface.CreateTicketNote method
func (mmCreateTicketNote *mFreshdeskInterfaceMockCreateTicketNote) Set(f func(ticketID int64, req *TaskCreateTicketNoteReq) (tp1 *TaskCreateTicketNoteResponse, err error)) *FreshdeskInterfaceMock {
	if mmCreateTicketNote.defaultExpectation != nil {
		mmCreateTicketNote.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.CreateTicketNote method")
	}

	if len(mmCreateTicketNote.expectations) > 0 {
		mmCreateTicketNote.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.CreateTicketNote method")
	}

	mmCreateTicketNote.mock.funcCreateTicketNote = f
	mmCreateTicketNote.mock.funcCreateTicketNoteOrigin = minimock.CallerInfo(1)
	return mmCreateTicketNote.mock
}

// When sets expectation for the FreshdeskInterface.CreateTicketNote which will trigger the result defined by the following
// Then helper
func (mmCreateTicketNote *mFreshdeskInterfaceMockCreateTicketNote) When(ticketID int64, req *TaskCreateTicketNoteReq) *FreshdeskInterfaceMockCreateTicketNoteExpectation {
	if mmCreateTicketNote.mock.funcCreateTicketNote != nil {
		mmCreateTicketNote.mock.t.Fatalf("FreshdeskInterfaceMock.CreateTicketNote mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockCreateTicketNoteExpectation{
		mock:               mmCreateTicketNote.mock,
		params:             &FreshdeskInterfaceMockCreateTicketNoteParams{ticketID, req},
		expectationOrigins: FreshdeskInterfaceMockCreateTicketNoteExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateTicketNote.expectations = append(mmCreateTicketNote.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.CreateTicketNote return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockCreateTicketNoteExpectation) Then(tp1 *TaskCreateTicketNoteResponse, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockCreateTicketNoteResults{tp1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.CreateTicketNote should be invoked
func (mmCreateTicketNote *mFreshdeskInterfaceMockCreateTicketNote) Times(n uint64) *mFreshdeskInterfaceMockCreateTicketNote {
	if n == 0 {
		mmCreateTicketNote.mock.t.Fatalf("Times of FreshdeskInterfaceMock.CreateTicketNote mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateTicketNote.expectedInvocations, n)
	mmCreateTicketNote.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateTicketNote
}

func (mmCreateTicketNote *mFreshdeskInterfaceMockCreateTicketNote) invocationsDone() bool {
	if len(mmCreateTicketNote.expectations) == 0 && mmCreateTicketNote.defaultExpectation == nil && mmCreateTicketNote.mock.funcCreateTicketNote == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateTicketNote.mock.afterCreateTicketNoteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateTicketNote.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateTicketNote implements FreshdeskInterface
func (mmCreateTicketNote *FreshdeskInterfaceMock) CreateTicketNote(ticketID int64, req *TaskCreateTicketNoteReq) (tp1 *TaskCreateTicketNoteResponse, err error) {
	mm_atomic.AddUint64(&mmCreateTicketNote.beforeCreateTicketNoteCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateTicketNote.afterCreateTicketNoteCounter, 1)

	mmCreateTicketNote.t.Helper()

	if mmCreateTicketNote.inspectFuncCreateTicketNote != nil {
		mmCreateTicketNote.inspectFuncCreateTicketNote(ticketID, req)
	}

	mm_params := FreshdeskInterfaceMockCreateTicketNoteParams{ticketID, req}

	// Record call args
	mmCreateTicketNote.CreateTicketNoteMock.mutex.Lock()
	mmCreateTicketNote.CreateTicketNoteMock.callArgs = append(mmCreateTicketNote.CreateTicketNoteMock.callArgs, &mm_params)
	mmCreateTicketNote.CreateTicketNoteMock.mutex.Unlock()

	for _, e := range mmCreateTicketNote.CreateTicketNoteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmCreateTicketNote.CreateTicketNoteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateTicketNote.CreateTicketNoteMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateTicketNote.CreateTicketNoteMock.defaultExpectation.params
		mm_want_ptrs := mmCreateTicketNote.CreateTicketNoteMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockCreateTicketNoteParams{ticketID, req}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ticketID != nil && !minimock.Equal(*mm_want_ptrs.ticketID, mm_got.ticketID) {
				mmCreateTicketNote.t.Errorf("FreshdeskInterfaceMock.CreateTicketNote got unexpected parameter ticketID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateTicketNote.CreateTicketNoteMock.defaultExpectation.expectationOrigins.originTicketID, *mm_want_ptrs.ticketID, mm_got.ticketID, minimock.Diff(*mm_want_ptrs.ticketID, mm_got.ticketID))
			}

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmCreateTicketNote.t.Errorf("FreshdeskInterfaceMock.CreateTicketNote got unexpected parameter req, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateTicketNote.CreateTicketNoteMock.defaultExpectation.expectationOrigins.originReq, *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateTicketNote.t.Errorf("FreshdeskInterfaceMock.CreateTicketNote got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateTicketNote.CreateTicketNoteMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateTicketNote.CreateTicketNoteMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateTicketNote.t.Fatal("No results are set for the FreshdeskInterfaceMock.CreateTicketNote")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmCreateTicketNote.funcCreateTicketNote != nil {
		return mmCreateTicketNote.funcCreateTicketNote(ticketID, req)
	}
	mmCreateTicketNote.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.CreateTicketNote. %v %v", ticketID, req)
	return
}

// CreateTicketNoteAfterCounter returns a count of finished FreshdeskInterfaceMock.CreateTicketNote invocations
func (mmCreateTicketNote *FreshdeskInterfaceMock) CreateTicketNoteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateTicketNote.afterCreateTicketNoteCounter)
}

// CreateTicketNoteBeforeCounter returns a count of FreshdeskInterfaceMock.CreateTicketNote invocations
func (mmCreateTicketNote *FreshdeskInterfaceMock) CreateTicketNoteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateTicketNote.beforeCreateTicketNoteCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.CreateTicketNote.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateTicketNote *mFreshdeskInterfaceMockCreateTicketNote) Calls() []*FreshdeskInterfaceMockCreateTicketNoteParams {
	mmCreateTicketNote.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockCreateTicketNoteParams, len(mmCreateTicketNote.callArgs))
	copy(argCopy, mmCreateTicketNote.callArgs)

	mmCreateTicketNote.mutex.RUnlock()

	return argCopy
}

// MinimockCreateTicketNoteDone returns true if the count of the CreateTicketNote invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockCreateTicketNoteDone() bool {
	if m.CreateTicketNoteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateTicketNoteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateTicketNoteMock.invocationsDone()
}

// MinimockCreateTicketNoteInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockCreateTicketNoteInspect() {
	for _, e := range m.CreateTicketNoteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateTicketNote at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateTicketNoteCounter := mm_atomic.LoadUint64(&m.afterCreateTicketNoteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateTicketNoteMock.defaultExpectation != nil && afterCreateTicketNoteCounter < 1 {
		if m.CreateTicketNoteMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateTicketNote at\n%s", m.CreateTicketNoteMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateTicketNote at\n%s with params: %#v", m.CreateTicketNoteMock.defaultExpectation.expectationOrigins.origin, *m.CreateTicketNoteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateTicketNote != nil && afterCreateTicketNoteCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.CreateTicketNote at\n%s", m.funcCreateTicketNoteOrigin)
	}

	if !m.CreateTicketNoteMock.invocationsDone() && afterCreateTicketNoteCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.CreateTicketNote at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateTicketNoteMock.expectedInvocations), m.CreateTicketNoteMock.expectedInvocationsOrigin, afterCreateTicketNoteCounter)
	}
}

type mFreshdeskInterfaceMockGetAgent struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockGetAgentExpectation
	expectations       []*FreshdeskInterfaceMockGetAgentExpectation

	callArgs []*FreshdeskInterfaceMockGetAgentParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockGetAgentExpectation specifies expectation struct of the FreshdeskInterface.GetAgent
type FreshdeskInterfaceMockGetAgentExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockGetAgentParams
	paramPtrs          *FreshdeskInterfaceMockGetAgentParamPtrs
	expectationOrigins FreshdeskInterfaceMockGetAgentExpectationOrigins
	results            *FreshdeskInterfaceMockGetAgentResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockGetAgentParams contains parameters of the FreshdeskInterface.GetAgent
type FreshdeskInterfaceMockGetAgentParams struct {
	agentID int64
}

// FreshdeskInterfaceMockGetAgentParamPtrs contains pointers to parameters of the FreshdeskInterface.GetAgent
type FreshdeskInterfaceMockGetAgentParamPtrs struct {
	agentID *int64
}

// FreshdeskInterfaceMockGetAgentResults contains results of the FreshdeskInterface.GetAgent
type FreshdeskInterfaceMockGetAgentResults struct {
	tp1 *TaskGetAgentResponse
	err error
}

// FreshdeskInterfaceMockGetAgentOrigins contains origins of expectations of the FreshdeskInterface.GetAgent
type FreshdeskInterfaceMockGetAgentExpectationOrigins struct {
	origin        string
	originAgentID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetAgent *mFreshdeskInterfaceMockGetAgent) Optional() *mFreshdeskInterfaceMockGetAgent {
	mmGetAgent.optional = true
	return mmGetAgent
}

// Expect sets up expected params for FreshdeskInterface.GetAgent
func (mmGetAgent *mFreshdeskInterfaceMockGetAgent) Expect(agentID int64) *mFreshdeskInterfaceMockGetAgent {
	if mmGetAgent.mock.funcGetAgent != nil {
		mmGetAgent.mock.t.Fatalf("FreshdeskInterfaceMock.GetAgent mock is already set by Set")
	}

	if mmGetAgent.defaultExpectation == nil {
		mmGetAgent.defaultExpectation = &FreshdeskInterfaceMockGetAgentExpectation{}
	}

	if mmGetAgent.defaultExpectation.paramPtrs != nil {
		mmGetAgent.mock.t.Fatalf("FreshdeskInterfaceMock.GetAgent mock is already set by ExpectParams functions")
	}

	mmGetAgent.defaultExpectation.params = &FreshdeskInterfaceMockGetAgentParams{agentID}
	mmGetAgent.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetAgent.expectations {
		if minimock.Equal(e.params, mmGetAgent.defaultExpectation.params) {
			mmGetAgent.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAgent.defaultExpectation.params)
		}
	}

	return mmGetAgent
}

// ExpectAgentIDParam1 sets up expected param agentID for FreshdeskInterface.GetAgent
func (mmGetAgent *mFreshdeskInterfaceMockGetAgent) ExpectAgentIDParam1(agentID int64) *mFreshdeskInterfaceMockGetAgent {
	if mmGetAgent.mock.funcGetAgent != nil {
		mmGetAgent.mock.t.Fatalf("FreshdeskInterfaceMock.GetAgent mock is already set by Set")
	}

	if mmGetAgent.defaultExpectation == nil {
		mmGetAgent.defaultExpectation = &FreshdeskInterfaceMockGetAgentExpectation{}
	}

	if mmGetAgent.defaultExpectation.params != nil {
		mmGetAgent.mock.t.Fatalf("FreshdeskInterfaceMock.GetAgent mock is already set by Expect")
	}

	if mmGetAgent.defaultExpectation.paramPtrs == nil {
		mmGetAgent.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockGetAgentParamPtrs{}
	}
	mmGetAgent.defaultExpectation.paramPtrs.agentID = &agentID
	mmGetAgent.defaultExpectation.expectationOrigins.originAgentID = minimock.CallerInfo(1)

	return mmGetAgent
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.GetAgent
func (mmGetAgent *mFreshdeskInterfaceMockGetAgent) Inspect(f func(agentID int64)) *mFreshdeskInterfaceMockGetAgent {
	if mmGetAgent.mock.inspectFuncGetAgent != nil {
		mmGetAgent.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.GetAgent")
	}

	mmGetAgent.mock.inspectFuncGetAgent = f

	return mmGetAgent
}

// Return sets up results that will be returned by FreshdeskInterface.GetAgent
func (mmGetAgent *mFreshdeskInterfaceMockGetAgent) Return(tp1 *TaskGetAgentResponse, err error) *FreshdeskInterfaceMock {
	if mmGetAgent.mock.funcGetAgent != nil {
		mmGetAgent.mock.t.Fatalf("FreshdeskInterfaceMock.GetAgent mock is already set by Set")
	}

	if mmGetAgent.defaultExpectation == nil {
		mmGetAgent.defaultExpectation = &FreshdeskInterfaceMockGetAgentExpectation{mock: mmGetAgent.mock}
	}
	mmGetAgent.defaultExpectation.results = &FreshdeskInterfaceMockGetAgentResults{tp1, err}
	mmGetAgent.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetAgent.mock
}

// Set uses given function f to mock the FreshdeskInterface.GetAgent method
func (mmGetAgent *mFreshdeskInterfaceMockGetAgent) Set(f func(agentID int64) (tp1 *TaskGetAgentResponse, err error)) *FreshdeskInterfaceMock {
	if mmGetAgent.defaultExpectation != nil {
		mmGetAgent.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.GetAgent method")
	}

	if len(mmGetAgent.expectations) > 0 {
		mmGetAgent.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.GetAgent method")
	}

	mmGetAgent.mock.funcGetAgent = f
	mmGetAgent.mock.funcGetAgentOrigin = minimock.CallerInfo(1)
	return mmGetAgent.mock
}

// When sets expectation for the FreshdeskInterface.GetAgent which will trigger the result defined by the following
// Then helper
func (mmGetAgent *mFreshdeskInterfaceMockGetAgent) When(agentID int64) *FreshdeskInterfaceMockGetAgentExpectation {
	if mmGetAgent.mock.funcGetAgent != nil {
		mmGetAgent.mock.t.Fatalf("FreshdeskInterfaceMock.GetAgent mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockGetAgentExpectation{
		mock:               mmGetAgent.mock,
		params:             &FreshdeskInterfaceMockGetAgentParams{agentID},
		expectationOrigins: FreshdeskInterfaceMockGetAgentExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetAgent.expectations = append(mmGetAgent.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.GetAgent return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockGetAgentExpectation) Then(tp1 *TaskGetAgentResponse, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockGetAgentResults{tp1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.GetAgent should be invoked
func (mmGetAgent *mFreshdeskInterfaceMockGetAgent) Times(n uint64) *mFreshdeskInterfaceMockGetAgent {
	if n == 0 {
		mmGetAgent.mock.t.Fatalf("Times of FreshdeskInterfaceMock.GetAgent mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetAgent.expectedInvocations, n)
	mmGetAgent.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetAgent
}

func (mmGetAgent *mFreshdeskInterfaceMockGetAgent) invocationsDone() bool {
	if len(mmGetAgent.expectations) == 0 && mmGetAgent.defaultExpectation == nil && mmGetAgent.mock.funcGetAgent == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetAgent.mock.afterGetAgentCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetAgent.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetAgent implements FreshdeskInterface
func (mmGetAgent *FreshdeskInterfaceMock) GetAgent(agentID int64) (tp1 *TaskGetAgentResponse, err error) {
	mm_atomic.AddUint64(&mmGetAgent.beforeGetAgentCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAgent.afterGetAgentCounter, 1)

	mmGetAgent.t.Helper()

	if mmGetAgent.inspectFuncGetAgent != nil {
		mmGetAgent.inspectFuncGetAgent(agentID)
	}

	mm_params := FreshdeskInterfaceMockGetAgentParams{agentID}

	// Record call args
	mmGetAgent.GetAgentMock.mutex.Lock()
	mmGetAgent.GetAgentMock.callArgs = append(mmGetAgent.GetAgentMock.callArgs, &mm_params)
	mmGetAgent.GetAgentMock.mutex.Unlock()

	for _, e := range mmGetAgent.GetAgentMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmGetAgent.GetAgentMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAgent.GetAgentMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAgent.GetAgentMock.defaultExpectation.params
		mm_want_ptrs := mmGetAgent.GetAgentMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockGetAgentParams{agentID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.agentID != nil && !minimock.Equal(*mm_want_ptrs.agentID, mm_got.agentID) {
				mmGetAgent.t.Errorf("FreshdeskInterfaceMock.GetAgent got unexpected parameter agentID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAgent.GetAgentMock.defaultExpectation.expectationOrigins.originAgentID, *mm_want_ptrs.agentID, mm_got.agentID, minimock.Diff(*mm_want_ptrs.agentID, mm_got.agentID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAgent.t.Errorf("FreshdeskInterfaceMock.GetAgent got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetAgent.GetAgentMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAgent.GetAgentMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAgent.t.Fatal("No results are set for the FreshdeskInterfaceMock.GetAgent")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmGetAgent.funcGetAgent != nil {
		return mmGetAgent.funcGetAgent(agentID)
	}
	mmGetAgent.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.GetAgent. %v", agentID)
	return
}

// GetAgentAfterCounter returns a count of finished FreshdeskInterfaceMock.GetAgent invocations
func (mmGetAgent *FreshdeskInterfaceMock) GetAgentAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAgent.afterGetAgentCounter)
}

// GetAgentBeforeCounter returns a count of FreshdeskInterfaceMock.GetAgent invocations
func (mmGetAgent *FreshdeskInterfaceMock) GetAgentBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAgent.beforeGetAgentCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.GetAgent.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAgent *mFreshdeskInterfaceMockGetAgent) Calls() []*FreshdeskInterfaceMockGetAgentParams {
	mmGetAgent.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockGetAgentParams, len(mmGetAgent.callArgs))
	copy(argCopy, mmGetAgent.callArgs)

	mmGetAgent.mutex.RUnlock()

	return argCopy
}

// MinimockGetAgentDone returns true if the count of the GetAgent invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockGetAgentDone() bool {
	if m.GetAgentMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetAgentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetAgentMock.invocationsDone()
}

// MinimockGetAgentInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockGetAgentInspect() {
	for _, e := range m.GetAgentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetAgent at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetAgentCounter := mm_atomic.LoadUint64(&m.afterGetAgentCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetAgentMock.defaultExpectation != nil && afterGetAgentCounter < 1 {
		if m.GetAgentMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetAgent at\n%s", m.GetAgentMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetAgent at\n%s with params: %#v", m.GetAgentMock.defaultExpectation.expectationOrigins.origin, *m.GetAgentMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAgent != nil && afterGetAgentCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetAgent at\n%s", m.funcGetAgentOrigin)
	}

	if !m.GetAgentMock.invocationsDone() && afterGetAgentCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.GetAgent at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetAgentMock.expectedInvocations), m.GetAgentMock.expectedInvocationsOrigin, afterGetAgentCounter)
	}
}

type mFreshdeskInterfaceMockGetAll struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockGetAllExpectation
	expectations       []*FreshdeskInterfaceMockGetAllExpectation

	callArgs []*FreshdeskInterfaceMockGetAllParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockGetAllExpectation specifies expectation struct of the FreshdeskInterface.GetAll
type FreshdeskInterfaceMockGetAllExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockGetAllParams
	paramPtrs          *FreshdeskInterfaceMockGetAllParamPtrs
	expectationOrigins FreshdeskInterfaceMockGetAllExpectationOrigins
	results            *FreshdeskInterfaceMockGetAllResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockGetAllParams contains parameters of the FreshdeskInterface.GetAll
type FreshdeskInterfaceMockGetAllParams struct {
	objectType     string
	pagination     bool
	paginationPath string
}

// FreshdeskInterfaceMockGetAllParamPtrs contains pointers to parameters of the FreshdeskInterface.GetAll
type FreshdeskInterfaceMockGetAllParamPtrs struct {
	objectType     *string
	pagination     *bool
	paginationPath *string
}

// FreshdeskInterfaceMockGetAllResults contains results of the FreshdeskInterface.GetAll
type FreshdeskInterfaceMockGetAllResults struct {
	ta1 []TaskGetAllResponse
	s1  string
	err error
}

// FreshdeskInterfaceMockGetAllOrigins contains origins of expectations of the FreshdeskInterface.GetAll
type FreshdeskInterfaceMockGetAllExpectationOrigins struct {
	origin               string
	originObjectType     string
	originPagination     string
	originPaginationPath string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetAll *mFreshdeskInterfaceMockGetAll) Optional() *mFreshdeskInterfaceMockGetAll {
	mmGetAll.optional = true
	return mmGetAll
}

// Expect sets up expected params for FreshdeskInterface.GetAll
func (mmGetAll *mFreshdeskInterfaceMockGetAll) Expect(objectType string, pagination bool, paginationPath string) *mFreshdeskInterfaceMockGetAll {
	if mmGetAll.mock.funcGetAll != nil {
		mmGetAll.mock.t.Fatalf("FreshdeskInterfaceMock.GetAll mock is already set by Set")
	}

	if mmGetAll.defaultExpectation == nil {
		mmGetAll.defaultExpectation = &FreshdeskInterfaceMockGetAllExpectation{}
	}

	if mmGetAll.defaultExpectation.paramPtrs != nil {
		mmGetAll.mock.t.Fatalf("FreshdeskInterfaceMock.GetAll mock is already set by ExpectParams functions")
	}

	mmGetAll.defaultExpectation.params = &FreshdeskInterfaceMockGetAllParams{objectType, pagination, paginationPath}
	mmGetAll.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetAll.expectations {
		if minimock.Equal(e.params, mmGetAll.defaultExpectation.params) {
			mmGetAll.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAll.defaultExpectation.params)
		}
	}

	return mmGetAll
}

// ExpectObjectTypeParam1 sets up expected param objectType for FreshdeskInterface.GetAll
func (mmGetAll *mFreshdeskInterfaceMockGetAll) ExpectObjectTypeParam1(objectType string) *mFreshdeskInterfaceMockGetAll {
	if mmGetAll.mock.funcGetAll != nil {
		mmGetAll.mock.t.Fatalf("FreshdeskInterfaceMock.GetAll mock is already set by Set")
	}

	if mmGetAll.defaultExpectation == nil {
		mmGetAll.defaultExpectation = &FreshdeskInterfaceMockGetAllExpectation{}
	}

	if mmGetAll.defaultExpectation.params != nil {
		mmGetAll.mock.t.Fatalf("FreshdeskInterfaceMock.GetAll mock is already set by Expect")
	}

	if mmGetAll.defaultExpectation.paramPtrs == nil {
		mmGetAll.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockGetAllParamPtrs{}
	}
	mmGetAll.defaultExpectation.paramPtrs.objectType = &objectType
	mmGetAll.defaultExpectation.expectationOrigins.originObjectType = minimock.CallerInfo(1)

	return mmGetAll
}

// ExpectPaginationParam2 sets up expected param pagination for FreshdeskInterface.GetAll
func (mmGetAll *mFreshdeskInterfaceMockGetAll) ExpectPaginationParam2(pagination bool) *mFreshdeskInterfaceMockGetAll {
	if mmGetAll.mock.funcGetAll != nil {
		mmGetAll.mock.t.Fatalf("FreshdeskInterfaceMock.GetAll mock is already set by Set")
	}

	if mmGetAll.defaultExpectation == nil {
		mmGetAll.defaultExpectation = &FreshdeskInterfaceMockGetAllExpectation{}
	}

	if mmGetAll.defaultExpectation.params != nil {
		mmGetAll.mock.t.Fatalf("FreshdeskInterfaceMock.GetAll mock is already set by Expect")
	}

	if mmGetAll.defaultExpectation.paramPtrs == nil {
		mmGetAll.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockGetAllParamPtrs{}
	}
	mmGetAll.defaultExpectation.paramPtrs.pagination = &pagination
	mmGetAll.defaultExpectation.expectationOrigins.originPagination = minimock.CallerInfo(1)

	return mmGetAll
}

// ExpectPaginationPathParam3 sets up expected param paginationPath for FreshdeskInterface.GetAll
func (mmGetAll *mFreshdeskInterfaceMockGetAll) ExpectPaginationPathParam3(paginationPath string) *mFreshdeskInterfaceMockGetAll {
	if mmGetAll.mock.funcGetAll != nil {
		mmGetAll.mock.t.Fatalf("FreshdeskInterfaceMock.GetAll mock is already set by Set")
	}

	if mmGetAll.defaultExpectation == nil {
		mmGetAll.defaultExpectation = &FreshdeskInterfaceMockGetAllExpectation{}
	}

	if mmGetAll.defaultExpectation.params != nil {
		mmGetAll.mock.t.Fatalf("FreshdeskInterfaceMock.GetAll mock is already set by Expect")
	}

	if mmGetAll.defaultExpectation.paramPtrs == nil {
		mmGetAll.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockGetAllParamPtrs{}
	}
	mmGetAll.defaultExpectation.paramPtrs.paginationPath = &paginationPath
	mmGetAll.defaultExpectation.expectationOrigins.originPaginationPath = minimock.CallerInfo(1)

	return mmGetAll
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.GetAll
func (mmGetAll *mFreshdeskInterfaceMockGetAll) Inspect(f func(objectType string, pagination bool, paginationPath string)) *mFreshdeskInterfaceMockGetAll {
	if mmGetAll.mock.inspectFuncGetAll != nil {
		mmGetAll.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.GetAll")
	}

	mmGetAll.mock.inspectFuncGetAll = f

	return mmGetAll
}

// Return sets up results that will be returned by FreshdeskInterface.GetAll
func (mmGetAll *mFreshdeskInterfaceMockGetAll) Return(ta1 []TaskGetAllResponse, s1 string, err error) *FreshdeskInterfaceMock {
	if mmGetAll.mock.funcGetAll != nil {
		mmGetAll.mock.t.Fatalf("FreshdeskInterfaceMock.GetAll mock is already set by Set")
	}

	if mmGetAll.defaultExpectation == nil {
		mmGetAll.defaultExpectation = &FreshdeskInterfaceMockGetAllExpectation{mock: mmGetAll.mock}
	}
	mmGetAll.defaultExpectation.results = &FreshdeskInterfaceMockGetAllResults{ta1, s1, err}
	mmGetAll.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetAll.mock
}

// Set uses given function f to mock the FreshdeskInterface.GetAll method
func (mmGetAll *mFreshdeskInterfaceMockGetAll) Set(f func(objectType string, pagination bool, paginationPath string) (ta1 []TaskGetAllResponse, s1 string, err error)) *FreshdeskInterfaceMock {
	if mmGetAll.defaultExpectation != nil {
		mmGetAll.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.GetAll method")
	}

	if len(mmGetAll.expectations) > 0 {
		mmGetAll.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.GetAll method")
	}

	mmGetAll.mock.funcGetAll = f
	mmGetAll.mock.funcGetAllOrigin = minimock.CallerInfo(1)
	return mmGetAll.mock
}

// When sets expectation for the FreshdeskInterface.GetAll which will trigger the result defined by the following
// Then helper
func (mmGetAll *mFreshdeskInterfaceMockGetAll) When(objectType string, pagination bool, paginationPath string) *FreshdeskInterfaceMockGetAllExpectation {
	if mmGetAll.mock.funcGetAll != nil {
		mmGetAll.mock.t.Fatalf("FreshdeskInterfaceMock.GetAll mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockGetAllExpectation{
		mock:               mmGetAll.mock,
		params:             &FreshdeskInterfaceMockGetAllParams{objectType, pagination, paginationPath},
		expectationOrigins: FreshdeskInterfaceMockGetAllExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetAll.expectations = append(mmGetAll.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.GetAll return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockGetAllExpectation) Then(ta1 []TaskGetAllResponse, s1 string, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockGetAllResults{ta1, s1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.GetAll should be invoked
func (mmGetAll *mFreshdeskInterfaceMockGetAll) Times(n uint64) *mFreshdeskInterfaceMockGetAll {
	if n == 0 {
		mmGetAll.mock.t.Fatalf("Times of FreshdeskInterfaceMock.GetAll mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetAll.expectedInvocations, n)
	mmGetAll.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetAll
}

func (mmGetAll *mFreshdeskInterfaceMockGetAll) invocationsDone() bool {
	if len(mmGetAll.expectations) == 0 && mmGetAll.defaultExpectation == nil && mmGetAll.mock.funcGetAll == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetAll.mock.afterGetAllCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetAll.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetAll implements FreshdeskInterface
func (mmGetAll *FreshdeskInterfaceMock) GetAll(objectType string, pagination bool, paginationPath string) (ta1 []TaskGetAllResponse, s1 string, err error) {
	mm_atomic.AddUint64(&mmGetAll.beforeGetAllCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAll.afterGetAllCounter, 1)

	mmGetAll.t.Helper()

	if mmGetAll.inspectFuncGetAll != nil {
		mmGetAll.inspectFuncGetAll(objectType, pagination, paginationPath)
	}

	mm_params := FreshdeskInterfaceMockGetAllParams{objectType, pagination, paginationPath}

	// Record call args
	mmGetAll.GetAllMock.mutex.Lock()
	mmGetAll.GetAllMock.callArgs = append(mmGetAll.GetAllMock.callArgs, &mm_params)
	mmGetAll.GetAllMock.mutex.Unlock()

	for _, e := range mmGetAll.GetAllMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ta1, e.results.s1, e.results.err
		}
	}

	if mmGetAll.GetAllMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAll.GetAllMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAll.GetAllMock.defaultExpectation.params
		mm_want_ptrs := mmGetAll.GetAllMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockGetAllParams{objectType, pagination, paginationPath}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.objectType != nil && !minimock.Equal(*mm_want_ptrs.objectType, mm_got.objectType) {
				mmGetAll.t.Errorf("FreshdeskInterfaceMock.GetAll got unexpected parameter objectType, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAll.GetAllMock.defaultExpectation.expectationOrigins.originObjectType, *mm_want_ptrs.objectType, mm_got.objectType, minimock.Diff(*mm_want_ptrs.objectType, mm_got.objectType))
			}

			if mm_want_ptrs.pagination != nil && !minimock.Equal(*mm_want_ptrs.pagination, mm_got.pagination) {
				mmGetAll.t.Errorf("FreshdeskInterfaceMock.GetAll got unexpected parameter pagination, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAll.GetAllMock.defaultExpectation.expectationOrigins.originPagination, *mm_want_ptrs.pagination, mm_got.pagination, minimock.Diff(*mm_want_ptrs.pagination, mm_got.pagination))
			}

			if mm_want_ptrs.paginationPath != nil && !minimock.Equal(*mm_want_ptrs.paginationPath, mm_got.paginationPath) {
				mmGetAll.t.Errorf("FreshdeskInterfaceMock.GetAll got unexpected parameter paginationPath, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAll.GetAllMock.defaultExpectation.expectationOrigins.originPaginationPath, *mm_want_ptrs.paginationPath, mm_got.paginationPath, minimock.Diff(*mm_want_ptrs.paginationPath, mm_got.paginationPath))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAll.t.Errorf("FreshdeskInterfaceMock.GetAll got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetAll.GetAllMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAll.GetAllMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAll.t.Fatal("No results are set for the FreshdeskInterfaceMock.GetAll")
		}
		return (*mm_results).ta1, (*mm_results).s1, (*mm_results).err
	}
	if mmGetAll.funcGetAll != nil {
		return mmGetAll.funcGetAll(objectType, pagination, paginationPath)
	}
	mmGetAll.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.GetAll. %v %v %v", objectType, pagination, paginationPath)
	return
}

// GetAllAfterCounter returns a count of finished FreshdeskInterfaceMock.GetAll invocations
func (mmGetAll *FreshdeskInterfaceMock) GetAllAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAll.afterGetAllCounter)
}

// GetAllBeforeCounter returns a count of FreshdeskInterfaceMock.GetAll invocations
func (mmGetAll *FreshdeskInterfaceMock) GetAllBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAll.beforeGetAllCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.GetAll.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAll *mFreshdeskInterfaceMockGetAll) Calls() []*FreshdeskInterfaceMockGetAllParams {
	mmGetAll.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockGetAllParams, len(mmGetAll.callArgs))
	copy(argCopy, mmGetAll.callArgs)

	mmGetAll.mutex.RUnlock()

	return argCopy
}

// MinimockGetAllDone returns true if the count of the GetAll invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockGetAllDone() bool {
	if m.GetAllMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetAllMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetAllMock.invocationsDone()
}

// MinimockGetAllInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockGetAllInspect() {
	for _, e := range m.GetAllMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetAll at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetAllCounter := mm_atomic.LoadUint64(&m.afterGetAllCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetAllMock.defaultExpectation != nil && afterGetAllCounter < 1 {
		if m.GetAllMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetAll at\n%s", m.GetAllMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetAll at\n%s with params: %#v", m.GetAllMock.defaultExpectation.expectationOrigins.origin, *m.GetAllMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAll != nil && afterGetAllCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetAll at\n%s", m.funcGetAllOrigin)
	}

	if !m.GetAllMock.invocationsDone() && afterGetAllCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.GetAll at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetAllMock.expectedInvocations), m.GetAllMock.expectedInvocationsOrigin, afterGetAllCounter)
	}
}

type mFreshdeskInterfaceMockGetAllConversations struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockGetAllConversationsExpectation
	expectations       []*FreshdeskInterfaceMockGetAllConversationsExpectation

	callArgs []*FreshdeskInterfaceMockGetAllConversationsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockGetAllConversationsExpectation specifies expectation struct of the FreshdeskInterface.GetAllConversations
type FreshdeskInterfaceMockGetAllConversationsExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockGetAllConversationsParams
	paramPtrs          *FreshdeskInterfaceMockGetAllConversationsParamPtrs
	expectationOrigins FreshdeskInterfaceMockGetAllConversationsExpectationOrigins
	results            *FreshdeskInterfaceMockGetAllConversationsResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockGetAllConversationsParams contains parameters of the FreshdeskInterface.GetAllConversations
type FreshdeskInterfaceMockGetAllConversationsParams struct {
	ticketID       int64
	pagination     bool
	paginationPath string
}

// FreshdeskInterfaceMockGetAllConversationsParamPtrs contains pointers to parameters of the FreshdeskInterface.GetAllConversations
type FreshdeskInterfaceMockGetAllConversationsParamPtrs struct {
	ticketID       *int64
	pagination     *bool
	paginationPath *string
}

// FreshdeskInterfaceMockGetAllConversationsResults contains results of the FreshdeskInterface.GetAllConversations
type FreshdeskInterfaceMockGetAllConversationsResults struct {
	ta1 []TaskGetAllConversationsResponse
	s1  string
	err error
}

// FreshdeskInterfaceMockGetAllConversationsOrigins contains origins of expectations of the FreshdeskInterface.GetAllConversations
type FreshdeskInterfaceMockGetAllConversationsExpectationOrigins struct {
	origin               string
	originTicketID       string
	originPagination     string
	originPaginationPath string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetAllConversations *mFreshdeskInterfaceMockGetAllConversations) Optional() *mFreshdeskInterfaceMockGetAllConversations {
	mmGetAllConversations.optional = true
	return mmGetAllConversations
}

// Expect sets up expected params for FreshdeskInterface.GetAllConversations
func (mmGetAllConversations *mFreshdeskInterfaceMockGetAllConversations) Expect(ticketID int64, pagination bool, paginationPath string) *mFreshdeskInterfaceMockGetAllConversations {
	if mmGetAllConversations.mock.funcGetAllConversations != nil {
		mmGetAllConversations.mock.t.Fatalf("FreshdeskInterfaceMock.GetAllConversations mock is already set by Set")
	}

	if mmGetAllConversations.defaultExpectation == nil {
		mmGetAllConversations.defaultExpectation = &FreshdeskInterfaceMockGetAllConversationsExpectation{}
	}

	if mmGetAllConversations.defaultExpectation.paramPtrs != nil {
		mmGetAllConversations.mock.t.Fatalf("FreshdeskInterfaceMock.GetAllConversations mock is already set by ExpectParams functions")
	}

	mmGetAllConversations.defaultExpectation.params = &FreshdeskInterfaceMockGetAllConversationsParams{ticketID, pagination, paginationPath}
	mmGetAllConversations.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetAllConversations.expectations {
		if minimock.Equal(e.params, mmGetAllConversations.defaultExpectation.params) {
			mmGetAllConversations.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAllConversations.defaultExpectation.params)
		}
	}

	return mmGetAllConversations
}

// ExpectTicketIDParam1 sets up expected param ticketID for FreshdeskInterface.GetAllConversations
func (mmGetAllConversations *mFreshdeskInterfaceMockGetAllConversations) ExpectTicketIDParam1(ticketID int64) *mFreshdeskInterfaceMockGetAllConversations {
	if mmGetAllConversations.mock.funcGetAllConversations != nil {
		mmGetAllConversations.mock.t.Fatalf("FreshdeskInterfaceMock.GetAllConversations mock is already set by Set")
	}

	if mmGetAllConversations.defaultExpectation == nil {
		mmGetAllConversations.defaultExpectation = &FreshdeskInterfaceMockGetAllConversationsExpectation{}
	}

	if mmGetAllConversations.defaultExpectation.params != nil {
		mmGetAllConversations.mock.t.Fatalf("FreshdeskInterfaceMock.GetAllConversations mock is already set by Expect")
	}

	if mmGetAllConversations.defaultExpectation.paramPtrs == nil {
		mmGetAllConversations.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockGetAllConversationsParamPtrs{}
	}
	mmGetAllConversations.defaultExpectation.paramPtrs.ticketID = &ticketID
	mmGetAllConversations.defaultExpectation.expectationOrigins.originTicketID = minimock.CallerInfo(1)

	return mmGetAllConversations
}

// ExpectPaginationParam2 sets up expected param pagination for FreshdeskInterface.GetAllConversations
func (mmGetAllConversations *mFreshdeskInterfaceMockGetAllConversations) ExpectPaginationParam2(pagination bool) *mFreshdeskInterfaceMockGetAllConversations {
	if mmGetAllConversations.mock.funcGetAllConversations != nil {
		mmGetAllConversations.mock.t.Fatalf("FreshdeskInterfaceMock.GetAllConversations mock is already set by Set")
	}

	if mmGetAllConversations.defaultExpectation == nil {
		mmGetAllConversations.defaultExpectation = &FreshdeskInterfaceMockGetAllConversationsExpectation{}
	}

	if mmGetAllConversations.defaultExpectation.params != nil {
		mmGetAllConversations.mock.t.Fatalf("FreshdeskInterfaceMock.GetAllConversations mock is already set by Expect")
	}

	if mmGetAllConversations.defaultExpectation.paramPtrs == nil {
		mmGetAllConversations.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockGetAllConversationsParamPtrs{}
	}
	mmGetAllConversations.defaultExpectation.paramPtrs.pagination = &pagination
	mmGetAllConversations.defaultExpectation.expectationOrigins.originPagination = minimock.CallerInfo(1)

	return mmGetAllConversations
}

// ExpectPaginationPathParam3 sets up expected param paginationPath for FreshdeskInterface.GetAllConversations
func (mmGetAllConversations *mFreshdeskInterfaceMockGetAllConversations) ExpectPaginationPathParam3(paginationPath string) *mFreshdeskInterfaceMockGetAllConversations {
	if mmGetAllConversations.mock.funcGetAllConversations != nil {
		mmGetAllConversations.mock.t.Fatalf("FreshdeskInterfaceMock.GetAllConversations mock is already set by Set")
	}

	if mmGetAllConversations.defaultExpectation == nil {
		mmGetAllConversations.defaultExpectation = &FreshdeskInterfaceMockGetAllConversationsExpectation{}
	}

	if mmGetAllConversations.defaultExpectation.params != nil {
		mmGetAllConversations.mock.t.Fatalf("FreshdeskInterfaceMock.GetAllConversations mock is already set by Expect")
	}

	if mmGetAllConversations.defaultExpectation.paramPtrs == nil {
		mmGetAllConversations.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockGetAllConversationsParamPtrs{}
	}
	mmGetAllConversations.defaultExpectation.paramPtrs.paginationPath = &paginationPath
	mmGetAllConversations.defaultExpectation.expectationOrigins.originPaginationPath = minimock.CallerInfo(1)

	return mmGetAllConversations
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.GetAllConversations
func (mmGetAllConversations *mFreshdeskInterfaceMockGetAllConversations) Inspect(f func(ticketID int64, pagination bool, paginationPath string)) *mFreshdeskInterfaceMockGetAllConversations {
	if mmGetAllConversations.mock.inspectFuncGetAllConversations != nil {
		mmGetAllConversations.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.GetAllConversations")
	}

	mmGetAllConversations.mock.inspectFuncGetAllConversations = f

	return mmGetAllConversations
}

// Return sets up results that will be returned by FreshdeskInterface.GetAllConversations
func (mmGetAllConversations *mFreshdeskInterfaceMockGetAllConversations) Return(ta1 []TaskGetAllConversationsResponse, s1 string, err error) *FreshdeskInterfaceMock {
	if mmGetAllConversations.mock.funcGetAllConversations != nil {
		mmGetAllConversations.mock.t.Fatalf("FreshdeskInterfaceMock.GetAllConversations mock is already set by Set")
	}

	if mmGetAllConversations.defaultExpectation == nil {
		mmGetAllConversations.defaultExpectation = &FreshdeskInterfaceMockGetAllConversationsExpectation{mock: mmGetAllConversations.mock}
	}
	mmGetAllConversations.defaultExpectation.results = &FreshdeskInterfaceMockGetAllConversationsResults{ta1, s1, err}
	mmGetAllConversations.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetAllConversations.mock
}

// Set uses given function f to mock the FreshdeskInterface.GetAllConversations method
func (mmGetAllConversations *mFreshdeskInterfaceMockGetAllConversations) Set(f func(ticketID int64, pagination bool, paginationPath string) (ta1 []TaskGetAllConversationsResponse, s1 string, err error)) *FreshdeskInterfaceMock {
	if mmGetAllConversations.defaultExpectation != nil {
		mmGetAllConversations.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.GetAllConversations method")
	}

	if len(mmGetAllConversations.expectations) > 0 {
		mmGetAllConversations.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.GetAllConversations method")
	}

	mmGetAllConversations.mock.funcGetAllConversations = f
	mmGetAllConversations.mock.funcGetAllConversationsOrigin = minimock.CallerInfo(1)
	return mmGetAllConversations.mock
}

// When sets expectation for the FreshdeskInterface.GetAllConversations which will trigger the result defined by the following
// Then helper
func (mmGetAllConversations *mFreshdeskInterfaceMockGetAllConversations) When(ticketID int64, pagination bool, paginationPath string) *FreshdeskInterfaceMockGetAllConversationsExpectation {
	if mmGetAllConversations.mock.funcGetAllConversations != nil {
		mmGetAllConversations.mock.t.Fatalf("FreshdeskInterfaceMock.GetAllConversations mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockGetAllConversationsExpectation{
		mock:               mmGetAllConversations.mock,
		params:             &FreshdeskInterfaceMockGetAllConversationsParams{ticketID, pagination, paginationPath},
		expectationOrigins: FreshdeskInterfaceMockGetAllConversationsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetAllConversations.expectations = append(mmGetAllConversations.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.GetAllConversations return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockGetAllConversationsExpectation) Then(ta1 []TaskGetAllConversationsResponse, s1 string, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockGetAllConversationsResults{ta1, s1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.GetAllConversations should be invoked
func (mmGetAllConversations *mFreshdeskInterfaceMockGetAllConversations) Times(n uint64) *mFreshdeskInterfaceMockGetAllConversations {
	if n == 0 {
		mmGetAllConversations.mock.t.Fatalf("Times of FreshdeskInterfaceMock.GetAllConversations mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetAllConversations.expectedInvocations, n)
	mmGetAllConversations.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetAllConversations
}

func (mmGetAllConversations *mFreshdeskInterfaceMockGetAllConversations) invocationsDone() bool {
	if len(mmGetAllConversations.expectations) == 0 && mmGetAllConversations.defaultExpectation == nil && mmGetAllConversations.mock.funcGetAllConversations == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetAllConversations.mock.afterGetAllConversationsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetAllConversations.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetAllConversations implements FreshdeskInterface
func (mmGetAllConversations *FreshdeskInterfaceMock) GetAllConversations(ticketID int64, pagination bool, paginationPath string) (ta1 []TaskGetAllConversationsResponse, s1 string, err error) {
	mm_atomic.AddUint64(&mmGetAllConversations.beforeGetAllConversationsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAllConversations.afterGetAllConversationsCounter, 1)

	mmGetAllConversations.t.Helper()

	if mmGetAllConversations.inspectFuncGetAllConversations != nil {
		mmGetAllConversations.inspectFuncGetAllConversations(ticketID, pagination, paginationPath)
	}

	mm_params := FreshdeskInterfaceMockGetAllConversationsParams{ticketID, pagination, paginationPath}

	// Record call args
	mmGetAllConversations.GetAllConversationsMock.mutex.Lock()
	mmGetAllConversations.GetAllConversationsMock.callArgs = append(mmGetAllConversations.GetAllConversationsMock.callArgs, &mm_params)
	mmGetAllConversations.GetAllConversationsMock.mutex.Unlock()

	for _, e := range mmGetAllConversations.GetAllConversationsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ta1, e.results.s1, e.results.err
		}
	}

	if mmGetAllConversations.GetAllConversationsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAllConversations.GetAllConversationsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAllConversations.GetAllConversationsMock.defaultExpectation.params
		mm_want_ptrs := mmGetAllConversations.GetAllConversationsMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockGetAllConversationsParams{ticketID, pagination, paginationPath}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ticketID != nil && !minimock.Equal(*mm_want_ptrs.ticketID, mm_got.ticketID) {
				mmGetAllConversations.t.Errorf("FreshdeskInterfaceMock.GetAllConversations got unexpected parameter ticketID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAllConversations.GetAllConversationsMock.defaultExpectation.expectationOrigins.originTicketID, *mm_want_ptrs.ticketID, mm_got.ticketID, minimock.Diff(*mm_want_ptrs.ticketID, mm_got.ticketID))
			}

			if mm_want_ptrs.pagination != nil && !minimock.Equal(*mm_want_ptrs.pagination, mm_got.pagination) {
				mmGetAllConversations.t.Errorf("FreshdeskInterfaceMock.GetAllConversations got unexpected parameter pagination, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAllConversations.GetAllConversationsMock.defaultExpectation.expectationOrigins.originPagination, *mm_want_ptrs.pagination, mm_got.pagination, minimock.Diff(*mm_want_ptrs.pagination, mm_got.pagination))
			}

			if mm_want_ptrs.paginationPath != nil && !minimock.Equal(*mm_want_ptrs.paginationPath, mm_got.paginationPath) {
				mmGetAllConversations.t.Errorf("FreshdeskInterfaceMock.GetAllConversations got unexpected parameter paginationPath, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAllConversations.GetAllConversationsMock.defaultExpectation.expectationOrigins.originPaginationPath, *mm_want_ptrs.paginationPath, mm_got.paginationPath, minimock.Diff(*mm_want_ptrs.paginationPath, mm_got.paginationPath))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAllConversations.t.Errorf("FreshdeskInterfaceMock.GetAllConversations got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetAllConversations.GetAllConversationsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAllConversations.GetAllConversationsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAllConversations.t.Fatal("No results are set for the FreshdeskInterfaceMock.GetAllConversations")
		}
		return (*mm_results).ta1, (*mm_results).s1, (*mm_results).err
	}
	if mmGetAllConversations.funcGetAllConversations != nil {
		return mmGetAllConversations.funcGetAllConversations(ticketID, pagination, paginationPath)
	}
	mmGetAllConversations.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.GetAllConversations. %v %v %v", ticketID, pagination, paginationPath)
	return
}

// GetAllConversationsAfterCounter returns a count of finished FreshdeskInterfaceMock.GetAllConversations invocations
func (mmGetAllConversations *FreshdeskInterfaceMock) GetAllConversationsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAllConversations.afterGetAllConversationsCounter)
}

// GetAllConversationsBeforeCounter returns a count of FreshdeskInterfaceMock.GetAllConversations invocations
func (mmGetAllConversations *FreshdeskInterfaceMock) GetAllConversationsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAllConversations.beforeGetAllConversationsCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.GetAllConversations.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAllConversations *mFreshdeskInterfaceMockGetAllConversations) Calls() []*FreshdeskInterfaceMockGetAllConversationsParams {
	mmGetAllConversations.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockGetAllConversationsParams, len(mmGetAllConversations.callArgs))
	copy(argCopy, mmGetAllConversations.callArgs)

	mmGetAllConversations.mutex.RUnlock()

	return argCopy
}

// MinimockGetAllConversationsDone returns true if the count of the GetAllConversations invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockGetAllConversationsDone() bool {
	if m.GetAllConversationsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetAllConversationsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetAllConversationsMock.invocationsDone()
}

// MinimockGetAllConversationsInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockGetAllConversationsInspect() {
	for _, e := range m.GetAllConversationsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetAllConversations at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetAllConversationsCounter := mm_atomic.LoadUint64(&m.afterGetAllConversationsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetAllConversationsMock.defaultExpectation != nil && afterGetAllConversationsCounter < 1 {
		if m.GetAllConversationsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetAllConversations at\n%s", m.GetAllConversationsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetAllConversations at\n%s with params: %#v", m.GetAllConversationsMock.defaultExpectation.expectationOrigins.origin, *m.GetAllConversationsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAllConversations != nil && afterGetAllConversationsCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetAllConversations at\n%s", m.funcGetAllConversationsOrigin)
	}

	if !m.GetAllConversationsMock.invocationsDone() && afterGetAllConversationsCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.GetAllConversations at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetAllConversationsMock.expectedInvocations), m.GetAllConversationsMock.expectedInvocationsOrigin, afterGetAllConversationsCounter)
	}
}

type mFreshdeskInterfaceMockGetCompany struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockGetCompanyExpectation
	expectations       []*FreshdeskInterfaceMockGetCompanyExpectation

	callArgs []*FreshdeskInterfaceMockGetCompanyParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockGetCompanyExpectation specifies expectation struct of the FreshdeskInterface.GetCompany
type FreshdeskInterfaceMockGetCompanyExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockGetCompanyParams
	paramPtrs          *FreshdeskInterfaceMockGetCompanyParamPtrs
	expectationOrigins FreshdeskInterfaceMockGetCompanyExpectationOrigins
	results            *FreshdeskInterfaceMockGetCompanyResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockGetCompanyParams contains parameters of the FreshdeskInterface.GetCompany
type FreshdeskInterfaceMockGetCompanyParams struct {
	companyID int64
}

// FreshdeskInterfaceMockGetCompanyParamPtrs contains pointers to parameters of the FreshdeskInterface.GetCompany
type FreshdeskInterfaceMockGetCompanyParamPtrs struct {
	companyID *int64
}

// FreshdeskInterfaceMockGetCompanyResults contains results of the FreshdeskInterface.GetCompany
type FreshdeskInterfaceMockGetCompanyResults struct {
	tp1 *TaskGetCompanyResponse
	err error
}

// FreshdeskInterfaceMockGetCompanyOrigins contains origins of expectations of the FreshdeskInterface.GetCompany
type FreshdeskInterfaceMockGetCompanyExpectationOrigins struct {
	origin          string
	originCompanyID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetCompany *mFreshdeskInterfaceMockGetCompany) Optional() *mFreshdeskInterfaceMockGetCompany {
	mmGetCompany.optional = true
	return mmGetCompany
}

// Expect sets up expected params for FreshdeskInterface.GetCompany
func (mmGetCompany *mFreshdeskInterfaceMockGetCompany) Expect(companyID int64) *mFreshdeskInterfaceMockGetCompany {
	if mmGetCompany.mock.funcGetCompany != nil {
		mmGetCompany.mock.t.Fatalf("FreshdeskInterfaceMock.GetCompany mock is already set by Set")
	}

	if mmGetCompany.defaultExpectation == nil {
		mmGetCompany.defaultExpectation = &FreshdeskInterfaceMockGetCompanyExpectation{}
	}

	if mmGetCompany.defaultExpectation.paramPtrs != nil {
		mmGetCompany.mock.t.Fatalf("FreshdeskInterfaceMock.GetCompany mock is already set by ExpectParams functions")
	}

	mmGetCompany.defaultExpectation.params = &FreshdeskInterfaceMockGetCompanyParams{companyID}
	mmGetCompany.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetCompany.expectations {
		if minimock.Equal(e.params, mmGetCompany.defaultExpectation.params) {
			mmGetCompany.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCompany.defaultExpectation.params)
		}
	}

	return mmGetCompany
}

// ExpectCompanyIDParam1 sets up expected param companyID for FreshdeskInterface.GetCompany
func (mmGetCompany *mFreshdeskInterfaceMockGetCompany) ExpectCompanyIDParam1(companyID int64) *mFreshdeskInterfaceMockGetCompany {
	if mmGetCompany.mock.funcGetCompany != nil {
		mmGetCompany.mock.t.Fatalf("FreshdeskInterfaceMock.GetCompany mock is already set by Set")
	}

	if mmGetCompany.defaultExpectation == nil {
		mmGetCompany.defaultExpectation = &FreshdeskInterfaceMockGetCompanyExpectation{}
	}

	if mmGetCompany.defaultExpectation.params != nil {
		mmGetCompany.mock.t.Fatalf("FreshdeskInterfaceMock.GetCompany mock is already set by Expect")
	}

	if mmGetCompany.defaultExpectation.paramPtrs == nil {
		mmGetCompany.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockGetCompanyParamPtrs{}
	}
	mmGetCompany.defaultExpectation.paramPtrs.companyID = &companyID
	mmGetCompany.defaultExpectation.expectationOrigins.originCompanyID = minimock.CallerInfo(1)

	return mmGetCompany
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.GetCompany
func (mmGetCompany *mFreshdeskInterfaceMockGetCompany) Inspect(f func(companyID int64)) *mFreshdeskInterfaceMockGetCompany {
	if mmGetCompany.mock.inspectFuncGetCompany != nil {
		mmGetCompany.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.GetCompany")
	}

	mmGetCompany.mock.inspectFuncGetCompany = f

	return mmGetCompany
}

// Return sets up results that will be returned by FreshdeskInterface.GetCompany
func (mmGetCompany *mFreshdeskInterfaceMockGetCompany) Return(tp1 *TaskGetCompanyResponse, err error) *FreshdeskInterfaceMock {
	if mmGetCompany.mock.funcGetCompany != nil {
		mmGetCompany.mock.t.Fatalf("FreshdeskInterfaceMock.GetCompany mock is already set by Set")
	}

	if mmGetCompany.defaultExpectation == nil {
		mmGetCompany.defaultExpectation = &FreshdeskInterfaceMockGetCompanyExpectation{mock: mmGetCompany.mock}
	}
	mmGetCompany.defaultExpectation.results = &FreshdeskInterfaceMockGetCompanyResults{tp1, err}
	mmGetCompany.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetCompany.mock
}

// Set uses given function f to mock the FreshdeskInterface.GetCompany method
func (mmGetCompany *mFreshdeskInterfaceMockGetCompany) Set(f func(companyID int64) (tp1 *TaskGetCompanyResponse, err error)) *FreshdeskInterfaceMock {
	if mmGetCompany.defaultExpectation != nil {
		mmGetCompany.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.GetCompany method")
	}

	if len(mmGetCompany.expectations) > 0 {
		mmGetCompany.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.GetCompany method")
	}

	mmGetCompany.mock.funcGetCompany = f
	mmGetCompany.mock.funcGetCompanyOrigin = minimock.CallerInfo(1)
	return mmGetCompany.mock
}

// When sets expectation for the FreshdeskInterface.GetCompany which will trigger the result defined by the following
// Then helper
func (mmGetCompany *mFreshdeskInterfaceMockGetCompany) When(companyID int64) *FreshdeskInterfaceMockGetCompanyExpectation {
	if mmGetCompany.mock.funcGetCompany != nil {
		mmGetCompany.mock.t.Fatalf("FreshdeskInterfaceMock.GetCompany mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockGetCompanyExpectation{
		mock:               mmGetCompany.mock,
		params:             &FreshdeskInterfaceMockGetCompanyParams{companyID},
		expectationOrigins: FreshdeskInterfaceMockGetCompanyExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetCompany.expectations = append(mmGetCompany.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.GetCompany return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockGetCompanyExpectation) Then(tp1 *TaskGetCompanyResponse, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockGetCompanyResults{tp1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.GetCompany should be invoked
func (mmGetCompany *mFreshdeskInterfaceMockGetCompany) Times(n uint64) *mFreshdeskInterfaceMockGetCompany {
	if n == 0 {
		mmGetCompany.mock.t.Fatalf("Times of FreshdeskInterfaceMock.GetCompany mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetCompany.expectedInvocations, n)
	mmGetCompany.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetCompany
}

func (mmGetCompany *mFreshdeskInterfaceMockGetCompany) invocationsDone() bool {
	if len(mmGetCompany.expectations) == 0 && mmGetCompany.defaultExpectation == nil && mmGetCompany.mock.funcGetCompany == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetCompany.mock.afterGetCompanyCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetCompany.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetCompany implements FreshdeskInterface
func (mmGetCompany *FreshdeskInterfaceMock) GetCompany(companyID int64) (tp1 *TaskGetCompanyResponse, err error) {
	mm_atomic.AddUint64(&mmGetCompany.beforeGetCompanyCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCompany.afterGetCompanyCounter, 1)

	mmGetCompany.t.Helper()

	if mmGetCompany.inspectFuncGetCompany != nil {
		mmGetCompany.inspectFuncGetCompany(companyID)
	}

	mm_params := FreshdeskInterfaceMockGetCompanyParams{companyID}

	// Record call args
	mmGetCompany.GetCompanyMock.mutex.Lock()
	mmGetCompany.GetCompanyMock.callArgs = append(mmGetCompany.GetCompanyMock.callArgs, &mm_params)
	mmGetCompany.GetCompanyMock.mutex.Unlock()

	for _, e := range mmGetCompany.GetCompanyMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmGetCompany.GetCompanyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCompany.GetCompanyMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCompany.GetCompanyMock.defaultExpectation.params
		mm_want_ptrs := mmGetCompany.GetCompanyMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockGetCompanyParams{companyID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.companyID != nil && !minimock.Equal(*mm_want_ptrs.companyID, mm_got.companyID) {
				mmGetCompany.t.Errorf("FreshdeskInterfaceMock.GetCompany got unexpected parameter companyID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCompany.GetCompanyMock.defaultExpectation.expectationOrigins.originCompanyID, *mm_want_ptrs.companyID, mm_got.companyID, minimock.Diff(*mm_want_ptrs.companyID, mm_got.companyID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCompany.t.Errorf("FreshdeskInterfaceMock.GetCompany got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetCompany.GetCompanyMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCompany.GetCompanyMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCompany.t.Fatal("No results are set for the FreshdeskInterfaceMock.GetCompany")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmGetCompany.funcGetCompany != nil {
		return mmGetCompany.funcGetCompany(companyID)
	}
	mmGetCompany.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.GetCompany. %v", companyID)
	return
}

// GetCompanyAfterCounter returns a count of finished FreshdeskInterfaceMock.GetCompany invocations
func (mmGetCompany *FreshdeskInterfaceMock) GetCompanyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCompany.afterGetCompanyCounter)
}

// GetCompanyBeforeCounter returns a count of FreshdeskInterfaceMock.GetCompany invocations
func (mmGetCompany *FreshdeskInterfaceMock) GetCompanyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCompany.beforeGetCompanyCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.GetCompany.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCompany *mFreshdeskInterfaceMockGetCompany) Calls() []*FreshdeskInterfaceMockGetCompanyParams {
	mmGetCompany.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockGetCompanyParams, len(mmGetCompany.callArgs))
	copy(argCopy, mmGetCompany.callArgs)

	mmGetCompany.mutex.RUnlock()

	return argCopy
}

// MinimockGetCompanyDone returns true if the count of the GetCompany invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockGetCompanyDone() bool {
	if m.GetCompanyMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetCompanyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetCompanyMock.invocationsDone()
}

// MinimockGetCompanyInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockGetCompanyInspect() {
	for _, e := range m.GetCompanyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetCompany at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCompanyCounter := mm_atomic.LoadUint64(&m.afterGetCompanyCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetCompanyMock.defaultExpectation != nil && afterGetCompanyCounter < 1 {
		if m.GetCompanyMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetCompany at\n%s", m.GetCompanyMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetCompany at\n%s with params: %#v", m.GetCompanyMock.defaultExpectation.expectationOrigins.origin, *m.GetCompanyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCompany != nil && afterGetCompanyCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetCompany at\n%s", m.funcGetCompanyOrigin)
	}

	if !m.GetCompanyMock.invocationsDone() && afterGetCompanyCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.GetCompany at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetCompanyMock.expectedInvocations), m.GetCompanyMock.expectedInvocationsOrigin, afterGetCompanyCounter)
	}
}

type mFreshdeskInterfaceMockGetContact struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockGetContactExpectation
	expectations       []*FreshdeskInterfaceMockGetContactExpectation

	callArgs []*FreshdeskInterfaceMockGetContactParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockGetContactExpectation specifies expectation struct of the FreshdeskInterface.GetContact
type FreshdeskInterfaceMockGetContactExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockGetContactParams
	paramPtrs          *FreshdeskInterfaceMockGetContactParamPtrs
	expectationOrigins FreshdeskInterfaceMockGetContactExpectationOrigins
	results            *FreshdeskInterfaceMockGetContactResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockGetContactParams contains parameters of the FreshdeskInterface.GetContact
type FreshdeskInterfaceMockGetContactParams struct {
	contactID int64
}

// FreshdeskInterfaceMockGetContactParamPtrs contains pointers to parameters of the FreshdeskInterface.GetContact
type FreshdeskInterfaceMockGetContactParamPtrs struct {
	contactID *int64
}

// FreshdeskInterfaceMockGetContactResults contains results of the FreshdeskInterface.GetContact
type FreshdeskInterfaceMockGetContactResults struct {
	tp1 *TaskGetContactResponse
	err error
}

// FreshdeskInterfaceMockGetContactOrigins contains origins of expectations of the FreshdeskInterface.GetContact
type FreshdeskInterfaceMockGetContactExpectationOrigins struct {
	origin          string
	originContactID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetContact *mFreshdeskInterfaceMockGetContact) Optional() *mFreshdeskInterfaceMockGetContact {
	mmGetContact.optional = true
	return mmGetContact
}

// Expect sets up expected params for FreshdeskInterface.GetContact
func (mmGetContact *mFreshdeskInterfaceMockGetContact) Expect(contactID int64) *mFreshdeskInterfaceMockGetContact {
	if mmGetContact.mock.funcGetContact != nil {
		mmGetContact.mock.t.Fatalf("FreshdeskInterfaceMock.GetContact mock is already set by Set")
	}

	if mmGetContact.defaultExpectation == nil {
		mmGetContact.defaultExpectation = &FreshdeskInterfaceMockGetContactExpectation{}
	}

	if mmGetContact.defaultExpectation.paramPtrs != nil {
		mmGetContact.mock.t.Fatalf("FreshdeskInterfaceMock.GetContact mock is already set by ExpectParams functions")
	}

	mmGetContact.defaultExpectation.params = &FreshdeskInterfaceMockGetContactParams{contactID}
	mmGetContact.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetContact.expectations {
		if minimock.Equal(e.params, mmGetContact.defaultExpectation.params) {
			mmGetContact.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetContact.defaultExpectation.params)
		}
	}

	return mmGetContact
}

// ExpectContactIDParam1 sets up expected param contactID for FreshdeskInterface.GetContact
func (mmGetContact *mFreshdeskInterfaceMockGetContact) ExpectContactIDParam1(contactID int64) *mFreshdeskInterfaceMockGetContact {
	if mmGetContact.mock.funcGetContact != nil {
		mmGetContact.mock.t.Fatalf("FreshdeskInterfaceMock.GetContact mock is already set by Set")
	}

	if mmGetContact.defaultExpectation == nil {
		mmGetContact.defaultExpectation = &FreshdeskInterfaceMockGetContactExpectation{}
	}

	if mmGetContact.defaultExpectation.params != nil {
		mmGetContact.mock.t.Fatalf("FreshdeskInterfaceMock.GetContact mock is already set by Expect")
	}

	if mmGetContact.defaultExpectation.paramPtrs == nil {
		mmGetContact.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockGetContactParamPtrs{}
	}
	mmGetContact.defaultExpectation.paramPtrs.contactID = &contactID
	mmGetContact.defaultExpectation.expectationOrigins.originContactID = minimock.CallerInfo(1)

	return mmGetContact
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.GetContact
func (mmGetContact *mFreshdeskInterfaceMockGetContact) Inspect(f func(contactID int64)) *mFreshdeskInterfaceMockGetContact {
	if mmGetContact.mock.inspectFuncGetContact != nil {
		mmGetContact.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.GetContact")
	}

	mmGetContact.mock.inspectFuncGetContact = f

	return mmGetContact
}

// Return sets up results that will be returned by FreshdeskInterface.GetContact
func (mmGetContact *mFreshdeskInterfaceMockGetContact) Return(tp1 *TaskGetContactResponse, err error) *FreshdeskInterfaceMock {
	if mmGetContact.mock.funcGetContact != nil {
		mmGetContact.mock.t.Fatalf("FreshdeskInterfaceMock.GetContact mock is already set by Set")
	}

	if mmGetContact.defaultExpectation == nil {
		mmGetContact.defaultExpectation = &FreshdeskInterfaceMockGetContactExpectation{mock: mmGetContact.mock}
	}
	mmGetContact.defaultExpectation.results = &FreshdeskInterfaceMockGetContactResults{tp1, err}
	mmGetContact.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetContact.mock
}

// Set uses given function f to mock the FreshdeskInterface.GetContact method
func (mmGetContact *mFreshdeskInterfaceMockGetContact) Set(f func(contactID int64) (tp1 *TaskGetContactResponse, err error)) *FreshdeskInterfaceMock {
	if mmGetContact.defaultExpectation != nil {
		mmGetContact.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.GetContact method")
	}

	if len(mmGetContact.expectations) > 0 {
		mmGetContact.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.GetContact method")
	}

	mmGetContact.mock.funcGetContact = f
	mmGetContact.mock.funcGetContactOrigin = minimock.CallerInfo(1)
	return mmGetContact.mock
}

// When sets expectation for the FreshdeskInterface.GetContact which will trigger the result defined by the following
// Then helper
func (mmGetContact *mFreshdeskInterfaceMockGetContact) When(contactID int64) *FreshdeskInterfaceMockGetContactExpectation {
	if mmGetContact.mock.funcGetContact != nil {
		mmGetContact.mock.t.Fatalf("FreshdeskInterfaceMock.GetContact mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockGetContactExpectation{
		mock:               mmGetContact.mock,
		params:             &FreshdeskInterfaceMockGetContactParams{contactID},
		expectationOrigins: FreshdeskInterfaceMockGetContactExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetContact.expectations = append(mmGetContact.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.GetContact return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockGetContactExpectation) Then(tp1 *TaskGetContactResponse, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockGetContactResults{tp1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.GetContact should be invoked
func (mmGetContact *mFreshdeskInterfaceMockGetContact) Times(n uint64) *mFreshdeskInterfaceMockGetContact {
	if n == 0 {
		mmGetContact.mock.t.Fatalf("Times of FreshdeskInterfaceMock.GetContact mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetContact.expectedInvocations, n)
	mmGetContact.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetContact
}

func (mmGetContact *mFreshdeskInterfaceMockGetContact) invocationsDone() bool {
	if len(mmGetContact.expectations) == 0 && mmGetContact.defaultExpectation == nil && mmGetContact.mock.funcGetContact == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetContact.mock.afterGetContactCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetContact.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetContact implements FreshdeskInterface
func (mmGetContact *FreshdeskInterfaceMock) GetContact(contactID int64) (tp1 *TaskGetContactResponse, err error) {
	mm_atomic.AddUint64(&mmGetContact.beforeGetContactCounter, 1)
	defer mm_atomic.AddUint64(&mmGetContact.afterGetContactCounter, 1)

	mmGetContact.t.Helper()

	if mmGetContact.inspectFuncGetContact != nil {
		mmGetContact.inspectFuncGetContact(contactID)
	}

	mm_params := FreshdeskInterfaceMockGetContactParams{contactID}

	// Record call args
	mmGetContact.GetContactMock.mutex.Lock()
	mmGetContact.GetContactMock.callArgs = append(mmGetContact.GetContactMock.callArgs, &mm_params)
	mmGetContact.GetContactMock.mutex.Unlock()

	for _, e := range mmGetContact.GetContactMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmGetContact.GetContactMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetContact.GetContactMock.defaultExpectation.Counter, 1)
		mm_want := mmGetContact.GetContactMock.defaultExpectation.params
		mm_want_ptrs := mmGetContact.GetContactMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockGetContactParams{contactID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.contactID != nil && !minimock.Equal(*mm_want_ptrs.contactID, mm_got.contactID) {
				mmGetContact.t.Errorf("FreshdeskInterfaceMock.GetContact got unexpected parameter contactID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetContact.GetContactMock.defaultExpectation.expectationOrigins.originContactID, *mm_want_ptrs.contactID, mm_got.contactID, minimock.Diff(*mm_want_ptrs.contactID, mm_got.contactID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetContact.t.Errorf("FreshdeskInterfaceMock.GetContact got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetContact.GetContactMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetContact.GetContactMock.defaultExpectation.results
		if mm_results == nil {
			mmGetContact.t.Fatal("No results are set for the FreshdeskInterfaceMock.GetContact")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmGetContact.funcGetContact != nil {
		return mmGetContact.funcGetContact(contactID)
	}
	mmGetContact.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.GetContact. %v", contactID)
	return
}

// GetContactAfterCounter returns a count of finished FreshdeskInterfaceMock.GetContact invocations
func (mmGetContact *FreshdeskInterfaceMock) GetContactAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetContact.afterGetContactCounter)
}

// GetContactBeforeCounter returns a count of FreshdeskInterfaceMock.GetContact invocations
func (mmGetContact *FreshdeskInterfaceMock) GetContactBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetContact.beforeGetContactCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.GetContact.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetContact *mFreshdeskInterfaceMockGetContact) Calls() []*FreshdeskInterfaceMockGetContactParams {
	mmGetContact.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockGetContactParams, len(mmGetContact.callArgs))
	copy(argCopy, mmGetContact.callArgs)

	mmGetContact.mutex.RUnlock()

	return argCopy
}

// MinimockGetContactDone returns true if the count of the GetContact invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockGetContactDone() bool {
	if m.GetContactMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetContactMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetContactMock.invocationsDone()
}

// MinimockGetContactInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockGetContactInspect() {
	for _, e := range m.GetContactMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetContact at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetContactCounter := mm_atomic.LoadUint64(&m.afterGetContactCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetContactMock.defaultExpectation != nil && afterGetContactCounter < 1 {
		if m.GetContactMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetContact at\n%s", m.GetContactMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetContact at\n%s with params: %#v", m.GetContactMock.defaultExpectation.expectationOrigins.origin, *m.GetContactMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetContact != nil && afterGetContactCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetContact at\n%s", m.funcGetContactOrigin)
	}

	if !m.GetContactMock.invocationsDone() && afterGetContactCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.GetContact at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetContactMock.expectedInvocations), m.GetContactMock.expectedInvocationsOrigin, afterGetContactCounter)
	}
}

type mFreshdeskInterfaceMockGetGroup struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockGetGroupExpectation
	expectations       []*FreshdeskInterfaceMockGetGroupExpectation

	callArgs []*FreshdeskInterfaceMockGetGroupParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockGetGroupExpectation specifies expectation struct of the FreshdeskInterface.GetGroup
type FreshdeskInterfaceMockGetGroupExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockGetGroupParams
	paramPtrs          *FreshdeskInterfaceMockGetGroupParamPtrs
	expectationOrigins FreshdeskInterfaceMockGetGroupExpectationOrigins
	results            *FreshdeskInterfaceMockGetGroupResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockGetGroupParams contains parameters of the FreshdeskInterface.GetGroup
type FreshdeskInterfaceMockGetGroupParams struct {
	groupID int64
}

// FreshdeskInterfaceMockGetGroupParamPtrs contains pointers to parameters of the FreshdeskInterface.GetGroup
type FreshdeskInterfaceMockGetGroupParamPtrs struct {
	groupID *int64
}

// FreshdeskInterfaceMockGetGroupResults contains results of the FreshdeskInterface.GetGroup
type FreshdeskInterfaceMockGetGroupResults struct {
	tp1 *TaskGetGroupResponse
	err error
}

// FreshdeskInterfaceMockGetGroupOrigins contains origins of expectations of the FreshdeskInterface.GetGroup
type FreshdeskInterfaceMockGetGroupExpectationOrigins struct {
	origin        string
	originGroupID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetGroup *mFreshdeskInterfaceMockGetGroup) Optional() *mFreshdeskInterfaceMockGetGroup {
	mmGetGroup.optional = true
	return mmGetGroup
}

// Expect sets up expected params for FreshdeskInterface.GetGroup
func (mmGetGroup *mFreshdeskInterfaceMockGetGroup) Expect(groupID int64) *mFreshdeskInterfaceMockGetGroup {
	if mmGetGroup.mock.funcGetGroup != nil {
		mmGetGroup.mock.t.Fatalf("FreshdeskInterfaceMock.GetGroup mock is already set by Set")
	}

	if mmGetGroup.defaultExpectation == nil {
		mmGetGroup.defaultExpectation = &FreshdeskInterfaceMockGetGroupExpectation{}
	}

	if mmGetGroup.defaultExpectation.paramPtrs != nil {
		mmGetGroup.mock.t.Fatalf("FreshdeskInterfaceMock.GetGroup mock is already set by ExpectParams functions")
	}

	mmGetGroup.defaultExpectation.params = &FreshdeskInterfaceMockGetGroupParams{groupID}
	mmGetGroup.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetGroup.expectations {
		if minimock.Equal(e.params, mmGetGroup.defaultExpectation.params) {
			mmGetGroup.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetGroup.defaultExpectation.params)
		}
	}

	return mmGetGroup
}

// ExpectGroupIDParam1 sets up expected param groupID for FreshdeskInterface.GetGroup
func (mmGetGroup *mFreshdeskInterfaceMockGetGroup) ExpectGroupIDParam1(groupID int64) *mFreshdeskInterfaceMockGetGroup {
	if mmGetGroup.mock.funcGetGroup != nil {
		mmGetGroup.mock.t.Fatalf("FreshdeskInterfaceMock.GetGroup mock is already set by Set")
	}

	if mmGetGroup.defaultExpectation == nil {
		mmGetGroup.defaultExpectation = &FreshdeskInterfaceMockGetGroupExpectation{}
	}

	if mmGetGroup.defaultExpectation.params != nil {
		mmGetGroup.mock.t.Fatalf("FreshdeskInterfaceMock.GetGroup mock is already set by Expect")
	}

	if mmGetGroup.defaultExpectation.paramPtrs == nil {
		mmGetGroup.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockGetGroupParamPtrs{}
	}
	mmGetGroup.defaultExpectation.paramPtrs.groupID = &groupID
	mmGetGroup.defaultExpectation.expectationOrigins.originGroupID = minimock.CallerInfo(1)

	return mmGetGroup
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.GetGroup
func (mmGetGroup *mFreshdeskInterfaceMockGetGroup) Inspect(f func(groupID int64)) *mFreshdeskInterfaceMockGetGroup {
	if mmGetGroup.mock.inspectFuncGetGroup != nil {
		mmGetGroup.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.GetGroup")
	}

	mmGetGroup.mock.inspectFuncGetGroup = f

	return mmGetGroup
}

// Return sets up results that will be returned by FreshdeskInterface.GetGroup
func (mmGetGroup *mFreshdeskInterfaceMockGetGroup) Return(tp1 *TaskGetGroupResponse, err error) *FreshdeskInterfaceMock {
	if mmGetGroup.mock.funcGetGroup != nil {
		mmGetGroup.mock.t.Fatalf("FreshdeskInterfaceMock.GetGroup mock is already set by Set")
	}

	if mmGetGroup.defaultExpectation == nil {
		mmGetGroup.defaultExpectation = &FreshdeskInterfaceMockGetGroupExpectation{mock: mmGetGroup.mock}
	}
	mmGetGroup.defaultExpectation.results = &FreshdeskInterfaceMockGetGroupResults{tp1, err}
	mmGetGroup.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetGroup.mock
}

// Set uses given function f to mock the FreshdeskInterface.GetGroup method
func (mmGetGroup *mFreshdeskInterfaceMockGetGroup) Set(f func(groupID int64) (tp1 *TaskGetGroupResponse, err error)) *FreshdeskInterfaceMock {
	if mmGetGroup.defaultExpectation != nil {
		mmGetGroup.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.GetGroup method")
	}

	if len(mmGetGroup.expectations) > 0 {
		mmGetGroup.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.GetGroup method")
	}

	mmGetGroup.mock.funcGetGroup = f
	mmGetGroup.mock.funcGetGroupOrigin = minimock.CallerInfo(1)
	return mmGetGroup.mock
}

// When sets expectation for the FreshdeskInterface.GetGroup which will trigger the result defined by the following
// Then helper
func (mmGetGroup *mFreshdeskInterfaceMockGetGroup) When(groupID int64) *FreshdeskInterfaceMockGetGroupExpectation {
	if mmGetGroup.mock.funcGetGroup != nil {
		mmGetGroup.mock.t.Fatalf("FreshdeskInterfaceMock.GetGroup mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockGetGroupExpectation{
		mock:               mmGetGroup.mock,
		params:             &FreshdeskInterfaceMockGetGroupParams{groupID},
		expectationOrigins: FreshdeskInterfaceMockGetGroupExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetGroup.expectations = append(mmGetGroup.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.GetGroup return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockGetGroupExpectation) Then(tp1 *TaskGetGroupResponse, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockGetGroupResults{tp1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.GetGroup should be invoked
func (mmGetGroup *mFreshdeskInterfaceMockGetGroup) Times(n uint64) *mFreshdeskInterfaceMockGetGroup {
	if n == 0 {
		mmGetGroup.mock.t.Fatalf("Times of FreshdeskInterfaceMock.GetGroup mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetGroup.expectedInvocations, n)
	mmGetGroup.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetGroup
}

func (mmGetGroup *mFreshdeskInterfaceMockGetGroup) invocationsDone() bool {
	if len(mmGetGroup.expectations) == 0 && mmGetGroup.defaultExpectation == nil && mmGetGroup.mock.funcGetGroup == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetGroup.mock.afterGetGroupCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetGroup.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetGroup implements FreshdeskInterface
func (mmGetGroup *FreshdeskInterfaceMock) GetGroup(groupID int64) (tp1 *TaskGetGroupResponse, err error) {
	mm_atomic.AddUint64(&mmGetGroup.beforeGetGroupCounter, 1)
	defer mm_atomic.AddUint64(&mmGetGroup.afterGetGroupCounter, 1)

	mmGetGroup.t.Helper()

	if mmGetGroup.inspectFuncGetGroup != nil {
		mmGetGroup.inspectFuncGetGroup(groupID)
	}

	mm_params := FreshdeskInterfaceMockGetGroupParams{groupID}

	// Record call args
	mmGetGroup.GetGroupMock.mutex.Lock()
	mmGetGroup.GetGroupMock.callArgs = append(mmGetGroup.GetGroupMock.callArgs, &mm_params)
	mmGetGroup.GetGroupMock.mutex.Unlock()

	for _, e := range mmGetGroup.GetGroupMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmGetGroup.GetGroupMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetGroup.GetGroupMock.defaultExpectation.Counter, 1)
		mm_want := mmGetGroup.GetGroupMock.defaultExpectation.params
		mm_want_ptrs := mmGetGroup.GetGroupMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockGetGroupParams{groupID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.groupID != nil && !minimock.Equal(*mm_want_ptrs.groupID, mm_got.groupID) {
				mmGetGroup.t.Errorf("FreshdeskInterfaceMock.GetGroup got unexpected parameter groupID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetGroup.GetGroupMock.defaultExpectation.expectationOrigins.originGroupID, *mm_want_ptrs.groupID, mm_got.groupID, minimock.Diff(*mm_want_ptrs.groupID, mm_got.groupID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetGroup.t.Errorf("FreshdeskInterfaceMock.GetGroup got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetGroup.GetGroupMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetGroup.GetGroupMock.defaultExpectation.results
		if mm_results == nil {
			mmGetGroup.t.Fatal("No results are set for the FreshdeskInterfaceMock.GetGroup")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmGetGroup.funcGetGroup != nil {
		return mmGetGroup.funcGetGroup(groupID)
	}
	mmGetGroup.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.GetGroup. %v", groupID)
	return
}

// GetGroupAfterCounter returns a count of finished FreshdeskInterfaceMock.GetGroup invocations
func (mmGetGroup *FreshdeskInterfaceMock) GetGroupAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetGroup.afterGetGroupCounter)
}

// GetGroupBeforeCounter returns a count of FreshdeskInterfaceMock.GetGroup invocations
func (mmGetGroup *FreshdeskInterfaceMock) GetGroupBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetGroup.beforeGetGroupCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.GetGroup.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetGroup *mFreshdeskInterfaceMockGetGroup) Calls() []*FreshdeskInterfaceMockGetGroupParams {
	mmGetGroup.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockGetGroupParams, len(mmGetGroup.callArgs))
	copy(argCopy, mmGetGroup.callArgs)

	mmGetGroup.mutex.RUnlock()

	return argCopy
}

// MinimockGetGroupDone returns true if the count of the GetGroup invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockGetGroupDone() bool {
	if m.GetGroupMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetGroupMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetGroupMock.invocationsDone()
}

// MinimockGetGroupInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockGetGroupInspect() {
	for _, e := range m.GetGroupMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetGroup at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetGroupCounter := mm_atomic.LoadUint64(&m.afterGetGroupCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetGroupMock.defaultExpectation != nil && afterGetGroupCounter < 1 {
		if m.GetGroupMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetGroup at\n%s", m.GetGroupMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetGroup at\n%s with params: %#v", m.GetGroupMock.defaultExpectation.expectationOrigins.origin, *m.GetGroupMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetGroup != nil && afterGetGroupCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetGroup at\n%s", m.funcGetGroupOrigin)
	}

	if !m.GetGroupMock.invocationsDone() && afterGetGroupCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.GetGroup at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetGroupMock.expectedInvocations), m.GetGroupMock.expectedInvocationsOrigin, afterGetGroupCounter)
	}
}

type mFreshdeskInterfaceMockGetProduct struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockGetProductExpectation
	expectations       []*FreshdeskInterfaceMockGetProductExpectation

	callArgs []*FreshdeskInterfaceMockGetProductParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockGetProductExpectation specifies expectation struct of the FreshdeskInterface.GetProduct
type FreshdeskInterfaceMockGetProductExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockGetProductParams
	paramPtrs          *FreshdeskInterfaceMockGetProductParamPtrs
	expectationOrigins FreshdeskInterfaceMockGetProductExpectationOrigins
	results            *FreshdeskInterfaceMockGetProductResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockGetProductParams contains parameters of the FreshdeskInterface.GetProduct
type FreshdeskInterfaceMockGetProductParams struct {
	productID int64
}

// FreshdeskInterfaceMockGetProductParamPtrs contains pointers to parameters of the FreshdeskInterface.GetProduct
type FreshdeskInterfaceMockGetProductParamPtrs struct {
	productID *int64
}

// FreshdeskInterfaceMockGetProductResults contains results of the FreshdeskInterface.GetProduct
type FreshdeskInterfaceMockGetProductResults struct {
	tp1 *TaskGetProductResponse
	err error
}

// FreshdeskInterfaceMockGetProductOrigins contains origins of expectations of the FreshdeskInterface.GetProduct
type FreshdeskInterfaceMockGetProductExpectationOrigins struct {
	origin          string
	originProductID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetProduct *mFreshdeskInterfaceMockGetProduct) Optional() *mFreshdeskInterfaceMockGetProduct {
	mmGetProduct.optional = true
	return mmGetProduct
}

// Expect sets up expected params for FreshdeskInterface.GetProduct
func (mmGetProduct *mFreshdeskInterfaceMockGetProduct) Expect(productID int64) *mFreshdeskInterfaceMockGetProduct {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("FreshdeskInterfaceMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &FreshdeskInterfaceMockGetProductExpectation{}
	}

	if mmGetProduct.defaultExpectation.paramPtrs != nil {
		mmGetProduct.mock.t.Fatalf("FreshdeskInterfaceMock.GetProduct mock is already set by ExpectParams functions")
	}

	mmGetProduct.defaultExpectation.params = &FreshdeskInterfaceMockGetProductParams{productID}
	mmGetProduct.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetProduct.expectations {
		if minimock.Equal(e.params, mmGetProduct.defaultExpectation.params) {
			mmGetProduct.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProduct.defaultExpectation.params)
		}
	}

	return mmGetProduct
}

// ExpectProductIDParam1 sets up expected param productID for FreshdeskInterface.GetProduct
func (mmGetProduct *mFreshdeskInterfaceMockGetProduct) ExpectProductIDParam1(productID int64) *mFreshdeskInterfaceMockGetProduct {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("FreshdeskInterfaceMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &FreshdeskInterfaceMockGetProductExpectation{}
	}

	if mmGetProduct.defaultExpectation.params != nil {
		mmGetProduct.mock.t.Fatalf("FreshdeskInterfaceMock.GetProduct mock is already set by Expect")
	}

	if mmGetProduct.defaultExpectation.paramPtrs == nil {
		mmGetProduct.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockGetProductParamPtrs{}
	}
	mmGetProduct.defaultExpectation.paramPtrs.productID = &productID
	mmGetProduct.defaultExpectation.expectationOrigins.originProductID = minimock.CallerInfo(1)

	return mmGetProduct
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.GetProduct
func (mmGetProduct *mFreshdeskInterfaceMockGetProduct) Inspect(f func(productID int64)) *mFreshdeskInterfaceMockGetProduct {
	if mmGetProduct.mock.inspectFuncGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.GetProduct")
	}

	mmGetProduct.mock.inspectFuncGetProduct = f

	return mmGetProduct
}

// Return sets up results that will be returned by FreshdeskInterface.GetProduct
func (mmGetProduct *mFreshdeskInterfaceMockGetProduct) Return(tp1 *TaskGetProductResponse, err error) *FreshdeskInterfaceMock {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("FreshdeskInterfaceMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &FreshdeskInterfaceMockGetProductExpectation{mock: mmGetProduct.mock}
	}
	mmGetProduct.defaultExpectation.results = &FreshdeskInterfaceMockGetProductResults{tp1, err}
	mmGetProduct.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetProduct.mock
}

// Set uses given function f to mock the FreshdeskInterface.GetProduct method
func (mmGetProduct *mFreshdeskInterfaceMockGetProduct) Set(f func(productID int64) (tp1 *TaskGetProductResponse, err error)) *FreshdeskInterfaceMock {
	if mmGetProduct.defaultExpectation != nil {
		mmGetProduct.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.GetProduct method")
	}

	if len(mmGetProduct.expectations) > 0 {
		mmGetProduct.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.GetProduct method")
	}

	mmGetProduct.mock.funcGetProduct = f
	mmGetProduct.mock.funcGetProductOrigin = minimock.CallerInfo(1)
	return mmGetProduct.mock
}

// When sets expectation for the FreshdeskInterface.GetProduct which will trigger the result defined by the following
// Then helper
func (mmGetProduct *mFreshdeskInterfaceMockGetProduct) When(productID int64) *FreshdeskInterfaceMockGetProductExpectation {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("FreshdeskInterfaceMock.GetProduct mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockGetProductExpectation{
		mock:               mmGetProduct.mock,
		params:             &FreshdeskInterfaceMockGetProductParams{productID},
		expectationOrigins: FreshdeskInterfaceMockGetProductExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetProduct.expectations = append(mmGetProduct.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.GetProduct return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockGetProductExpectation) Then(tp1 *TaskGetProductResponse, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockGetProductResults{tp1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.GetProduct should be invoked
func (mmGetProduct *mFreshdeskInterfaceMockGetProduct) Times(n uint64) *mFreshdeskInterfaceMockGetProduct {
	if n == 0 {
		mmGetProduct.mock.t.Fatalf("Times of FreshdeskInterfaceMock.GetProduct mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetProduct.expectedInvocations, n)
	mmGetProduct.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetProduct
}

func (mmGetProduct *mFreshdeskInterfaceMockGetProduct) invocationsDone() bool {
	if len(mmGetProduct.expectations) == 0 && mmGetProduct.defaultExpectation == nil && mmGetProduct.mock.funcGetProduct == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetProduct.mock.afterGetProductCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetProduct.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetProduct implements FreshdeskInterface
func (mmGetProduct *FreshdeskInterfaceMock) GetProduct(productID int64) (tp1 *TaskGetProductResponse, err error) {
	mm_atomic.AddUint64(&mmGetProduct.beforeGetProductCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProduct.afterGetProductCounter, 1)

	mmGetProduct.t.Helper()

	if mmGetProduct.inspectFuncGetProduct != nil {
		mmGetProduct.inspectFuncGetProduct(productID)
	}

	mm_params := FreshdeskInterfaceMockGetProductParams{productID}

	// Record call args
	mmGetProduct.GetProductMock.mutex.Lock()
	mmGetProduct.GetProductMock.callArgs = append(mmGetProduct.GetProductMock.callArgs, &mm_params)
	mmGetProduct.GetProductMock.mutex.Unlock()

	for _, e := range mmGetProduct.GetProductMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmGetProduct.GetProductMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProduct.GetProductMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProduct.GetProductMock.defaultExpectation.params
		mm_want_ptrs := mmGetProduct.GetProductMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockGetProductParams{productID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.productID != nil && !minimock.Equal(*mm_want_ptrs.productID, mm_got.productID) {
				mmGetProduct.t.Errorf("FreshdeskInterfaceMock.GetProduct got unexpected parameter productID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetProduct.GetProductMock.defaultExpectation.expectationOrigins.originProductID, *mm_want_ptrs.productID, mm_got.productID, minimock.Diff(*mm_want_ptrs.productID, mm_got.productID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProduct.t.Errorf("FreshdeskInterfaceMock.GetProduct got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetProduct.GetProductMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProduct.GetProductMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProduct.t.Fatal("No results are set for the FreshdeskInterfaceMock.GetProduct")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmGetProduct.funcGetProduct != nil {
		return mmGetProduct.funcGetProduct(productID)
	}
	mmGetProduct.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.GetProduct. %v", productID)
	return
}

// GetProductAfterCounter returns a count of finished FreshdeskInterfaceMock.GetProduct invocations
func (mmGetProduct *FreshdeskInterfaceMock) GetProductAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.afterGetProductCounter)
}

// GetProductBeforeCounter returns a count of FreshdeskInterfaceMock.GetProduct invocations
func (mmGetProduct *FreshdeskInterfaceMock) GetProductBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.beforeGetProductCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.GetProduct.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProduct *mFreshdeskInterfaceMockGetProduct) Calls() []*FreshdeskInterfaceMockGetProductParams {
	mmGetProduct.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockGetProductParams, len(mmGetProduct.callArgs))
	copy(argCopy, mmGetProduct.callArgs)

	mmGetProduct.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductDone returns true if the count of the GetProduct invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockGetProductDone() bool {
	if m.GetProductMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetProductMock.invocationsDone()
}

// MinimockGetProductInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockGetProductInspect() {
	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetProduct at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetProductCounter := mm_atomic.LoadUint64(&m.afterGetProductCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductMock.defaultExpectation != nil && afterGetProductCounter < 1 {
		if m.GetProductMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetProduct at\n%s", m.GetProductMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetProduct at\n%s with params: %#v", m.GetProductMock.defaultExpectation.expectationOrigins.origin, *m.GetProductMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProduct != nil && afterGetProductCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetProduct at\n%s", m.funcGetProductOrigin)
	}

	if !m.GetProductMock.invocationsDone() && afterGetProductCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.GetProduct at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetProductMock.expectedInvocations), m.GetProductMock.expectedInvocationsOrigin, afterGetProductCounter)
	}
}

type mFreshdeskInterfaceMockGetRole struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockGetRoleExpectation
	expectations       []*FreshdeskInterfaceMockGetRoleExpectation

	callArgs []*FreshdeskInterfaceMockGetRoleParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockGetRoleExpectation specifies expectation struct of the FreshdeskInterface.GetRole
type FreshdeskInterfaceMockGetRoleExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockGetRoleParams
	paramPtrs          *FreshdeskInterfaceMockGetRoleParamPtrs
	expectationOrigins FreshdeskInterfaceMockGetRoleExpectationOrigins
	results            *FreshdeskInterfaceMockGetRoleResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockGetRoleParams contains parameters of the FreshdeskInterface.GetRole
type FreshdeskInterfaceMockGetRoleParams struct {
	roleID int64
}

// FreshdeskInterfaceMockGetRoleParamPtrs contains pointers to parameters of the FreshdeskInterface.GetRole
type FreshdeskInterfaceMockGetRoleParamPtrs struct {
	roleID *int64
}

// FreshdeskInterfaceMockGetRoleResults contains results of the FreshdeskInterface.GetRole
type FreshdeskInterfaceMockGetRoleResults struct {
	tp1 *TaskGetRoleResponse
	err error
}

// FreshdeskInterfaceMockGetRoleOrigins contains origins of expectations of the FreshdeskInterface.GetRole
type FreshdeskInterfaceMockGetRoleExpectationOrigins struct {
	origin       string
	originRoleID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetRole *mFreshdeskInterfaceMockGetRole) Optional() *mFreshdeskInterfaceMockGetRole {
	mmGetRole.optional = true
	return mmGetRole
}

// Expect sets up expected params for FreshdeskInterface.GetRole
func (mmGetRole *mFreshdeskInterfaceMockGetRole) Expect(roleID int64) *mFreshdeskInterfaceMockGetRole {
	if mmGetRole.mock.funcGetRole != nil {
		mmGetRole.mock.t.Fatalf("FreshdeskInterfaceMock.GetRole mock is already set by Set")
	}

	if mmGetRole.defaultExpectation == nil {
		mmGetRole.defaultExpectation = &FreshdeskInterfaceMockGetRoleExpectation{}
	}

	if mmGetRole.defaultExpectation.paramPtrs != nil {
		mmGetRole.mock.t.Fatalf("FreshdeskInterfaceMock.GetRole mock is already set by ExpectParams functions")
	}

	mmGetRole.defaultExpectation.params = &FreshdeskInterfaceMockGetRoleParams{roleID}
	mmGetRole.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetRole.expectations {
		if minimock.Equal(e.params, mmGetRole.defaultExpectation.params) {
			mmGetRole.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetRole.defaultExpectation.params)
		}
	}

	return mmGetRole
}

// ExpectRoleIDParam1 sets up expected param roleID for FreshdeskInterface.GetRole
func (mmGetRole *mFreshdeskInterfaceMockGetRole) ExpectRoleIDParam1(roleID int64) *mFreshdeskInterfaceMockGetRole {
	if mmGetRole.mock.funcGetRole != nil {
		mmGetRole.mock.t.Fatalf("FreshdeskInterfaceMock.GetRole mock is already set by Set")
	}

	if mmGetRole.defaultExpectation == nil {
		mmGetRole.defaultExpectation = &FreshdeskInterfaceMockGetRoleExpectation{}
	}

	if mmGetRole.defaultExpectation.params != nil {
		mmGetRole.mock.t.Fatalf("FreshdeskInterfaceMock.GetRole mock is already set by Expect")
	}

	if mmGetRole.defaultExpectation.paramPtrs == nil {
		mmGetRole.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockGetRoleParamPtrs{}
	}
	mmGetRole.defaultExpectation.paramPtrs.roleID = &roleID
	mmGetRole.defaultExpectation.expectationOrigins.originRoleID = minimock.CallerInfo(1)

	return mmGetRole
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.GetRole
func (mmGetRole *mFreshdeskInterfaceMockGetRole) Inspect(f func(roleID int64)) *mFreshdeskInterfaceMockGetRole {
	if mmGetRole.mock.inspectFuncGetRole != nil {
		mmGetRole.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.GetRole")
	}

	mmGetRole.mock.inspectFuncGetRole = f

	return mmGetRole
}

// Return sets up results that will be returned by FreshdeskInterface.GetRole
func (mmGetRole *mFreshdeskInterfaceMockGetRole) Return(tp1 *TaskGetRoleResponse, err error) *FreshdeskInterfaceMock {
	if mmGetRole.mock.funcGetRole != nil {
		mmGetRole.mock.t.Fatalf("FreshdeskInterfaceMock.GetRole mock is already set by Set")
	}

	if mmGetRole.defaultExpectation == nil {
		mmGetRole.defaultExpectation = &FreshdeskInterfaceMockGetRoleExpectation{mock: mmGetRole.mock}
	}
	mmGetRole.defaultExpectation.results = &FreshdeskInterfaceMockGetRoleResults{tp1, err}
	mmGetRole.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetRole.mock
}

// Set uses given function f to mock the FreshdeskInterface.GetRole method
func (mmGetRole *mFreshdeskInterfaceMockGetRole) Set(f func(roleID int64) (tp1 *TaskGetRoleResponse, err error)) *FreshdeskInterfaceMock {
	if mmGetRole.defaultExpectation != nil {
		mmGetRole.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.GetRole method")
	}

	if len(mmGetRole.expectations) > 0 {
		mmGetRole.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.GetRole method")
	}

	mmGetRole.mock.funcGetRole = f
	mmGetRole.mock.funcGetRoleOrigin = minimock.CallerInfo(1)
	return mmGetRole.mock
}

// When sets expectation for the FreshdeskInterface.GetRole which will trigger the result defined by the following
// Then helper
func (mmGetRole *mFreshdeskInterfaceMockGetRole) When(roleID int64) *FreshdeskInterfaceMockGetRoleExpectation {
	if mmGetRole.mock.funcGetRole != nil {
		mmGetRole.mock.t.Fatalf("FreshdeskInterfaceMock.GetRole mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockGetRoleExpectation{
		mock:               mmGetRole.mock,
		params:             &FreshdeskInterfaceMockGetRoleParams{roleID},
		expectationOrigins: FreshdeskInterfaceMockGetRoleExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetRole.expectations = append(mmGetRole.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.GetRole return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockGetRoleExpectation) Then(tp1 *TaskGetRoleResponse, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockGetRoleResults{tp1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.GetRole should be invoked
func (mmGetRole *mFreshdeskInterfaceMockGetRole) Times(n uint64) *mFreshdeskInterfaceMockGetRole {
	if n == 0 {
		mmGetRole.mock.t.Fatalf("Times of FreshdeskInterfaceMock.GetRole mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetRole.expectedInvocations, n)
	mmGetRole.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetRole
}

func (mmGetRole *mFreshdeskInterfaceMockGetRole) invocationsDone() bool {
	if len(mmGetRole.expectations) == 0 && mmGetRole.defaultExpectation == nil && mmGetRole.mock.funcGetRole == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetRole.mock.afterGetRoleCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetRole.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetRole implements FreshdeskInterface
func (mmGetRole *FreshdeskInterfaceMock) GetRole(roleID int64) (tp1 *TaskGetRoleResponse, err error) {
	mm_atomic.AddUint64(&mmGetRole.beforeGetRoleCounter, 1)
	defer mm_atomic.AddUint64(&mmGetRole.afterGetRoleCounter, 1)

	mmGetRole.t.Helper()

	if mmGetRole.inspectFuncGetRole != nil {
		mmGetRole.inspectFuncGetRole(roleID)
	}

	mm_params := FreshdeskInterfaceMockGetRoleParams{roleID}

	// Record call args
	mmGetRole.GetRoleMock.mutex.Lock()
	mmGetRole.GetRoleMock.callArgs = append(mmGetRole.GetRoleMock.callArgs, &mm_params)
	mmGetRole.GetRoleMock.mutex.Unlock()

	for _, e := range mmGetRole.GetRoleMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmGetRole.GetRoleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetRole.GetRoleMock.defaultExpectation.Counter, 1)
		mm_want := mmGetRole.GetRoleMock.defaultExpectation.params
		mm_want_ptrs := mmGetRole.GetRoleMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockGetRoleParams{roleID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.roleID != nil && !minimock.Equal(*mm_want_ptrs.roleID, mm_got.roleID) {
				mmGetRole.t.Errorf("FreshdeskInterfaceMock.GetRole got unexpected parameter roleID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetRole.GetRoleMock.defaultExpectation.expectationOrigins.originRoleID, *mm_want_ptrs.roleID, mm_got.roleID, minimock.Diff(*mm_want_ptrs.roleID, mm_got.roleID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetRole.t.Errorf("FreshdeskInterfaceMock.GetRole got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetRole.GetRoleMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetRole.GetRoleMock.defaultExpectation.results
		if mm_results == nil {
			mmGetRole.t.Fatal("No results are set for the FreshdeskInterfaceMock.GetRole")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmGetRole.funcGetRole != nil {
		return mmGetRole.funcGetRole(roleID)
	}
	mmGetRole.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.GetRole. %v", roleID)
	return
}

// GetRoleAfterCounter returns a count of finished FreshdeskInterfaceMock.GetRole invocations
func (mmGetRole *FreshdeskInterfaceMock) GetRoleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRole.afterGetRoleCounter)
}

// GetRoleBeforeCounter returns a count of FreshdeskInterfaceMock.GetRole invocations
func (mmGetRole *FreshdeskInterfaceMock) GetRoleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRole.beforeGetRoleCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.GetRole.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetRole *mFreshdeskInterfaceMockGetRole) Calls() []*FreshdeskInterfaceMockGetRoleParams {
	mmGetRole.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockGetRoleParams, len(mmGetRole.callArgs))
	copy(argCopy, mmGetRole.callArgs)

	mmGetRole.mutex.RUnlock()

	return argCopy
}

// MinimockGetRoleDone returns true if the count of the GetRole invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockGetRoleDone() bool {
	if m.GetRoleMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetRoleMock.invocationsDone()
}

// MinimockGetRoleInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockGetRoleInspect() {
	for _, e := range m.GetRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetRole at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetRoleCounter := mm_atomic.LoadUint64(&m.afterGetRoleCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetRoleMock.defaultExpectation != nil && afterGetRoleCounter < 1 {
		if m.GetRoleMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetRole at\n%s", m.GetRoleMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetRole at\n%s with params: %#v", m.GetRoleMock.defaultExpectation.expectationOrigins.origin, *m.GetRoleMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRole != nil && afterGetRoleCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetRole at\n%s", m.funcGetRoleOrigin)
	}

	if !m.GetRoleMock.invocationsDone() && afterGetRoleCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.GetRole at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetRoleMock.expectedInvocations), m.GetRoleMock.expectedInvocationsOrigin, afterGetRoleCounter)
	}
}

type mFreshdeskInterfaceMockGetSkill struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockGetSkillExpectation
	expectations       []*FreshdeskInterfaceMockGetSkillExpectation

	callArgs []*FreshdeskInterfaceMockGetSkillParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockGetSkillExpectation specifies expectation struct of the FreshdeskInterface.GetSkill
type FreshdeskInterfaceMockGetSkillExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockGetSkillParams
	paramPtrs          *FreshdeskInterfaceMockGetSkillParamPtrs
	expectationOrigins FreshdeskInterfaceMockGetSkillExpectationOrigins
	results            *FreshdeskInterfaceMockGetSkillResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockGetSkillParams contains parameters of the FreshdeskInterface.GetSkill
type FreshdeskInterfaceMockGetSkillParams struct {
	skillID int64
}

// FreshdeskInterfaceMockGetSkillParamPtrs contains pointers to parameters of the FreshdeskInterface.GetSkill
type FreshdeskInterfaceMockGetSkillParamPtrs struct {
	skillID *int64
}

// FreshdeskInterfaceMockGetSkillResults contains results of the FreshdeskInterface.GetSkill
type FreshdeskInterfaceMockGetSkillResults struct {
	tp1 *TaskGetSkillResponse
	err error
}

// FreshdeskInterfaceMockGetSkillOrigins contains origins of expectations of the FreshdeskInterface.GetSkill
type FreshdeskInterfaceMockGetSkillExpectationOrigins struct {
	origin        string
	originSkillID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetSkill *mFreshdeskInterfaceMockGetSkill) Optional() *mFreshdeskInterfaceMockGetSkill {
	mmGetSkill.optional = true
	return mmGetSkill
}

// Expect sets up expected params for FreshdeskInterface.GetSkill
func (mmGetSkill *mFreshdeskInterfaceMockGetSkill) Expect(skillID int64) *mFreshdeskInterfaceMockGetSkill {
	if mmGetSkill.mock.funcGetSkill != nil {
		mmGetSkill.mock.t.Fatalf("FreshdeskInterfaceMock.GetSkill mock is already set by Set")
	}

	if mmGetSkill.defaultExpectation == nil {
		mmGetSkill.defaultExpectation = &FreshdeskInterfaceMockGetSkillExpectation{}
	}

	if mmGetSkill.defaultExpectation.paramPtrs != nil {
		mmGetSkill.mock.t.Fatalf("FreshdeskInterfaceMock.GetSkill mock is already set by ExpectParams functions")
	}

	mmGetSkill.defaultExpectation.params = &FreshdeskInterfaceMockGetSkillParams{skillID}
	mmGetSkill.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetSkill.expectations {
		if minimock.Equal(e.params, mmGetSkill.defaultExpectation.params) {
			mmGetSkill.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetSkill.defaultExpectation.params)
		}
	}

	return mmGetSkill
}

// ExpectSkillIDParam1 sets up expected param skillID for FreshdeskInterface.GetSkill
func (mmGetSkill *mFreshdeskInterfaceMockGetSkill) ExpectSkillIDParam1(skillID int64) *mFreshdeskInterfaceMockGetSkill {
	if mmGetSkill.mock.funcGetSkill != nil {
		mmGetSkill.mock.t.Fatalf("FreshdeskInterfaceMock.GetSkill mock is already set by Set")
	}

	if mmGetSkill.defaultExpectation == nil {
		mmGetSkill.defaultExpectation = &FreshdeskInterfaceMockGetSkillExpectation{}
	}

	if mmGetSkill.defaultExpectation.params != nil {
		mmGetSkill.mock.t.Fatalf("FreshdeskInterfaceMock.GetSkill mock is already set by Expect")
	}

	if mmGetSkill.defaultExpectation.paramPtrs == nil {
		mmGetSkill.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockGetSkillParamPtrs{}
	}
	mmGetSkill.defaultExpectation.paramPtrs.skillID = &skillID
	mmGetSkill.defaultExpectation.expectationOrigins.originSkillID = minimock.CallerInfo(1)

	return mmGetSkill
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.GetSkill
func (mmGetSkill *mFreshdeskInterfaceMockGetSkill) Inspect(f func(skillID int64)) *mFreshdeskInterfaceMockGetSkill {
	if mmGetSkill.mock.inspectFuncGetSkill != nil {
		mmGetSkill.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.GetSkill")
	}

	mmGetSkill.mock.inspectFuncGetSkill = f

	return mmGetSkill
}

// Return sets up results that will be returned by FreshdeskInterface.GetSkill
func (mmGetSkill *mFreshdeskInterfaceMockGetSkill) Return(tp1 *TaskGetSkillResponse, err error) *FreshdeskInterfaceMock {
	if mmGetSkill.mock.funcGetSkill != nil {
		mmGetSkill.mock.t.Fatalf("FreshdeskInterfaceMock.GetSkill mock is already set by Set")
	}

	if mmGetSkill.defaultExpectation == nil {
		mmGetSkill.defaultExpectation = &FreshdeskInterfaceMockGetSkillExpectation{mock: mmGetSkill.mock}
	}
	mmGetSkill.defaultExpectation.results = &FreshdeskInterfaceMockGetSkillResults{tp1, err}
	mmGetSkill.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetSkill.mock
}

// Set uses given function f to mock the FreshdeskInterface.GetSkill method
func (mmGetSkill *mFreshdeskInterfaceMockGetSkill) Set(f func(skillID int64) (tp1 *TaskGetSkillResponse, err error)) *FreshdeskInterfaceMock {
	if mmGetSkill.defaultExpectation != nil {
		mmGetSkill.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.GetSkill method")
	}

	if len(mmGetSkill.expectations) > 0 {
		mmGetSkill.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.GetSkill method")
	}

	mmGetSkill.mock.funcGetSkill = f
	mmGetSkill.mock.funcGetSkillOrigin = minimock.CallerInfo(1)
	return mmGetSkill.mock
}

// When sets expectation for the FreshdeskInterface.GetSkill which will trigger the result defined by the following
// Then helper
func (mmGetSkill *mFreshdeskInterfaceMockGetSkill) When(skillID int64) *FreshdeskInterfaceMockGetSkillExpectation {
	if mmGetSkill.mock.funcGetSkill != nil {
		mmGetSkill.mock.t.Fatalf("FreshdeskInterfaceMock.GetSkill mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockGetSkillExpectation{
		mock:               mmGetSkill.mock,
		params:             &FreshdeskInterfaceMockGetSkillParams{skillID},
		expectationOrigins: FreshdeskInterfaceMockGetSkillExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetSkill.expectations = append(mmGetSkill.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.GetSkill return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockGetSkillExpectation) Then(tp1 *TaskGetSkillResponse, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockGetSkillResults{tp1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.GetSkill should be invoked
func (mmGetSkill *mFreshdeskInterfaceMockGetSkill) Times(n uint64) *mFreshdeskInterfaceMockGetSkill {
	if n == 0 {
		mmGetSkill.mock.t.Fatalf("Times of FreshdeskInterfaceMock.GetSkill mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetSkill.expectedInvocations, n)
	mmGetSkill.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetSkill
}

func (mmGetSkill *mFreshdeskInterfaceMockGetSkill) invocationsDone() bool {
	if len(mmGetSkill.expectations) == 0 && mmGetSkill.defaultExpectation == nil && mmGetSkill.mock.funcGetSkill == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetSkill.mock.afterGetSkillCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetSkill.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetSkill implements FreshdeskInterface
func (mmGetSkill *FreshdeskInterfaceMock) GetSkill(skillID int64) (tp1 *TaskGetSkillResponse, err error) {
	mm_atomic.AddUint64(&mmGetSkill.beforeGetSkillCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSkill.afterGetSkillCounter, 1)

	mmGetSkill.t.Helper()

	if mmGetSkill.inspectFuncGetSkill != nil {
		mmGetSkill.inspectFuncGetSkill(skillID)
	}

	mm_params := FreshdeskInterfaceMockGetSkillParams{skillID}

	// Record call args
	mmGetSkill.GetSkillMock.mutex.Lock()
	mmGetSkill.GetSkillMock.callArgs = append(mmGetSkill.GetSkillMock.callArgs, &mm_params)
	mmGetSkill.GetSkillMock.mutex.Unlock()

	for _, e := range mmGetSkill.GetSkillMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmGetSkill.GetSkillMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSkill.GetSkillMock.defaultExpectation.Counter, 1)
		mm_want := mmGetSkill.GetSkillMock.defaultExpectation.params
		mm_want_ptrs := mmGetSkill.GetSkillMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockGetSkillParams{skillID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.skillID != nil && !minimock.Equal(*mm_want_ptrs.skillID, mm_got.skillID) {
				mmGetSkill.t.Errorf("FreshdeskInterfaceMock.GetSkill got unexpected parameter skillID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetSkill.GetSkillMock.defaultExpectation.expectationOrigins.originSkillID, *mm_want_ptrs.skillID, mm_got.skillID, minimock.Diff(*mm_want_ptrs.skillID, mm_got.skillID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetSkill.t.Errorf("FreshdeskInterfaceMock.GetSkill got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetSkill.GetSkillMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetSkill.GetSkillMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSkill.t.Fatal("No results are set for the FreshdeskInterfaceMock.GetSkill")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmGetSkill.funcGetSkill != nil {
		return mmGetSkill.funcGetSkill(skillID)
	}
	mmGetSkill.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.GetSkill. %v", skillID)
	return
}

// GetSkillAfterCounter returns a count of finished FreshdeskInterfaceMock.GetSkill invocations
func (mmGetSkill *FreshdeskInterfaceMock) GetSkillAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSkill.afterGetSkillCounter)
}

// GetSkillBeforeCounter returns a count of FreshdeskInterfaceMock.GetSkill invocations
func (mmGetSkill *FreshdeskInterfaceMock) GetSkillBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSkill.beforeGetSkillCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.GetSkill.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetSkill *mFreshdeskInterfaceMockGetSkill) Calls() []*FreshdeskInterfaceMockGetSkillParams {
	mmGetSkill.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockGetSkillParams, len(mmGetSkill.callArgs))
	copy(argCopy, mmGetSkill.callArgs)

	mmGetSkill.mutex.RUnlock()

	return argCopy
}

// MinimockGetSkillDone returns true if the count of the GetSkill invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockGetSkillDone() bool {
	if m.GetSkillMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetSkillMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetSkillMock.invocationsDone()
}

// MinimockGetSkillInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockGetSkillInspect() {
	for _, e := range m.GetSkillMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetSkill at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetSkillCounter := mm_atomic.LoadUint64(&m.afterGetSkillCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetSkillMock.defaultExpectation != nil && afterGetSkillCounter < 1 {
		if m.GetSkillMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetSkill at\n%s", m.GetSkillMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetSkill at\n%s with params: %#v", m.GetSkillMock.defaultExpectation.expectationOrigins.origin, *m.GetSkillMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSkill != nil && afterGetSkillCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetSkill at\n%s", m.funcGetSkillOrigin)
	}

	if !m.GetSkillMock.invocationsDone() && afterGetSkillCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.GetSkill at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetSkillMock.expectedInvocations), m.GetSkillMock.expectedInvocationsOrigin, afterGetSkillCounter)
	}
}

type mFreshdeskInterfaceMockGetTicket struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockGetTicketExpectation
	expectations       []*FreshdeskInterfaceMockGetTicketExpectation

	callArgs []*FreshdeskInterfaceMockGetTicketParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockGetTicketExpectation specifies expectation struct of the FreshdeskInterface.GetTicket
type FreshdeskInterfaceMockGetTicketExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockGetTicketParams
	paramPtrs          *FreshdeskInterfaceMockGetTicketParamPtrs
	expectationOrigins FreshdeskInterfaceMockGetTicketExpectationOrigins
	results            *FreshdeskInterfaceMockGetTicketResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockGetTicketParams contains parameters of the FreshdeskInterface.GetTicket
type FreshdeskInterfaceMockGetTicketParams struct {
	ticketID int64
}

// FreshdeskInterfaceMockGetTicketParamPtrs contains pointers to parameters of the FreshdeskInterface.GetTicket
type FreshdeskInterfaceMockGetTicketParamPtrs struct {
	ticketID *int64
}

// FreshdeskInterfaceMockGetTicketResults contains results of the FreshdeskInterface.GetTicket
type FreshdeskInterfaceMockGetTicketResults struct {
	tp1 *TaskGetTicketResponse
	err error
}

// FreshdeskInterfaceMockGetTicketOrigins contains origins of expectations of the FreshdeskInterface.GetTicket
type FreshdeskInterfaceMockGetTicketExpectationOrigins struct {
	origin         string
	originTicketID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetTicket *mFreshdeskInterfaceMockGetTicket) Optional() *mFreshdeskInterfaceMockGetTicket {
	mmGetTicket.optional = true
	return mmGetTicket
}

// Expect sets up expected params for FreshdeskInterface.GetTicket
func (mmGetTicket *mFreshdeskInterfaceMockGetTicket) Expect(ticketID int64) *mFreshdeskInterfaceMockGetTicket {
	if mmGetTicket.mock.funcGetTicket != nil {
		mmGetTicket.mock.t.Fatalf("FreshdeskInterfaceMock.GetTicket mock is already set by Set")
	}

	if mmGetTicket.defaultExpectation == nil {
		mmGetTicket.defaultExpectation = &FreshdeskInterfaceMockGetTicketExpectation{}
	}

	if mmGetTicket.defaultExpectation.paramPtrs != nil {
		mmGetTicket.mock.t.Fatalf("FreshdeskInterfaceMock.GetTicket mock is already set by ExpectParams functions")
	}

	mmGetTicket.defaultExpectation.params = &FreshdeskInterfaceMockGetTicketParams{ticketID}
	mmGetTicket.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetTicket.expectations {
		if minimock.Equal(e.params, mmGetTicket.defaultExpectation.params) {
			mmGetTicket.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetTicket.defaultExpectation.params)
		}
	}

	return mmGetTicket
}

// ExpectTicketIDParam1 sets up expected param ticketID for FreshdeskInterface.GetTicket
func (mmGetTicket *mFreshdeskInterfaceMockGetTicket) ExpectTicketIDParam1(ticketID int64) *mFreshdeskInterfaceMockGetTicket {
	if mmGetTicket.mock.funcGetTicket != nil {
		mmGetTicket.mock.t.Fatalf("FreshdeskInterfaceMock.GetTicket mock is already set by Set")
	}

	if mmGetTicket.defaultExpectation == nil {
		mmGetTicket.defaultExpectation = &FreshdeskInterfaceMockGetTicketExpectation{}
	}

	if mmGetTicket.defaultExpectation.params != nil {
		mmGetTicket.mock.t.Fatalf("FreshdeskInterfaceMock.GetTicket mock is already set by Expect")
	}

	if mmGetTicket.defaultExpectation.paramPtrs == nil {
		mmGetTicket.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockGetTicketParamPtrs{}
	}
	mmGetTicket.defaultExpectation.paramPtrs.ticketID = &ticketID
	mmGetTicket.defaultExpectation.expectationOrigins.originTicketID = minimock.CallerInfo(1)

	return mmGetTicket
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.GetTicket
func (mmGetTicket *mFreshdeskInterfaceMockGetTicket) Inspect(f func(ticketID int64)) *mFreshdeskInterfaceMockGetTicket {
	if mmGetTicket.mock.inspectFuncGetTicket != nil {
		mmGetTicket.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.GetTicket")
	}

	mmGetTicket.mock.inspectFuncGetTicket = f

	return mmGetTicket
}

// Return sets up results that will be returned by FreshdeskInterface.GetTicket
func (mmGetTicket *mFreshdeskInterfaceMockGetTicket) Return(tp1 *TaskGetTicketResponse, err error) *FreshdeskInterfaceMock {
	if mmGetTicket.mock.funcGetTicket != nil {
		mmGetTicket.mock.t.Fatalf("FreshdeskInterfaceMock.GetTicket mock is already set by Set")
	}

	if mmGetTicket.defaultExpectation == nil {
		mmGetTicket.defaultExpectation = &FreshdeskInterfaceMockGetTicketExpectation{mock: mmGetTicket.mock}
	}
	mmGetTicket.defaultExpectation.results = &FreshdeskInterfaceMockGetTicketResults{tp1, err}
	mmGetTicket.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetTicket.mock
}

// Set uses given function f to mock the FreshdeskInterface.GetTicket method
func (mmGetTicket *mFreshdeskInterfaceMockGetTicket) Set(f func(ticketID int64) (tp1 *TaskGetTicketResponse, err error)) *FreshdeskInterfaceMock {
	if mmGetTicket.defaultExpectation != nil {
		mmGetTicket.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.GetTicket method")
	}

	if len(mmGetTicket.expectations) > 0 {
		mmGetTicket.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.GetTicket method")
	}

	mmGetTicket.mock.funcGetTicket = f
	mmGetTicket.mock.funcGetTicketOrigin = minimock.CallerInfo(1)
	return mmGetTicket.mock
}

// When sets expectation for the FreshdeskInterface.GetTicket which will trigger the result defined by the following
// Then helper
func (mmGetTicket *mFreshdeskInterfaceMockGetTicket) When(ticketID int64) *FreshdeskInterfaceMockGetTicketExpectation {
	if mmGetTicket.mock.funcGetTicket != nil {
		mmGetTicket.mock.t.Fatalf("FreshdeskInterfaceMock.GetTicket mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockGetTicketExpectation{
		mock:               mmGetTicket.mock,
		params:             &FreshdeskInterfaceMockGetTicketParams{ticketID},
		expectationOrigins: FreshdeskInterfaceMockGetTicketExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetTicket.expectations = append(mmGetTicket.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.GetTicket return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockGetTicketExpectation) Then(tp1 *TaskGetTicketResponse, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockGetTicketResults{tp1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.GetTicket should be invoked
func (mmGetTicket *mFreshdeskInterfaceMockGetTicket) Times(n uint64) *mFreshdeskInterfaceMockGetTicket {
	if n == 0 {
		mmGetTicket.mock.t.Fatalf("Times of FreshdeskInterfaceMock.GetTicket mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetTicket.expectedInvocations, n)
	mmGetTicket.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetTicket
}

func (mmGetTicket *mFreshdeskInterfaceMockGetTicket) invocationsDone() bool {
	if len(mmGetTicket.expectations) == 0 && mmGetTicket.defaultExpectation == nil && mmGetTicket.mock.funcGetTicket == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetTicket.mock.afterGetTicketCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetTicket.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetTicket implements FreshdeskInterface
func (mmGetTicket *FreshdeskInterfaceMock) GetTicket(ticketID int64) (tp1 *TaskGetTicketResponse, err error) {
	mm_atomic.AddUint64(&mmGetTicket.beforeGetTicketCounter, 1)
	defer mm_atomic.AddUint64(&mmGetTicket.afterGetTicketCounter, 1)

	mmGetTicket.t.Helper()

	if mmGetTicket.inspectFuncGetTicket != nil {
		mmGetTicket.inspectFuncGetTicket(ticketID)
	}

	mm_params := FreshdeskInterfaceMockGetTicketParams{ticketID}

	// Record call args
	mmGetTicket.GetTicketMock.mutex.Lock()
	mmGetTicket.GetTicketMock.callArgs = append(mmGetTicket.GetTicketMock.callArgs, &mm_params)
	mmGetTicket.GetTicketMock.mutex.Unlock()

	for _, e := range mmGetTicket.GetTicketMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmGetTicket.GetTicketMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetTicket.GetTicketMock.defaultExpectation.Counter, 1)
		mm_want := mmGetTicket.GetTicketMock.defaultExpectation.params
		mm_want_ptrs := mmGetTicket.GetTicketMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockGetTicketParams{ticketID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ticketID != nil && !minimock.Equal(*mm_want_ptrs.ticketID, mm_got.ticketID) {
				mmGetTicket.t.Errorf("FreshdeskInterfaceMock.GetTicket got unexpected parameter ticketID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetTicket.GetTicketMock.defaultExpectation.expectationOrigins.originTicketID, *mm_want_ptrs.ticketID, mm_got.ticketID, minimock.Diff(*mm_want_ptrs.ticketID, mm_got.ticketID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetTicket.t.Errorf("FreshdeskInterfaceMock.GetTicket got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetTicket.GetTicketMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetTicket.GetTicketMock.defaultExpectation.results
		if mm_results == nil {
			mmGetTicket.t.Fatal("No results are set for the FreshdeskInterfaceMock.GetTicket")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmGetTicket.funcGetTicket != nil {
		return mmGetTicket.funcGetTicket(ticketID)
	}
	mmGetTicket.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.GetTicket. %v", ticketID)
	return
}

// GetTicketAfterCounter returns a count of finished FreshdeskInterfaceMock.GetTicket invocations
func (mmGetTicket *FreshdeskInterfaceMock) GetTicketAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTicket.afterGetTicketCounter)
}

// GetTicketBeforeCounter returns a count of FreshdeskInterfaceMock.GetTicket invocations
func (mmGetTicket *FreshdeskInterfaceMock) GetTicketBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTicket.beforeGetTicketCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.GetTicket.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetTicket *mFreshdeskInterfaceMockGetTicket) Calls() []*FreshdeskInterfaceMockGetTicketParams {
	mmGetTicket.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockGetTicketParams, len(mmGetTicket.callArgs))
	copy(argCopy, mmGetTicket.callArgs)

	mmGetTicket.mutex.RUnlock()

	return argCopy
}

// MinimockGetTicketDone returns true if the count of the GetTicket invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockGetTicketDone() bool {
	if m.GetTicketMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetTicketMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetTicketMock.invocationsDone()
}

// MinimockGetTicketInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockGetTicketInspect() {
	for _, e := range m.GetTicketMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetTicket at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetTicketCounter := mm_atomic.LoadUint64(&m.afterGetTicketCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetTicketMock.defaultExpectation != nil && afterGetTicketCounter < 1 {
		if m.GetTicketMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetTicket at\n%s", m.GetTicketMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetTicket at\n%s with params: %#v", m.GetTicketMock.defaultExpectation.expectationOrigins.origin, *m.GetTicketMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTicket != nil && afterGetTicketCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.GetTicket at\n%s", m.funcGetTicketOrigin)
	}

	if !m.GetTicketMock.invocationsDone() && afterGetTicketCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.GetTicket at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetTicketMock.expectedInvocations), m.GetTicketMock.expectedInvocationsOrigin, afterGetTicketCounter)
	}
}

type mFreshdeskInterfaceMockReplyToTicket struct {
	optional           bool
	mock               *FreshdeskInterfaceMock
	defaultExpectation *FreshdeskInterfaceMockReplyToTicketExpectation
	expectations       []*FreshdeskInterfaceMockReplyToTicketExpectation

	callArgs []*FreshdeskInterfaceMockReplyToTicketParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FreshdeskInterfaceMockReplyToTicketExpectation specifies expectation struct of the FreshdeskInterface.ReplyToTicket
type FreshdeskInterfaceMockReplyToTicketExpectation struct {
	mock               *FreshdeskInterfaceMock
	params             *FreshdeskInterfaceMockReplyToTicketParams
	paramPtrs          *FreshdeskInterfaceMockReplyToTicketParamPtrs
	expectationOrigins FreshdeskInterfaceMockReplyToTicketExpectationOrigins
	results            *FreshdeskInterfaceMockReplyToTicketResults
	returnOrigin       string
	Counter            uint64
}

// FreshdeskInterfaceMockReplyToTicketParams contains parameters of the FreshdeskInterface.ReplyToTicket
type FreshdeskInterfaceMockReplyToTicketParams struct {
	ticketID int64
	req      *TaskReplyToTicketReq
}

// FreshdeskInterfaceMockReplyToTicketParamPtrs contains pointers to parameters of the FreshdeskInterface.ReplyToTicket
type FreshdeskInterfaceMockReplyToTicketParamPtrs struct {
	ticketID *int64
	req      **TaskReplyToTicketReq
}

// FreshdeskInterfaceMockReplyToTicketResults contains results of the FreshdeskInterface.ReplyToTicket
type FreshdeskInterfaceMockReplyToTicketResults struct {
	tp1 *TaskReplyToTicketResponse
	err error
}

// FreshdeskInterfaceMockReplyToTicketOrigins contains origins of expectations of the FreshdeskInterface.ReplyToTicket
type FreshdeskInterfaceMockReplyToTicketExpectationOrigins struct {
	origin         string
	originTicketID string
	originReq      string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReplyToTicket *mFreshdeskInterfaceMockReplyToTicket) Optional() *mFreshdeskInterfaceMockReplyToTicket {
	mmReplyToTicket.optional = true
	return mmReplyToTicket
}

// Expect sets up expected params for FreshdeskInterface.ReplyToTicket
func (mmReplyToTicket *mFreshdeskInterfaceMockReplyToTicket) Expect(ticketID int64, req *TaskReplyToTicketReq) *mFreshdeskInterfaceMockReplyToTicket {
	if mmReplyToTicket.mock.funcReplyToTicket != nil {
		mmReplyToTicket.mock.t.Fatalf("FreshdeskInterfaceMock.ReplyToTicket mock is already set by Set")
	}

	if mmReplyToTicket.defaultExpectation == nil {
		mmReplyToTicket.defaultExpectation = &FreshdeskInterfaceMockReplyToTicketExpectation{}
	}

	if mmReplyToTicket.defaultExpectation.paramPtrs != nil {
		mmReplyToTicket.mock.t.Fatalf("FreshdeskInterfaceMock.ReplyToTicket mock is already set by ExpectParams functions")
	}

	mmReplyToTicket.defaultExpectation.params = &FreshdeskInterfaceMockReplyToTicketParams{ticketID, req}
	mmReplyToTicket.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmReplyToTicket.expectations {
		if minimock.Equal(e.params, mmReplyToTicket.defaultExpectation.params) {
			mmReplyToTicket.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReplyToTicket.defaultExpectation.params)
		}
	}

	return mmReplyToTicket
}

// ExpectTicketIDParam1 sets up expected param ticketID for FreshdeskInterface.ReplyToTicket
func (mmReplyToTicket *mFreshdeskInterfaceMockReplyToTicket) ExpectTicketIDParam1(ticketID int64) *mFreshdeskInterfaceMockReplyToTicket {
	if mmReplyToTicket.mock.funcReplyToTicket != nil {
		mmReplyToTicket.mock.t.Fatalf("FreshdeskInterfaceMock.ReplyToTicket mock is already set by Set")
	}

	if mmReplyToTicket.defaultExpectation == nil {
		mmReplyToTicket.defaultExpectation = &FreshdeskInterfaceMockReplyToTicketExpectation{}
	}

	if mmReplyToTicket.defaultExpectation.params != nil {
		mmReplyToTicket.mock.t.Fatalf("FreshdeskInterfaceMock.ReplyToTicket mock is already set by Expect")
	}

	if mmReplyToTicket.defaultExpectation.paramPtrs == nil {
		mmReplyToTicket.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockReplyToTicketParamPtrs{}
	}
	mmReplyToTicket.defaultExpectation.paramPtrs.ticketID = &ticketID
	mmReplyToTicket.defaultExpectation.expectationOrigins.originTicketID = minimock.CallerInfo(1)

	return mmReplyToTicket
}

// ExpectReqParam2 sets up expected param req for FreshdeskInterface.ReplyToTicket
func (mmReplyToTicket *mFreshdeskInterfaceMockReplyToTicket) ExpectReqParam2(req *TaskReplyToTicketReq) *mFreshdeskInterfaceMockReplyToTicket {
	if mmReplyToTicket.mock.funcReplyToTicket != nil {
		mmReplyToTicket.mock.t.Fatalf("FreshdeskInterfaceMock.ReplyToTicket mock is already set by Set")
	}

	if mmReplyToTicket.defaultExpectation == nil {
		mmReplyToTicket.defaultExpectation = &FreshdeskInterfaceMockReplyToTicketExpectation{}
	}

	if mmReplyToTicket.defaultExpectation.params != nil {
		mmReplyToTicket.mock.t.Fatalf("FreshdeskInterfaceMock.ReplyToTicket mock is already set by Expect")
	}

	if mmReplyToTicket.defaultExpectation.paramPtrs == nil {
		mmReplyToTicket.defaultExpectation.paramPtrs = &FreshdeskInterfaceMockReplyToTicketParamPtrs{}
	}
	mmReplyToTicket.defaultExpectation.paramPtrs.req = &req
	mmReplyToTicket.defaultExpectation.expectationOrigins.originReq = minimock.CallerInfo(1)

	return mmReplyToTicket
}

// Inspect accepts an inspector function that has same arguments as the FreshdeskInterface.ReplyToTicket
func (mmReplyToTicket *mFreshdeskInterfaceMockReplyToTicket) Inspect(f func(ticketID int64, req *TaskReplyToTicketReq)) *mFreshdeskInterfaceMockReplyToTicket {
	if mmReplyToTicket.mock.inspectFuncReplyToTicket != nil {
		mmReplyToTicket.mock.t.Fatalf("Inspect function is already set for FreshdeskInterfaceMock.ReplyToTicket")
	}

	mmReplyToTicket.mock.inspectFuncReplyToTicket = f

	return mmReplyToTicket
}

// Return sets up results that will be returned by FreshdeskInterface.ReplyToTicket
func (mmReplyToTicket *mFreshdeskInterfaceMockReplyToTicket) Return(tp1 *TaskReplyToTicketResponse, err error) *FreshdeskInterfaceMock {
	if mmReplyToTicket.mock.funcReplyToTicket != nil {
		mmReplyToTicket.mock.t.Fatalf("FreshdeskInterfaceMock.ReplyToTicket mock is already set by Set")
	}

	if mmReplyToTicket.defaultExpectation == nil {
		mmReplyToTicket.defaultExpectation = &FreshdeskInterfaceMockReplyToTicketExpectation{mock: mmReplyToTicket.mock}
	}
	mmReplyToTicket.defaultExpectation.results = &FreshdeskInterfaceMockReplyToTicketResults{tp1, err}
	mmReplyToTicket.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmReplyToTicket.mock
}

// Set uses given function f to mock the FreshdeskInterface.ReplyToTicket method
func (mmReplyToTicket *mFreshdeskInterfaceMockReplyToTicket) Set(f func(ticketID int64, req *TaskReplyToTicketReq) (tp1 *TaskReplyToTicketResponse, err error)) *FreshdeskInterfaceMock {
	if mmReplyToTicket.defaultExpectation != nil {
		mmReplyToTicket.mock.t.Fatalf("Default expectation is already set for the FreshdeskInterface.ReplyToTicket method")
	}

	if len(mmReplyToTicket.expectations) > 0 {
		mmReplyToTicket.mock.t.Fatalf("Some expectations are already set for the FreshdeskInterface.ReplyToTicket method")
	}

	mmReplyToTicket.mock.funcReplyToTicket = f
	mmReplyToTicket.mock.funcReplyToTicketOrigin = minimock.CallerInfo(1)
	return mmReplyToTicket.mock
}

// When sets expectation for the FreshdeskInterface.ReplyToTicket which will trigger the result defined by the following
// Then helper
func (mmReplyToTicket *mFreshdeskInterfaceMockReplyToTicket) When(ticketID int64, req *TaskReplyToTicketReq) *FreshdeskInterfaceMockReplyToTicketExpectation {
	if mmReplyToTicket.mock.funcReplyToTicket != nil {
		mmReplyToTicket.mock.t.Fatalf("FreshdeskInterfaceMock.ReplyToTicket mock is already set by Set")
	}

	expectation := &FreshdeskInterfaceMockReplyToTicketExpectation{
		mock:               mmReplyToTicket.mock,
		params:             &FreshdeskInterfaceMockReplyToTicketParams{ticketID, req},
		expectationOrigins: FreshdeskInterfaceMockReplyToTicketExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmReplyToTicket.expectations = append(mmReplyToTicket.expectations, expectation)
	return expectation
}

// Then sets up FreshdeskInterface.ReplyToTicket return parameters for the expectation previously defined by the When method
func (e *FreshdeskInterfaceMockReplyToTicketExpectation) Then(tp1 *TaskReplyToTicketResponse, err error) *FreshdeskInterfaceMock {
	e.results = &FreshdeskInterfaceMockReplyToTicketResults{tp1, err}
	return e.mock
}

// Times sets number of times FreshdeskInterface.ReplyToTicket should be invoked
func (mmReplyToTicket *mFreshdeskInterfaceMockReplyToTicket) Times(n uint64) *mFreshdeskInterfaceMockReplyToTicket {
	if n == 0 {
		mmReplyToTicket.mock.t.Fatalf("Times of FreshdeskInterfaceMock.ReplyToTicket mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReplyToTicket.expectedInvocations, n)
	mmReplyToTicket.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmReplyToTicket
}

func (mmReplyToTicket *mFreshdeskInterfaceMockReplyToTicket) invocationsDone() bool {
	if len(mmReplyToTicket.expectations) == 0 && mmReplyToTicket.defaultExpectation == nil && mmReplyToTicket.mock.funcReplyToTicket == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReplyToTicket.mock.afterReplyToTicketCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReplyToTicket.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ReplyToTicket implements FreshdeskInterface
func (mmReplyToTicket *FreshdeskInterfaceMock) ReplyToTicket(ticketID int64, req *TaskReplyToTicketReq) (tp1 *TaskReplyToTicketResponse, err error) {
	mm_atomic.AddUint64(&mmReplyToTicket.beforeReplyToTicketCounter, 1)
	defer mm_atomic.AddUint64(&mmReplyToTicket.afterReplyToTicketCounter, 1)

	mmReplyToTicket.t.Helper()

	if mmReplyToTicket.inspectFuncReplyToTicket != nil {
		mmReplyToTicket.inspectFuncReplyToTicket(ticketID, req)
	}

	mm_params := FreshdeskInterfaceMockReplyToTicketParams{ticketID, req}

	// Record call args
	mmReplyToTicket.ReplyToTicketMock.mutex.Lock()
	mmReplyToTicket.ReplyToTicketMock.callArgs = append(mmReplyToTicket.ReplyToTicketMock.callArgs, &mm_params)
	mmReplyToTicket.ReplyToTicketMock.mutex.Unlock()

	for _, e := range mmReplyToTicket.ReplyToTicketMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.tp1, e.results.err
		}
	}

	if mmReplyToTicket.ReplyToTicketMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReplyToTicket.ReplyToTicketMock.defaultExpectation.Counter, 1)
		mm_want := mmReplyToTicket.ReplyToTicketMock.defaultExpectation.params
		mm_want_ptrs := mmReplyToTicket.ReplyToTicketMock.defaultExpectation.paramPtrs

		mm_got := FreshdeskInterfaceMockReplyToTicketParams{ticketID, req}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ticketID != nil && !minimock.Equal(*mm_want_ptrs.ticketID, mm_got.ticketID) {
				mmReplyToTicket.t.Errorf("FreshdeskInterfaceMock.ReplyToTicket got unexpected parameter ticketID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReplyToTicket.ReplyToTicketMock.defaultExpectation.expectationOrigins.originTicketID, *mm_want_ptrs.ticketID, mm_got.ticketID, minimock.Diff(*mm_want_ptrs.ticketID, mm_got.ticketID))
			}

			if mm_want_ptrs.req != nil && !minimock.Equal(*mm_want_ptrs.req, mm_got.req) {
				mmReplyToTicket.t.Errorf("FreshdeskInterfaceMock.ReplyToTicket got unexpected parameter req, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmReplyToTicket.ReplyToTicketMock.defaultExpectation.expectationOrigins.originReq, *mm_want_ptrs.req, mm_got.req, minimock.Diff(*mm_want_ptrs.req, mm_got.req))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReplyToTicket.t.Errorf("FreshdeskInterfaceMock.ReplyToTicket got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmReplyToTicket.ReplyToTicketMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReplyToTicket.ReplyToTicketMock.defaultExpectation.results
		if mm_results == nil {
			mmReplyToTicket.t.Fatal("No results are set for the FreshdeskInterfaceMock.ReplyToTicket")
		}
		return (*mm_results).tp1, (*mm_results).err
	}
	if mmReplyToTicket.funcReplyToTicket != nil {
		return mmReplyToTicket.funcReplyToTicket(ticketID, req)
	}
	mmReplyToTicket.t.Fatalf("Unexpected call to FreshdeskInterfaceMock.ReplyToTicket. %v %v", ticketID, req)
	return
}

// ReplyToTicketAfterCounter returns a count of finished FreshdeskInterfaceMock.ReplyToTicket invocations
func (mmReplyToTicket *FreshdeskInterfaceMock) ReplyToTicketAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReplyToTicket.afterReplyToTicketCounter)
}

// ReplyToTicketBeforeCounter returns a count of FreshdeskInterfaceMock.ReplyToTicket invocations
func (mmReplyToTicket *FreshdeskInterfaceMock) ReplyToTicketBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReplyToTicket.beforeReplyToTicketCounter)
}

// Calls returns a list of arguments used in each call to FreshdeskInterfaceMock.ReplyToTicket.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReplyToTicket *mFreshdeskInterfaceMockReplyToTicket) Calls() []*FreshdeskInterfaceMockReplyToTicketParams {
	mmReplyToTicket.mutex.RLock()

	argCopy := make([]*FreshdeskInterfaceMockReplyToTicketParams, len(mmReplyToTicket.callArgs))
	copy(argCopy, mmReplyToTicket.callArgs)

	mmReplyToTicket.mutex.RUnlock()

	return argCopy
}

// MinimockReplyToTicketDone returns true if the count of the ReplyToTicket invocations corresponds
// the number of defined expectations
func (m *FreshdeskInterfaceMock) MinimockReplyToTicketDone() bool {
	if m.ReplyToTicketMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReplyToTicketMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReplyToTicketMock.invocationsDone()
}

// MinimockReplyToTicketInspect logs each unmet expectation
func (m *FreshdeskInterfaceMock) MinimockReplyToTicketInspect() {
	for _, e := range m.ReplyToTicketMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.ReplyToTicket at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterReplyToTicketCounter := mm_atomic.LoadUint64(&m.afterReplyToTicketCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReplyToTicketMock.defaultExpectation != nil && afterReplyToTicketCounter < 1 {
		if m.ReplyToTicketMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.ReplyToTicket at\n%s", m.ReplyToTicketMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FreshdeskInterfaceMock.ReplyToTicket at\n%s with params: %#v", m.ReplyToTicketMock.defaultExpectation.expectationOrigins.origin, *m.ReplyToTicketMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReplyToTicket != nil && afterReplyToTicketCounter < 1 {
		m.t.Errorf("Expected call to FreshdeskInterfaceMock.ReplyToTicket at\n%s", m.funcReplyToTicketOrigin)
	}

	if !m.ReplyToTicketMock.invocationsDone() && afterReplyToTicketCounter > 0 {
		m.t.Errorf("Expected %d calls to FreshdeskInterfaceMock.ReplyToTicket at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ReplyToTicketMock.expectedInvocations), m.ReplyToTicketMock.expectedInvocationsOrigin, afterReplyToTicketCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FreshdeskInterfaceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateCompanyInspect()

			m.MinimockCreateContactInspect()

			m.MinimockCreateTicketInspect()

			m.MinimockCreateTicketNoteInspect()

			m.MinimockGetAgentInspect()

			m.MinimockGetAllInspect()

			m.MinimockGetAllConversationsInspect()

			m.MinimockGetCompanyInspect()

			m.MinimockGetContactInspect()

			m.MinimockGetGroupInspect()

			m.MinimockGetProductInspect()

			m.MinimockGetRoleInspect()

			m.MinimockGetSkillInspect()

			m.MinimockGetTicketInspect()

			m.MinimockReplyToTicketInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FreshdeskInterfaceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FreshdeskInterfaceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateCompanyDone() &&
		m.MinimockCreateContactDone() &&
		m.MinimockCreateTicketDone() &&
		m.MinimockCreateTicketNoteDone() &&
		m.MinimockGetAgentDone() &&
		m.MinimockGetAllDone() &&
		m.MinimockGetAllConversationsDone() &&
		m.MinimockGetCompanyDone() &&
		m.MinimockGetContactDone() &&
		m.MinimockGetGroupDone() &&
		m.MinimockGetProductDone() &&
		m.MinimockGetRoleDone() &&
		m.MinimockGetSkillDone() &&
		m.MinimockGetTicketDone() &&
		m.MinimockReplyToTicketDone()
}
