{
  "$defs": {
    "text": {
      "description": "Text to be chunked",
      "instillAcceptFormats": [
        "string"
      ],
      "instillUIMultiline": true,
      "instillUIOrder": 0,
      "instillUpstreamTypes": [
        "value",
        "reference",
        "template"
      ],
      "title": "Text",
      "type": "string"
    },
    "chunk-size": {
      "default": 512,
      "description": "Specifies the maximum size of each chunk in terms of the number of tokens",
      "instillAcceptFormats": [
        "integer"
      ],
      "instillUIOrder": 1,
      "instillUpstreamTypes": [
        "value",
        "reference"
      ],
      "minimum": 1,
      "title": "Chunk Size",
      "type": "integer"
    },
    "chunk-overlap": {
      "default": 100,
      "description": "Determines the number of tokens that overlap between consecutive chunks",
      "instillAcceptFormats": [
        "integer"
      ],
      "instillUIOrder": 2,
      "instillUpstreamTypes": [
        "value",
        "reference"
      ],
      "minimum": 1,
      "title": "Chunk Overlap",
      "type": "integer"
    },
    "model-name": {
      "description": "The name of the model used for tokenization.",
      "enum": [
        "gpt-4",
        "gpt-3.5-turbo",
        "text-davinci-003",
        "text-davinci-002",
        "text-davinci-001",
        "text-curie-001",
        "text-babbage-001",
        "text-ada-001",
        "davinci",
        "curie",
        "babbage",
        "ada",
        "code-davinci-002",
        "code-davinci-001",
        "code-cushman-002",
        "code-cushman-001",
        "davinci-codex",
        "cushman-codex",
        "text-davinci-edit-001",
        "code-davinci-edit-001",
        "text-embedding-ada-002",
        "text-similarity-davinci-001",
        "text-similarity-curie-001",
        "text-similarity-babbage-001",
        "text-similarity-ada-001",
        "text-search-davinci-doc-001",
        "text-search-curie-doc-001",
        "text-search-babbage-doc-001",
        "text-search-ada-doc-001",
        "code-search-babbage-code-001",
        "code-search-ada-code-001",
        "gpt2"
      ],
      "instillAcceptFormats": [
        "string"
      ],
      "instillUIOrder": 3,
      "instillUpstreamTypes": [
        "value",
        "reference",
        "template"
      ],
      "title": "Model",
      "type": "string"
    }
  },
  "TASK_CHUNK_TEXT": {
    "instillShortDescription": "Chunk text with different strategies",
    "input": {
      "description": "Input",
      "instillEditOnNodeFields": [
        "text",
        "strategy"
      ],
      "instillUIOrder": 0,
      "properties": {
        "text": {
          "$ref": "#/$defs/text"
        },
        "strategy": {
          "description": "Chunking strategy",
          "instillUIOrder": 1,
          "properties": {
            "setting": {
              "description": "Chunk Setting",
              "additionalProperties": true,
              "type": "object",
              "title": "Setting",
              "instillUIOrder": 0,
              "required": [
                "chunk-method"
              ],
              "oneOf": [
                {
                  "properties": {
                    "chunk-method": {
                      "const": "Token",
                      "type": "string",
                      "title": "Chunk Method",
                      "description": "Chunking based on tokenization.",
                      "instillUIOrder": 0
                    },
                    "chunk-size": {
                      "$ref": "#/$defs/chunk-size"
                    },
                    "chunk-overlap": {
                      "$ref": "#/$defs/chunk-overlap"
                    },
                    "model-name": {
                      "$ref": "#/$defs/model-name"
                    },
                    "allowed-special": {
                      "default": [],
                      "description": "A list of special tokens that are allowed within chunks.",
                      "instillAcceptFormats": [
                        "array:string"
                      ],
                      "items": {
                        "instillUIMultiline": false,
                        "type": "string"
                      },
                      "instillUIOrder": 4,
                      "instillUpstreamTypes": [
                        "value",
                        "reference",
                        "template"
                      ],
                      "title": "Allowed Special Tokens",
                      "type": "array"
                    },
                    "disallowed-special": {
                      "default": [],
                      "description": "A list of special tokens that should not appear within chunks.",
                      "instillAcceptFormats": [
                        "array:string"
                      ],
                      "items": {
                        "instillUIMultiline": false,
                        "type": "string"
                      },
                      "instillUIOrder": 5,
                      "instillUpstreamTypes": [
                        "value",
                        "reference",
                        "template"
                      ],
                      "title": "Disallowed Special Tokens",
                      "type": "array"
                    }
                  },
                  "required": [
                    "chunk-method"
                  ],
                  "instillEditOnNodeFields": [
                    "chunk-method",
                    "chunk-size",
                    "chunk-overlap",
                    "model-name",
                    "allowed-special",
                    "disallowed-special"
                  ],
                  "title": "Token",
                  "type": "object",
                  "description": "Language models have a token limit. You should not exceed the token limit. When you split your text into chunks it is therefore a good idea to count the number of tokens. There are many tokenizers. When you count tokens in your text you should use the same tokenizer as used in the language model."
                },
                {
                  "properties": {
                    "chunk-method": {
                      "const": "Recursive",
                      "type": "string",
                      "title": "Chunk Method",
                      "description": "Chunking based on recursive splitting.",
                      "instillUIOrder": 0
                    },
                    "chunk-size": {
                      "$ref": "#/$defs/chunk-size"
                    },
                    "chunk-overlap": {
                      "$ref": "#/$defs/chunk-overlap"
                    },
                    "model-name": {
                      "$ref": "#/$defs/model-name"
                    },
                    "separators": {
                      "default": [],
                      "description": "A list of strings representing the separators used to split the text.",
                      "instillAcceptFormats": [
                        "array:string"
                      ],
                      "instillUIOrder": 3,
                      "items": {
                        "instillUIMultiline": false,
                        "type": "string"
                      },
                      "instillUpstreamTypes": [
                        "value",
                        "reference",
                        "template"
                      ],
                      "title": "Separators",
                      "type": "array"
                    },
                    "keep-separator": {
                      "description": "A flag indicating whether to keep the separator characters at the beginning or end of chunks",
                      "instillAcceptFormats": [
                        "boolean"
                      ],
                      "instillUIOrder": 4,
                      "instillUpstreamTypes": [
                        "value",
                        "reference",
                        "template"
                      ],
                      "title": "Keep Separator",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "chunk-method"
                  ],
                  "instillEditOnNodeFields": [
                    "chunk-method",
                    "chunk-size",
                    "chunk-overlap",
                    "model-name",
                    "separators",
                    "keep-separator"
                  ],
                  "title": "Recursive",
                  "type": "object",
                  "description": "This text splitter is the recommended one for generic text. It is parameterized by a list of characters. It tries to split on them in order until the chunks are small enough. The default list is [\"\\n\\n\", \"\\n\", \"\", \"\"]. This has the effect of trying to keep all paragraphs (and then sentences, and then words) together as long as possible, as those would generically seem to be the strongest semantically related pieces of text."
                },
                {
                  "properties": {
                    "chunk-method": {
                      "const": "Markdown",
                      "type": "string",
                      "title": "Chunk Method",
                      "description": "Chunking based on recursive splitting with markdown format.",
                      "instillUIOrder": 0
                    },
                    "chunk-size": {
                      "$ref": "#/$defs/chunk-size"
                    },
                    "chunk-overlap": {
                      "$ref": "#/$defs/chunk-overlap"
                    },
                    "model-name": {
                      "$ref": "#/$defs/model-name"
                    },
                    "code-blocks": {
                      "description": "A flag indicating whether code blocks should be treated as a single unit",
                      "instillAcceptFormats": [
                        "boolean"
                      ],
                      "instillUIOrder": 3,
                      "instillUpstreamTypes": [
                        "value",
                        "reference",
                        "template"
                      ],
                      "title": "Code Blocks",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "chunk-method"
                  ],
                  "instillEditOnNodeFields": [
                    "chunk-method",
                    "chunk-size",
                    "chunk-overlap",
                    "model-name",
                    "code-blocks"
                  ],
                  "title": "Markdown",
                  "type": "object",
                  "description": "This text splitter is specially designed for Markdown format."
                }
              ]
            }
          },
          "title": "Strategy",
          "required": [
            "setting"
          ],
          "type": "object"
        }
      },
      "required": [
        "text",
        "strategy"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Output",
      "instillUIOrder": 0,
      "properties": {
        "chunk-num": {
          "description": "Total number of output text chunks",
          "instillUIOrder": 2,
          "instillFormat": "integer",
          "title": "Number of Text Chunks",
          "type": "integer"
        },
        "text-chunks": {
          "description": "Text chunks after splitting",
          "instillUIOrder": 1,
          "items": {
            "title": "Text Chunk",
            "description": "Text chunk after splitting",
            "properties": {
              "text": {
                "title": "Text",
                "description": "Text chunk after splitting",
                "instillFormat": "string",
                "instillUIMultiline": true,
                "instillUIOrder": 0,
                "type": "string"
              },
              "start-position": {
                "title": "Start Position",
                "description": "The starting position of the chunk in the original text",
                "instillFormat": "integer",
                "instillUIOrder": 1,
                "type": "integer"
              },
              "end-position": {
                "title": "End Position",
                "description": "The ending position of the chunk in the original text",
                "instillFormat": "integer",
                "instillUIOrder": 2,
                "type": "integer"
              },
              "token-count": {
                "title": "Token Count",
                "description": "Count of tokens in a chunk",
                "instillFormat": "integer",
                "instillUIOrder": 3,
                "type": "integer"
              }
            },
            "required": [
              "text",
              "start-position",
              "end-position",
              "token-count"
            ],
            "instillUIMultiline": true,
            "type": "object"
          },
          "title": "Text Chunks",
          "type": "array"
        },
        "token-count": {
          "description": "Total count of tokens in the original input text",
          "instillUIOrder": 0,
          "instillFormat": "integer",
          "title": "Token Count",
          "type": "integer"
        },
        "chunks-token-count": {
          "description": "Total count of tokens in the output text chunks",
          "instillUIOrder": 3,
          "instillFormat": "integer",
          "title": "Token Count Chunks",
          "type": "integer"
        }
      },
      "required": [
        "text-chunks",
        "chunk-num",
        "token-count",
        "chunks-token-count"
      ],
      "title": "Output",
      "type": "object"
    }
  }
}
