// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package mock

import (
	context "context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_mgmtv1beta "github.com/instill-ai/protogen-go/core/mgmt/v1beta"
	grpc "google.golang.org/grpc"
)

// MgmtPrivateServiceClientMock implements mgmtv1beta.MgmtPrivateServiceClient
type MgmtPrivateServiceClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCheckNamespaceAdmin          func(ctx context.Context, in *mm_mgmtv1beta.CheckNamespaceAdminRequest, opts ...grpc.CallOption) (cp1 *mm_mgmtv1beta.CheckNamespaceAdminResponse, err error)
	inspectFuncCheckNamespaceAdmin   func(ctx context.Context, in *mm_mgmtv1beta.CheckNamespaceAdminRequest, opts ...grpc.CallOption)
	afterCheckNamespaceAdminCounter  uint64
	beforeCheckNamespaceAdminCounter uint64
	CheckNamespaceAdminMock          mMgmtPrivateServiceClientMockCheckNamespaceAdmin

	funcGetOrganizationAdmin          func(ctx context.Context, in *mm_mgmtv1beta.GetOrganizationAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetOrganizationAdminResponse, err error)
	inspectFuncGetOrganizationAdmin   func(ctx context.Context, in *mm_mgmtv1beta.GetOrganizationAdminRequest, opts ...grpc.CallOption)
	afterGetOrganizationAdminCounter  uint64
	beforeGetOrganizationAdminCounter uint64
	GetOrganizationAdminMock          mMgmtPrivateServiceClientMockGetOrganizationAdmin

	funcGetOrganizationSubscriptionAdmin          func(ctx context.Context, in *mm_mgmtv1beta.GetOrganizationSubscriptionAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetOrganizationSubscriptionAdminResponse, err error)
	inspectFuncGetOrganizationSubscriptionAdmin   func(ctx context.Context, in *mm_mgmtv1beta.GetOrganizationSubscriptionAdminRequest, opts ...grpc.CallOption)
	afterGetOrganizationSubscriptionAdminCounter  uint64
	beforeGetOrganizationSubscriptionAdminCounter uint64
	GetOrganizationSubscriptionAdminMock          mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin

	funcGetRemainingCreditAdmin          func(ctx context.Context, in *mm_mgmtv1beta.GetRemainingCreditAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetRemainingCreditAdminResponse, err error)
	inspectFuncGetRemainingCreditAdmin   func(ctx context.Context, in *mm_mgmtv1beta.GetRemainingCreditAdminRequest, opts ...grpc.CallOption)
	afterGetRemainingCreditAdminCounter  uint64
	beforeGetRemainingCreditAdminCounter uint64
	GetRemainingCreditAdminMock          mMgmtPrivateServiceClientMockGetRemainingCreditAdmin

	funcGetUserAdmin          func(ctx context.Context, in *mm_mgmtv1beta.GetUserAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetUserAdminResponse, err error)
	inspectFuncGetUserAdmin   func(ctx context.Context, in *mm_mgmtv1beta.GetUserAdminRequest, opts ...grpc.CallOption)
	afterGetUserAdminCounter  uint64
	beforeGetUserAdminCounter uint64
	GetUserAdminMock          mMgmtPrivateServiceClientMockGetUserAdmin

	funcGetUserSubscriptionAdmin          func(ctx context.Context, in *mm_mgmtv1beta.GetUserSubscriptionAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetUserSubscriptionAdminResponse, err error)
	inspectFuncGetUserSubscriptionAdmin   func(ctx context.Context, in *mm_mgmtv1beta.GetUserSubscriptionAdminRequest, opts ...grpc.CallOption)
	afterGetUserSubscriptionAdminCounter  uint64
	beforeGetUserSubscriptionAdminCounter uint64
	GetUserSubscriptionAdminMock          mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin

	funcListOrganizationsAdmin          func(ctx context.Context, in *mm_mgmtv1beta.ListOrganizationsAdminRequest, opts ...grpc.CallOption) (lp1 *mm_mgmtv1beta.ListOrganizationsAdminResponse, err error)
	inspectFuncListOrganizationsAdmin   func(ctx context.Context, in *mm_mgmtv1beta.ListOrganizationsAdminRequest, opts ...grpc.CallOption)
	afterListOrganizationsAdminCounter  uint64
	beforeListOrganizationsAdminCounter uint64
	ListOrganizationsAdminMock          mMgmtPrivateServiceClientMockListOrganizationsAdmin

	funcListUsersAdmin          func(ctx context.Context, in *mm_mgmtv1beta.ListUsersAdminRequest, opts ...grpc.CallOption) (lp1 *mm_mgmtv1beta.ListUsersAdminResponse, err error)
	inspectFuncListUsersAdmin   func(ctx context.Context, in *mm_mgmtv1beta.ListUsersAdminRequest, opts ...grpc.CallOption)
	afterListUsersAdminCounter  uint64
	beforeListUsersAdminCounter uint64
	ListUsersAdminMock          mMgmtPrivateServiceClientMockListUsersAdmin

	funcLookUpOrganizationAdmin          func(ctx context.Context, in *mm_mgmtv1beta.LookUpOrganizationAdminRequest, opts ...grpc.CallOption) (lp1 *mm_mgmtv1beta.LookUpOrganizationAdminResponse, err error)
	inspectFuncLookUpOrganizationAdmin   func(ctx context.Context, in *mm_mgmtv1beta.LookUpOrganizationAdminRequest, opts ...grpc.CallOption)
	afterLookUpOrganizationAdminCounter  uint64
	beforeLookUpOrganizationAdminCounter uint64
	LookUpOrganizationAdminMock          mMgmtPrivateServiceClientMockLookUpOrganizationAdmin

	funcLookUpUserAdmin          func(ctx context.Context, in *mm_mgmtv1beta.LookUpUserAdminRequest, opts ...grpc.CallOption) (lp1 *mm_mgmtv1beta.LookUpUserAdminResponse, err error)
	inspectFuncLookUpUserAdmin   func(ctx context.Context, in *mm_mgmtv1beta.LookUpUserAdminRequest, opts ...grpc.CallOption)
	afterLookUpUserAdminCounter  uint64
	beforeLookUpUserAdminCounter uint64
	LookUpUserAdminMock          mMgmtPrivateServiceClientMockLookUpUserAdmin

	funcSubtractCreditAdmin          func(ctx context.Context, in *mm_mgmtv1beta.SubtractCreditAdminRequest, opts ...grpc.CallOption) (sp1 *mm_mgmtv1beta.SubtractCreditAdminResponse, err error)
	inspectFuncSubtractCreditAdmin   func(ctx context.Context, in *mm_mgmtv1beta.SubtractCreditAdminRequest, opts ...grpc.CallOption)
	afterSubtractCreditAdminCounter  uint64
	beforeSubtractCreditAdminCounter uint64
	SubtractCreditAdminMock          mMgmtPrivateServiceClientMockSubtractCreditAdmin
}

// NewMgmtPrivateServiceClientMock returns a mock for mgmtv1beta.MgmtPrivateServiceClient
func NewMgmtPrivateServiceClientMock(t minimock.Tester) *MgmtPrivateServiceClientMock {
	m := &MgmtPrivateServiceClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CheckNamespaceAdminMock = mMgmtPrivateServiceClientMockCheckNamespaceAdmin{mock: m}
	m.CheckNamespaceAdminMock.callArgs = []*MgmtPrivateServiceClientMockCheckNamespaceAdminParams{}

	m.GetOrganizationAdminMock = mMgmtPrivateServiceClientMockGetOrganizationAdmin{mock: m}
	m.GetOrganizationAdminMock.callArgs = []*MgmtPrivateServiceClientMockGetOrganizationAdminParams{}

	m.GetOrganizationSubscriptionAdminMock = mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin{mock: m}
	m.GetOrganizationSubscriptionAdminMock.callArgs = []*MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParams{}

	m.GetRemainingCreditAdminMock = mMgmtPrivateServiceClientMockGetRemainingCreditAdmin{mock: m}
	m.GetRemainingCreditAdminMock.callArgs = []*MgmtPrivateServiceClientMockGetRemainingCreditAdminParams{}

	m.GetUserAdminMock = mMgmtPrivateServiceClientMockGetUserAdmin{mock: m}
	m.GetUserAdminMock.callArgs = []*MgmtPrivateServiceClientMockGetUserAdminParams{}

	m.GetUserSubscriptionAdminMock = mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin{mock: m}
	m.GetUserSubscriptionAdminMock.callArgs = []*MgmtPrivateServiceClientMockGetUserSubscriptionAdminParams{}

	m.ListOrganizationsAdminMock = mMgmtPrivateServiceClientMockListOrganizationsAdmin{mock: m}
	m.ListOrganizationsAdminMock.callArgs = []*MgmtPrivateServiceClientMockListOrganizationsAdminParams{}

	m.ListUsersAdminMock = mMgmtPrivateServiceClientMockListUsersAdmin{mock: m}
	m.ListUsersAdminMock.callArgs = []*MgmtPrivateServiceClientMockListUsersAdminParams{}

	m.LookUpOrganizationAdminMock = mMgmtPrivateServiceClientMockLookUpOrganizationAdmin{mock: m}
	m.LookUpOrganizationAdminMock.callArgs = []*MgmtPrivateServiceClientMockLookUpOrganizationAdminParams{}

	m.LookUpUserAdminMock = mMgmtPrivateServiceClientMockLookUpUserAdmin{mock: m}
	m.LookUpUserAdminMock.callArgs = []*MgmtPrivateServiceClientMockLookUpUserAdminParams{}

	m.SubtractCreditAdminMock = mMgmtPrivateServiceClientMockSubtractCreditAdmin{mock: m}
	m.SubtractCreditAdminMock.callArgs = []*MgmtPrivateServiceClientMockSubtractCreditAdminParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mMgmtPrivateServiceClientMockCheckNamespaceAdmin struct {
	optional           bool
	mock               *MgmtPrivateServiceClientMock
	defaultExpectation *MgmtPrivateServiceClientMockCheckNamespaceAdminExpectation
	expectations       []*MgmtPrivateServiceClientMockCheckNamespaceAdminExpectation

	callArgs []*MgmtPrivateServiceClientMockCheckNamespaceAdminParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// MgmtPrivateServiceClientMockCheckNamespaceAdminExpectation specifies expectation struct of the MgmtPrivateServiceClient.CheckNamespaceAdmin
type MgmtPrivateServiceClientMockCheckNamespaceAdminExpectation struct {
	mock      *MgmtPrivateServiceClientMock
	params    *MgmtPrivateServiceClientMockCheckNamespaceAdminParams
	paramPtrs *MgmtPrivateServiceClientMockCheckNamespaceAdminParamPtrs
	results   *MgmtPrivateServiceClientMockCheckNamespaceAdminResults
	Counter   uint64
}

// MgmtPrivateServiceClientMockCheckNamespaceAdminParams contains parameters of the MgmtPrivateServiceClient.CheckNamespaceAdmin
type MgmtPrivateServiceClientMockCheckNamespaceAdminParams struct {
	ctx  context.Context
	in   *mm_mgmtv1beta.CheckNamespaceAdminRequest
	opts []grpc.CallOption
}

// MgmtPrivateServiceClientMockCheckNamespaceAdminParamPtrs contains pointers to parameters of the MgmtPrivateServiceClient.CheckNamespaceAdmin
type MgmtPrivateServiceClientMockCheckNamespaceAdminParamPtrs struct {
	ctx  *context.Context
	in   **mm_mgmtv1beta.CheckNamespaceAdminRequest
	opts *[]grpc.CallOption
}

// MgmtPrivateServiceClientMockCheckNamespaceAdminResults contains results of the MgmtPrivateServiceClient.CheckNamespaceAdmin
type MgmtPrivateServiceClientMockCheckNamespaceAdminResults struct {
	cp1 *mm_mgmtv1beta.CheckNamespaceAdminResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCheckNamespaceAdmin *mMgmtPrivateServiceClientMockCheckNamespaceAdmin) Optional() *mMgmtPrivateServiceClientMockCheckNamespaceAdmin {
	mmCheckNamespaceAdmin.optional = true
	return mmCheckNamespaceAdmin
}

// Expect sets up expected params for MgmtPrivateServiceClient.CheckNamespaceAdmin
func (mmCheckNamespaceAdmin *mMgmtPrivateServiceClientMockCheckNamespaceAdmin) Expect(ctx context.Context, in *mm_mgmtv1beta.CheckNamespaceAdminRequest, opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockCheckNamespaceAdmin {
	if mmCheckNamespaceAdmin.mock.funcCheckNamespaceAdmin != nil {
		mmCheckNamespaceAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.CheckNamespaceAdmin mock is already set by Set")
	}

	if mmCheckNamespaceAdmin.defaultExpectation == nil {
		mmCheckNamespaceAdmin.defaultExpectation = &MgmtPrivateServiceClientMockCheckNamespaceAdminExpectation{}
	}

	if mmCheckNamespaceAdmin.defaultExpectation.paramPtrs != nil {
		mmCheckNamespaceAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.CheckNamespaceAdmin mock is already set by ExpectParams functions")
	}

	mmCheckNamespaceAdmin.defaultExpectation.params = &MgmtPrivateServiceClientMockCheckNamespaceAdminParams{ctx, in, opts}
	for _, e := range mmCheckNamespaceAdmin.expectations {
		if minimock.Equal(e.params, mmCheckNamespaceAdmin.defaultExpectation.params) {
			mmCheckNamespaceAdmin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheckNamespaceAdmin.defaultExpectation.params)
		}
	}

	return mmCheckNamespaceAdmin
}

// ExpectCtxParam1 sets up expected param ctx for MgmtPrivateServiceClient.CheckNamespaceAdmin
func (mmCheckNamespaceAdmin *mMgmtPrivateServiceClientMockCheckNamespaceAdmin) ExpectCtxParam1(ctx context.Context) *mMgmtPrivateServiceClientMockCheckNamespaceAdmin {
	if mmCheckNamespaceAdmin.mock.funcCheckNamespaceAdmin != nil {
		mmCheckNamespaceAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.CheckNamespaceAdmin mock is already set by Set")
	}

	if mmCheckNamespaceAdmin.defaultExpectation == nil {
		mmCheckNamespaceAdmin.defaultExpectation = &MgmtPrivateServiceClientMockCheckNamespaceAdminExpectation{}
	}

	if mmCheckNamespaceAdmin.defaultExpectation.params != nil {
		mmCheckNamespaceAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.CheckNamespaceAdmin mock is already set by Expect")
	}

	if mmCheckNamespaceAdmin.defaultExpectation.paramPtrs == nil {
		mmCheckNamespaceAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockCheckNamespaceAdminParamPtrs{}
	}
	mmCheckNamespaceAdmin.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCheckNamespaceAdmin
}

// ExpectInParam2 sets up expected param in for MgmtPrivateServiceClient.CheckNamespaceAdmin
func (mmCheckNamespaceAdmin *mMgmtPrivateServiceClientMockCheckNamespaceAdmin) ExpectInParam2(in *mm_mgmtv1beta.CheckNamespaceAdminRequest) *mMgmtPrivateServiceClientMockCheckNamespaceAdmin {
	if mmCheckNamespaceAdmin.mock.funcCheckNamespaceAdmin != nil {
		mmCheckNamespaceAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.CheckNamespaceAdmin mock is already set by Set")
	}

	if mmCheckNamespaceAdmin.defaultExpectation == nil {
		mmCheckNamespaceAdmin.defaultExpectation = &MgmtPrivateServiceClientMockCheckNamespaceAdminExpectation{}
	}

	if mmCheckNamespaceAdmin.defaultExpectation.params != nil {
		mmCheckNamespaceAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.CheckNamespaceAdmin mock is already set by Expect")
	}

	if mmCheckNamespaceAdmin.defaultExpectation.paramPtrs == nil {
		mmCheckNamespaceAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockCheckNamespaceAdminParamPtrs{}
	}
	mmCheckNamespaceAdmin.defaultExpectation.paramPtrs.in = &in

	return mmCheckNamespaceAdmin
}

// ExpectOptsParam3 sets up expected param opts for MgmtPrivateServiceClient.CheckNamespaceAdmin
func (mmCheckNamespaceAdmin *mMgmtPrivateServiceClientMockCheckNamespaceAdmin) ExpectOptsParam3(opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockCheckNamespaceAdmin {
	if mmCheckNamespaceAdmin.mock.funcCheckNamespaceAdmin != nil {
		mmCheckNamespaceAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.CheckNamespaceAdmin mock is already set by Set")
	}

	if mmCheckNamespaceAdmin.defaultExpectation == nil {
		mmCheckNamespaceAdmin.defaultExpectation = &MgmtPrivateServiceClientMockCheckNamespaceAdminExpectation{}
	}

	if mmCheckNamespaceAdmin.defaultExpectation.params != nil {
		mmCheckNamespaceAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.CheckNamespaceAdmin mock is already set by Expect")
	}

	if mmCheckNamespaceAdmin.defaultExpectation.paramPtrs == nil {
		mmCheckNamespaceAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockCheckNamespaceAdminParamPtrs{}
	}
	mmCheckNamespaceAdmin.defaultExpectation.paramPtrs.opts = &opts

	return mmCheckNamespaceAdmin
}

// Inspect accepts an inspector function that has same arguments as the MgmtPrivateServiceClient.CheckNamespaceAdmin
func (mmCheckNamespaceAdmin *mMgmtPrivateServiceClientMockCheckNamespaceAdmin) Inspect(f func(ctx context.Context, in *mm_mgmtv1beta.CheckNamespaceAdminRequest, opts ...grpc.CallOption)) *mMgmtPrivateServiceClientMockCheckNamespaceAdmin {
	if mmCheckNamespaceAdmin.mock.inspectFuncCheckNamespaceAdmin != nil {
		mmCheckNamespaceAdmin.mock.t.Fatalf("Inspect function is already set for MgmtPrivateServiceClientMock.CheckNamespaceAdmin")
	}

	mmCheckNamespaceAdmin.mock.inspectFuncCheckNamespaceAdmin = f

	return mmCheckNamespaceAdmin
}

// Return sets up results that will be returned by MgmtPrivateServiceClient.CheckNamespaceAdmin
func (mmCheckNamespaceAdmin *mMgmtPrivateServiceClientMockCheckNamespaceAdmin) Return(cp1 *mm_mgmtv1beta.CheckNamespaceAdminResponse, err error) *MgmtPrivateServiceClientMock {
	if mmCheckNamespaceAdmin.mock.funcCheckNamespaceAdmin != nil {
		mmCheckNamespaceAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.CheckNamespaceAdmin mock is already set by Set")
	}

	if mmCheckNamespaceAdmin.defaultExpectation == nil {
		mmCheckNamespaceAdmin.defaultExpectation = &MgmtPrivateServiceClientMockCheckNamespaceAdminExpectation{mock: mmCheckNamespaceAdmin.mock}
	}
	mmCheckNamespaceAdmin.defaultExpectation.results = &MgmtPrivateServiceClientMockCheckNamespaceAdminResults{cp1, err}
	return mmCheckNamespaceAdmin.mock
}

// Set uses given function f to mock the MgmtPrivateServiceClient.CheckNamespaceAdmin method
func (mmCheckNamespaceAdmin *mMgmtPrivateServiceClientMockCheckNamespaceAdmin) Set(f func(ctx context.Context, in *mm_mgmtv1beta.CheckNamespaceAdminRequest, opts ...grpc.CallOption) (cp1 *mm_mgmtv1beta.CheckNamespaceAdminResponse, err error)) *MgmtPrivateServiceClientMock {
	if mmCheckNamespaceAdmin.defaultExpectation != nil {
		mmCheckNamespaceAdmin.mock.t.Fatalf("Default expectation is already set for the MgmtPrivateServiceClient.CheckNamespaceAdmin method")
	}

	if len(mmCheckNamespaceAdmin.expectations) > 0 {
		mmCheckNamespaceAdmin.mock.t.Fatalf("Some expectations are already set for the MgmtPrivateServiceClient.CheckNamespaceAdmin method")
	}

	mmCheckNamespaceAdmin.mock.funcCheckNamespaceAdmin = f
	return mmCheckNamespaceAdmin.mock
}

// When sets expectation for the MgmtPrivateServiceClient.CheckNamespaceAdmin which will trigger the result defined by the following
// Then helper
func (mmCheckNamespaceAdmin *mMgmtPrivateServiceClientMockCheckNamespaceAdmin) When(ctx context.Context, in *mm_mgmtv1beta.CheckNamespaceAdminRequest, opts ...grpc.CallOption) *MgmtPrivateServiceClientMockCheckNamespaceAdminExpectation {
	if mmCheckNamespaceAdmin.mock.funcCheckNamespaceAdmin != nil {
		mmCheckNamespaceAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.CheckNamespaceAdmin mock is already set by Set")
	}

	expectation := &MgmtPrivateServiceClientMockCheckNamespaceAdminExpectation{
		mock:   mmCheckNamespaceAdmin.mock,
		params: &MgmtPrivateServiceClientMockCheckNamespaceAdminParams{ctx, in, opts},
	}
	mmCheckNamespaceAdmin.expectations = append(mmCheckNamespaceAdmin.expectations, expectation)
	return expectation
}

// Then sets up MgmtPrivateServiceClient.CheckNamespaceAdmin return parameters for the expectation previously defined by the When method
func (e *MgmtPrivateServiceClientMockCheckNamespaceAdminExpectation) Then(cp1 *mm_mgmtv1beta.CheckNamespaceAdminResponse, err error) *MgmtPrivateServiceClientMock {
	e.results = &MgmtPrivateServiceClientMockCheckNamespaceAdminResults{cp1, err}
	return e.mock
}

// Times sets number of times MgmtPrivateServiceClient.CheckNamespaceAdmin should be invoked
func (mmCheckNamespaceAdmin *mMgmtPrivateServiceClientMockCheckNamespaceAdmin) Times(n uint64) *mMgmtPrivateServiceClientMockCheckNamespaceAdmin {
	if n == 0 {
		mmCheckNamespaceAdmin.mock.t.Fatalf("Times of MgmtPrivateServiceClientMock.CheckNamespaceAdmin mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCheckNamespaceAdmin.expectedInvocations, n)
	return mmCheckNamespaceAdmin
}

func (mmCheckNamespaceAdmin *mMgmtPrivateServiceClientMockCheckNamespaceAdmin) invocationsDone() bool {
	if len(mmCheckNamespaceAdmin.expectations) == 0 && mmCheckNamespaceAdmin.defaultExpectation == nil && mmCheckNamespaceAdmin.mock.funcCheckNamespaceAdmin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCheckNamespaceAdmin.mock.afterCheckNamespaceAdminCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCheckNamespaceAdmin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CheckNamespaceAdmin implements mgmtv1beta.MgmtPrivateServiceClient
func (mmCheckNamespaceAdmin *MgmtPrivateServiceClientMock) CheckNamespaceAdmin(ctx context.Context, in *mm_mgmtv1beta.CheckNamespaceAdminRequest, opts ...grpc.CallOption) (cp1 *mm_mgmtv1beta.CheckNamespaceAdminResponse, err error) {
	mm_atomic.AddUint64(&mmCheckNamespaceAdmin.beforeCheckNamespaceAdminCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckNamespaceAdmin.afterCheckNamespaceAdminCounter, 1)

	if mmCheckNamespaceAdmin.inspectFuncCheckNamespaceAdmin != nil {
		mmCheckNamespaceAdmin.inspectFuncCheckNamespaceAdmin(ctx, in, opts...)
	}

	mm_params := MgmtPrivateServiceClientMockCheckNamespaceAdminParams{ctx, in, opts}

	// Record call args
	mmCheckNamespaceAdmin.CheckNamespaceAdminMock.mutex.Lock()
	mmCheckNamespaceAdmin.CheckNamespaceAdminMock.callArgs = append(mmCheckNamespaceAdmin.CheckNamespaceAdminMock.callArgs, &mm_params)
	mmCheckNamespaceAdmin.CheckNamespaceAdminMock.mutex.Unlock()

	for _, e := range mmCheckNamespaceAdmin.CheckNamespaceAdminMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmCheckNamespaceAdmin.CheckNamespaceAdminMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckNamespaceAdmin.CheckNamespaceAdminMock.defaultExpectation.Counter, 1)
		mm_want := mmCheckNamespaceAdmin.CheckNamespaceAdminMock.defaultExpectation.params
		mm_want_ptrs := mmCheckNamespaceAdmin.CheckNamespaceAdminMock.defaultExpectation.paramPtrs

		mm_got := MgmtPrivateServiceClientMockCheckNamespaceAdminParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCheckNamespaceAdmin.t.Errorf("MgmtPrivateServiceClientMock.CheckNamespaceAdmin got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmCheckNamespaceAdmin.t.Errorf("MgmtPrivateServiceClientMock.CheckNamespaceAdmin got unexpected parameter in, want: %#v, got: %#v%s\n", *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmCheckNamespaceAdmin.t.Errorf("MgmtPrivateServiceClientMock.CheckNamespaceAdmin got unexpected parameter opts, want: %#v, got: %#v%s\n", *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheckNamespaceAdmin.t.Errorf("MgmtPrivateServiceClientMock.CheckNamespaceAdmin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheckNamespaceAdmin.CheckNamespaceAdminMock.defaultExpectation.results
		if mm_results == nil {
			mmCheckNamespaceAdmin.t.Fatal("No results are set for the MgmtPrivateServiceClientMock.CheckNamespaceAdmin")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmCheckNamespaceAdmin.funcCheckNamespaceAdmin != nil {
		return mmCheckNamespaceAdmin.funcCheckNamespaceAdmin(ctx, in, opts...)
	}
	mmCheckNamespaceAdmin.t.Fatalf("Unexpected call to MgmtPrivateServiceClientMock.CheckNamespaceAdmin. %v %v %v", ctx, in, opts)
	return
}

// CheckNamespaceAdminAfterCounter returns a count of finished MgmtPrivateServiceClientMock.CheckNamespaceAdmin invocations
func (mmCheckNamespaceAdmin *MgmtPrivateServiceClientMock) CheckNamespaceAdminAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckNamespaceAdmin.afterCheckNamespaceAdminCounter)
}

// CheckNamespaceAdminBeforeCounter returns a count of MgmtPrivateServiceClientMock.CheckNamespaceAdmin invocations
func (mmCheckNamespaceAdmin *MgmtPrivateServiceClientMock) CheckNamespaceAdminBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckNamespaceAdmin.beforeCheckNamespaceAdminCounter)
}

// Calls returns a list of arguments used in each call to MgmtPrivateServiceClientMock.CheckNamespaceAdmin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheckNamespaceAdmin *mMgmtPrivateServiceClientMockCheckNamespaceAdmin) Calls() []*MgmtPrivateServiceClientMockCheckNamespaceAdminParams {
	mmCheckNamespaceAdmin.mutex.RLock()

	argCopy := make([]*MgmtPrivateServiceClientMockCheckNamespaceAdminParams, len(mmCheckNamespaceAdmin.callArgs))
	copy(argCopy, mmCheckNamespaceAdmin.callArgs)

	mmCheckNamespaceAdmin.mutex.RUnlock()

	return argCopy
}

// MinimockCheckNamespaceAdminDone returns true if the count of the CheckNamespaceAdmin invocations corresponds
// the number of defined expectations
func (m *MgmtPrivateServiceClientMock) MinimockCheckNamespaceAdminDone() bool {
	if m.CheckNamespaceAdminMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CheckNamespaceAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CheckNamespaceAdminMock.invocationsDone()
}

// MinimockCheckNamespaceAdminInspect logs each unmet expectation
func (m *MgmtPrivateServiceClientMock) MinimockCheckNamespaceAdminInspect() {
	for _, e := range m.CheckNamespaceAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.CheckNamespaceAdmin with params: %#v", *e.params)
		}
	}

	afterCheckNamespaceAdminCounter := mm_atomic.LoadUint64(&m.afterCheckNamespaceAdminCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CheckNamespaceAdminMock.defaultExpectation != nil && afterCheckNamespaceAdminCounter < 1 {
		if m.CheckNamespaceAdminMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MgmtPrivateServiceClientMock.CheckNamespaceAdmin")
		} else {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.CheckNamespaceAdmin with params: %#v", *m.CheckNamespaceAdminMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckNamespaceAdmin != nil && afterCheckNamespaceAdminCounter < 1 {
		m.t.Error("Expected call to MgmtPrivateServiceClientMock.CheckNamespaceAdmin")
	}

	if !m.CheckNamespaceAdminMock.invocationsDone() && afterCheckNamespaceAdminCounter > 0 {
		m.t.Errorf("Expected %d calls to MgmtPrivateServiceClientMock.CheckNamespaceAdmin but found %d calls",
			mm_atomic.LoadUint64(&m.CheckNamespaceAdminMock.expectedInvocations), afterCheckNamespaceAdminCounter)
	}
}

type mMgmtPrivateServiceClientMockGetOrganizationAdmin struct {
	optional           bool
	mock               *MgmtPrivateServiceClientMock
	defaultExpectation *MgmtPrivateServiceClientMockGetOrganizationAdminExpectation
	expectations       []*MgmtPrivateServiceClientMockGetOrganizationAdminExpectation

	callArgs []*MgmtPrivateServiceClientMockGetOrganizationAdminParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// MgmtPrivateServiceClientMockGetOrganizationAdminExpectation specifies expectation struct of the MgmtPrivateServiceClient.GetOrganizationAdmin
type MgmtPrivateServiceClientMockGetOrganizationAdminExpectation struct {
	mock      *MgmtPrivateServiceClientMock
	params    *MgmtPrivateServiceClientMockGetOrganizationAdminParams
	paramPtrs *MgmtPrivateServiceClientMockGetOrganizationAdminParamPtrs
	results   *MgmtPrivateServiceClientMockGetOrganizationAdminResults
	Counter   uint64
}

// MgmtPrivateServiceClientMockGetOrganizationAdminParams contains parameters of the MgmtPrivateServiceClient.GetOrganizationAdmin
type MgmtPrivateServiceClientMockGetOrganizationAdminParams struct {
	ctx  context.Context
	in   *mm_mgmtv1beta.GetOrganizationAdminRequest
	opts []grpc.CallOption
}

// MgmtPrivateServiceClientMockGetOrganizationAdminParamPtrs contains pointers to parameters of the MgmtPrivateServiceClient.GetOrganizationAdmin
type MgmtPrivateServiceClientMockGetOrganizationAdminParamPtrs struct {
	ctx  *context.Context
	in   **mm_mgmtv1beta.GetOrganizationAdminRequest
	opts *[]grpc.CallOption
}

// MgmtPrivateServiceClientMockGetOrganizationAdminResults contains results of the MgmtPrivateServiceClient.GetOrganizationAdmin
type MgmtPrivateServiceClientMockGetOrganizationAdminResults struct {
	gp1 *mm_mgmtv1beta.GetOrganizationAdminResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetOrganizationAdmin *mMgmtPrivateServiceClientMockGetOrganizationAdmin) Optional() *mMgmtPrivateServiceClientMockGetOrganizationAdmin {
	mmGetOrganizationAdmin.optional = true
	return mmGetOrganizationAdmin
}

// Expect sets up expected params for MgmtPrivateServiceClient.GetOrganizationAdmin
func (mmGetOrganizationAdmin *mMgmtPrivateServiceClientMockGetOrganizationAdmin) Expect(ctx context.Context, in *mm_mgmtv1beta.GetOrganizationAdminRequest, opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockGetOrganizationAdmin {
	if mmGetOrganizationAdmin.mock.funcGetOrganizationAdmin != nil {
		mmGetOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationAdmin mock is already set by Set")
	}

	if mmGetOrganizationAdmin.defaultExpectation == nil {
		mmGetOrganizationAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetOrganizationAdminExpectation{}
	}

	if mmGetOrganizationAdmin.defaultExpectation.paramPtrs != nil {
		mmGetOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationAdmin mock is already set by ExpectParams functions")
	}

	mmGetOrganizationAdmin.defaultExpectation.params = &MgmtPrivateServiceClientMockGetOrganizationAdminParams{ctx, in, opts}
	for _, e := range mmGetOrganizationAdmin.expectations {
		if minimock.Equal(e.params, mmGetOrganizationAdmin.defaultExpectation.params) {
			mmGetOrganizationAdmin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetOrganizationAdmin.defaultExpectation.params)
		}
	}

	return mmGetOrganizationAdmin
}

// ExpectCtxParam1 sets up expected param ctx for MgmtPrivateServiceClient.GetOrganizationAdmin
func (mmGetOrganizationAdmin *mMgmtPrivateServiceClientMockGetOrganizationAdmin) ExpectCtxParam1(ctx context.Context) *mMgmtPrivateServiceClientMockGetOrganizationAdmin {
	if mmGetOrganizationAdmin.mock.funcGetOrganizationAdmin != nil {
		mmGetOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationAdmin mock is already set by Set")
	}

	if mmGetOrganizationAdmin.defaultExpectation == nil {
		mmGetOrganizationAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetOrganizationAdminExpectation{}
	}

	if mmGetOrganizationAdmin.defaultExpectation.params != nil {
		mmGetOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationAdmin mock is already set by Expect")
	}

	if mmGetOrganizationAdmin.defaultExpectation.paramPtrs == nil {
		mmGetOrganizationAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetOrganizationAdminParamPtrs{}
	}
	mmGetOrganizationAdmin.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetOrganizationAdmin
}

// ExpectInParam2 sets up expected param in for MgmtPrivateServiceClient.GetOrganizationAdmin
func (mmGetOrganizationAdmin *mMgmtPrivateServiceClientMockGetOrganizationAdmin) ExpectInParam2(in *mm_mgmtv1beta.GetOrganizationAdminRequest) *mMgmtPrivateServiceClientMockGetOrganizationAdmin {
	if mmGetOrganizationAdmin.mock.funcGetOrganizationAdmin != nil {
		mmGetOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationAdmin mock is already set by Set")
	}

	if mmGetOrganizationAdmin.defaultExpectation == nil {
		mmGetOrganizationAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetOrganizationAdminExpectation{}
	}

	if mmGetOrganizationAdmin.defaultExpectation.params != nil {
		mmGetOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationAdmin mock is already set by Expect")
	}

	if mmGetOrganizationAdmin.defaultExpectation.paramPtrs == nil {
		mmGetOrganizationAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetOrganizationAdminParamPtrs{}
	}
	mmGetOrganizationAdmin.defaultExpectation.paramPtrs.in = &in

	return mmGetOrganizationAdmin
}

// ExpectOptsParam3 sets up expected param opts for MgmtPrivateServiceClient.GetOrganizationAdmin
func (mmGetOrganizationAdmin *mMgmtPrivateServiceClientMockGetOrganizationAdmin) ExpectOptsParam3(opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockGetOrganizationAdmin {
	if mmGetOrganizationAdmin.mock.funcGetOrganizationAdmin != nil {
		mmGetOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationAdmin mock is already set by Set")
	}

	if mmGetOrganizationAdmin.defaultExpectation == nil {
		mmGetOrganizationAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetOrganizationAdminExpectation{}
	}

	if mmGetOrganizationAdmin.defaultExpectation.params != nil {
		mmGetOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationAdmin mock is already set by Expect")
	}

	if mmGetOrganizationAdmin.defaultExpectation.paramPtrs == nil {
		mmGetOrganizationAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetOrganizationAdminParamPtrs{}
	}
	mmGetOrganizationAdmin.defaultExpectation.paramPtrs.opts = &opts

	return mmGetOrganizationAdmin
}

// Inspect accepts an inspector function that has same arguments as the MgmtPrivateServiceClient.GetOrganizationAdmin
func (mmGetOrganizationAdmin *mMgmtPrivateServiceClientMockGetOrganizationAdmin) Inspect(f func(ctx context.Context, in *mm_mgmtv1beta.GetOrganizationAdminRequest, opts ...grpc.CallOption)) *mMgmtPrivateServiceClientMockGetOrganizationAdmin {
	if mmGetOrganizationAdmin.mock.inspectFuncGetOrganizationAdmin != nil {
		mmGetOrganizationAdmin.mock.t.Fatalf("Inspect function is already set for MgmtPrivateServiceClientMock.GetOrganizationAdmin")
	}

	mmGetOrganizationAdmin.mock.inspectFuncGetOrganizationAdmin = f

	return mmGetOrganizationAdmin
}

// Return sets up results that will be returned by MgmtPrivateServiceClient.GetOrganizationAdmin
func (mmGetOrganizationAdmin *mMgmtPrivateServiceClientMockGetOrganizationAdmin) Return(gp1 *mm_mgmtv1beta.GetOrganizationAdminResponse, err error) *MgmtPrivateServiceClientMock {
	if mmGetOrganizationAdmin.mock.funcGetOrganizationAdmin != nil {
		mmGetOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationAdmin mock is already set by Set")
	}

	if mmGetOrganizationAdmin.defaultExpectation == nil {
		mmGetOrganizationAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetOrganizationAdminExpectation{mock: mmGetOrganizationAdmin.mock}
	}
	mmGetOrganizationAdmin.defaultExpectation.results = &MgmtPrivateServiceClientMockGetOrganizationAdminResults{gp1, err}
	return mmGetOrganizationAdmin.mock
}

// Set uses given function f to mock the MgmtPrivateServiceClient.GetOrganizationAdmin method
func (mmGetOrganizationAdmin *mMgmtPrivateServiceClientMockGetOrganizationAdmin) Set(f func(ctx context.Context, in *mm_mgmtv1beta.GetOrganizationAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetOrganizationAdminResponse, err error)) *MgmtPrivateServiceClientMock {
	if mmGetOrganizationAdmin.defaultExpectation != nil {
		mmGetOrganizationAdmin.mock.t.Fatalf("Default expectation is already set for the MgmtPrivateServiceClient.GetOrganizationAdmin method")
	}

	if len(mmGetOrganizationAdmin.expectations) > 0 {
		mmGetOrganizationAdmin.mock.t.Fatalf("Some expectations are already set for the MgmtPrivateServiceClient.GetOrganizationAdmin method")
	}

	mmGetOrganizationAdmin.mock.funcGetOrganizationAdmin = f
	return mmGetOrganizationAdmin.mock
}

// When sets expectation for the MgmtPrivateServiceClient.GetOrganizationAdmin which will trigger the result defined by the following
// Then helper
func (mmGetOrganizationAdmin *mMgmtPrivateServiceClientMockGetOrganizationAdmin) When(ctx context.Context, in *mm_mgmtv1beta.GetOrganizationAdminRequest, opts ...grpc.CallOption) *MgmtPrivateServiceClientMockGetOrganizationAdminExpectation {
	if mmGetOrganizationAdmin.mock.funcGetOrganizationAdmin != nil {
		mmGetOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationAdmin mock is already set by Set")
	}

	expectation := &MgmtPrivateServiceClientMockGetOrganizationAdminExpectation{
		mock:   mmGetOrganizationAdmin.mock,
		params: &MgmtPrivateServiceClientMockGetOrganizationAdminParams{ctx, in, opts},
	}
	mmGetOrganizationAdmin.expectations = append(mmGetOrganizationAdmin.expectations, expectation)
	return expectation
}

// Then sets up MgmtPrivateServiceClient.GetOrganizationAdmin return parameters for the expectation previously defined by the When method
func (e *MgmtPrivateServiceClientMockGetOrganizationAdminExpectation) Then(gp1 *mm_mgmtv1beta.GetOrganizationAdminResponse, err error) *MgmtPrivateServiceClientMock {
	e.results = &MgmtPrivateServiceClientMockGetOrganizationAdminResults{gp1, err}
	return e.mock
}

// Times sets number of times MgmtPrivateServiceClient.GetOrganizationAdmin should be invoked
func (mmGetOrganizationAdmin *mMgmtPrivateServiceClientMockGetOrganizationAdmin) Times(n uint64) *mMgmtPrivateServiceClientMockGetOrganizationAdmin {
	if n == 0 {
		mmGetOrganizationAdmin.mock.t.Fatalf("Times of MgmtPrivateServiceClientMock.GetOrganizationAdmin mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetOrganizationAdmin.expectedInvocations, n)
	return mmGetOrganizationAdmin
}

func (mmGetOrganizationAdmin *mMgmtPrivateServiceClientMockGetOrganizationAdmin) invocationsDone() bool {
	if len(mmGetOrganizationAdmin.expectations) == 0 && mmGetOrganizationAdmin.defaultExpectation == nil && mmGetOrganizationAdmin.mock.funcGetOrganizationAdmin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetOrganizationAdmin.mock.afterGetOrganizationAdminCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetOrganizationAdmin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetOrganizationAdmin implements mgmtv1beta.MgmtPrivateServiceClient
func (mmGetOrganizationAdmin *MgmtPrivateServiceClientMock) GetOrganizationAdmin(ctx context.Context, in *mm_mgmtv1beta.GetOrganizationAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetOrganizationAdminResponse, err error) {
	mm_atomic.AddUint64(&mmGetOrganizationAdmin.beforeGetOrganizationAdminCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOrganizationAdmin.afterGetOrganizationAdminCounter, 1)

	if mmGetOrganizationAdmin.inspectFuncGetOrganizationAdmin != nil {
		mmGetOrganizationAdmin.inspectFuncGetOrganizationAdmin(ctx, in, opts...)
	}

	mm_params := MgmtPrivateServiceClientMockGetOrganizationAdminParams{ctx, in, opts}

	// Record call args
	mmGetOrganizationAdmin.GetOrganizationAdminMock.mutex.Lock()
	mmGetOrganizationAdmin.GetOrganizationAdminMock.callArgs = append(mmGetOrganizationAdmin.GetOrganizationAdminMock.callArgs, &mm_params)
	mmGetOrganizationAdmin.GetOrganizationAdminMock.mutex.Unlock()

	for _, e := range mmGetOrganizationAdmin.GetOrganizationAdminMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetOrganizationAdmin.GetOrganizationAdminMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOrganizationAdmin.GetOrganizationAdminMock.defaultExpectation.Counter, 1)
		mm_want := mmGetOrganizationAdmin.GetOrganizationAdminMock.defaultExpectation.params
		mm_want_ptrs := mmGetOrganizationAdmin.GetOrganizationAdminMock.defaultExpectation.paramPtrs

		mm_got := MgmtPrivateServiceClientMockGetOrganizationAdminParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetOrganizationAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetOrganizationAdmin got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmGetOrganizationAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetOrganizationAdmin got unexpected parameter in, want: %#v, got: %#v%s\n", *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmGetOrganizationAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetOrganizationAdmin got unexpected parameter opts, want: %#v, got: %#v%s\n", *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetOrganizationAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetOrganizationAdmin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetOrganizationAdmin.GetOrganizationAdminMock.defaultExpectation.results
		if mm_results == nil {
			mmGetOrganizationAdmin.t.Fatal("No results are set for the MgmtPrivateServiceClientMock.GetOrganizationAdmin")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetOrganizationAdmin.funcGetOrganizationAdmin != nil {
		return mmGetOrganizationAdmin.funcGetOrganizationAdmin(ctx, in, opts...)
	}
	mmGetOrganizationAdmin.t.Fatalf("Unexpected call to MgmtPrivateServiceClientMock.GetOrganizationAdmin. %v %v %v", ctx, in, opts)
	return
}

// GetOrganizationAdminAfterCounter returns a count of finished MgmtPrivateServiceClientMock.GetOrganizationAdmin invocations
func (mmGetOrganizationAdmin *MgmtPrivateServiceClientMock) GetOrganizationAdminAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOrganizationAdmin.afterGetOrganizationAdminCounter)
}

// GetOrganizationAdminBeforeCounter returns a count of MgmtPrivateServiceClientMock.GetOrganizationAdmin invocations
func (mmGetOrganizationAdmin *MgmtPrivateServiceClientMock) GetOrganizationAdminBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOrganizationAdmin.beforeGetOrganizationAdminCounter)
}

// Calls returns a list of arguments used in each call to MgmtPrivateServiceClientMock.GetOrganizationAdmin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetOrganizationAdmin *mMgmtPrivateServiceClientMockGetOrganizationAdmin) Calls() []*MgmtPrivateServiceClientMockGetOrganizationAdminParams {
	mmGetOrganizationAdmin.mutex.RLock()

	argCopy := make([]*MgmtPrivateServiceClientMockGetOrganizationAdminParams, len(mmGetOrganizationAdmin.callArgs))
	copy(argCopy, mmGetOrganizationAdmin.callArgs)

	mmGetOrganizationAdmin.mutex.RUnlock()

	return argCopy
}

// MinimockGetOrganizationAdminDone returns true if the count of the GetOrganizationAdmin invocations corresponds
// the number of defined expectations
func (m *MgmtPrivateServiceClientMock) MinimockGetOrganizationAdminDone() bool {
	if m.GetOrganizationAdminMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetOrganizationAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetOrganizationAdminMock.invocationsDone()
}

// MinimockGetOrganizationAdminInspect logs each unmet expectation
func (m *MgmtPrivateServiceClientMock) MinimockGetOrganizationAdminInspect() {
	for _, e := range m.GetOrganizationAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.GetOrganizationAdmin with params: %#v", *e.params)
		}
	}

	afterGetOrganizationAdminCounter := mm_atomic.LoadUint64(&m.afterGetOrganizationAdminCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetOrganizationAdminMock.defaultExpectation != nil && afterGetOrganizationAdminCounter < 1 {
		if m.GetOrganizationAdminMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MgmtPrivateServiceClientMock.GetOrganizationAdmin")
		} else {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.GetOrganizationAdmin with params: %#v", *m.GetOrganizationAdminMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOrganizationAdmin != nil && afterGetOrganizationAdminCounter < 1 {
		m.t.Error("Expected call to MgmtPrivateServiceClientMock.GetOrganizationAdmin")
	}

	if !m.GetOrganizationAdminMock.invocationsDone() && afterGetOrganizationAdminCounter > 0 {
		m.t.Errorf("Expected %d calls to MgmtPrivateServiceClientMock.GetOrganizationAdmin but found %d calls",
			mm_atomic.LoadUint64(&m.GetOrganizationAdminMock.expectedInvocations), afterGetOrganizationAdminCounter)
	}
}

type mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin struct {
	optional           bool
	mock               *MgmtPrivateServiceClientMock
	defaultExpectation *MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminExpectation
	expectations       []*MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminExpectation

	callArgs []*MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminExpectation specifies expectation struct of the MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin
type MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminExpectation struct {
	mock      *MgmtPrivateServiceClientMock
	params    *MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParams
	paramPtrs *MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParamPtrs
	results   *MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminResults
	Counter   uint64
}

// MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParams contains parameters of the MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin
type MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParams struct {
	ctx  context.Context
	in   *mm_mgmtv1beta.GetOrganizationSubscriptionAdminRequest
	opts []grpc.CallOption
}

// MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParamPtrs contains pointers to parameters of the MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin
type MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParamPtrs struct {
	ctx  *context.Context
	in   **mm_mgmtv1beta.GetOrganizationSubscriptionAdminRequest
	opts *[]grpc.CallOption
}

// MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminResults contains results of the MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin
type MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminResults struct {
	gp1 *mm_mgmtv1beta.GetOrganizationSubscriptionAdminResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetOrganizationSubscriptionAdmin *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin) Optional() *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin {
	mmGetOrganizationSubscriptionAdmin.optional = true
	return mmGetOrganizationSubscriptionAdmin
}

// Expect sets up expected params for MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin
func (mmGetOrganizationSubscriptionAdmin *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin) Expect(ctx context.Context, in *mm_mgmtv1beta.GetOrganizationSubscriptionAdminRequest, opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin {
	if mmGetOrganizationSubscriptionAdmin.mock.funcGetOrganizationSubscriptionAdmin != nil {
		mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin mock is already set by Set")
	}

	if mmGetOrganizationSubscriptionAdmin.defaultExpectation == nil {
		mmGetOrganizationSubscriptionAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminExpectation{}
	}

	if mmGetOrganizationSubscriptionAdmin.defaultExpectation.paramPtrs != nil {
		mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin mock is already set by ExpectParams functions")
	}

	mmGetOrganizationSubscriptionAdmin.defaultExpectation.params = &MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParams{ctx, in, opts}
	for _, e := range mmGetOrganizationSubscriptionAdmin.expectations {
		if minimock.Equal(e.params, mmGetOrganizationSubscriptionAdmin.defaultExpectation.params) {
			mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetOrganizationSubscriptionAdmin.defaultExpectation.params)
		}
	}

	return mmGetOrganizationSubscriptionAdmin
}

// ExpectCtxParam1 sets up expected param ctx for MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin
func (mmGetOrganizationSubscriptionAdmin *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin) ExpectCtxParam1(ctx context.Context) *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin {
	if mmGetOrganizationSubscriptionAdmin.mock.funcGetOrganizationSubscriptionAdmin != nil {
		mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin mock is already set by Set")
	}

	if mmGetOrganizationSubscriptionAdmin.defaultExpectation == nil {
		mmGetOrganizationSubscriptionAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminExpectation{}
	}

	if mmGetOrganizationSubscriptionAdmin.defaultExpectation.params != nil {
		mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin mock is already set by Expect")
	}

	if mmGetOrganizationSubscriptionAdmin.defaultExpectation.paramPtrs == nil {
		mmGetOrganizationSubscriptionAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParamPtrs{}
	}
	mmGetOrganizationSubscriptionAdmin.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetOrganizationSubscriptionAdmin
}

// ExpectInParam2 sets up expected param in for MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin
func (mmGetOrganizationSubscriptionAdmin *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin) ExpectInParam2(in *mm_mgmtv1beta.GetOrganizationSubscriptionAdminRequest) *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin {
	if mmGetOrganizationSubscriptionAdmin.mock.funcGetOrganizationSubscriptionAdmin != nil {
		mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin mock is already set by Set")
	}

	if mmGetOrganizationSubscriptionAdmin.defaultExpectation == nil {
		mmGetOrganizationSubscriptionAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminExpectation{}
	}

	if mmGetOrganizationSubscriptionAdmin.defaultExpectation.params != nil {
		mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin mock is already set by Expect")
	}

	if mmGetOrganizationSubscriptionAdmin.defaultExpectation.paramPtrs == nil {
		mmGetOrganizationSubscriptionAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParamPtrs{}
	}
	mmGetOrganizationSubscriptionAdmin.defaultExpectation.paramPtrs.in = &in

	return mmGetOrganizationSubscriptionAdmin
}

// ExpectOptsParam3 sets up expected param opts for MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin
func (mmGetOrganizationSubscriptionAdmin *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin) ExpectOptsParam3(opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin {
	if mmGetOrganizationSubscriptionAdmin.mock.funcGetOrganizationSubscriptionAdmin != nil {
		mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin mock is already set by Set")
	}

	if mmGetOrganizationSubscriptionAdmin.defaultExpectation == nil {
		mmGetOrganizationSubscriptionAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminExpectation{}
	}

	if mmGetOrganizationSubscriptionAdmin.defaultExpectation.params != nil {
		mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin mock is already set by Expect")
	}

	if mmGetOrganizationSubscriptionAdmin.defaultExpectation.paramPtrs == nil {
		mmGetOrganizationSubscriptionAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParamPtrs{}
	}
	mmGetOrganizationSubscriptionAdmin.defaultExpectation.paramPtrs.opts = &opts

	return mmGetOrganizationSubscriptionAdmin
}

// Inspect accepts an inspector function that has same arguments as the MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin
func (mmGetOrganizationSubscriptionAdmin *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin) Inspect(f func(ctx context.Context, in *mm_mgmtv1beta.GetOrganizationSubscriptionAdminRequest, opts ...grpc.CallOption)) *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin {
	if mmGetOrganizationSubscriptionAdmin.mock.inspectFuncGetOrganizationSubscriptionAdmin != nil {
		mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("Inspect function is already set for MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin")
	}

	mmGetOrganizationSubscriptionAdmin.mock.inspectFuncGetOrganizationSubscriptionAdmin = f

	return mmGetOrganizationSubscriptionAdmin
}

// Return sets up results that will be returned by MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin
func (mmGetOrganizationSubscriptionAdmin *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin) Return(gp1 *mm_mgmtv1beta.GetOrganizationSubscriptionAdminResponse, err error) *MgmtPrivateServiceClientMock {
	if mmGetOrganizationSubscriptionAdmin.mock.funcGetOrganizationSubscriptionAdmin != nil {
		mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin mock is already set by Set")
	}

	if mmGetOrganizationSubscriptionAdmin.defaultExpectation == nil {
		mmGetOrganizationSubscriptionAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminExpectation{mock: mmGetOrganizationSubscriptionAdmin.mock}
	}
	mmGetOrganizationSubscriptionAdmin.defaultExpectation.results = &MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminResults{gp1, err}
	return mmGetOrganizationSubscriptionAdmin.mock
}

// Set uses given function f to mock the MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin method
func (mmGetOrganizationSubscriptionAdmin *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin) Set(f func(ctx context.Context, in *mm_mgmtv1beta.GetOrganizationSubscriptionAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetOrganizationSubscriptionAdminResponse, err error)) *MgmtPrivateServiceClientMock {
	if mmGetOrganizationSubscriptionAdmin.defaultExpectation != nil {
		mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("Default expectation is already set for the MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin method")
	}

	if len(mmGetOrganizationSubscriptionAdmin.expectations) > 0 {
		mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("Some expectations are already set for the MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin method")
	}

	mmGetOrganizationSubscriptionAdmin.mock.funcGetOrganizationSubscriptionAdmin = f
	return mmGetOrganizationSubscriptionAdmin.mock
}

// When sets expectation for the MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin which will trigger the result defined by the following
// Then helper
func (mmGetOrganizationSubscriptionAdmin *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin) When(ctx context.Context, in *mm_mgmtv1beta.GetOrganizationSubscriptionAdminRequest, opts ...grpc.CallOption) *MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminExpectation {
	if mmGetOrganizationSubscriptionAdmin.mock.funcGetOrganizationSubscriptionAdmin != nil {
		mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin mock is already set by Set")
	}

	expectation := &MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminExpectation{
		mock:   mmGetOrganizationSubscriptionAdmin.mock,
		params: &MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParams{ctx, in, opts},
	}
	mmGetOrganizationSubscriptionAdmin.expectations = append(mmGetOrganizationSubscriptionAdmin.expectations, expectation)
	return expectation
}

// Then sets up MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin return parameters for the expectation previously defined by the When method
func (e *MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminExpectation) Then(gp1 *mm_mgmtv1beta.GetOrganizationSubscriptionAdminResponse, err error) *MgmtPrivateServiceClientMock {
	e.results = &MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminResults{gp1, err}
	return e.mock
}

// Times sets number of times MgmtPrivateServiceClient.GetOrganizationSubscriptionAdmin should be invoked
func (mmGetOrganizationSubscriptionAdmin *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin) Times(n uint64) *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin {
	if n == 0 {
		mmGetOrganizationSubscriptionAdmin.mock.t.Fatalf("Times of MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetOrganizationSubscriptionAdmin.expectedInvocations, n)
	return mmGetOrganizationSubscriptionAdmin
}

func (mmGetOrganizationSubscriptionAdmin *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin) invocationsDone() bool {
	if len(mmGetOrganizationSubscriptionAdmin.expectations) == 0 && mmGetOrganizationSubscriptionAdmin.defaultExpectation == nil && mmGetOrganizationSubscriptionAdmin.mock.funcGetOrganizationSubscriptionAdmin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetOrganizationSubscriptionAdmin.mock.afterGetOrganizationSubscriptionAdminCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetOrganizationSubscriptionAdmin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetOrganizationSubscriptionAdmin implements mgmtv1beta.MgmtPrivateServiceClient
func (mmGetOrganizationSubscriptionAdmin *MgmtPrivateServiceClientMock) GetOrganizationSubscriptionAdmin(ctx context.Context, in *mm_mgmtv1beta.GetOrganizationSubscriptionAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetOrganizationSubscriptionAdminResponse, err error) {
	mm_atomic.AddUint64(&mmGetOrganizationSubscriptionAdmin.beforeGetOrganizationSubscriptionAdminCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOrganizationSubscriptionAdmin.afterGetOrganizationSubscriptionAdminCounter, 1)

	if mmGetOrganizationSubscriptionAdmin.inspectFuncGetOrganizationSubscriptionAdmin != nil {
		mmGetOrganizationSubscriptionAdmin.inspectFuncGetOrganizationSubscriptionAdmin(ctx, in, opts...)
	}

	mm_params := MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParams{ctx, in, opts}

	// Record call args
	mmGetOrganizationSubscriptionAdmin.GetOrganizationSubscriptionAdminMock.mutex.Lock()
	mmGetOrganizationSubscriptionAdmin.GetOrganizationSubscriptionAdminMock.callArgs = append(mmGetOrganizationSubscriptionAdmin.GetOrganizationSubscriptionAdminMock.callArgs, &mm_params)
	mmGetOrganizationSubscriptionAdmin.GetOrganizationSubscriptionAdminMock.mutex.Unlock()

	for _, e := range mmGetOrganizationSubscriptionAdmin.GetOrganizationSubscriptionAdminMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetOrganizationSubscriptionAdmin.GetOrganizationSubscriptionAdminMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOrganizationSubscriptionAdmin.GetOrganizationSubscriptionAdminMock.defaultExpectation.Counter, 1)
		mm_want := mmGetOrganizationSubscriptionAdmin.GetOrganizationSubscriptionAdminMock.defaultExpectation.params
		mm_want_ptrs := mmGetOrganizationSubscriptionAdmin.GetOrganizationSubscriptionAdminMock.defaultExpectation.paramPtrs

		mm_got := MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetOrganizationSubscriptionAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmGetOrganizationSubscriptionAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin got unexpected parameter in, want: %#v, got: %#v%s\n", *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmGetOrganizationSubscriptionAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin got unexpected parameter opts, want: %#v, got: %#v%s\n", *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetOrganizationSubscriptionAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetOrganizationSubscriptionAdmin.GetOrganizationSubscriptionAdminMock.defaultExpectation.results
		if mm_results == nil {
			mmGetOrganizationSubscriptionAdmin.t.Fatal("No results are set for the MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetOrganizationSubscriptionAdmin.funcGetOrganizationSubscriptionAdmin != nil {
		return mmGetOrganizationSubscriptionAdmin.funcGetOrganizationSubscriptionAdmin(ctx, in, opts...)
	}
	mmGetOrganizationSubscriptionAdmin.t.Fatalf("Unexpected call to MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin. %v %v %v", ctx, in, opts)
	return
}

// GetOrganizationSubscriptionAdminAfterCounter returns a count of finished MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin invocations
func (mmGetOrganizationSubscriptionAdmin *MgmtPrivateServiceClientMock) GetOrganizationSubscriptionAdminAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOrganizationSubscriptionAdmin.afterGetOrganizationSubscriptionAdminCounter)
}

// GetOrganizationSubscriptionAdminBeforeCounter returns a count of MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin invocations
func (mmGetOrganizationSubscriptionAdmin *MgmtPrivateServiceClientMock) GetOrganizationSubscriptionAdminBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOrganizationSubscriptionAdmin.beforeGetOrganizationSubscriptionAdminCounter)
}

// Calls returns a list of arguments used in each call to MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetOrganizationSubscriptionAdmin *mMgmtPrivateServiceClientMockGetOrganizationSubscriptionAdmin) Calls() []*MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParams {
	mmGetOrganizationSubscriptionAdmin.mutex.RLock()

	argCopy := make([]*MgmtPrivateServiceClientMockGetOrganizationSubscriptionAdminParams, len(mmGetOrganizationSubscriptionAdmin.callArgs))
	copy(argCopy, mmGetOrganizationSubscriptionAdmin.callArgs)

	mmGetOrganizationSubscriptionAdmin.mutex.RUnlock()

	return argCopy
}

// MinimockGetOrganizationSubscriptionAdminDone returns true if the count of the GetOrganizationSubscriptionAdmin invocations corresponds
// the number of defined expectations
func (m *MgmtPrivateServiceClientMock) MinimockGetOrganizationSubscriptionAdminDone() bool {
	if m.GetOrganizationSubscriptionAdminMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetOrganizationSubscriptionAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetOrganizationSubscriptionAdminMock.invocationsDone()
}

// MinimockGetOrganizationSubscriptionAdminInspect logs each unmet expectation
func (m *MgmtPrivateServiceClientMock) MinimockGetOrganizationSubscriptionAdminInspect() {
	for _, e := range m.GetOrganizationSubscriptionAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin with params: %#v", *e.params)
		}
	}

	afterGetOrganizationSubscriptionAdminCounter := mm_atomic.LoadUint64(&m.afterGetOrganizationSubscriptionAdminCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetOrganizationSubscriptionAdminMock.defaultExpectation != nil && afterGetOrganizationSubscriptionAdminCounter < 1 {
		if m.GetOrganizationSubscriptionAdminMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin")
		} else {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin with params: %#v", *m.GetOrganizationSubscriptionAdminMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOrganizationSubscriptionAdmin != nil && afterGetOrganizationSubscriptionAdminCounter < 1 {
		m.t.Error("Expected call to MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin")
	}

	if !m.GetOrganizationSubscriptionAdminMock.invocationsDone() && afterGetOrganizationSubscriptionAdminCounter > 0 {
		m.t.Errorf("Expected %d calls to MgmtPrivateServiceClientMock.GetOrganizationSubscriptionAdmin but found %d calls",
			mm_atomic.LoadUint64(&m.GetOrganizationSubscriptionAdminMock.expectedInvocations), afterGetOrganizationSubscriptionAdminCounter)
	}
}

type mMgmtPrivateServiceClientMockGetRemainingCreditAdmin struct {
	optional           bool
	mock               *MgmtPrivateServiceClientMock
	defaultExpectation *MgmtPrivateServiceClientMockGetRemainingCreditAdminExpectation
	expectations       []*MgmtPrivateServiceClientMockGetRemainingCreditAdminExpectation

	callArgs []*MgmtPrivateServiceClientMockGetRemainingCreditAdminParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// MgmtPrivateServiceClientMockGetRemainingCreditAdminExpectation specifies expectation struct of the MgmtPrivateServiceClient.GetRemainingCreditAdmin
type MgmtPrivateServiceClientMockGetRemainingCreditAdminExpectation struct {
	mock      *MgmtPrivateServiceClientMock
	params    *MgmtPrivateServiceClientMockGetRemainingCreditAdminParams
	paramPtrs *MgmtPrivateServiceClientMockGetRemainingCreditAdminParamPtrs
	results   *MgmtPrivateServiceClientMockGetRemainingCreditAdminResults
	Counter   uint64
}

// MgmtPrivateServiceClientMockGetRemainingCreditAdminParams contains parameters of the MgmtPrivateServiceClient.GetRemainingCreditAdmin
type MgmtPrivateServiceClientMockGetRemainingCreditAdminParams struct {
	ctx  context.Context
	in   *mm_mgmtv1beta.GetRemainingCreditAdminRequest
	opts []grpc.CallOption
}

// MgmtPrivateServiceClientMockGetRemainingCreditAdminParamPtrs contains pointers to parameters of the MgmtPrivateServiceClient.GetRemainingCreditAdmin
type MgmtPrivateServiceClientMockGetRemainingCreditAdminParamPtrs struct {
	ctx  *context.Context
	in   **mm_mgmtv1beta.GetRemainingCreditAdminRequest
	opts *[]grpc.CallOption
}

// MgmtPrivateServiceClientMockGetRemainingCreditAdminResults contains results of the MgmtPrivateServiceClient.GetRemainingCreditAdmin
type MgmtPrivateServiceClientMockGetRemainingCreditAdminResults struct {
	gp1 *mm_mgmtv1beta.GetRemainingCreditAdminResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetRemainingCreditAdmin *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin) Optional() *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin {
	mmGetRemainingCreditAdmin.optional = true
	return mmGetRemainingCreditAdmin
}

// Expect sets up expected params for MgmtPrivateServiceClient.GetRemainingCreditAdmin
func (mmGetRemainingCreditAdmin *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin) Expect(ctx context.Context, in *mm_mgmtv1beta.GetRemainingCreditAdminRequest, opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin {
	if mmGetRemainingCreditAdmin.mock.funcGetRemainingCreditAdmin != nil {
		mmGetRemainingCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetRemainingCreditAdmin mock is already set by Set")
	}

	if mmGetRemainingCreditAdmin.defaultExpectation == nil {
		mmGetRemainingCreditAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetRemainingCreditAdminExpectation{}
	}

	if mmGetRemainingCreditAdmin.defaultExpectation.paramPtrs != nil {
		mmGetRemainingCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetRemainingCreditAdmin mock is already set by ExpectParams functions")
	}

	mmGetRemainingCreditAdmin.defaultExpectation.params = &MgmtPrivateServiceClientMockGetRemainingCreditAdminParams{ctx, in, opts}
	for _, e := range mmGetRemainingCreditAdmin.expectations {
		if minimock.Equal(e.params, mmGetRemainingCreditAdmin.defaultExpectation.params) {
			mmGetRemainingCreditAdmin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetRemainingCreditAdmin.defaultExpectation.params)
		}
	}

	return mmGetRemainingCreditAdmin
}

// ExpectCtxParam1 sets up expected param ctx for MgmtPrivateServiceClient.GetRemainingCreditAdmin
func (mmGetRemainingCreditAdmin *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin) ExpectCtxParam1(ctx context.Context) *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin {
	if mmGetRemainingCreditAdmin.mock.funcGetRemainingCreditAdmin != nil {
		mmGetRemainingCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetRemainingCreditAdmin mock is already set by Set")
	}

	if mmGetRemainingCreditAdmin.defaultExpectation == nil {
		mmGetRemainingCreditAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetRemainingCreditAdminExpectation{}
	}

	if mmGetRemainingCreditAdmin.defaultExpectation.params != nil {
		mmGetRemainingCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetRemainingCreditAdmin mock is already set by Expect")
	}

	if mmGetRemainingCreditAdmin.defaultExpectation.paramPtrs == nil {
		mmGetRemainingCreditAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetRemainingCreditAdminParamPtrs{}
	}
	mmGetRemainingCreditAdmin.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetRemainingCreditAdmin
}

// ExpectInParam2 sets up expected param in for MgmtPrivateServiceClient.GetRemainingCreditAdmin
func (mmGetRemainingCreditAdmin *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin) ExpectInParam2(in *mm_mgmtv1beta.GetRemainingCreditAdminRequest) *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin {
	if mmGetRemainingCreditAdmin.mock.funcGetRemainingCreditAdmin != nil {
		mmGetRemainingCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetRemainingCreditAdmin mock is already set by Set")
	}

	if mmGetRemainingCreditAdmin.defaultExpectation == nil {
		mmGetRemainingCreditAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetRemainingCreditAdminExpectation{}
	}

	if mmGetRemainingCreditAdmin.defaultExpectation.params != nil {
		mmGetRemainingCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetRemainingCreditAdmin mock is already set by Expect")
	}

	if mmGetRemainingCreditAdmin.defaultExpectation.paramPtrs == nil {
		mmGetRemainingCreditAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetRemainingCreditAdminParamPtrs{}
	}
	mmGetRemainingCreditAdmin.defaultExpectation.paramPtrs.in = &in

	return mmGetRemainingCreditAdmin
}

// ExpectOptsParam3 sets up expected param opts for MgmtPrivateServiceClient.GetRemainingCreditAdmin
func (mmGetRemainingCreditAdmin *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin) ExpectOptsParam3(opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin {
	if mmGetRemainingCreditAdmin.mock.funcGetRemainingCreditAdmin != nil {
		mmGetRemainingCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetRemainingCreditAdmin mock is already set by Set")
	}

	if mmGetRemainingCreditAdmin.defaultExpectation == nil {
		mmGetRemainingCreditAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetRemainingCreditAdminExpectation{}
	}

	if mmGetRemainingCreditAdmin.defaultExpectation.params != nil {
		mmGetRemainingCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetRemainingCreditAdmin mock is already set by Expect")
	}

	if mmGetRemainingCreditAdmin.defaultExpectation.paramPtrs == nil {
		mmGetRemainingCreditAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetRemainingCreditAdminParamPtrs{}
	}
	mmGetRemainingCreditAdmin.defaultExpectation.paramPtrs.opts = &opts

	return mmGetRemainingCreditAdmin
}

// Inspect accepts an inspector function that has same arguments as the MgmtPrivateServiceClient.GetRemainingCreditAdmin
func (mmGetRemainingCreditAdmin *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin) Inspect(f func(ctx context.Context, in *mm_mgmtv1beta.GetRemainingCreditAdminRequest, opts ...grpc.CallOption)) *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin {
	if mmGetRemainingCreditAdmin.mock.inspectFuncGetRemainingCreditAdmin != nil {
		mmGetRemainingCreditAdmin.mock.t.Fatalf("Inspect function is already set for MgmtPrivateServiceClientMock.GetRemainingCreditAdmin")
	}

	mmGetRemainingCreditAdmin.mock.inspectFuncGetRemainingCreditAdmin = f

	return mmGetRemainingCreditAdmin
}

// Return sets up results that will be returned by MgmtPrivateServiceClient.GetRemainingCreditAdmin
func (mmGetRemainingCreditAdmin *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin) Return(gp1 *mm_mgmtv1beta.GetRemainingCreditAdminResponse, err error) *MgmtPrivateServiceClientMock {
	if mmGetRemainingCreditAdmin.mock.funcGetRemainingCreditAdmin != nil {
		mmGetRemainingCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetRemainingCreditAdmin mock is already set by Set")
	}

	if mmGetRemainingCreditAdmin.defaultExpectation == nil {
		mmGetRemainingCreditAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetRemainingCreditAdminExpectation{mock: mmGetRemainingCreditAdmin.mock}
	}
	mmGetRemainingCreditAdmin.defaultExpectation.results = &MgmtPrivateServiceClientMockGetRemainingCreditAdminResults{gp1, err}
	return mmGetRemainingCreditAdmin.mock
}

// Set uses given function f to mock the MgmtPrivateServiceClient.GetRemainingCreditAdmin method
func (mmGetRemainingCreditAdmin *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin) Set(f func(ctx context.Context, in *mm_mgmtv1beta.GetRemainingCreditAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetRemainingCreditAdminResponse, err error)) *MgmtPrivateServiceClientMock {
	if mmGetRemainingCreditAdmin.defaultExpectation != nil {
		mmGetRemainingCreditAdmin.mock.t.Fatalf("Default expectation is already set for the MgmtPrivateServiceClient.GetRemainingCreditAdmin method")
	}

	if len(mmGetRemainingCreditAdmin.expectations) > 0 {
		mmGetRemainingCreditAdmin.mock.t.Fatalf("Some expectations are already set for the MgmtPrivateServiceClient.GetRemainingCreditAdmin method")
	}

	mmGetRemainingCreditAdmin.mock.funcGetRemainingCreditAdmin = f
	return mmGetRemainingCreditAdmin.mock
}

// When sets expectation for the MgmtPrivateServiceClient.GetRemainingCreditAdmin which will trigger the result defined by the following
// Then helper
func (mmGetRemainingCreditAdmin *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin) When(ctx context.Context, in *mm_mgmtv1beta.GetRemainingCreditAdminRequest, opts ...grpc.CallOption) *MgmtPrivateServiceClientMockGetRemainingCreditAdminExpectation {
	if mmGetRemainingCreditAdmin.mock.funcGetRemainingCreditAdmin != nil {
		mmGetRemainingCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetRemainingCreditAdmin mock is already set by Set")
	}

	expectation := &MgmtPrivateServiceClientMockGetRemainingCreditAdminExpectation{
		mock:   mmGetRemainingCreditAdmin.mock,
		params: &MgmtPrivateServiceClientMockGetRemainingCreditAdminParams{ctx, in, opts},
	}
	mmGetRemainingCreditAdmin.expectations = append(mmGetRemainingCreditAdmin.expectations, expectation)
	return expectation
}

// Then sets up MgmtPrivateServiceClient.GetRemainingCreditAdmin return parameters for the expectation previously defined by the When method
func (e *MgmtPrivateServiceClientMockGetRemainingCreditAdminExpectation) Then(gp1 *mm_mgmtv1beta.GetRemainingCreditAdminResponse, err error) *MgmtPrivateServiceClientMock {
	e.results = &MgmtPrivateServiceClientMockGetRemainingCreditAdminResults{gp1, err}
	return e.mock
}

// Times sets number of times MgmtPrivateServiceClient.GetRemainingCreditAdmin should be invoked
func (mmGetRemainingCreditAdmin *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin) Times(n uint64) *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin {
	if n == 0 {
		mmGetRemainingCreditAdmin.mock.t.Fatalf("Times of MgmtPrivateServiceClientMock.GetRemainingCreditAdmin mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetRemainingCreditAdmin.expectedInvocations, n)
	return mmGetRemainingCreditAdmin
}

func (mmGetRemainingCreditAdmin *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin) invocationsDone() bool {
	if len(mmGetRemainingCreditAdmin.expectations) == 0 && mmGetRemainingCreditAdmin.defaultExpectation == nil && mmGetRemainingCreditAdmin.mock.funcGetRemainingCreditAdmin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetRemainingCreditAdmin.mock.afterGetRemainingCreditAdminCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetRemainingCreditAdmin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetRemainingCreditAdmin implements mgmtv1beta.MgmtPrivateServiceClient
func (mmGetRemainingCreditAdmin *MgmtPrivateServiceClientMock) GetRemainingCreditAdmin(ctx context.Context, in *mm_mgmtv1beta.GetRemainingCreditAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetRemainingCreditAdminResponse, err error) {
	mm_atomic.AddUint64(&mmGetRemainingCreditAdmin.beforeGetRemainingCreditAdminCounter, 1)
	defer mm_atomic.AddUint64(&mmGetRemainingCreditAdmin.afterGetRemainingCreditAdminCounter, 1)

	if mmGetRemainingCreditAdmin.inspectFuncGetRemainingCreditAdmin != nil {
		mmGetRemainingCreditAdmin.inspectFuncGetRemainingCreditAdmin(ctx, in, opts...)
	}

	mm_params := MgmtPrivateServiceClientMockGetRemainingCreditAdminParams{ctx, in, opts}

	// Record call args
	mmGetRemainingCreditAdmin.GetRemainingCreditAdminMock.mutex.Lock()
	mmGetRemainingCreditAdmin.GetRemainingCreditAdminMock.callArgs = append(mmGetRemainingCreditAdmin.GetRemainingCreditAdminMock.callArgs, &mm_params)
	mmGetRemainingCreditAdmin.GetRemainingCreditAdminMock.mutex.Unlock()

	for _, e := range mmGetRemainingCreditAdmin.GetRemainingCreditAdminMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetRemainingCreditAdmin.GetRemainingCreditAdminMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetRemainingCreditAdmin.GetRemainingCreditAdminMock.defaultExpectation.Counter, 1)
		mm_want := mmGetRemainingCreditAdmin.GetRemainingCreditAdminMock.defaultExpectation.params
		mm_want_ptrs := mmGetRemainingCreditAdmin.GetRemainingCreditAdminMock.defaultExpectation.paramPtrs

		mm_got := MgmtPrivateServiceClientMockGetRemainingCreditAdminParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetRemainingCreditAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetRemainingCreditAdmin got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmGetRemainingCreditAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetRemainingCreditAdmin got unexpected parameter in, want: %#v, got: %#v%s\n", *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmGetRemainingCreditAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetRemainingCreditAdmin got unexpected parameter opts, want: %#v, got: %#v%s\n", *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetRemainingCreditAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetRemainingCreditAdmin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetRemainingCreditAdmin.GetRemainingCreditAdminMock.defaultExpectation.results
		if mm_results == nil {
			mmGetRemainingCreditAdmin.t.Fatal("No results are set for the MgmtPrivateServiceClientMock.GetRemainingCreditAdmin")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetRemainingCreditAdmin.funcGetRemainingCreditAdmin != nil {
		return mmGetRemainingCreditAdmin.funcGetRemainingCreditAdmin(ctx, in, opts...)
	}
	mmGetRemainingCreditAdmin.t.Fatalf("Unexpected call to MgmtPrivateServiceClientMock.GetRemainingCreditAdmin. %v %v %v", ctx, in, opts)
	return
}

// GetRemainingCreditAdminAfterCounter returns a count of finished MgmtPrivateServiceClientMock.GetRemainingCreditAdmin invocations
func (mmGetRemainingCreditAdmin *MgmtPrivateServiceClientMock) GetRemainingCreditAdminAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRemainingCreditAdmin.afterGetRemainingCreditAdminCounter)
}

// GetRemainingCreditAdminBeforeCounter returns a count of MgmtPrivateServiceClientMock.GetRemainingCreditAdmin invocations
func (mmGetRemainingCreditAdmin *MgmtPrivateServiceClientMock) GetRemainingCreditAdminBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRemainingCreditAdmin.beforeGetRemainingCreditAdminCounter)
}

// Calls returns a list of arguments used in each call to MgmtPrivateServiceClientMock.GetRemainingCreditAdmin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetRemainingCreditAdmin *mMgmtPrivateServiceClientMockGetRemainingCreditAdmin) Calls() []*MgmtPrivateServiceClientMockGetRemainingCreditAdminParams {
	mmGetRemainingCreditAdmin.mutex.RLock()

	argCopy := make([]*MgmtPrivateServiceClientMockGetRemainingCreditAdminParams, len(mmGetRemainingCreditAdmin.callArgs))
	copy(argCopy, mmGetRemainingCreditAdmin.callArgs)

	mmGetRemainingCreditAdmin.mutex.RUnlock()

	return argCopy
}

// MinimockGetRemainingCreditAdminDone returns true if the count of the GetRemainingCreditAdmin invocations corresponds
// the number of defined expectations
func (m *MgmtPrivateServiceClientMock) MinimockGetRemainingCreditAdminDone() bool {
	if m.GetRemainingCreditAdminMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetRemainingCreditAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetRemainingCreditAdminMock.invocationsDone()
}

// MinimockGetRemainingCreditAdminInspect logs each unmet expectation
func (m *MgmtPrivateServiceClientMock) MinimockGetRemainingCreditAdminInspect() {
	for _, e := range m.GetRemainingCreditAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.GetRemainingCreditAdmin with params: %#v", *e.params)
		}
	}

	afterGetRemainingCreditAdminCounter := mm_atomic.LoadUint64(&m.afterGetRemainingCreditAdminCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetRemainingCreditAdminMock.defaultExpectation != nil && afterGetRemainingCreditAdminCounter < 1 {
		if m.GetRemainingCreditAdminMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MgmtPrivateServiceClientMock.GetRemainingCreditAdmin")
		} else {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.GetRemainingCreditAdmin with params: %#v", *m.GetRemainingCreditAdminMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRemainingCreditAdmin != nil && afterGetRemainingCreditAdminCounter < 1 {
		m.t.Error("Expected call to MgmtPrivateServiceClientMock.GetRemainingCreditAdmin")
	}

	if !m.GetRemainingCreditAdminMock.invocationsDone() && afterGetRemainingCreditAdminCounter > 0 {
		m.t.Errorf("Expected %d calls to MgmtPrivateServiceClientMock.GetRemainingCreditAdmin but found %d calls",
			mm_atomic.LoadUint64(&m.GetRemainingCreditAdminMock.expectedInvocations), afterGetRemainingCreditAdminCounter)
	}
}

type mMgmtPrivateServiceClientMockGetUserAdmin struct {
	optional           bool
	mock               *MgmtPrivateServiceClientMock
	defaultExpectation *MgmtPrivateServiceClientMockGetUserAdminExpectation
	expectations       []*MgmtPrivateServiceClientMockGetUserAdminExpectation

	callArgs []*MgmtPrivateServiceClientMockGetUserAdminParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// MgmtPrivateServiceClientMockGetUserAdminExpectation specifies expectation struct of the MgmtPrivateServiceClient.GetUserAdmin
type MgmtPrivateServiceClientMockGetUserAdminExpectation struct {
	mock      *MgmtPrivateServiceClientMock
	params    *MgmtPrivateServiceClientMockGetUserAdminParams
	paramPtrs *MgmtPrivateServiceClientMockGetUserAdminParamPtrs
	results   *MgmtPrivateServiceClientMockGetUserAdminResults
	Counter   uint64
}

// MgmtPrivateServiceClientMockGetUserAdminParams contains parameters of the MgmtPrivateServiceClient.GetUserAdmin
type MgmtPrivateServiceClientMockGetUserAdminParams struct {
	ctx  context.Context
	in   *mm_mgmtv1beta.GetUserAdminRequest
	opts []grpc.CallOption
}

// MgmtPrivateServiceClientMockGetUserAdminParamPtrs contains pointers to parameters of the MgmtPrivateServiceClient.GetUserAdmin
type MgmtPrivateServiceClientMockGetUserAdminParamPtrs struct {
	ctx  *context.Context
	in   **mm_mgmtv1beta.GetUserAdminRequest
	opts *[]grpc.CallOption
}

// MgmtPrivateServiceClientMockGetUserAdminResults contains results of the MgmtPrivateServiceClient.GetUserAdmin
type MgmtPrivateServiceClientMockGetUserAdminResults struct {
	gp1 *mm_mgmtv1beta.GetUserAdminResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetUserAdmin *mMgmtPrivateServiceClientMockGetUserAdmin) Optional() *mMgmtPrivateServiceClientMockGetUserAdmin {
	mmGetUserAdmin.optional = true
	return mmGetUserAdmin
}

// Expect sets up expected params for MgmtPrivateServiceClient.GetUserAdmin
func (mmGetUserAdmin *mMgmtPrivateServiceClientMockGetUserAdmin) Expect(ctx context.Context, in *mm_mgmtv1beta.GetUserAdminRequest, opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockGetUserAdmin {
	if mmGetUserAdmin.mock.funcGetUserAdmin != nil {
		mmGetUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserAdmin mock is already set by Set")
	}

	if mmGetUserAdmin.defaultExpectation == nil {
		mmGetUserAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetUserAdminExpectation{}
	}

	if mmGetUserAdmin.defaultExpectation.paramPtrs != nil {
		mmGetUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserAdmin mock is already set by ExpectParams functions")
	}

	mmGetUserAdmin.defaultExpectation.params = &MgmtPrivateServiceClientMockGetUserAdminParams{ctx, in, opts}
	for _, e := range mmGetUserAdmin.expectations {
		if minimock.Equal(e.params, mmGetUserAdmin.defaultExpectation.params) {
			mmGetUserAdmin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUserAdmin.defaultExpectation.params)
		}
	}

	return mmGetUserAdmin
}

// ExpectCtxParam1 sets up expected param ctx for MgmtPrivateServiceClient.GetUserAdmin
func (mmGetUserAdmin *mMgmtPrivateServiceClientMockGetUserAdmin) ExpectCtxParam1(ctx context.Context) *mMgmtPrivateServiceClientMockGetUserAdmin {
	if mmGetUserAdmin.mock.funcGetUserAdmin != nil {
		mmGetUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserAdmin mock is already set by Set")
	}

	if mmGetUserAdmin.defaultExpectation == nil {
		mmGetUserAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetUserAdminExpectation{}
	}

	if mmGetUserAdmin.defaultExpectation.params != nil {
		mmGetUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserAdmin mock is already set by Expect")
	}

	if mmGetUserAdmin.defaultExpectation.paramPtrs == nil {
		mmGetUserAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetUserAdminParamPtrs{}
	}
	mmGetUserAdmin.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetUserAdmin
}

// ExpectInParam2 sets up expected param in for MgmtPrivateServiceClient.GetUserAdmin
func (mmGetUserAdmin *mMgmtPrivateServiceClientMockGetUserAdmin) ExpectInParam2(in *mm_mgmtv1beta.GetUserAdminRequest) *mMgmtPrivateServiceClientMockGetUserAdmin {
	if mmGetUserAdmin.mock.funcGetUserAdmin != nil {
		mmGetUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserAdmin mock is already set by Set")
	}

	if mmGetUserAdmin.defaultExpectation == nil {
		mmGetUserAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetUserAdminExpectation{}
	}

	if mmGetUserAdmin.defaultExpectation.params != nil {
		mmGetUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserAdmin mock is already set by Expect")
	}

	if mmGetUserAdmin.defaultExpectation.paramPtrs == nil {
		mmGetUserAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetUserAdminParamPtrs{}
	}
	mmGetUserAdmin.defaultExpectation.paramPtrs.in = &in

	return mmGetUserAdmin
}

// ExpectOptsParam3 sets up expected param opts for MgmtPrivateServiceClient.GetUserAdmin
func (mmGetUserAdmin *mMgmtPrivateServiceClientMockGetUserAdmin) ExpectOptsParam3(opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockGetUserAdmin {
	if mmGetUserAdmin.mock.funcGetUserAdmin != nil {
		mmGetUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserAdmin mock is already set by Set")
	}

	if mmGetUserAdmin.defaultExpectation == nil {
		mmGetUserAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetUserAdminExpectation{}
	}

	if mmGetUserAdmin.defaultExpectation.params != nil {
		mmGetUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserAdmin mock is already set by Expect")
	}

	if mmGetUserAdmin.defaultExpectation.paramPtrs == nil {
		mmGetUserAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetUserAdminParamPtrs{}
	}
	mmGetUserAdmin.defaultExpectation.paramPtrs.opts = &opts

	return mmGetUserAdmin
}

// Inspect accepts an inspector function that has same arguments as the MgmtPrivateServiceClient.GetUserAdmin
func (mmGetUserAdmin *mMgmtPrivateServiceClientMockGetUserAdmin) Inspect(f func(ctx context.Context, in *mm_mgmtv1beta.GetUserAdminRequest, opts ...grpc.CallOption)) *mMgmtPrivateServiceClientMockGetUserAdmin {
	if mmGetUserAdmin.mock.inspectFuncGetUserAdmin != nil {
		mmGetUserAdmin.mock.t.Fatalf("Inspect function is already set for MgmtPrivateServiceClientMock.GetUserAdmin")
	}

	mmGetUserAdmin.mock.inspectFuncGetUserAdmin = f

	return mmGetUserAdmin
}

// Return sets up results that will be returned by MgmtPrivateServiceClient.GetUserAdmin
func (mmGetUserAdmin *mMgmtPrivateServiceClientMockGetUserAdmin) Return(gp1 *mm_mgmtv1beta.GetUserAdminResponse, err error) *MgmtPrivateServiceClientMock {
	if mmGetUserAdmin.mock.funcGetUserAdmin != nil {
		mmGetUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserAdmin mock is already set by Set")
	}

	if mmGetUserAdmin.defaultExpectation == nil {
		mmGetUserAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetUserAdminExpectation{mock: mmGetUserAdmin.mock}
	}
	mmGetUserAdmin.defaultExpectation.results = &MgmtPrivateServiceClientMockGetUserAdminResults{gp1, err}
	return mmGetUserAdmin.mock
}

// Set uses given function f to mock the MgmtPrivateServiceClient.GetUserAdmin method
func (mmGetUserAdmin *mMgmtPrivateServiceClientMockGetUserAdmin) Set(f func(ctx context.Context, in *mm_mgmtv1beta.GetUserAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetUserAdminResponse, err error)) *MgmtPrivateServiceClientMock {
	if mmGetUserAdmin.defaultExpectation != nil {
		mmGetUserAdmin.mock.t.Fatalf("Default expectation is already set for the MgmtPrivateServiceClient.GetUserAdmin method")
	}

	if len(mmGetUserAdmin.expectations) > 0 {
		mmGetUserAdmin.mock.t.Fatalf("Some expectations are already set for the MgmtPrivateServiceClient.GetUserAdmin method")
	}

	mmGetUserAdmin.mock.funcGetUserAdmin = f
	return mmGetUserAdmin.mock
}

// When sets expectation for the MgmtPrivateServiceClient.GetUserAdmin which will trigger the result defined by the following
// Then helper
func (mmGetUserAdmin *mMgmtPrivateServiceClientMockGetUserAdmin) When(ctx context.Context, in *mm_mgmtv1beta.GetUserAdminRequest, opts ...grpc.CallOption) *MgmtPrivateServiceClientMockGetUserAdminExpectation {
	if mmGetUserAdmin.mock.funcGetUserAdmin != nil {
		mmGetUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserAdmin mock is already set by Set")
	}

	expectation := &MgmtPrivateServiceClientMockGetUserAdminExpectation{
		mock:   mmGetUserAdmin.mock,
		params: &MgmtPrivateServiceClientMockGetUserAdminParams{ctx, in, opts},
	}
	mmGetUserAdmin.expectations = append(mmGetUserAdmin.expectations, expectation)
	return expectation
}

// Then sets up MgmtPrivateServiceClient.GetUserAdmin return parameters for the expectation previously defined by the When method
func (e *MgmtPrivateServiceClientMockGetUserAdminExpectation) Then(gp1 *mm_mgmtv1beta.GetUserAdminResponse, err error) *MgmtPrivateServiceClientMock {
	e.results = &MgmtPrivateServiceClientMockGetUserAdminResults{gp1, err}
	return e.mock
}

// Times sets number of times MgmtPrivateServiceClient.GetUserAdmin should be invoked
func (mmGetUserAdmin *mMgmtPrivateServiceClientMockGetUserAdmin) Times(n uint64) *mMgmtPrivateServiceClientMockGetUserAdmin {
	if n == 0 {
		mmGetUserAdmin.mock.t.Fatalf("Times of MgmtPrivateServiceClientMock.GetUserAdmin mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetUserAdmin.expectedInvocations, n)
	return mmGetUserAdmin
}

func (mmGetUserAdmin *mMgmtPrivateServiceClientMockGetUserAdmin) invocationsDone() bool {
	if len(mmGetUserAdmin.expectations) == 0 && mmGetUserAdmin.defaultExpectation == nil && mmGetUserAdmin.mock.funcGetUserAdmin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetUserAdmin.mock.afterGetUserAdminCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetUserAdmin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetUserAdmin implements mgmtv1beta.MgmtPrivateServiceClient
func (mmGetUserAdmin *MgmtPrivateServiceClientMock) GetUserAdmin(ctx context.Context, in *mm_mgmtv1beta.GetUserAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetUserAdminResponse, err error) {
	mm_atomic.AddUint64(&mmGetUserAdmin.beforeGetUserAdminCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUserAdmin.afterGetUserAdminCounter, 1)

	if mmGetUserAdmin.inspectFuncGetUserAdmin != nil {
		mmGetUserAdmin.inspectFuncGetUserAdmin(ctx, in, opts...)
	}

	mm_params := MgmtPrivateServiceClientMockGetUserAdminParams{ctx, in, opts}

	// Record call args
	mmGetUserAdmin.GetUserAdminMock.mutex.Lock()
	mmGetUserAdmin.GetUserAdminMock.callArgs = append(mmGetUserAdmin.GetUserAdminMock.callArgs, &mm_params)
	mmGetUserAdmin.GetUserAdminMock.mutex.Unlock()

	for _, e := range mmGetUserAdmin.GetUserAdminMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetUserAdmin.GetUserAdminMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUserAdmin.GetUserAdminMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUserAdmin.GetUserAdminMock.defaultExpectation.params
		mm_want_ptrs := mmGetUserAdmin.GetUserAdminMock.defaultExpectation.paramPtrs

		mm_got := MgmtPrivateServiceClientMockGetUserAdminParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetUserAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetUserAdmin got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmGetUserAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetUserAdmin got unexpected parameter in, want: %#v, got: %#v%s\n", *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmGetUserAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetUserAdmin got unexpected parameter opts, want: %#v, got: %#v%s\n", *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUserAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetUserAdmin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUserAdmin.GetUserAdminMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUserAdmin.t.Fatal("No results are set for the MgmtPrivateServiceClientMock.GetUserAdmin")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetUserAdmin.funcGetUserAdmin != nil {
		return mmGetUserAdmin.funcGetUserAdmin(ctx, in, opts...)
	}
	mmGetUserAdmin.t.Fatalf("Unexpected call to MgmtPrivateServiceClientMock.GetUserAdmin. %v %v %v", ctx, in, opts)
	return
}

// GetUserAdminAfterCounter returns a count of finished MgmtPrivateServiceClientMock.GetUserAdmin invocations
func (mmGetUserAdmin *MgmtPrivateServiceClientMock) GetUserAdminAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserAdmin.afterGetUserAdminCounter)
}

// GetUserAdminBeforeCounter returns a count of MgmtPrivateServiceClientMock.GetUserAdmin invocations
func (mmGetUserAdmin *MgmtPrivateServiceClientMock) GetUserAdminBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserAdmin.beforeGetUserAdminCounter)
}

// Calls returns a list of arguments used in each call to MgmtPrivateServiceClientMock.GetUserAdmin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUserAdmin *mMgmtPrivateServiceClientMockGetUserAdmin) Calls() []*MgmtPrivateServiceClientMockGetUserAdminParams {
	mmGetUserAdmin.mutex.RLock()

	argCopy := make([]*MgmtPrivateServiceClientMockGetUserAdminParams, len(mmGetUserAdmin.callArgs))
	copy(argCopy, mmGetUserAdmin.callArgs)

	mmGetUserAdmin.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserAdminDone returns true if the count of the GetUserAdmin invocations corresponds
// the number of defined expectations
func (m *MgmtPrivateServiceClientMock) MinimockGetUserAdminDone() bool {
	if m.GetUserAdminMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetUserAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetUserAdminMock.invocationsDone()
}

// MinimockGetUserAdminInspect logs each unmet expectation
func (m *MgmtPrivateServiceClientMock) MinimockGetUserAdminInspect() {
	for _, e := range m.GetUserAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.GetUserAdmin with params: %#v", *e.params)
		}
	}

	afterGetUserAdminCounter := mm_atomic.LoadUint64(&m.afterGetUserAdminCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserAdminMock.defaultExpectation != nil && afterGetUserAdminCounter < 1 {
		if m.GetUserAdminMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MgmtPrivateServiceClientMock.GetUserAdmin")
		} else {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.GetUserAdmin with params: %#v", *m.GetUserAdminMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserAdmin != nil && afterGetUserAdminCounter < 1 {
		m.t.Error("Expected call to MgmtPrivateServiceClientMock.GetUserAdmin")
	}

	if !m.GetUserAdminMock.invocationsDone() && afterGetUserAdminCounter > 0 {
		m.t.Errorf("Expected %d calls to MgmtPrivateServiceClientMock.GetUserAdmin but found %d calls",
			mm_atomic.LoadUint64(&m.GetUserAdminMock.expectedInvocations), afterGetUserAdminCounter)
	}
}

type mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin struct {
	optional           bool
	mock               *MgmtPrivateServiceClientMock
	defaultExpectation *MgmtPrivateServiceClientMockGetUserSubscriptionAdminExpectation
	expectations       []*MgmtPrivateServiceClientMockGetUserSubscriptionAdminExpectation

	callArgs []*MgmtPrivateServiceClientMockGetUserSubscriptionAdminParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// MgmtPrivateServiceClientMockGetUserSubscriptionAdminExpectation specifies expectation struct of the MgmtPrivateServiceClient.GetUserSubscriptionAdmin
type MgmtPrivateServiceClientMockGetUserSubscriptionAdminExpectation struct {
	mock      *MgmtPrivateServiceClientMock
	params    *MgmtPrivateServiceClientMockGetUserSubscriptionAdminParams
	paramPtrs *MgmtPrivateServiceClientMockGetUserSubscriptionAdminParamPtrs
	results   *MgmtPrivateServiceClientMockGetUserSubscriptionAdminResults
	Counter   uint64
}

// MgmtPrivateServiceClientMockGetUserSubscriptionAdminParams contains parameters of the MgmtPrivateServiceClient.GetUserSubscriptionAdmin
type MgmtPrivateServiceClientMockGetUserSubscriptionAdminParams struct {
	ctx  context.Context
	in   *mm_mgmtv1beta.GetUserSubscriptionAdminRequest
	opts []grpc.CallOption
}

// MgmtPrivateServiceClientMockGetUserSubscriptionAdminParamPtrs contains pointers to parameters of the MgmtPrivateServiceClient.GetUserSubscriptionAdmin
type MgmtPrivateServiceClientMockGetUserSubscriptionAdminParamPtrs struct {
	ctx  *context.Context
	in   **mm_mgmtv1beta.GetUserSubscriptionAdminRequest
	opts *[]grpc.CallOption
}

// MgmtPrivateServiceClientMockGetUserSubscriptionAdminResults contains results of the MgmtPrivateServiceClient.GetUserSubscriptionAdmin
type MgmtPrivateServiceClientMockGetUserSubscriptionAdminResults struct {
	gp1 *mm_mgmtv1beta.GetUserSubscriptionAdminResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetUserSubscriptionAdmin *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin) Optional() *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin {
	mmGetUserSubscriptionAdmin.optional = true
	return mmGetUserSubscriptionAdmin
}

// Expect sets up expected params for MgmtPrivateServiceClient.GetUserSubscriptionAdmin
func (mmGetUserSubscriptionAdmin *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin) Expect(ctx context.Context, in *mm_mgmtv1beta.GetUserSubscriptionAdminRequest, opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin {
	if mmGetUserSubscriptionAdmin.mock.funcGetUserSubscriptionAdmin != nil {
		mmGetUserSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin mock is already set by Set")
	}

	if mmGetUserSubscriptionAdmin.defaultExpectation == nil {
		mmGetUserSubscriptionAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetUserSubscriptionAdminExpectation{}
	}

	if mmGetUserSubscriptionAdmin.defaultExpectation.paramPtrs != nil {
		mmGetUserSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin mock is already set by ExpectParams functions")
	}

	mmGetUserSubscriptionAdmin.defaultExpectation.params = &MgmtPrivateServiceClientMockGetUserSubscriptionAdminParams{ctx, in, opts}
	for _, e := range mmGetUserSubscriptionAdmin.expectations {
		if minimock.Equal(e.params, mmGetUserSubscriptionAdmin.defaultExpectation.params) {
			mmGetUserSubscriptionAdmin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUserSubscriptionAdmin.defaultExpectation.params)
		}
	}

	return mmGetUserSubscriptionAdmin
}

// ExpectCtxParam1 sets up expected param ctx for MgmtPrivateServiceClient.GetUserSubscriptionAdmin
func (mmGetUserSubscriptionAdmin *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin) ExpectCtxParam1(ctx context.Context) *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin {
	if mmGetUserSubscriptionAdmin.mock.funcGetUserSubscriptionAdmin != nil {
		mmGetUserSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin mock is already set by Set")
	}

	if mmGetUserSubscriptionAdmin.defaultExpectation == nil {
		mmGetUserSubscriptionAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetUserSubscriptionAdminExpectation{}
	}

	if mmGetUserSubscriptionAdmin.defaultExpectation.params != nil {
		mmGetUserSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin mock is already set by Expect")
	}

	if mmGetUserSubscriptionAdmin.defaultExpectation.paramPtrs == nil {
		mmGetUserSubscriptionAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetUserSubscriptionAdminParamPtrs{}
	}
	mmGetUserSubscriptionAdmin.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetUserSubscriptionAdmin
}

// ExpectInParam2 sets up expected param in for MgmtPrivateServiceClient.GetUserSubscriptionAdmin
func (mmGetUserSubscriptionAdmin *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin) ExpectInParam2(in *mm_mgmtv1beta.GetUserSubscriptionAdminRequest) *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin {
	if mmGetUserSubscriptionAdmin.mock.funcGetUserSubscriptionAdmin != nil {
		mmGetUserSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin mock is already set by Set")
	}

	if mmGetUserSubscriptionAdmin.defaultExpectation == nil {
		mmGetUserSubscriptionAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetUserSubscriptionAdminExpectation{}
	}

	if mmGetUserSubscriptionAdmin.defaultExpectation.params != nil {
		mmGetUserSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin mock is already set by Expect")
	}

	if mmGetUserSubscriptionAdmin.defaultExpectation.paramPtrs == nil {
		mmGetUserSubscriptionAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetUserSubscriptionAdminParamPtrs{}
	}
	mmGetUserSubscriptionAdmin.defaultExpectation.paramPtrs.in = &in

	return mmGetUserSubscriptionAdmin
}

// ExpectOptsParam3 sets up expected param opts for MgmtPrivateServiceClient.GetUserSubscriptionAdmin
func (mmGetUserSubscriptionAdmin *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin) ExpectOptsParam3(opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin {
	if mmGetUserSubscriptionAdmin.mock.funcGetUserSubscriptionAdmin != nil {
		mmGetUserSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin mock is already set by Set")
	}

	if mmGetUserSubscriptionAdmin.defaultExpectation == nil {
		mmGetUserSubscriptionAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetUserSubscriptionAdminExpectation{}
	}

	if mmGetUserSubscriptionAdmin.defaultExpectation.params != nil {
		mmGetUserSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin mock is already set by Expect")
	}

	if mmGetUserSubscriptionAdmin.defaultExpectation.paramPtrs == nil {
		mmGetUserSubscriptionAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockGetUserSubscriptionAdminParamPtrs{}
	}
	mmGetUserSubscriptionAdmin.defaultExpectation.paramPtrs.opts = &opts

	return mmGetUserSubscriptionAdmin
}

// Inspect accepts an inspector function that has same arguments as the MgmtPrivateServiceClient.GetUserSubscriptionAdmin
func (mmGetUserSubscriptionAdmin *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin) Inspect(f func(ctx context.Context, in *mm_mgmtv1beta.GetUserSubscriptionAdminRequest, opts ...grpc.CallOption)) *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin {
	if mmGetUserSubscriptionAdmin.mock.inspectFuncGetUserSubscriptionAdmin != nil {
		mmGetUserSubscriptionAdmin.mock.t.Fatalf("Inspect function is already set for MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin")
	}

	mmGetUserSubscriptionAdmin.mock.inspectFuncGetUserSubscriptionAdmin = f

	return mmGetUserSubscriptionAdmin
}

// Return sets up results that will be returned by MgmtPrivateServiceClient.GetUserSubscriptionAdmin
func (mmGetUserSubscriptionAdmin *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin) Return(gp1 *mm_mgmtv1beta.GetUserSubscriptionAdminResponse, err error) *MgmtPrivateServiceClientMock {
	if mmGetUserSubscriptionAdmin.mock.funcGetUserSubscriptionAdmin != nil {
		mmGetUserSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin mock is already set by Set")
	}

	if mmGetUserSubscriptionAdmin.defaultExpectation == nil {
		mmGetUserSubscriptionAdmin.defaultExpectation = &MgmtPrivateServiceClientMockGetUserSubscriptionAdminExpectation{mock: mmGetUserSubscriptionAdmin.mock}
	}
	mmGetUserSubscriptionAdmin.defaultExpectation.results = &MgmtPrivateServiceClientMockGetUserSubscriptionAdminResults{gp1, err}
	return mmGetUserSubscriptionAdmin.mock
}

// Set uses given function f to mock the MgmtPrivateServiceClient.GetUserSubscriptionAdmin method
func (mmGetUserSubscriptionAdmin *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin) Set(f func(ctx context.Context, in *mm_mgmtv1beta.GetUserSubscriptionAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetUserSubscriptionAdminResponse, err error)) *MgmtPrivateServiceClientMock {
	if mmGetUserSubscriptionAdmin.defaultExpectation != nil {
		mmGetUserSubscriptionAdmin.mock.t.Fatalf("Default expectation is already set for the MgmtPrivateServiceClient.GetUserSubscriptionAdmin method")
	}

	if len(mmGetUserSubscriptionAdmin.expectations) > 0 {
		mmGetUserSubscriptionAdmin.mock.t.Fatalf("Some expectations are already set for the MgmtPrivateServiceClient.GetUserSubscriptionAdmin method")
	}

	mmGetUserSubscriptionAdmin.mock.funcGetUserSubscriptionAdmin = f
	return mmGetUserSubscriptionAdmin.mock
}

// When sets expectation for the MgmtPrivateServiceClient.GetUserSubscriptionAdmin which will trigger the result defined by the following
// Then helper
func (mmGetUserSubscriptionAdmin *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin) When(ctx context.Context, in *mm_mgmtv1beta.GetUserSubscriptionAdminRequest, opts ...grpc.CallOption) *MgmtPrivateServiceClientMockGetUserSubscriptionAdminExpectation {
	if mmGetUserSubscriptionAdmin.mock.funcGetUserSubscriptionAdmin != nil {
		mmGetUserSubscriptionAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin mock is already set by Set")
	}

	expectation := &MgmtPrivateServiceClientMockGetUserSubscriptionAdminExpectation{
		mock:   mmGetUserSubscriptionAdmin.mock,
		params: &MgmtPrivateServiceClientMockGetUserSubscriptionAdminParams{ctx, in, opts},
	}
	mmGetUserSubscriptionAdmin.expectations = append(mmGetUserSubscriptionAdmin.expectations, expectation)
	return expectation
}

// Then sets up MgmtPrivateServiceClient.GetUserSubscriptionAdmin return parameters for the expectation previously defined by the When method
func (e *MgmtPrivateServiceClientMockGetUserSubscriptionAdminExpectation) Then(gp1 *mm_mgmtv1beta.GetUserSubscriptionAdminResponse, err error) *MgmtPrivateServiceClientMock {
	e.results = &MgmtPrivateServiceClientMockGetUserSubscriptionAdminResults{gp1, err}
	return e.mock
}

// Times sets number of times MgmtPrivateServiceClient.GetUserSubscriptionAdmin should be invoked
func (mmGetUserSubscriptionAdmin *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin) Times(n uint64) *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin {
	if n == 0 {
		mmGetUserSubscriptionAdmin.mock.t.Fatalf("Times of MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetUserSubscriptionAdmin.expectedInvocations, n)
	return mmGetUserSubscriptionAdmin
}

func (mmGetUserSubscriptionAdmin *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin) invocationsDone() bool {
	if len(mmGetUserSubscriptionAdmin.expectations) == 0 && mmGetUserSubscriptionAdmin.defaultExpectation == nil && mmGetUserSubscriptionAdmin.mock.funcGetUserSubscriptionAdmin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetUserSubscriptionAdmin.mock.afterGetUserSubscriptionAdminCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetUserSubscriptionAdmin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetUserSubscriptionAdmin implements mgmtv1beta.MgmtPrivateServiceClient
func (mmGetUserSubscriptionAdmin *MgmtPrivateServiceClientMock) GetUserSubscriptionAdmin(ctx context.Context, in *mm_mgmtv1beta.GetUserSubscriptionAdminRequest, opts ...grpc.CallOption) (gp1 *mm_mgmtv1beta.GetUserSubscriptionAdminResponse, err error) {
	mm_atomic.AddUint64(&mmGetUserSubscriptionAdmin.beforeGetUserSubscriptionAdminCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUserSubscriptionAdmin.afterGetUserSubscriptionAdminCounter, 1)

	if mmGetUserSubscriptionAdmin.inspectFuncGetUserSubscriptionAdmin != nil {
		mmGetUserSubscriptionAdmin.inspectFuncGetUserSubscriptionAdmin(ctx, in, opts...)
	}

	mm_params := MgmtPrivateServiceClientMockGetUserSubscriptionAdminParams{ctx, in, opts}

	// Record call args
	mmGetUserSubscriptionAdmin.GetUserSubscriptionAdminMock.mutex.Lock()
	mmGetUserSubscriptionAdmin.GetUserSubscriptionAdminMock.callArgs = append(mmGetUserSubscriptionAdmin.GetUserSubscriptionAdminMock.callArgs, &mm_params)
	mmGetUserSubscriptionAdmin.GetUserSubscriptionAdminMock.mutex.Unlock()

	for _, e := range mmGetUserSubscriptionAdmin.GetUserSubscriptionAdminMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetUserSubscriptionAdmin.GetUserSubscriptionAdminMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUserSubscriptionAdmin.GetUserSubscriptionAdminMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUserSubscriptionAdmin.GetUserSubscriptionAdminMock.defaultExpectation.params
		mm_want_ptrs := mmGetUserSubscriptionAdmin.GetUserSubscriptionAdminMock.defaultExpectation.paramPtrs

		mm_got := MgmtPrivateServiceClientMockGetUserSubscriptionAdminParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetUserSubscriptionAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmGetUserSubscriptionAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin got unexpected parameter in, want: %#v, got: %#v%s\n", *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmGetUserSubscriptionAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin got unexpected parameter opts, want: %#v, got: %#v%s\n", *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUserSubscriptionAdmin.t.Errorf("MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUserSubscriptionAdmin.GetUserSubscriptionAdminMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUserSubscriptionAdmin.t.Fatal("No results are set for the MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetUserSubscriptionAdmin.funcGetUserSubscriptionAdmin != nil {
		return mmGetUserSubscriptionAdmin.funcGetUserSubscriptionAdmin(ctx, in, opts...)
	}
	mmGetUserSubscriptionAdmin.t.Fatalf("Unexpected call to MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin. %v %v %v", ctx, in, opts)
	return
}

// GetUserSubscriptionAdminAfterCounter returns a count of finished MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin invocations
func (mmGetUserSubscriptionAdmin *MgmtPrivateServiceClientMock) GetUserSubscriptionAdminAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserSubscriptionAdmin.afterGetUserSubscriptionAdminCounter)
}

// GetUserSubscriptionAdminBeforeCounter returns a count of MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin invocations
func (mmGetUserSubscriptionAdmin *MgmtPrivateServiceClientMock) GetUserSubscriptionAdminBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserSubscriptionAdmin.beforeGetUserSubscriptionAdminCounter)
}

// Calls returns a list of arguments used in each call to MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUserSubscriptionAdmin *mMgmtPrivateServiceClientMockGetUserSubscriptionAdmin) Calls() []*MgmtPrivateServiceClientMockGetUserSubscriptionAdminParams {
	mmGetUserSubscriptionAdmin.mutex.RLock()

	argCopy := make([]*MgmtPrivateServiceClientMockGetUserSubscriptionAdminParams, len(mmGetUserSubscriptionAdmin.callArgs))
	copy(argCopy, mmGetUserSubscriptionAdmin.callArgs)

	mmGetUserSubscriptionAdmin.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserSubscriptionAdminDone returns true if the count of the GetUserSubscriptionAdmin invocations corresponds
// the number of defined expectations
func (m *MgmtPrivateServiceClientMock) MinimockGetUserSubscriptionAdminDone() bool {
	if m.GetUserSubscriptionAdminMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetUserSubscriptionAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetUserSubscriptionAdminMock.invocationsDone()
}

// MinimockGetUserSubscriptionAdminInspect logs each unmet expectation
func (m *MgmtPrivateServiceClientMock) MinimockGetUserSubscriptionAdminInspect() {
	for _, e := range m.GetUserSubscriptionAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin with params: %#v", *e.params)
		}
	}

	afterGetUserSubscriptionAdminCounter := mm_atomic.LoadUint64(&m.afterGetUserSubscriptionAdminCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserSubscriptionAdminMock.defaultExpectation != nil && afterGetUserSubscriptionAdminCounter < 1 {
		if m.GetUserSubscriptionAdminMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin")
		} else {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin with params: %#v", *m.GetUserSubscriptionAdminMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserSubscriptionAdmin != nil && afterGetUserSubscriptionAdminCounter < 1 {
		m.t.Error("Expected call to MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin")
	}

	if !m.GetUserSubscriptionAdminMock.invocationsDone() && afterGetUserSubscriptionAdminCounter > 0 {
		m.t.Errorf("Expected %d calls to MgmtPrivateServiceClientMock.GetUserSubscriptionAdmin but found %d calls",
			mm_atomic.LoadUint64(&m.GetUserSubscriptionAdminMock.expectedInvocations), afterGetUserSubscriptionAdminCounter)
	}
}

type mMgmtPrivateServiceClientMockListOrganizationsAdmin struct {
	optional           bool
	mock               *MgmtPrivateServiceClientMock
	defaultExpectation *MgmtPrivateServiceClientMockListOrganizationsAdminExpectation
	expectations       []*MgmtPrivateServiceClientMockListOrganizationsAdminExpectation

	callArgs []*MgmtPrivateServiceClientMockListOrganizationsAdminParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// MgmtPrivateServiceClientMockListOrganizationsAdminExpectation specifies expectation struct of the MgmtPrivateServiceClient.ListOrganizationsAdmin
type MgmtPrivateServiceClientMockListOrganizationsAdminExpectation struct {
	mock      *MgmtPrivateServiceClientMock
	params    *MgmtPrivateServiceClientMockListOrganizationsAdminParams
	paramPtrs *MgmtPrivateServiceClientMockListOrganizationsAdminParamPtrs
	results   *MgmtPrivateServiceClientMockListOrganizationsAdminResults
	Counter   uint64
}

// MgmtPrivateServiceClientMockListOrganizationsAdminParams contains parameters of the MgmtPrivateServiceClient.ListOrganizationsAdmin
type MgmtPrivateServiceClientMockListOrganizationsAdminParams struct {
	ctx  context.Context
	in   *mm_mgmtv1beta.ListOrganizationsAdminRequest
	opts []grpc.CallOption
}

// MgmtPrivateServiceClientMockListOrganizationsAdminParamPtrs contains pointers to parameters of the MgmtPrivateServiceClient.ListOrganizationsAdmin
type MgmtPrivateServiceClientMockListOrganizationsAdminParamPtrs struct {
	ctx  *context.Context
	in   **mm_mgmtv1beta.ListOrganizationsAdminRequest
	opts *[]grpc.CallOption
}

// MgmtPrivateServiceClientMockListOrganizationsAdminResults contains results of the MgmtPrivateServiceClient.ListOrganizationsAdmin
type MgmtPrivateServiceClientMockListOrganizationsAdminResults struct {
	lp1 *mm_mgmtv1beta.ListOrganizationsAdminResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListOrganizationsAdmin *mMgmtPrivateServiceClientMockListOrganizationsAdmin) Optional() *mMgmtPrivateServiceClientMockListOrganizationsAdmin {
	mmListOrganizationsAdmin.optional = true
	return mmListOrganizationsAdmin
}

// Expect sets up expected params for MgmtPrivateServiceClient.ListOrganizationsAdmin
func (mmListOrganizationsAdmin *mMgmtPrivateServiceClientMockListOrganizationsAdmin) Expect(ctx context.Context, in *mm_mgmtv1beta.ListOrganizationsAdminRequest, opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockListOrganizationsAdmin {
	if mmListOrganizationsAdmin.mock.funcListOrganizationsAdmin != nil {
		mmListOrganizationsAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListOrganizationsAdmin mock is already set by Set")
	}

	if mmListOrganizationsAdmin.defaultExpectation == nil {
		mmListOrganizationsAdmin.defaultExpectation = &MgmtPrivateServiceClientMockListOrganizationsAdminExpectation{}
	}

	if mmListOrganizationsAdmin.defaultExpectation.paramPtrs != nil {
		mmListOrganizationsAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListOrganizationsAdmin mock is already set by ExpectParams functions")
	}

	mmListOrganizationsAdmin.defaultExpectation.params = &MgmtPrivateServiceClientMockListOrganizationsAdminParams{ctx, in, opts}
	for _, e := range mmListOrganizationsAdmin.expectations {
		if minimock.Equal(e.params, mmListOrganizationsAdmin.defaultExpectation.params) {
			mmListOrganizationsAdmin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListOrganizationsAdmin.defaultExpectation.params)
		}
	}

	return mmListOrganizationsAdmin
}

// ExpectCtxParam1 sets up expected param ctx for MgmtPrivateServiceClient.ListOrganizationsAdmin
func (mmListOrganizationsAdmin *mMgmtPrivateServiceClientMockListOrganizationsAdmin) ExpectCtxParam1(ctx context.Context) *mMgmtPrivateServiceClientMockListOrganizationsAdmin {
	if mmListOrganizationsAdmin.mock.funcListOrganizationsAdmin != nil {
		mmListOrganizationsAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListOrganizationsAdmin mock is already set by Set")
	}

	if mmListOrganizationsAdmin.defaultExpectation == nil {
		mmListOrganizationsAdmin.defaultExpectation = &MgmtPrivateServiceClientMockListOrganizationsAdminExpectation{}
	}

	if mmListOrganizationsAdmin.defaultExpectation.params != nil {
		mmListOrganizationsAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListOrganizationsAdmin mock is already set by Expect")
	}

	if mmListOrganizationsAdmin.defaultExpectation.paramPtrs == nil {
		mmListOrganizationsAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockListOrganizationsAdminParamPtrs{}
	}
	mmListOrganizationsAdmin.defaultExpectation.paramPtrs.ctx = &ctx

	return mmListOrganizationsAdmin
}

// ExpectInParam2 sets up expected param in for MgmtPrivateServiceClient.ListOrganizationsAdmin
func (mmListOrganizationsAdmin *mMgmtPrivateServiceClientMockListOrganizationsAdmin) ExpectInParam2(in *mm_mgmtv1beta.ListOrganizationsAdminRequest) *mMgmtPrivateServiceClientMockListOrganizationsAdmin {
	if mmListOrganizationsAdmin.mock.funcListOrganizationsAdmin != nil {
		mmListOrganizationsAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListOrganizationsAdmin mock is already set by Set")
	}

	if mmListOrganizationsAdmin.defaultExpectation == nil {
		mmListOrganizationsAdmin.defaultExpectation = &MgmtPrivateServiceClientMockListOrganizationsAdminExpectation{}
	}

	if mmListOrganizationsAdmin.defaultExpectation.params != nil {
		mmListOrganizationsAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListOrganizationsAdmin mock is already set by Expect")
	}

	if mmListOrganizationsAdmin.defaultExpectation.paramPtrs == nil {
		mmListOrganizationsAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockListOrganizationsAdminParamPtrs{}
	}
	mmListOrganizationsAdmin.defaultExpectation.paramPtrs.in = &in

	return mmListOrganizationsAdmin
}

// ExpectOptsParam3 sets up expected param opts for MgmtPrivateServiceClient.ListOrganizationsAdmin
func (mmListOrganizationsAdmin *mMgmtPrivateServiceClientMockListOrganizationsAdmin) ExpectOptsParam3(opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockListOrganizationsAdmin {
	if mmListOrganizationsAdmin.mock.funcListOrganizationsAdmin != nil {
		mmListOrganizationsAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListOrganizationsAdmin mock is already set by Set")
	}

	if mmListOrganizationsAdmin.defaultExpectation == nil {
		mmListOrganizationsAdmin.defaultExpectation = &MgmtPrivateServiceClientMockListOrganizationsAdminExpectation{}
	}

	if mmListOrganizationsAdmin.defaultExpectation.params != nil {
		mmListOrganizationsAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListOrganizationsAdmin mock is already set by Expect")
	}

	if mmListOrganizationsAdmin.defaultExpectation.paramPtrs == nil {
		mmListOrganizationsAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockListOrganizationsAdminParamPtrs{}
	}
	mmListOrganizationsAdmin.defaultExpectation.paramPtrs.opts = &opts

	return mmListOrganizationsAdmin
}

// Inspect accepts an inspector function that has same arguments as the MgmtPrivateServiceClient.ListOrganizationsAdmin
func (mmListOrganizationsAdmin *mMgmtPrivateServiceClientMockListOrganizationsAdmin) Inspect(f func(ctx context.Context, in *mm_mgmtv1beta.ListOrganizationsAdminRequest, opts ...grpc.CallOption)) *mMgmtPrivateServiceClientMockListOrganizationsAdmin {
	if mmListOrganizationsAdmin.mock.inspectFuncListOrganizationsAdmin != nil {
		mmListOrganizationsAdmin.mock.t.Fatalf("Inspect function is already set for MgmtPrivateServiceClientMock.ListOrganizationsAdmin")
	}

	mmListOrganizationsAdmin.mock.inspectFuncListOrganizationsAdmin = f

	return mmListOrganizationsAdmin
}

// Return sets up results that will be returned by MgmtPrivateServiceClient.ListOrganizationsAdmin
func (mmListOrganizationsAdmin *mMgmtPrivateServiceClientMockListOrganizationsAdmin) Return(lp1 *mm_mgmtv1beta.ListOrganizationsAdminResponse, err error) *MgmtPrivateServiceClientMock {
	if mmListOrganizationsAdmin.mock.funcListOrganizationsAdmin != nil {
		mmListOrganizationsAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListOrganizationsAdmin mock is already set by Set")
	}

	if mmListOrganizationsAdmin.defaultExpectation == nil {
		mmListOrganizationsAdmin.defaultExpectation = &MgmtPrivateServiceClientMockListOrganizationsAdminExpectation{mock: mmListOrganizationsAdmin.mock}
	}
	mmListOrganizationsAdmin.defaultExpectation.results = &MgmtPrivateServiceClientMockListOrganizationsAdminResults{lp1, err}
	return mmListOrganizationsAdmin.mock
}

// Set uses given function f to mock the MgmtPrivateServiceClient.ListOrganizationsAdmin method
func (mmListOrganizationsAdmin *mMgmtPrivateServiceClientMockListOrganizationsAdmin) Set(f func(ctx context.Context, in *mm_mgmtv1beta.ListOrganizationsAdminRequest, opts ...grpc.CallOption) (lp1 *mm_mgmtv1beta.ListOrganizationsAdminResponse, err error)) *MgmtPrivateServiceClientMock {
	if mmListOrganizationsAdmin.defaultExpectation != nil {
		mmListOrganizationsAdmin.mock.t.Fatalf("Default expectation is already set for the MgmtPrivateServiceClient.ListOrganizationsAdmin method")
	}

	if len(mmListOrganizationsAdmin.expectations) > 0 {
		mmListOrganizationsAdmin.mock.t.Fatalf("Some expectations are already set for the MgmtPrivateServiceClient.ListOrganizationsAdmin method")
	}

	mmListOrganizationsAdmin.mock.funcListOrganizationsAdmin = f
	return mmListOrganizationsAdmin.mock
}

// When sets expectation for the MgmtPrivateServiceClient.ListOrganizationsAdmin which will trigger the result defined by the following
// Then helper
func (mmListOrganizationsAdmin *mMgmtPrivateServiceClientMockListOrganizationsAdmin) When(ctx context.Context, in *mm_mgmtv1beta.ListOrganizationsAdminRequest, opts ...grpc.CallOption) *MgmtPrivateServiceClientMockListOrganizationsAdminExpectation {
	if mmListOrganizationsAdmin.mock.funcListOrganizationsAdmin != nil {
		mmListOrganizationsAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListOrganizationsAdmin mock is already set by Set")
	}

	expectation := &MgmtPrivateServiceClientMockListOrganizationsAdminExpectation{
		mock:   mmListOrganizationsAdmin.mock,
		params: &MgmtPrivateServiceClientMockListOrganizationsAdminParams{ctx, in, opts},
	}
	mmListOrganizationsAdmin.expectations = append(mmListOrganizationsAdmin.expectations, expectation)
	return expectation
}

// Then sets up MgmtPrivateServiceClient.ListOrganizationsAdmin return parameters for the expectation previously defined by the When method
func (e *MgmtPrivateServiceClientMockListOrganizationsAdminExpectation) Then(lp1 *mm_mgmtv1beta.ListOrganizationsAdminResponse, err error) *MgmtPrivateServiceClientMock {
	e.results = &MgmtPrivateServiceClientMockListOrganizationsAdminResults{lp1, err}
	return e.mock
}

// Times sets number of times MgmtPrivateServiceClient.ListOrganizationsAdmin should be invoked
func (mmListOrganizationsAdmin *mMgmtPrivateServiceClientMockListOrganizationsAdmin) Times(n uint64) *mMgmtPrivateServiceClientMockListOrganizationsAdmin {
	if n == 0 {
		mmListOrganizationsAdmin.mock.t.Fatalf("Times of MgmtPrivateServiceClientMock.ListOrganizationsAdmin mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListOrganizationsAdmin.expectedInvocations, n)
	return mmListOrganizationsAdmin
}

func (mmListOrganizationsAdmin *mMgmtPrivateServiceClientMockListOrganizationsAdmin) invocationsDone() bool {
	if len(mmListOrganizationsAdmin.expectations) == 0 && mmListOrganizationsAdmin.defaultExpectation == nil && mmListOrganizationsAdmin.mock.funcListOrganizationsAdmin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListOrganizationsAdmin.mock.afterListOrganizationsAdminCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListOrganizationsAdmin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListOrganizationsAdmin implements mgmtv1beta.MgmtPrivateServiceClient
func (mmListOrganizationsAdmin *MgmtPrivateServiceClientMock) ListOrganizationsAdmin(ctx context.Context, in *mm_mgmtv1beta.ListOrganizationsAdminRequest, opts ...grpc.CallOption) (lp1 *mm_mgmtv1beta.ListOrganizationsAdminResponse, err error) {
	mm_atomic.AddUint64(&mmListOrganizationsAdmin.beforeListOrganizationsAdminCounter, 1)
	defer mm_atomic.AddUint64(&mmListOrganizationsAdmin.afterListOrganizationsAdminCounter, 1)

	if mmListOrganizationsAdmin.inspectFuncListOrganizationsAdmin != nil {
		mmListOrganizationsAdmin.inspectFuncListOrganizationsAdmin(ctx, in, opts...)
	}

	mm_params := MgmtPrivateServiceClientMockListOrganizationsAdminParams{ctx, in, opts}

	// Record call args
	mmListOrganizationsAdmin.ListOrganizationsAdminMock.mutex.Lock()
	mmListOrganizationsAdmin.ListOrganizationsAdminMock.callArgs = append(mmListOrganizationsAdmin.ListOrganizationsAdminMock.callArgs, &mm_params)
	mmListOrganizationsAdmin.ListOrganizationsAdminMock.mutex.Unlock()

	for _, e := range mmListOrganizationsAdmin.ListOrganizationsAdminMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp1, e.results.err
		}
	}

	if mmListOrganizationsAdmin.ListOrganizationsAdminMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListOrganizationsAdmin.ListOrganizationsAdminMock.defaultExpectation.Counter, 1)
		mm_want := mmListOrganizationsAdmin.ListOrganizationsAdminMock.defaultExpectation.params
		mm_want_ptrs := mmListOrganizationsAdmin.ListOrganizationsAdminMock.defaultExpectation.paramPtrs

		mm_got := MgmtPrivateServiceClientMockListOrganizationsAdminParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListOrganizationsAdmin.t.Errorf("MgmtPrivateServiceClientMock.ListOrganizationsAdmin got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmListOrganizationsAdmin.t.Errorf("MgmtPrivateServiceClientMock.ListOrganizationsAdmin got unexpected parameter in, want: %#v, got: %#v%s\n", *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmListOrganizationsAdmin.t.Errorf("MgmtPrivateServiceClientMock.ListOrganizationsAdmin got unexpected parameter opts, want: %#v, got: %#v%s\n", *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListOrganizationsAdmin.t.Errorf("MgmtPrivateServiceClientMock.ListOrganizationsAdmin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListOrganizationsAdmin.ListOrganizationsAdminMock.defaultExpectation.results
		if mm_results == nil {
			mmListOrganizationsAdmin.t.Fatal("No results are set for the MgmtPrivateServiceClientMock.ListOrganizationsAdmin")
		}
		return (*mm_results).lp1, (*mm_results).err
	}
	if mmListOrganizationsAdmin.funcListOrganizationsAdmin != nil {
		return mmListOrganizationsAdmin.funcListOrganizationsAdmin(ctx, in, opts...)
	}
	mmListOrganizationsAdmin.t.Fatalf("Unexpected call to MgmtPrivateServiceClientMock.ListOrganizationsAdmin. %v %v %v", ctx, in, opts)
	return
}

// ListOrganizationsAdminAfterCounter returns a count of finished MgmtPrivateServiceClientMock.ListOrganizationsAdmin invocations
func (mmListOrganizationsAdmin *MgmtPrivateServiceClientMock) ListOrganizationsAdminAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListOrganizationsAdmin.afterListOrganizationsAdminCounter)
}

// ListOrganizationsAdminBeforeCounter returns a count of MgmtPrivateServiceClientMock.ListOrganizationsAdmin invocations
func (mmListOrganizationsAdmin *MgmtPrivateServiceClientMock) ListOrganizationsAdminBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListOrganizationsAdmin.beforeListOrganizationsAdminCounter)
}

// Calls returns a list of arguments used in each call to MgmtPrivateServiceClientMock.ListOrganizationsAdmin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListOrganizationsAdmin *mMgmtPrivateServiceClientMockListOrganizationsAdmin) Calls() []*MgmtPrivateServiceClientMockListOrganizationsAdminParams {
	mmListOrganizationsAdmin.mutex.RLock()

	argCopy := make([]*MgmtPrivateServiceClientMockListOrganizationsAdminParams, len(mmListOrganizationsAdmin.callArgs))
	copy(argCopy, mmListOrganizationsAdmin.callArgs)

	mmListOrganizationsAdmin.mutex.RUnlock()

	return argCopy
}

// MinimockListOrganizationsAdminDone returns true if the count of the ListOrganizationsAdmin invocations corresponds
// the number of defined expectations
func (m *MgmtPrivateServiceClientMock) MinimockListOrganizationsAdminDone() bool {
	if m.ListOrganizationsAdminMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListOrganizationsAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListOrganizationsAdminMock.invocationsDone()
}

// MinimockListOrganizationsAdminInspect logs each unmet expectation
func (m *MgmtPrivateServiceClientMock) MinimockListOrganizationsAdminInspect() {
	for _, e := range m.ListOrganizationsAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.ListOrganizationsAdmin with params: %#v", *e.params)
		}
	}

	afterListOrganizationsAdminCounter := mm_atomic.LoadUint64(&m.afterListOrganizationsAdminCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListOrganizationsAdminMock.defaultExpectation != nil && afterListOrganizationsAdminCounter < 1 {
		if m.ListOrganizationsAdminMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MgmtPrivateServiceClientMock.ListOrganizationsAdmin")
		} else {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.ListOrganizationsAdmin with params: %#v", *m.ListOrganizationsAdminMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListOrganizationsAdmin != nil && afterListOrganizationsAdminCounter < 1 {
		m.t.Error("Expected call to MgmtPrivateServiceClientMock.ListOrganizationsAdmin")
	}

	if !m.ListOrganizationsAdminMock.invocationsDone() && afterListOrganizationsAdminCounter > 0 {
		m.t.Errorf("Expected %d calls to MgmtPrivateServiceClientMock.ListOrganizationsAdmin but found %d calls",
			mm_atomic.LoadUint64(&m.ListOrganizationsAdminMock.expectedInvocations), afterListOrganizationsAdminCounter)
	}
}

type mMgmtPrivateServiceClientMockListUsersAdmin struct {
	optional           bool
	mock               *MgmtPrivateServiceClientMock
	defaultExpectation *MgmtPrivateServiceClientMockListUsersAdminExpectation
	expectations       []*MgmtPrivateServiceClientMockListUsersAdminExpectation

	callArgs []*MgmtPrivateServiceClientMockListUsersAdminParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// MgmtPrivateServiceClientMockListUsersAdminExpectation specifies expectation struct of the MgmtPrivateServiceClient.ListUsersAdmin
type MgmtPrivateServiceClientMockListUsersAdminExpectation struct {
	mock      *MgmtPrivateServiceClientMock
	params    *MgmtPrivateServiceClientMockListUsersAdminParams
	paramPtrs *MgmtPrivateServiceClientMockListUsersAdminParamPtrs
	results   *MgmtPrivateServiceClientMockListUsersAdminResults
	Counter   uint64
}

// MgmtPrivateServiceClientMockListUsersAdminParams contains parameters of the MgmtPrivateServiceClient.ListUsersAdmin
type MgmtPrivateServiceClientMockListUsersAdminParams struct {
	ctx  context.Context
	in   *mm_mgmtv1beta.ListUsersAdminRequest
	opts []grpc.CallOption
}

// MgmtPrivateServiceClientMockListUsersAdminParamPtrs contains pointers to parameters of the MgmtPrivateServiceClient.ListUsersAdmin
type MgmtPrivateServiceClientMockListUsersAdminParamPtrs struct {
	ctx  *context.Context
	in   **mm_mgmtv1beta.ListUsersAdminRequest
	opts *[]grpc.CallOption
}

// MgmtPrivateServiceClientMockListUsersAdminResults contains results of the MgmtPrivateServiceClient.ListUsersAdmin
type MgmtPrivateServiceClientMockListUsersAdminResults struct {
	lp1 *mm_mgmtv1beta.ListUsersAdminResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmListUsersAdmin *mMgmtPrivateServiceClientMockListUsersAdmin) Optional() *mMgmtPrivateServiceClientMockListUsersAdmin {
	mmListUsersAdmin.optional = true
	return mmListUsersAdmin
}

// Expect sets up expected params for MgmtPrivateServiceClient.ListUsersAdmin
func (mmListUsersAdmin *mMgmtPrivateServiceClientMockListUsersAdmin) Expect(ctx context.Context, in *mm_mgmtv1beta.ListUsersAdminRequest, opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockListUsersAdmin {
	if mmListUsersAdmin.mock.funcListUsersAdmin != nil {
		mmListUsersAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListUsersAdmin mock is already set by Set")
	}

	if mmListUsersAdmin.defaultExpectation == nil {
		mmListUsersAdmin.defaultExpectation = &MgmtPrivateServiceClientMockListUsersAdminExpectation{}
	}

	if mmListUsersAdmin.defaultExpectation.paramPtrs != nil {
		mmListUsersAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListUsersAdmin mock is already set by ExpectParams functions")
	}

	mmListUsersAdmin.defaultExpectation.params = &MgmtPrivateServiceClientMockListUsersAdminParams{ctx, in, opts}
	for _, e := range mmListUsersAdmin.expectations {
		if minimock.Equal(e.params, mmListUsersAdmin.defaultExpectation.params) {
			mmListUsersAdmin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmListUsersAdmin.defaultExpectation.params)
		}
	}

	return mmListUsersAdmin
}

// ExpectCtxParam1 sets up expected param ctx for MgmtPrivateServiceClient.ListUsersAdmin
func (mmListUsersAdmin *mMgmtPrivateServiceClientMockListUsersAdmin) ExpectCtxParam1(ctx context.Context) *mMgmtPrivateServiceClientMockListUsersAdmin {
	if mmListUsersAdmin.mock.funcListUsersAdmin != nil {
		mmListUsersAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListUsersAdmin mock is already set by Set")
	}

	if mmListUsersAdmin.defaultExpectation == nil {
		mmListUsersAdmin.defaultExpectation = &MgmtPrivateServiceClientMockListUsersAdminExpectation{}
	}

	if mmListUsersAdmin.defaultExpectation.params != nil {
		mmListUsersAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListUsersAdmin mock is already set by Expect")
	}

	if mmListUsersAdmin.defaultExpectation.paramPtrs == nil {
		mmListUsersAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockListUsersAdminParamPtrs{}
	}
	mmListUsersAdmin.defaultExpectation.paramPtrs.ctx = &ctx

	return mmListUsersAdmin
}

// ExpectInParam2 sets up expected param in for MgmtPrivateServiceClient.ListUsersAdmin
func (mmListUsersAdmin *mMgmtPrivateServiceClientMockListUsersAdmin) ExpectInParam2(in *mm_mgmtv1beta.ListUsersAdminRequest) *mMgmtPrivateServiceClientMockListUsersAdmin {
	if mmListUsersAdmin.mock.funcListUsersAdmin != nil {
		mmListUsersAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListUsersAdmin mock is already set by Set")
	}

	if mmListUsersAdmin.defaultExpectation == nil {
		mmListUsersAdmin.defaultExpectation = &MgmtPrivateServiceClientMockListUsersAdminExpectation{}
	}

	if mmListUsersAdmin.defaultExpectation.params != nil {
		mmListUsersAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListUsersAdmin mock is already set by Expect")
	}

	if mmListUsersAdmin.defaultExpectation.paramPtrs == nil {
		mmListUsersAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockListUsersAdminParamPtrs{}
	}
	mmListUsersAdmin.defaultExpectation.paramPtrs.in = &in

	return mmListUsersAdmin
}

// ExpectOptsParam3 sets up expected param opts for MgmtPrivateServiceClient.ListUsersAdmin
func (mmListUsersAdmin *mMgmtPrivateServiceClientMockListUsersAdmin) ExpectOptsParam3(opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockListUsersAdmin {
	if mmListUsersAdmin.mock.funcListUsersAdmin != nil {
		mmListUsersAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListUsersAdmin mock is already set by Set")
	}

	if mmListUsersAdmin.defaultExpectation == nil {
		mmListUsersAdmin.defaultExpectation = &MgmtPrivateServiceClientMockListUsersAdminExpectation{}
	}

	if mmListUsersAdmin.defaultExpectation.params != nil {
		mmListUsersAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListUsersAdmin mock is already set by Expect")
	}

	if mmListUsersAdmin.defaultExpectation.paramPtrs == nil {
		mmListUsersAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockListUsersAdminParamPtrs{}
	}
	mmListUsersAdmin.defaultExpectation.paramPtrs.opts = &opts

	return mmListUsersAdmin
}

// Inspect accepts an inspector function that has same arguments as the MgmtPrivateServiceClient.ListUsersAdmin
func (mmListUsersAdmin *mMgmtPrivateServiceClientMockListUsersAdmin) Inspect(f func(ctx context.Context, in *mm_mgmtv1beta.ListUsersAdminRequest, opts ...grpc.CallOption)) *mMgmtPrivateServiceClientMockListUsersAdmin {
	if mmListUsersAdmin.mock.inspectFuncListUsersAdmin != nil {
		mmListUsersAdmin.mock.t.Fatalf("Inspect function is already set for MgmtPrivateServiceClientMock.ListUsersAdmin")
	}

	mmListUsersAdmin.mock.inspectFuncListUsersAdmin = f

	return mmListUsersAdmin
}

// Return sets up results that will be returned by MgmtPrivateServiceClient.ListUsersAdmin
func (mmListUsersAdmin *mMgmtPrivateServiceClientMockListUsersAdmin) Return(lp1 *mm_mgmtv1beta.ListUsersAdminResponse, err error) *MgmtPrivateServiceClientMock {
	if mmListUsersAdmin.mock.funcListUsersAdmin != nil {
		mmListUsersAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListUsersAdmin mock is already set by Set")
	}

	if mmListUsersAdmin.defaultExpectation == nil {
		mmListUsersAdmin.defaultExpectation = &MgmtPrivateServiceClientMockListUsersAdminExpectation{mock: mmListUsersAdmin.mock}
	}
	mmListUsersAdmin.defaultExpectation.results = &MgmtPrivateServiceClientMockListUsersAdminResults{lp1, err}
	return mmListUsersAdmin.mock
}

// Set uses given function f to mock the MgmtPrivateServiceClient.ListUsersAdmin method
func (mmListUsersAdmin *mMgmtPrivateServiceClientMockListUsersAdmin) Set(f func(ctx context.Context, in *mm_mgmtv1beta.ListUsersAdminRequest, opts ...grpc.CallOption) (lp1 *mm_mgmtv1beta.ListUsersAdminResponse, err error)) *MgmtPrivateServiceClientMock {
	if mmListUsersAdmin.defaultExpectation != nil {
		mmListUsersAdmin.mock.t.Fatalf("Default expectation is already set for the MgmtPrivateServiceClient.ListUsersAdmin method")
	}

	if len(mmListUsersAdmin.expectations) > 0 {
		mmListUsersAdmin.mock.t.Fatalf("Some expectations are already set for the MgmtPrivateServiceClient.ListUsersAdmin method")
	}

	mmListUsersAdmin.mock.funcListUsersAdmin = f
	return mmListUsersAdmin.mock
}

// When sets expectation for the MgmtPrivateServiceClient.ListUsersAdmin which will trigger the result defined by the following
// Then helper
func (mmListUsersAdmin *mMgmtPrivateServiceClientMockListUsersAdmin) When(ctx context.Context, in *mm_mgmtv1beta.ListUsersAdminRequest, opts ...grpc.CallOption) *MgmtPrivateServiceClientMockListUsersAdminExpectation {
	if mmListUsersAdmin.mock.funcListUsersAdmin != nil {
		mmListUsersAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.ListUsersAdmin mock is already set by Set")
	}

	expectation := &MgmtPrivateServiceClientMockListUsersAdminExpectation{
		mock:   mmListUsersAdmin.mock,
		params: &MgmtPrivateServiceClientMockListUsersAdminParams{ctx, in, opts},
	}
	mmListUsersAdmin.expectations = append(mmListUsersAdmin.expectations, expectation)
	return expectation
}

// Then sets up MgmtPrivateServiceClient.ListUsersAdmin return parameters for the expectation previously defined by the When method
func (e *MgmtPrivateServiceClientMockListUsersAdminExpectation) Then(lp1 *mm_mgmtv1beta.ListUsersAdminResponse, err error) *MgmtPrivateServiceClientMock {
	e.results = &MgmtPrivateServiceClientMockListUsersAdminResults{lp1, err}
	return e.mock
}

// Times sets number of times MgmtPrivateServiceClient.ListUsersAdmin should be invoked
func (mmListUsersAdmin *mMgmtPrivateServiceClientMockListUsersAdmin) Times(n uint64) *mMgmtPrivateServiceClientMockListUsersAdmin {
	if n == 0 {
		mmListUsersAdmin.mock.t.Fatalf("Times of MgmtPrivateServiceClientMock.ListUsersAdmin mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmListUsersAdmin.expectedInvocations, n)
	return mmListUsersAdmin
}

func (mmListUsersAdmin *mMgmtPrivateServiceClientMockListUsersAdmin) invocationsDone() bool {
	if len(mmListUsersAdmin.expectations) == 0 && mmListUsersAdmin.defaultExpectation == nil && mmListUsersAdmin.mock.funcListUsersAdmin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmListUsersAdmin.mock.afterListUsersAdminCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmListUsersAdmin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ListUsersAdmin implements mgmtv1beta.MgmtPrivateServiceClient
func (mmListUsersAdmin *MgmtPrivateServiceClientMock) ListUsersAdmin(ctx context.Context, in *mm_mgmtv1beta.ListUsersAdminRequest, opts ...grpc.CallOption) (lp1 *mm_mgmtv1beta.ListUsersAdminResponse, err error) {
	mm_atomic.AddUint64(&mmListUsersAdmin.beforeListUsersAdminCounter, 1)
	defer mm_atomic.AddUint64(&mmListUsersAdmin.afterListUsersAdminCounter, 1)

	if mmListUsersAdmin.inspectFuncListUsersAdmin != nil {
		mmListUsersAdmin.inspectFuncListUsersAdmin(ctx, in, opts...)
	}

	mm_params := MgmtPrivateServiceClientMockListUsersAdminParams{ctx, in, opts}

	// Record call args
	mmListUsersAdmin.ListUsersAdminMock.mutex.Lock()
	mmListUsersAdmin.ListUsersAdminMock.callArgs = append(mmListUsersAdmin.ListUsersAdminMock.callArgs, &mm_params)
	mmListUsersAdmin.ListUsersAdminMock.mutex.Unlock()

	for _, e := range mmListUsersAdmin.ListUsersAdminMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp1, e.results.err
		}
	}

	if mmListUsersAdmin.ListUsersAdminMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmListUsersAdmin.ListUsersAdminMock.defaultExpectation.Counter, 1)
		mm_want := mmListUsersAdmin.ListUsersAdminMock.defaultExpectation.params
		mm_want_ptrs := mmListUsersAdmin.ListUsersAdminMock.defaultExpectation.paramPtrs

		mm_got := MgmtPrivateServiceClientMockListUsersAdminParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmListUsersAdmin.t.Errorf("MgmtPrivateServiceClientMock.ListUsersAdmin got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmListUsersAdmin.t.Errorf("MgmtPrivateServiceClientMock.ListUsersAdmin got unexpected parameter in, want: %#v, got: %#v%s\n", *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmListUsersAdmin.t.Errorf("MgmtPrivateServiceClientMock.ListUsersAdmin got unexpected parameter opts, want: %#v, got: %#v%s\n", *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmListUsersAdmin.t.Errorf("MgmtPrivateServiceClientMock.ListUsersAdmin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmListUsersAdmin.ListUsersAdminMock.defaultExpectation.results
		if mm_results == nil {
			mmListUsersAdmin.t.Fatal("No results are set for the MgmtPrivateServiceClientMock.ListUsersAdmin")
		}
		return (*mm_results).lp1, (*mm_results).err
	}
	if mmListUsersAdmin.funcListUsersAdmin != nil {
		return mmListUsersAdmin.funcListUsersAdmin(ctx, in, opts...)
	}
	mmListUsersAdmin.t.Fatalf("Unexpected call to MgmtPrivateServiceClientMock.ListUsersAdmin. %v %v %v", ctx, in, opts)
	return
}

// ListUsersAdminAfterCounter returns a count of finished MgmtPrivateServiceClientMock.ListUsersAdmin invocations
func (mmListUsersAdmin *MgmtPrivateServiceClientMock) ListUsersAdminAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListUsersAdmin.afterListUsersAdminCounter)
}

// ListUsersAdminBeforeCounter returns a count of MgmtPrivateServiceClientMock.ListUsersAdmin invocations
func (mmListUsersAdmin *MgmtPrivateServiceClientMock) ListUsersAdminBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmListUsersAdmin.beforeListUsersAdminCounter)
}

// Calls returns a list of arguments used in each call to MgmtPrivateServiceClientMock.ListUsersAdmin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmListUsersAdmin *mMgmtPrivateServiceClientMockListUsersAdmin) Calls() []*MgmtPrivateServiceClientMockListUsersAdminParams {
	mmListUsersAdmin.mutex.RLock()

	argCopy := make([]*MgmtPrivateServiceClientMockListUsersAdminParams, len(mmListUsersAdmin.callArgs))
	copy(argCopy, mmListUsersAdmin.callArgs)

	mmListUsersAdmin.mutex.RUnlock()

	return argCopy
}

// MinimockListUsersAdminDone returns true if the count of the ListUsersAdmin invocations corresponds
// the number of defined expectations
func (m *MgmtPrivateServiceClientMock) MinimockListUsersAdminDone() bool {
	if m.ListUsersAdminMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ListUsersAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ListUsersAdminMock.invocationsDone()
}

// MinimockListUsersAdminInspect logs each unmet expectation
func (m *MgmtPrivateServiceClientMock) MinimockListUsersAdminInspect() {
	for _, e := range m.ListUsersAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.ListUsersAdmin with params: %#v", *e.params)
		}
	}

	afterListUsersAdminCounter := mm_atomic.LoadUint64(&m.afterListUsersAdminCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ListUsersAdminMock.defaultExpectation != nil && afterListUsersAdminCounter < 1 {
		if m.ListUsersAdminMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MgmtPrivateServiceClientMock.ListUsersAdmin")
		} else {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.ListUsersAdmin with params: %#v", *m.ListUsersAdminMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcListUsersAdmin != nil && afterListUsersAdminCounter < 1 {
		m.t.Error("Expected call to MgmtPrivateServiceClientMock.ListUsersAdmin")
	}

	if !m.ListUsersAdminMock.invocationsDone() && afterListUsersAdminCounter > 0 {
		m.t.Errorf("Expected %d calls to MgmtPrivateServiceClientMock.ListUsersAdmin but found %d calls",
			mm_atomic.LoadUint64(&m.ListUsersAdminMock.expectedInvocations), afterListUsersAdminCounter)
	}
}

type mMgmtPrivateServiceClientMockLookUpOrganizationAdmin struct {
	optional           bool
	mock               *MgmtPrivateServiceClientMock
	defaultExpectation *MgmtPrivateServiceClientMockLookUpOrganizationAdminExpectation
	expectations       []*MgmtPrivateServiceClientMockLookUpOrganizationAdminExpectation

	callArgs []*MgmtPrivateServiceClientMockLookUpOrganizationAdminParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// MgmtPrivateServiceClientMockLookUpOrganizationAdminExpectation specifies expectation struct of the MgmtPrivateServiceClient.LookUpOrganizationAdmin
type MgmtPrivateServiceClientMockLookUpOrganizationAdminExpectation struct {
	mock      *MgmtPrivateServiceClientMock
	params    *MgmtPrivateServiceClientMockLookUpOrganizationAdminParams
	paramPtrs *MgmtPrivateServiceClientMockLookUpOrganizationAdminParamPtrs
	results   *MgmtPrivateServiceClientMockLookUpOrganizationAdminResults
	Counter   uint64
}

// MgmtPrivateServiceClientMockLookUpOrganizationAdminParams contains parameters of the MgmtPrivateServiceClient.LookUpOrganizationAdmin
type MgmtPrivateServiceClientMockLookUpOrganizationAdminParams struct {
	ctx  context.Context
	in   *mm_mgmtv1beta.LookUpOrganizationAdminRequest
	opts []grpc.CallOption
}

// MgmtPrivateServiceClientMockLookUpOrganizationAdminParamPtrs contains pointers to parameters of the MgmtPrivateServiceClient.LookUpOrganizationAdmin
type MgmtPrivateServiceClientMockLookUpOrganizationAdminParamPtrs struct {
	ctx  *context.Context
	in   **mm_mgmtv1beta.LookUpOrganizationAdminRequest
	opts *[]grpc.CallOption
}

// MgmtPrivateServiceClientMockLookUpOrganizationAdminResults contains results of the MgmtPrivateServiceClient.LookUpOrganizationAdmin
type MgmtPrivateServiceClientMockLookUpOrganizationAdminResults struct {
	lp1 *mm_mgmtv1beta.LookUpOrganizationAdminResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmLookUpOrganizationAdmin *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin) Optional() *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin {
	mmLookUpOrganizationAdmin.optional = true
	return mmLookUpOrganizationAdmin
}

// Expect sets up expected params for MgmtPrivateServiceClient.LookUpOrganizationAdmin
func (mmLookUpOrganizationAdmin *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin) Expect(ctx context.Context, in *mm_mgmtv1beta.LookUpOrganizationAdminRequest, opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin {
	if mmLookUpOrganizationAdmin.mock.funcLookUpOrganizationAdmin != nil {
		mmLookUpOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpOrganizationAdmin mock is already set by Set")
	}

	if mmLookUpOrganizationAdmin.defaultExpectation == nil {
		mmLookUpOrganizationAdmin.defaultExpectation = &MgmtPrivateServiceClientMockLookUpOrganizationAdminExpectation{}
	}

	if mmLookUpOrganizationAdmin.defaultExpectation.paramPtrs != nil {
		mmLookUpOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpOrganizationAdmin mock is already set by ExpectParams functions")
	}

	mmLookUpOrganizationAdmin.defaultExpectation.params = &MgmtPrivateServiceClientMockLookUpOrganizationAdminParams{ctx, in, opts}
	for _, e := range mmLookUpOrganizationAdmin.expectations {
		if minimock.Equal(e.params, mmLookUpOrganizationAdmin.defaultExpectation.params) {
			mmLookUpOrganizationAdmin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLookUpOrganizationAdmin.defaultExpectation.params)
		}
	}

	return mmLookUpOrganizationAdmin
}

// ExpectCtxParam1 sets up expected param ctx for MgmtPrivateServiceClient.LookUpOrganizationAdmin
func (mmLookUpOrganizationAdmin *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin) ExpectCtxParam1(ctx context.Context) *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin {
	if mmLookUpOrganizationAdmin.mock.funcLookUpOrganizationAdmin != nil {
		mmLookUpOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpOrganizationAdmin mock is already set by Set")
	}

	if mmLookUpOrganizationAdmin.defaultExpectation == nil {
		mmLookUpOrganizationAdmin.defaultExpectation = &MgmtPrivateServiceClientMockLookUpOrganizationAdminExpectation{}
	}

	if mmLookUpOrganizationAdmin.defaultExpectation.params != nil {
		mmLookUpOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpOrganizationAdmin mock is already set by Expect")
	}

	if mmLookUpOrganizationAdmin.defaultExpectation.paramPtrs == nil {
		mmLookUpOrganizationAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockLookUpOrganizationAdminParamPtrs{}
	}
	mmLookUpOrganizationAdmin.defaultExpectation.paramPtrs.ctx = &ctx

	return mmLookUpOrganizationAdmin
}

// ExpectInParam2 sets up expected param in for MgmtPrivateServiceClient.LookUpOrganizationAdmin
func (mmLookUpOrganizationAdmin *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin) ExpectInParam2(in *mm_mgmtv1beta.LookUpOrganizationAdminRequest) *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin {
	if mmLookUpOrganizationAdmin.mock.funcLookUpOrganizationAdmin != nil {
		mmLookUpOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpOrganizationAdmin mock is already set by Set")
	}

	if mmLookUpOrganizationAdmin.defaultExpectation == nil {
		mmLookUpOrganizationAdmin.defaultExpectation = &MgmtPrivateServiceClientMockLookUpOrganizationAdminExpectation{}
	}

	if mmLookUpOrganizationAdmin.defaultExpectation.params != nil {
		mmLookUpOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpOrganizationAdmin mock is already set by Expect")
	}

	if mmLookUpOrganizationAdmin.defaultExpectation.paramPtrs == nil {
		mmLookUpOrganizationAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockLookUpOrganizationAdminParamPtrs{}
	}
	mmLookUpOrganizationAdmin.defaultExpectation.paramPtrs.in = &in

	return mmLookUpOrganizationAdmin
}

// ExpectOptsParam3 sets up expected param opts for MgmtPrivateServiceClient.LookUpOrganizationAdmin
func (mmLookUpOrganizationAdmin *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin) ExpectOptsParam3(opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin {
	if mmLookUpOrganizationAdmin.mock.funcLookUpOrganizationAdmin != nil {
		mmLookUpOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpOrganizationAdmin mock is already set by Set")
	}

	if mmLookUpOrganizationAdmin.defaultExpectation == nil {
		mmLookUpOrganizationAdmin.defaultExpectation = &MgmtPrivateServiceClientMockLookUpOrganizationAdminExpectation{}
	}

	if mmLookUpOrganizationAdmin.defaultExpectation.params != nil {
		mmLookUpOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpOrganizationAdmin mock is already set by Expect")
	}

	if mmLookUpOrganizationAdmin.defaultExpectation.paramPtrs == nil {
		mmLookUpOrganizationAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockLookUpOrganizationAdminParamPtrs{}
	}
	mmLookUpOrganizationAdmin.defaultExpectation.paramPtrs.opts = &opts

	return mmLookUpOrganizationAdmin
}

// Inspect accepts an inspector function that has same arguments as the MgmtPrivateServiceClient.LookUpOrganizationAdmin
func (mmLookUpOrganizationAdmin *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin) Inspect(f func(ctx context.Context, in *mm_mgmtv1beta.LookUpOrganizationAdminRequest, opts ...grpc.CallOption)) *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin {
	if mmLookUpOrganizationAdmin.mock.inspectFuncLookUpOrganizationAdmin != nil {
		mmLookUpOrganizationAdmin.mock.t.Fatalf("Inspect function is already set for MgmtPrivateServiceClientMock.LookUpOrganizationAdmin")
	}

	mmLookUpOrganizationAdmin.mock.inspectFuncLookUpOrganizationAdmin = f

	return mmLookUpOrganizationAdmin
}

// Return sets up results that will be returned by MgmtPrivateServiceClient.LookUpOrganizationAdmin
func (mmLookUpOrganizationAdmin *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin) Return(lp1 *mm_mgmtv1beta.LookUpOrganizationAdminResponse, err error) *MgmtPrivateServiceClientMock {
	if mmLookUpOrganizationAdmin.mock.funcLookUpOrganizationAdmin != nil {
		mmLookUpOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpOrganizationAdmin mock is already set by Set")
	}

	if mmLookUpOrganizationAdmin.defaultExpectation == nil {
		mmLookUpOrganizationAdmin.defaultExpectation = &MgmtPrivateServiceClientMockLookUpOrganizationAdminExpectation{mock: mmLookUpOrganizationAdmin.mock}
	}
	mmLookUpOrganizationAdmin.defaultExpectation.results = &MgmtPrivateServiceClientMockLookUpOrganizationAdminResults{lp1, err}
	return mmLookUpOrganizationAdmin.mock
}

// Set uses given function f to mock the MgmtPrivateServiceClient.LookUpOrganizationAdmin method
func (mmLookUpOrganizationAdmin *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin) Set(f func(ctx context.Context, in *mm_mgmtv1beta.LookUpOrganizationAdminRequest, opts ...grpc.CallOption) (lp1 *mm_mgmtv1beta.LookUpOrganizationAdminResponse, err error)) *MgmtPrivateServiceClientMock {
	if mmLookUpOrganizationAdmin.defaultExpectation != nil {
		mmLookUpOrganizationAdmin.mock.t.Fatalf("Default expectation is already set for the MgmtPrivateServiceClient.LookUpOrganizationAdmin method")
	}

	if len(mmLookUpOrganizationAdmin.expectations) > 0 {
		mmLookUpOrganizationAdmin.mock.t.Fatalf("Some expectations are already set for the MgmtPrivateServiceClient.LookUpOrganizationAdmin method")
	}

	mmLookUpOrganizationAdmin.mock.funcLookUpOrganizationAdmin = f
	return mmLookUpOrganizationAdmin.mock
}

// When sets expectation for the MgmtPrivateServiceClient.LookUpOrganizationAdmin which will trigger the result defined by the following
// Then helper
func (mmLookUpOrganizationAdmin *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin) When(ctx context.Context, in *mm_mgmtv1beta.LookUpOrganizationAdminRequest, opts ...grpc.CallOption) *MgmtPrivateServiceClientMockLookUpOrganizationAdminExpectation {
	if mmLookUpOrganizationAdmin.mock.funcLookUpOrganizationAdmin != nil {
		mmLookUpOrganizationAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpOrganizationAdmin mock is already set by Set")
	}

	expectation := &MgmtPrivateServiceClientMockLookUpOrganizationAdminExpectation{
		mock:   mmLookUpOrganizationAdmin.mock,
		params: &MgmtPrivateServiceClientMockLookUpOrganizationAdminParams{ctx, in, opts},
	}
	mmLookUpOrganizationAdmin.expectations = append(mmLookUpOrganizationAdmin.expectations, expectation)
	return expectation
}

// Then sets up MgmtPrivateServiceClient.LookUpOrganizationAdmin return parameters for the expectation previously defined by the When method
func (e *MgmtPrivateServiceClientMockLookUpOrganizationAdminExpectation) Then(lp1 *mm_mgmtv1beta.LookUpOrganizationAdminResponse, err error) *MgmtPrivateServiceClientMock {
	e.results = &MgmtPrivateServiceClientMockLookUpOrganizationAdminResults{lp1, err}
	return e.mock
}

// Times sets number of times MgmtPrivateServiceClient.LookUpOrganizationAdmin should be invoked
func (mmLookUpOrganizationAdmin *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin) Times(n uint64) *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin {
	if n == 0 {
		mmLookUpOrganizationAdmin.mock.t.Fatalf("Times of MgmtPrivateServiceClientMock.LookUpOrganizationAdmin mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmLookUpOrganizationAdmin.expectedInvocations, n)
	return mmLookUpOrganizationAdmin
}

func (mmLookUpOrganizationAdmin *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin) invocationsDone() bool {
	if len(mmLookUpOrganizationAdmin.expectations) == 0 && mmLookUpOrganizationAdmin.defaultExpectation == nil && mmLookUpOrganizationAdmin.mock.funcLookUpOrganizationAdmin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmLookUpOrganizationAdmin.mock.afterLookUpOrganizationAdminCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmLookUpOrganizationAdmin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// LookUpOrganizationAdmin implements mgmtv1beta.MgmtPrivateServiceClient
func (mmLookUpOrganizationAdmin *MgmtPrivateServiceClientMock) LookUpOrganizationAdmin(ctx context.Context, in *mm_mgmtv1beta.LookUpOrganizationAdminRequest, opts ...grpc.CallOption) (lp1 *mm_mgmtv1beta.LookUpOrganizationAdminResponse, err error) {
	mm_atomic.AddUint64(&mmLookUpOrganizationAdmin.beforeLookUpOrganizationAdminCounter, 1)
	defer mm_atomic.AddUint64(&mmLookUpOrganizationAdmin.afterLookUpOrganizationAdminCounter, 1)

	if mmLookUpOrganizationAdmin.inspectFuncLookUpOrganizationAdmin != nil {
		mmLookUpOrganizationAdmin.inspectFuncLookUpOrganizationAdmin(ctx, in, opts...)
	}

	mm_params := MgmtPrivateServiceClientMockLookUpOrganizationAdminParams{ctx, in, opts}

	// Record call args
	mmLookUpOrganizationAdmin.LookUpOrganizationAdminMock.mutex.Lock()
	mmLookUpOrganizationAdmin.LookUpOrganizationAdminMock.callArgs = append(mmLookUpOrganizationAdmin.LookUpOrganizationAdminMock.callArgs, &mm_params)
	mmLookUpOrganizationAdmin.LookUpOrganizationAdminMock.mutex.Unlock()

	for _, e := range mmLookUpOrganizationAdmin.LookUpOrganizationAdminMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp1, e.results.err
		}
	}

	if mmLookUpOrganizationAdmin.LookUpOrganizationAdminMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLookUpOrganizationAdmin.LookUpOrganizationAdminMock.defaultExpectation.Counter, 1)
		mm_want := mmLookUpOrganizationAdmin.LookUpOrganizationAdminMock.defaultExpectation.params
		mm_want_ptrs := mmLookUpOrganizationAdmin.LookUpOrganizationAdminMock.defaultExpectation.paramPtrs

		mm_got := MgmtPrivateServiceClientMockLookUpOrganizationAdminParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmLookUpOrganizationAdmin.t.Errorf("MgmtPrivateServiceClientMock.LookUpOrganizationAdmin got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmLookUpOrganizationAdmin.t.Errorf("MgmtPrivateServiceClientMock.LookUpOrganizationAdmin got unexpected parameter in, want: %#v, got: %#v%s\n", *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmLookUpOrganizationAdmin.t.Errorf("MgmtPrivateServiceClientMock.LookUpOrganizationAdmin got unexpected parameter opts, want: %#v, got: %#v%s\n", *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLookUpOrganizationAdmin.t.Errorf("MgmtPrivateServiceClientMock.LookUpOrganizationAdmin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLookUpOrganizationAdmin.LookUpOrganizationAdminMock.defaultExpectation.results
		if mm_results == nil {
			mmLookUpOrganizationAdmin.t.Fatal("No results are set for the MgmtPrivateServiceClientMock.LookUpOrganizationAdmin")
		}
		return (*mm_results).lp1, (*mm_results).err
	}
	if mmLookUpOrganizationAdmin.funcLookUpOrganizationAdmin != nil {
		return mmLookUpOrganizationAdmin.funcLookUpOrganizationAdmin(ctx, in, opts...)
	}
	mmLookUpOrganizationAdmin.t.Fatalf("Unexpected call to MgmtPrivateServiceClientMock.LookUpOrganizationAdmin. %v %v %v", ctx, in, opts)
	return
}

// LookUpOrganizationAdminAfterCounter returns a count of finished MgmtPrivateServiceClientMock.LookUpOrganizationAdmin invocations
func (mmLookUpOrganizationAdmin *MgmtPrivateServiceClientMock) LookUpOrganizationAdminAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLookUpOrganizationAdmin.afterLookUpOrganizationAdminCounter)
}

// LookUpOrganizationAdminBeforeCounter returns a count of MgmtPrivateServiceClientMock.LookUpOrganizationAdmin invocations
func (mmLookUpOrganizationAdmin *MgmtPrivateServiceClientMock) LookUpOrganizationAdminBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLookUpOrganizationAdmin.beforeLookUpOrganizationAdminCounter)
}

// Calls returns a list of arguments used in each call to MgmtPrivateServiceClientMock.LookUpOrganizationAdmin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLookUpOrganizationAdmin *mMgmtPrivateServiceClientMockLookUpOrganizationAdmin) Calls() []*MgmtPrivateServiceClientMockLookUpOrganizationAdminParams {
	mmLookUpOrganizationAdmin.mutex.RLock()

	argCopy := make([]*MgmtPrivateServiceClientMockLookUpOrganizationAdminParams, len(mmLookUpOrganizationAdmin.callArgs))
	copy(argCopy, mmLookUpOrganizationAdmin.callArgs)

	mmLookUpOrganizationAdmin.mutex.RUnlock()

	return argCopy
}

// MinimockLookUpOrganizationAdminDone returns true if the count of the LookUpOrganizationAdmin invocations corresponds
// the number of defined expectations
func (m *MgmtPrivateServiceClientMock) MinimockLookUpOrganizationAdminDone() bool {
	if m.LookUpOrganizationAdminMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.LookUpOrganizationAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.LookUpOrganizationAdminMock.invocationsDone()
}

// MinimockLookUpOrganizationAdminInspect logs each unmet expectation
func (m *MgmtPrivateServiceClientMock) MinimockLookUpOrganizationAdminInspect() {
	for _, e := range m.LookUpOrganizationAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.LookUpOrganizationAdmin with params: %#v", *e.params)
		}
	}

	afterLookUpOrganizationAdminCounter := mm_atomic.LoadUint64(&m.afterLookUpOrganizationAdminCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.LookUpOrganizationAdminMock.defaultExpectation != nil && afterLookUpOrganizationAdminCounter < 1 {
		if m.LookUpOrganizationAdminMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MgmtPrivateServiceClientMock.LookUpOrganizationAdmin")
		} else {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.LookUpOrganizationAdmin with params: %#v", *m.LookUpOrganizationAdminMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLookUpOrganizationAdmin != nil && afterLookUpOrganizationAdminCounter < 1 {
		m.t.Error("Expected call to MgmtPrivateServiceClientMock.LookUpOrganizationAdmin")
	}

	if !m.LookUpOrganizationAdminMock.invocationsDone() && afterLookUpOrganizationAdminCounter > 0 {
		m.t.Errorf("Expected %d calls to MgmtPrivateServiceClientMock.LookUpOrganizationAdmin but found %d calls",
			mm_atomic.LoadUint64(&m.LookUpOrganizationAdminMock.expectedInvocations), afterLookUpOrganizationAdminCounter)
	}
}

type mMgmtPrivateServiceClientMockLookUpUserAdmin struct {
	optional           bool
	mock               *MgmtPrivateServiceClientMock
	defaultExpectation *MgmtPrivateServiceClientMockLookUpUserAdminExpectation
	expectations       []*MgmtPrivateServiceClientMockLookUpUserAdminExpectation

	callArgs []*MgmtPrivateServiceClientMockLookUpUserAdminParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// MgmtPrivateServiceClientMockLookUpUserAdminExpectation specifies expectation struct of the MgmtPrivateServiceClient.LookUpUserAdmin
type MgmtPrivateServiceClientMockLookUpUserAdminExpectation struct {
	mock      *MgmtPrivateServiceClientMock
	params    *MgmtPrivateServiceClientMockLookUpUserAdminParams
	paramPtrs *MgmtPrivateServiceClientMockLookUpUserAdminParamPtrs
	results   *MgmtPrivateServiceClientMockLookUpUserAdminResults
	Counter   uint64
}

// MgmtPrivateServiceClientMockLookUpUserAdminParams contains parameters of the MgmtPrivateServiceClient.LookUpUserAdmin
type MgmtPrivateServiceClientMockLookUpUserAdminParams struct {
	ctx  context.Context
	in   *mm_mgmtv1beta.LookUpUserAdminRequest
	opts []grpc.CallOption
}

// MgmtPrivateServiceClientMockLookUpUserAdminParamPtrs contains pointers to parameters of the MgmtPrivateServiceClient.LookUpUserAdmin
type MgmtPrivateServiceClientMockLookUpUserAdminParamPtrs struct {
	ctx  *context.Context
	in   **mm_mgmtv1beta.LookUpUserAdminRequest
	opts *[]grpc.CallOption
}

// MgmtPrivateServiceClientMockLookUpUserAdminResults contains results of the MgmtPrivateServiceClient.LookUpUserAdmin
type MgmtPrivateServiceClientMockLookUpUserAdminResults struct {
	lp1 *mm_mgmtv1beta.LookUpUserAdminResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmLookUpUserAdmin *mMgmtPrivateServiceClientMockLookUpUserAdmin) Optional() *mMgmtPrivateServiceClientMockLookUpUserAdmin {
	mmLookUpUserAdmin.optional = true
	return mmLookUpUserAdmin
}

// Expect sets up expected params for MgmtPrivateServiceClient.LookUpUserAdmin
func (mmLookUpUserAdmin *mMgmtPrivateServiceClientMockLookUpUserAdmin) Expect(ctx context.Context, in *mm_mgmtv1beta.LookUpUserAdminRequest, opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockLookUpUserAdmin {
	if mmLookUpUserAdmin.mock.funcLookUpUserAdmin != nil {
		mmLookUpUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpUserAdmin mock is already set by Set")
	}

	if mmLookUpUserAdmin.defaultExpectation == nil {
		mmLookUpUserAdmin.defaultExpectation = &MgmtPrivateServiceClientMockLookUpUserAdminExpectation{}
	}

	if mmLookUpUserAdmin.defaultExpectation.paramPtrs != nil {
		mmLookUpUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpUserAdmin mock is already set by ExpectParams functions")
	}

	mmLookUpUserAdmin.defaultExpectation.params = &MgmtPrivateServiceClientMockLookUpUserAdminParams{ctx, in, opts}
	for _, e := range mmLookUpUserAdmin.expectations {
		if minimock.Equal(e.params, mmLookUpUserAdmin.defaultExpectation.params) {
			mmLookUpUserAdmin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLookUpUserAdmin.defaultExpectation.params)
		}
	}

	return mmLookUpUserAdmin
}

// ExpectCtxParam1 sets up expected param ctx for MgmtPrivateServiceClient.LookUpUserAdmin
func (mmLookUpUserAdmin *mMgmtPrivateServiceClientMockLookUpUserAdmin) ExpectCtxParam1(ctx context.Context) *mMgmtPrivateServiceClientMockLookUpUserAdmin {
	if mmLookUpUserAdmin.mock.funcLookUpUserAdmin != nil {
		mmLookUpUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpUserAdmin mock is already set by Set")
	}

	if mmLookUpUserAdmin.defaultExpectation == nil {
		mmLookUpUserAdmin.defaultExpectation = &MgmtPrivateServiceClientMockLookUpUserAdminExpectation{}
	}

	if mmLookUpUserAdmin.defaultExpectation.params != nil {
		mmLookUpUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpUserAdmin mock is already set by Expect")
	}

	if mmLookUpUserAdmin.defaultExpectation.paramPtrs == nil {
		mmLookUpUserAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockLookUpUserAdminParamPtrs{}
	}
	mmLookUpUserAdmin.defaultExpectation.paramPtrs.ctx = &ctx

	return mmLookUpUserAdmin
}

// ExpectInParam2 sets up expected param in for MgmtPrivateServiceClient.LookUpUserAdmin
func (mmLookUpUserAdmin *mMgmtPrivateServiceClientMockLookUpUserAdmin) ExpectInParam2(in *mm_mgmtv1beta.LookUpUserAdminRequest) *mMgmtPrivateServiceClientMockLookUpUserAdmin {
	if mmLookUpUserAdmin.mock.funcLookUpUserAdmin != nil {
		mmLookUpUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpUserAdmin mock is already set by Set")
	}

	if mmLookUpUserAdmin.defaultExpectation == nil {
		mmLookUpUserAdmin.defaultExpectation = &MgmtPrivateServiceClientMockLookUpUserAdminExpectation{}
	}

	if mmLookUpUserAdmin.defaultExpectation.params != nil {
		mmLookUpUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpUserAdmin mock is already set by Expect")
	}

	if mmLookUpUserAdmin.defaultExpectation.paramPtrs == nil {
		mmLookUpUserAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockLookUpUserAdminParamPtrs{}
	}
	mmLookUpUserAdmin.defaultExpectation.paramPtrs.in = &in

	return mmLookUpUserAdmin
}

// ExpectOptsParam3 sets up expected param opts for MgmtPrivateServiceClient.LookUpUserAdmin
func (mmLookUpUserAdmin *mMgmtPrivateServiceClientMockLookUpUserAdmin) ExpectOptsParam3(opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockLookUpUserAdmin {
	if mmLookUpUserAdmin.mock.funcLookUpUserAdmin != nil {
		mmLookUpUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpUserAdmin mock is already set by Set")
	}

	if mmLookUpUserAdmin.defaultExpectation == nil {
		mmLookUpUserAdmin.defaultExpectation = &MgmtPrivateServiceClientMockLookUpUserAdminExpectation{}
	}

	if mmLookUpUserAdmin.defaultExpectation.params != nil {
		mmLookUpUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpUserAdmin mock is already set by Expect")
	}

	if mmLookUpUserAdmin.defaultExpectation.paramPtrs == nil {
		mmLookUpUserAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockLookUpUserAdminParamPtrs{}
	}
	mmLookUpUserAdmin.defaultExpectation.paramPtrs.opts = &opts

	return mmLookUpUserAdmin
}

// Inspect accepts an inspector function that has same arguments as the MgmtPrivateServiceClient.LookUpUserAdmin
func (mmLookUpUserAdmin *mMgmtPrivateServiceClientMockLookUpUserAdmin) Inspect(f func(ctx context.Context, in *mm_mgmtv1beta.LookUpUserAdminRequest, opts ...grpc.CallOption)) *mMgmtPrivateServiceClientMockLookUpUserAdmin {
	if mmLookUpUserAdmin.mock.inspectFuncLookUpUserAdmin != nil {
		mmLookUpUserAdmin.mock.t.Fatalf("Inspect function is already set for MgmtPrivateServiceClientMock.LookUpUserAdmin")
	}

	mmLookUpUserAdmin.mock.inspectFuncLookUpUserAdmin = f

	return mmLookUpUserAdmin
}

// Return sets up results that will be returned by MgmtPrivateServiceClient.LookUpUserAdmin
func (mmLookUpUserAdmin *mMgmtPrivateServiceClientMockLookUpUserAdmin) Return(lp1 *mm_mgmtv1beta.LookUpUserAdminResponse, err error) *MgmtPrivateServiceClientMock {
	if mmLookUpUserAdmin.mock.funcLookUpUserAdmin != nil {
		mmLookUpUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpUserAdmin mock is already set by Set")
	}

	if mmLookUpUserAdmin.defaultExpectation == nil {
		mmLookUpUserAdmin.defaultExpectation = &MgmtPrivateServiceClientMockLookUpUserAdminExpectation{mock: mmLookUpUserAdmin.mock}
	}
	mmLookUpUserAdmin.defaultExpectation.results = &MgmtPrivateServiceClientMockLookUpUserAdminResults{lp1, err}
	return mmLookUpUserAdmin.mock
}

// Set uses given function f to mock the MgmtPrivateServiceClient.LookUpUserAdmin method
func (mmLookUpUserAdmin *mMgmtPrivateServiceClientMockLookUpUserAdmin) Set(f func(ctx context.Context, in *mm_mgmtv1beta.LookUpUserAdminRequest, opts ...grpc.CallOption) (lp1 *mm_mgmtv1beta.LookUpUserAdminResponse, err error)) *MgmtPrivateServiceClientMock {
	if mmLookUpUserAdmin.defaultExpectation != nil {
		mmLookUpUserAdmin.mock.t.Fatalf("Default expectation is already set for the MgmtPrivateServiceClient.LookUpUserAdmin method")
	}

	if len(mmLookUpUserAdmin.expectations) > 0 {
		mmLookUpUserAdmin.mock.t.Fatalf("Some expectations are already set for the MgmtPrivateServiceClient.LookUpUserAdmin method")
	}

	mmLookUpUserAdmin.mock.funcLookUpUserAdmin = f
	return mmLookUpUserAdmin.mock
}

// When sets expectation for the MgmtPrivateServiceClient.LookUpUserAdmin which will trigger the result defined by the following
// Then helper
func (mmLookUpUserAdmin *mMgmtPrivateServiceClientMockLookUpUserAdmin) When(ctx context.Context, in *mm_mgmtv1beta.LookUpUserAdminRequest, opts ...grpc.CallOption) *MgmtPrivateServiceClientMockLookUpUserAdminExpectation {
	if mmLookUpUserAdmin.mock.funcLookUpUserAdmin != nil {
		mmLookUpUserAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.LookUpUserAdmin mock is already set by Set")
	}

	expectation := &MgmtPrivateServiceClientMockLookUpUserAdminExpectation{
		mock:   mmLookUpUserAdmin.mock,
		params: &MgmtPrivateServiceClientMockLookUpUserAdminParams{ctx, in, opts},
	}
	mmLookUpUserAdmin.expectations = append(mmLookUpUserAdmin.expectations, expectation)
	return expectation
}

// Then sets up MgmtPrivateServiceClient.LookUpUserAdmin return parameters for the expectation previously defined by the When method
func (e *MgmtPrivateServiceClientMockLookUpUserAdminExpectation) Then(lp1 *mm_mgmtv1beta.LookUpUserAdminResponse, err error) *MgmtPrivateServiceClientMock {
	e.results = &MgmtPrivateServiceClientMockLookUpUserAdminResults{lp1, err}
	return e.mock
}

// Times sets number of times MgmtPrivateServiceClient.LookUpUserAdmin should be invoked
func (mmLookUpUserAdmin *mMgmtPrivateServiceClientMockLookUpUserAdmin) Times(n uint64) *mMgmtPrivateServiceClientMockLookUpUserAdmin {
	if n == 0 {
		mmLookUpUserAdmin.mock.t.Fatalf("Times of MgmtPrivateServiceClientMock.LookUpUserAdmin mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmLookUpUserAdmin.expectedInvocations, n)
	return mmLookUpUserAdmin
}

func (mmLookUpUserAdmin *mMgmtPrivateServiceClientMockLookUpUserAdmin) invocationsDone() bool {
	if len(mmLookUpUserAdmin.expectations) == 0 && mmLookUpUserAdmin.defaultExpectation == nil && mmLookUpUserAdmin.mock.funcLookUpUserAdmin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmLookUpUserAdmin.mock.afterLookUpUserAdminCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmLookUpUserAdmin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// LookUpUserAdmin implements mgmtv1beta.MgmtPrivateServiceClient
func (mmLookUpUserAdmin *MgmtPrivateServiceClientMock) LookUpUserAdmin(ctx context.Context, in *mm_mgmtv1beta.LookUpUserAdminRequest, opts ...grpc.CallOption) (lp1 *mm_mgmtv1beta.LookUpUserAdminResponse, err error) {
	mm_atomic.AddUint64(&mmLookUpUserAdmin.beforeLookUpUserAdminCounter, 1)
	defer mm_atomic.AddUint64(&mmLookUpUserAdmin.afterLookUpUserAdminCounter, 1)

	if mmLookUpUserAdmin.inspectFuncLookUpUserAdmin != nil {
		mmLookUpUserAdmin.inspectFuncLookUpUserAdmin(ctx, in, opts...)
	}

	mm_params := MgmtPrivateServiceClientMockLookUpUserAdminParams{ctx, in, opts}

	// Record call args
	mmLookUpUserAdmin.LookUpUserAdminMock.mutex.Lock()
	mmLookUpUserAdmin.LookUpUserAdminMock.callArgs = append(mmLookUpUserAdmin.LookUpUserAdminMock.callArgs, &mm_params)
	mmLookUpUserAdmin.LookUpUserAdminMock.mutex.Unlock()

	for _, e := range mmLookUpUserAdmin.LookUpUserAdminMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp1, e.results.err
		}
	}

	if mmLookUpUserAdmin.LookUpUserAdminMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLookUpUserAdmin.LookUpUserAdminMock.defaultExpectation.Counter, 1)
		mm_want := mmLookUpUserAdmin.LookUpUserAdminMock.defaultExpectation.params
		mm_want_ptrs := mmLookUpUserAdmin.LookUpUserAdminMock.defaultExpectation.paramPtrs

		mm_got := MgmtPrivateServiceClientMockLookUpUserAdminParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmLookUpUserAdmin.t.Errorf("MgmtPrivateServiceClientMock.LookUpUserAdmin got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmLookUpUserAdmin.t.Errorf("MgmtPrivateServiceClientMock.LookUpUserAdmin got unexpected parameter in, want: %#v, got: %#v%s\n", *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmLookUpUserAdmin.t.Errorf("MgmtPrivateServiceClientMock.LookUpUserAdmin got unexpected parameter opts, want: %#v, got: %#v%s\n", *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLookUpUserAdmin.t.Errorf("MgmtPrivateServiceClientMock.LookUpUserAdmin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLookUpUserAdmin.LookUpUserAdminMock.defaultExpectation.results
		if mm_results == nil {
			mmLookUpUserAdmin.t.Fatal("No results are set for the MgmtPrivateServiceClientMock.LookUpUserAdmin")
		}
		return (*mm_results).lp1, (*mm_results).err
	}
	if mmLookUpUserAdmin.funcLookUpUserAdmin != nil {
		return mmLookUpUserAdmin.funcLookUpUserAdmin(ctx, in, opts...)
	}
	mmLookUpUserAdmin.t.Fatalf("Unexpected call to MgmtPrivateServiceClientMock.LookUpUserAdmin. %v %v %v", ctx, in, opts)
	return
}

// LookUpUserAdminAfterCounter returns a count of finished MgmtPrivateServiceClientMock.LookUpUserAdmin invocations
func (mmLookUpUserAdmin *MgmtPrivateServiceClientMock) LookUpUserAdminAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLookUpUserAdmin.afterLookUpUserAdminCounter)
}

// LookUpUserAdminBeforeCounter returns a count of MgmtPrivateServiceClientMock.LookUpUserAdmin invocations
func (mmLookUpUserAdmin *MgmtPrivateServiceClientMock) LookUpUserAdminBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLookUpUserAdmin.beforeLookUpUserAdminCounter)
}

// Calls returns a list of arguments used in each call to MgmtPrivateServiceClientMock.LookUpUserAdmin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLookUpUserAdmin *mMgmtPrivateServiceClientMockLookUpUserAdmin) Calls() []*MgmtPrivateServiceClientMockLookUpUserAdminParams {
	mmLookUpUserAdmin.mutex.RLock()

	argCopy := make([]*MgmtPrivateServiceClientMockLookUpUserAdminParams, len(mmLookUpUserAdmin.callArgs))
	copy(argCopy, mmLookUpUserAdmin.callArgs)

	mmLookUpUserAdmin.mutex.RUnlock()

	return argCopy
}

// MinimockLookUpUserAdminDone returns true if the count of the LookUpUserAdmin invocations corresponds
// the number of defined expectations
func (m *MgmtPrivateServiceClientMock) MinimockLookUpUserAdminDone() bool {
	if m.LookUpUserAdminMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.LookUpUserAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.LookUpUserAdminMock.invocationsDone()
}

// MinimockLookUpUserAdminInspect logs each unmet expectation
func (m *MgmtPrivateServiceClientMock) MinimockLookUpUserAdminInspect() {
	for _, e := range m.LookUpUserAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.LookUpUserAdmin with params: %#v", *e.params)
		}
	}

	afterLookUpUserAdminCounter := mm_atomic.LoadUint64(&m.afterLookUpUserAdminCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.LookUpUserAdminMock.defaultExpectation != nil && afterLookUpUserAdminCounter < 1 {
		if m.LookUpUserAdminMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MgmtPrivateServiceClientMock.LookUpUserAdmin")
		} else {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.LookUpUserAdmin with params: %#v", *m.LookUpUserAdminMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLookUpUserAdmin != nil && afterLookUpUserAdminCounter < 1 {
		m.t.Error("Expected call to MgmtPrivateServiceClientMock.LookUpUserAdmin")
	}

	if !m.LookUpUserAdminMock.invocationsDone() && afterLookUpUserAdminCounter > 0 {
		m.t.Errorf("Expected %d calls to MgmtPrivateServiceClientMock.LookUpUserAdmin but found %d calls",
			mm_atomic.LoadUint64(&m.LookUpUserAdminMock.expectedInvocations), afterLookUpUserAdminCounter)
	}
}

type mMgmtPrivateServiceClientMockSubtractCreditAdmin struct {
	optional           bool
	mock               *MgmtPrivateServiceClientMock
	defaultExpectation *MgmtPrivateServiceClientMockSubtractCreditAdminExpectation
	expectations       []*MgmtPrivateServiceClientMockSubtractCreditAdminExpectation

	callArgs []*MgmtPrivateServiceClientMockSubtractCreditAdminParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// MgmtPrivateServiceClientMockSubtractCreditAdminExpectation specifies expectation struct of the MgmtPrivateServiceClient.SubtractCreditAdmin
type MgmtPrivateServiceClientMockSubtractCreditAdminExpectation struct {
	mock      *MgmtPrivateServiceClientMock
	params    *MgmtPrivateServiceClientMockSubtractCreditAdminParams
	paramPtrs *MgmtPrivateServiceClientMockSubtractCreditAdminParamPtrs
	results   *MgmtPrivateServiceClientMockSubtractCreditAdminResults
	Counter   uint64
}

// MgmtPrivateServiceClientMockSubtractCreditAdminParams contains parameters of the MgmtPrivateServiceClient.SubtractCreditAdmin
type MgmtPrivateServiceClientMockSubtractCreditAdminParams struct {
	ctx  context.Context
	in   *mm_mgmtv1beta.SubtractCreditAdminRequest
	opts []grpc.CallOption
}

// MgmtPrivateServiceClientMockSubtractCreditAdminParamPtrs contains pointers to parameters of the MgmtPrivateServiceClient.SubtractCreditAdmin
type MgmtPrivateServiceClientMockSubtractCreditAdminParamPtrs struct {
	ctx  *context.Context
	in   **mm_mgmtv1beta.SubtractCreditAdminRequest
	opts *[]grpc.CallOption
}

// MgmtPrivateServiceClientMockSubtractCreditAdminResults contains results of the MgmtPrivateServiceClient.SubtractCreditAdmin
type MgmtPrivateServiceClientMockSubtractCreditAdminResults struct {
	sp1 *mm_mgmtv1beta.SubtractCreditAdminResponse
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSubtractCreditAdmin *mMgmtPrivateServiceClientMockSubtractCreditAdmin) Optional() *mMgmtPrivateServiceClientMockSubtractCreditAdmin {
	mmSubtractCreditAdmin.optional = true
	return mmSubtractCreditAdmin
}

// Expect sets up expected params for MgmtPrivateServiceClient.SubtractCreditAdmin
func (mmSubtractCreditAdmin *mMgmtPrivateServiceClientMockSubtractCreditAdmin) Expect(ctx context.Context, in *mm_mgmtv1beta.SubtractCreditAdminRequest, opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockSubtractCreditAdmin {
	if mmSubtractCreditAdmin.mock.funcSubtractCreditAdmin != nil {
		mmSubtractCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.SubtractCreditAdmin mock is already set by Set")
	}

	if mmSubtractCreditAdmin.defaultExpectation == nil {
		mmSubtractCreditAdmin.defaultExpectation = &MgmtPrivateServiceClientMockSubtractCreditAdminExpectation{}
	}

	if mmSubtractCreditAdmin.defaultExpectation.paramPtrs != nil {
		mmSubtractCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.SubtractCreditAdmin mock is already set by ExpectParams functions")
	}

	mmSubtractCreditAdmin.defaultExpectation.params = &MgmtPrivateServiceClientMockSubtractCreditAdminParams{ctx, in, opts}
	for _, e := range mmSubtractCreditAdmin.expectations {
		if minimock.Equal(e.params, mmSubtractCreditAdmin.defaultExpectation.params) {
			mmSubtractCreditAdmin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSubtractCreditAdmin.defaultExpectation.params)
		}
	}

	return mmSubtractCreditAdmin
}

// ExpectCtxParam1 sets up expected param ctx for MgmtPrivateServiceClient.SubtractCreditAdmin
func (mmSubtractCreditAdmin *mMgmtPrivateServiceClientMockSubtractCreditAdmin) ExpectCtxParam1(ctx context.Context) *mMgmtPrivateServiceClientMockSubtractCreditAdmin {
	if mmSubtractCreditAdmin.mock.funcSubtractCreditAdmin != nil {
		mmSubtractCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.SubtractCreditAdmin mock is already set by Set")
	}

	if mmSubtractCreditAdmin.defaultExpectation == nil {
		mmSubtractCreditAdmin.defaultExpectation = &MgmtPrivateServiceClientMockSubtractCreditAdminExpectation{}
	}

	if mmSubtractCreditAdmin.defaultExpectation.params != nil {
		mmSubtractCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.SubtractCreditAdmin mock is already set by Expect")
	}

	if mmSubtractCreditAdmin.defaultExpectation.paramPtrs == nil {
		mmSubtractCreditAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockSubtractCreditAdminParamPtrs{}
	}
	mmSubtractCreditAdmin.defaultExpectation.paramPtrs.ctx = &ctx

	return mmSubtractCreditAdmin
}

// ExpectInParam2 sets up expected param in for MgmtPrivateServiceClient.SubtractCreditAdmin
func (mmSubtractCreditAdmin *mMgmtPrivateServiceClientMockSubtractCreditAdmin) ExpectInParam2(in *mm_mgmtv1beta.SubtractCreditAdminRequest) *mMgmtPrivateServiceClientMockSubtractCreditAdmin {
	if mmSubtractCreditAdmin.mock.funcSubtractCreditAdmin != nil {
		mmSubtractCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.SubtractCreditAdmin mock is already set by Set")
	}

	if mmSubtractCreditAdmin.defaultExpectation == nil {
		mmSubtractCreditAdmin.defaultExpectation = &MgmtPrivateServiceClientMockSubtractCreditAdminExpectation{}
	}

	if mmSubtractCreditAdmin.defaultExpectation.params != nil {
		mmSubtractCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.SubtractCreditAdmin mock is already set by Expect")
	}

	if mmSubtractCreditAdmin.defaultExpectation.paramPtrs == nil {
		mmSubtractCreditAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockSubtractCreditAdminParamPtrs{}
	}
	mmSubtractCreditAdmin.defaultExpectation.paramPtrs.in = &in

	return mmSubtractCreditAdmin
}

// ExpectOptsParam3 sets up expected param opts for MgmtPrivateServiceClient.SubtractCreditAdmin
func (mmSubtractCreditAdmin *mMgmtPrivateServiceClientMockSubtractCreditAdmin) ExpectOptsParam3(opts ...grpc.CallOption) *mMgmtPrivateServiceClientMockSubtractCreditAdmin {
	if mmSubtractCreditAdmin.mock.funcSubtractCreditAdmin != nil {
		mmSubtractCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.SubtractCreditAdmin mock is already set by Set")
	}

	if mmSubtractCreditAdmin.defaultExpectation == nil {
		mmSubtractCreditAdmin.defaultExpectation = &MgmtPrivateServiceClientMockSubtractCreditAdminExpectation{}
	}

	if mmSubtractCreditAdmin.defaultExpectation.params != nil {
		mmSubtractCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.SubtractCreditAdmin mock is already set by Expect")
	}

	if mmSubtractCreditAdmin.defaultExpectation.paramPtrs == nil {
		mmSubtractCreditAdmin.defaultExpectation.paramPtrs = &MgmtPrivateServiceClientMockSubtractCreditAdminParamPtrs{}
	}
	mmSubtractCreditAdmin.defaultExpectation.paramPtrs.opts = &opts

	return mmSubtractCreditAdmin
}

// Inspect accepts an inspector function that has same arguments as the MgmtPrivateServiceClient.SubtractCreditAdmin
func (mmSubtractCreditAdmin *mMgmtPrivateServiceClientMockSubtractCreditAdmin) Inspect(f func(ctx context.Context, in *mm_mgmtv1beta.SubtractCreditAdminRequest, opts ...grpc.CallOption)) *mMgmtPrivateServiceClientMockSubtractCreditAdmin {
	if mmSubtractCreditAdmin.mock.inspectFuncSubtractCreditAdmin != nil {
		mmSubtractCreditAdmin.mock.t.Fatalf("Inspect function is already set for MgmtPrivateServiceClientMock.SubtractCreditAdmin")
	}

	mmSubtractCreditAdmin.mock.inspectFuncSubtractCreditAdmin = f

	return mmSubtractCreditAdmin
}

// Return sets up results that will be returned by MgmtPrivateServiceClient.SubtractCreditAdmin
func (mmSubtractCreditAdmin *mMgmtPrivateServiceClientMockSubtractCreditAdmin) Return(sp1 *mm_mgmtv1beta.SubtractCreditAdminResponse, err error) *MgmtPrivateServiceClientMock {
	if mmSubtractCreditAdmin.mock.funcSubtractCreditAdmin != nil {
		mmSubtractCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.SubtractCreditAdmin mock is already set by Set")
	}

	if mmSubtractCreditAdmin.defaultExpectation == nil {
		mmSubtractCreditAdmin.defaultExpectation = &MgmtPrivateServiceClientMockSubtractCreditAdminExpectation{mock: mmSubtractCreditAdmin.mock}
	}
	mmSubtractCreditAdmin.defaultExpectation.results = &MgmtPrivateServiceClientMockSubtractCreditAdminResults{sp1, err}
	return mmSubtractCreditAdmin.mock
}

// Set uses given function f to mock the MgmtPrivateServiceClient.SubtractCreditAdmin method
func (mmSubtractCreditAdmin *mMgmtPrivateServiceClientMockSubtractCreditAdmin) Set(f func(ctx context.Context, in *mm_mgmtv1beta.SubtractCreditAdminRequest, opts ...grpc.CallOption) (sp1 *mm_mgmtv1beta.SubtractCreditAdminResponse, err error)) *MgmtPrivateServiceClientMock {
	if mmSubtractCreditAdmin.defaultExpectation != nil {
		mmSubtractCreditAdmin.mock.t.Fatalf("Default expectation is already set for the MgmtPrivateServiceClient.SubtractCreditAdmin method")
	}

	if len(mmSubtractCreditAdmin.expectations) > 0 {
		mmSubtractCreditAdmin.mock.t.Fatalf("Some expectations are already set for the MgmtPrivateServiceClient.SubtractCreditAdmin method")
	}

	mmSubtractCreditAdmin.mock.funcSubtractCreditAdmin = f
	return mmSubtractCreditAdmin.mock
}

// When sets expectation for the MgmtPrivateServiceClient.SubtractCreditAdmin which will trigger the result defined by the following
// Then helper
func (mmSubtractCreditAdmin *mMgmtPrivateServiceClientMockSubtractCreditAdmin) When(ctx context.Context, in *mm_mgmtv1beta.SubtractCreditAdminRequest, opts ...grpc.CallOption) *MgmtPrivateServiceClientMockSubtractCreditAdminExpectation {
	if mmSubtractCreditAdmin.mock.funcSubtractCreditAdmin != nil {
		mmSubtractCreditAdmin.mock.t.Fatalf("MgmtPrivateServiceClientMock.SubtractCreditAdmin mock is already set by Set")
	}

	expectation := &MgmtPrivateServiceClientMockSubtractCreditAdminExpectation{
		mock:   mmSubtractCreditAdmin.mock,
		params: &MgmtPrivateServiceClientMockSubtractCreditAdminParams{ctx, in, opts},
	}
	mmSubtractCreditAdmin.expectations = append(mmSubtractCreditAdmin.expectations, expectation)
	return expectation
}

// Then sets up MgmtPrivateServiceClient.SubtractCreditAdmin return parameters for the expectation previously defined by the When method
func (e *MgmtPrivateServiceClientMockSubtractCreditAdminExpectation) Then(sp1 *mm_mgmtv1beta.SubtractCreditAdminResponse, err error) *MgmtPrivateServiceClientMock {
	e.results = &MgmtPrivateServiceClientMockSubtractCreditAdminResults{sp1, err}
	return e.mock
}

// Times sets number of times MgmtPrivateServiceClient.SubtractCreditAdmin should be invoked
func (mmSubtractCreditAdmin *mMgmtPrivateServiceClientMockSubtractCreditAdmin) Times(n uint64) *mMgmtPrivateServiceClientMockSubtractCreditAdmin {
	if n == 0 {
		mmSubtractCreditAdmin.mock.t.Fatalf("Times of MgmtPrivateServiceClientMock.SubtractCreditAdmin mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSubtractCreditAdmin.expectedInvocations, n)
	return mmSubtractCreditAdmin
}

func (mmSubtractCreditAdmin *mMgmtPrivateServiceClientMockSubtractCreditAdmin) invocationsDone() bool {
	if len(mmSubtractCreditAdmin.expectations) == 0 && mmSubtractCreditAdmin.defaultExpectation == nil && mmSubtractCreditAdmin.mock.funcSubtractCreditAdmin == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSubtractCreditAdmin.mock.afterSubtractCreditAdminCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSubtractCreditAdmin.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SubtractCreditAdmin implements mgmtv1beta.MgmtPrivateServiceClient
func (mmSubtractCreditAdmin *MgmtPrivateServiceClientMock) SubtractCreditAdmin(ctx context.Context, in *mm_mgmtv1beta.SubtractCreditAdminRequest, opts ...grpc.CallOption) (sp1 *mm_mgmtv1beta.SubtractCreditAdminResponse, err error) {
	mm_atomic.AddUint64(&mmSubtractCreditAdmin.beforeSubtractCreditAdminCounter, 1)
	defer mm_atomic.AddUint64(&mmSubtractCreditAdmin.afterSubtractCreditAdminCounter, 1)

	if mmSubtractCreditAdmin.inspectFuncSubtractCreditAdmin != nil {
		mmSubtractCreditAdmin.inspectFuncSubtractCreditAdmin(ctx, in, opts...)
	}

	mm_params := MgmtPrivateServiceClientMockSubtractCreditAdminParams{ctx, in, opts}

	// Record call args
	mmSubtractCreditAdmin.SubtractCreditAdminMock.mutex.Lock()
	mmSubtractCreditAdmin.SubtractCreditAdminMock.callArgs = append(mmSubtractCreditAdmin.SubtractCreditAdminMock.callArgs, &mm_params)
	mmSubtractCreditAdmin.SubtractCreditAdminMock.mutex.Unlock()

	for _, e := range mmSubtractCreditAdmin.SubtractCreditAdminMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmSubtractCreditAdmin.SubtractCreditAdminMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSubtractCreditAdmin.SubtractCreditAdminMock.defaultExpectation.Counter, 1)
		mm_want := mmSubtractCreditAdmin.SubtractCreditAdminMock.defaultExpectation.params
		mm_want_ptrs := mmSubtractCreditAdmin.SubtractCreditAdminMock.defaultExpectation.paramPtrs

		mm_got := MgmtPrivateServiceClientMockSubtractCreditAdminParams{ctx, in, opts}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSubtractCreditAdmin.t.Errorf("MgmtPrivateServiceClientMock.SubtractCreditAdmin got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.in != nil && !minimock.Equal(*mm_want_ptrs.in, mm_got.in) {
				mmSubtractCreditAdmin.t.Errorf("MgmtPrivateServiceClientMock.SubtractCreditAdmin got unexpected parameter in, want: %#v, got: %#v%s\n", *mm_want_ptrs.in, mm_got.in, minimock.Diff(*mm_want_ptrs.in, mm_got.in))
			}

			if mm_want_ptrs.opts != nil && !minimock.Equal(*mm_want_ptrs.opts, mm_got.opts) {
				mmSubtractCreditAdmin.t.Errorf("MgmtPrivateServiceClientMock.SubtractCreditAdmin got unexpected parameter opts, want: %#v, got: %#v%s\n", *mm_want_ptrs.opts, mm_got.opts, minimock.Diff(*mm_want_ptrs.opts, mm_got.opts))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSubtractCreditAdmin.t.Errorf("MgmtPrivateServiceClientMock.SubtractCreditAdmin got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSubtractCreditAdmin.SubtractCreditAdminMock.defaultExpectation.results
		if mm_results == nil {
			mmSubtractCreditAdmin.t.Fatal("No results are set for the MgmtPrivateServiceClientMock.SubtractCreditAdmin")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmSubtractCreditAdmin.funcSubtractCreditAdmin != nil {
		return mmSubtractCreditAdmin.funcSubtractCreditAdmin(ctx, in, opts...)
	}
	mmSubtractCreditAdmin.t.Fatalf("Unexpected call to MgmtPrivateServiceClientMock.SubtractCreditAdmin. %v %v %v", ctx, in, opts)
	return
}

// SubtractCreditAdminAfterCounter returns a count of finished MgmtPrivateServiceClientMock.SubtractCreditAdmin invocations
func (mmSubtractCreditAdmin *MgmtPrivateServiceClientMock) SubtractCreditAdminAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSubtractCreditAdmin.afterSubtractCreditAdminCounter)
}

// SubtractCreditAdminBeforeCounter returns a count of MgmtPrivateServiceClientMock.SubtractCreditAdmin invocations
func (mmSubtractCreditAdmin *MgmtPrivateServiceClientMock) SubtractCreditAdminBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSubtractCreditAdmin.beforeSubtractCreditAdminCounter)
}

// Calls returns a list of arguments used in each call to MgmtPrivateServiceClientMock.SubtractCreditAdmin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSubtractCreditAdmin *mMgmtPrivateServiceClientMockSubtractCreditAdmin) Calls() []*MgmtPrivateServiceClientMockSubtractCreditAdminParams {
	mmSubtractCreditAdmin.mutex.RLock()

	argCopy := make([]*MgmtPrivateServiceClientMockSubtractCreditAdminParams, len(mmSubtractCreditAdmin.callArgs))
	copy(argCopy, mmSubtractCreditAdmin.callArgs)

	mmSubtractCreditAdmin.mutex.RUnlock()

	return argCopy
}

// MinimockSubtractCreditAdminDone returns true if the count of the SubtractCreditAdmin invocations corresponds
// the number of defined expectations
func (m *MgmtPrivateServiceClientMock) MinimockSubtractCreditAdminDone() bool {
	if m.SubtractCreditAdminMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SubtractCreditAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SubtractCreditAdminMock.invocationsDone()
}

// MinimockSubtractCreditAdminInspect logs each unmet expectation
func (m *MgmtPrivateServiceClientMock) MinimockSubtractCreditAdminInspect() {
	for _, e := range m.SubtractCreditAdminMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.SubtractCreditAdmin with params: %#v", *e.params)
		}
	}

	afterSubtractCreditAdminCounter := mm_atomic.LoadUint64(&m.afterSubtractCreditAdminCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SubtractCreditAdminMock.defaultExpectation != nil && afterSubtractCreditAdminCounter < 1 {
		if m.SubtractCreditAdminMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MgmtPrivateServiceClientMock.SubtractCreditAdmin")
		} else {
			m.t.Errorf("Expected call to MgmtPrivateServiceClientMock.SubtractCreditAdmin with params: %#v", *m.SubtractCreditAdminMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSubtractCreditAdmin != nil && afterSubtractCreditAdminCounter < 1 {
		m.t.Error("Expected call to MgmtPrivateServiceClientMock.SubtractCreditAdmin")
	}

	if !m.SubtractCreditAdminMock.invocationsDone() && afterSubtractCreditAdminCounter > 0 {
		m.t.Errorf("Expected %d calls to MgmtPrivateServiceClientMock.SubtractCreditAdmin but found %d calls",
			mm_atomic.LoadUint64(&m.SubtractCreditAdminMock.expectedInvocations), afterSubtractCreditAdminCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MgmtPrivateServiceClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCheckNamespaceAdminInspect()

			m.MinimockGetOrganizationAdminInspect()

			m.MinimockGetOrganizationSubscriptionAdminInspect()

			m.MinimockGetRemainingCreditAdminInspect()

			m.MinimockGetUserAdminInspect()

			m.MinimockGetUserSubscriptionAdminInspect()

			m.MinimockListOrganizationsAdminInspect()

			m.MinimockListUsersAdminInspect()

			m.MinimockLookUpOrganizationAdminInspect()

			m.MinimockLookUpUserAdminInspect()

			m.MinimockSubtractCreditAdminInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MgmtPrivateServiceClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MgmtPrivateServiceClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCheckNamespaceAdminDone() &&
		m.MinimockGetOrganizationAdminDone() &&
		m.MinimockGetOrganizationSubscriptionAdminDone() &&
		m.MinimockGetRemainingCreditAdminDone() &&
		m.MinimockGetUserAdminDone() &&
		m.MinimockGetUserSubscriptionAdminDone() &&
		m.MinimockListOrganizationsAdminDone() &&
		m.MinimockListUsersAdminDone() &&
		m.MinimockLookUpOrganizationAdminDone() &&
		m.MinimockLookUpUserAdminDone() &&
		m.MinimockSubtractCreditAdminDone()
}
