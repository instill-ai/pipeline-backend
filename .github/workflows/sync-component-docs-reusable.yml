name: Sync component docs (reusable)

on:
  workflow_call:
    inputs:
      target_branch:
        required: true
        type: string
      commit_message:
        required: true
        type: string

jobs:
  sync:
    runs-on: ubuntu-latest
    name: Sync component docs
    steps:
      - name: Check out pipeline-backend repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.botGitHubToken }}
          path: "pipeline-backend"

      - name: Check out readme repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.botGitHubToken }}
          repository: instill-ai/readme
          ref: ${{ inputs.target_branch }}
          path: "readme"

      - name: Install compogen and generate docs
        working-directory: pipeline-backend
        run: |
          # Install compogen to GOPATH/bin (using local version)
          (cd pkg/component/tools/compogen && go install .)

          # Add GOPATH/bin to PATH
          export PATH=$PATH:$(go env GOPATH)/bin

          # Generate component docs
          rm -f $(find pkg/component -name README.mdx | paste -d ' ' -s -)
          go generate -run compogen ./pkg/component/...

      - name: Compare and sync README.mdx files
        run: |
          # Function to get component metadata from definition.yaml
          get_component_metadata() {
            local component_source_dir="$1"
            local latest_version=""
            local component_id=""
            local component_title=""
            local component_description=""

            # Find the latest version directory (v0, v1, v2, etc.)
            latest_version=$(find "$component_source_dir" -maxdepth 1 -type d -name "v*" | sort -V | tail -n 1)

            # Extract metadata from definition.yaml in the latest version
            if [[ -n "$latest_version" && -f "$latest_version/config/definition.yaml" ]]; then
              component_id=$(yq -r '.id' "$latest_version/config/definition.yaml")
              component_title=$(yq -r '.title' "$latest_version/config/definition.yaml")
              component_description=$(yq -r '.description' "$latest_version/config/definition.yaml")
            else
              # Fallback if definition.yaml doesn't exist
              component_name=$(basename "$component_source_dir")
              component_id="$component_name"
              component_title="$component_name"
              component_description="Component definition is missing"
            fi

            # Return values (bash doesn't have return values, so we use global variables)
            COMPONENT_ID="$component_id"
            COMPONENT_TITLE="$component_title"
            COMPONENT_DESCRIPTION="$component_description"
          }

          # Function to compare README.mdx files recursively
          compare_and_sync() {
            local source_dir="$1"
            local target_dir="$2"
            local component_type="$3"

            echo "Comparing $component_type components..."

            # Create target directory if it doesn't exist
            mkdir -p "$target_dir"

            # Track which source components we've processed
            declare -A processed_components

            # Find all README.mdx files in source directory
            find "$source_dir" -name "README.mdx" | while read -r source_file; do
              # Get the component path (e.g., anthropic/v0/README.mdx from pkg/component/ai/anthropic/v0/README.mdx)
              component_path="${source_file#$source_dir/}"

              # Extract the component name (first directory in the path)
              component_name=$(echo "$component_path" | cut -d'/' -f1)

              # Get component metadata
              component_source_dir="$source_dir/$component_name"
              get_component_metadata "$component_source_dir"

              # Create flattened filename using component ID (e.g., anthropic.mdx)
              target_file="$target_dir/${COMPONENT_ID}.mdx"

              # Mark this component as processed
              processed_components["${COMPONENT_ID}"]=1

              # Compare files and copy if different
              if [ ! -f "$target_file" ] || ! cmp -s "$source_file" "$target_file"; then
                echo "Updating: $component_path -> ${COMPONENT_ID}.mdx"
                cp "$source_file" "$target_file"
                # Stage the file for commit
                cd "$target_dir"
                git add "${COMPONENT_ID}.mdx"
                cd - > /dev/null
              fi
            done

            # Remove target files that don't exist in source
            for target_file in "$target_dir"/*.mdx; do
              if [[ -f "$target_file" ]]; then
                component_id=$(basename "$target_file" .mdx)
                if [[ -z "${processed_components[$component_id]}" ]]; then
                  echo "Removing orphaned file: $component_id.mdx"
                  rm "$target_file"
                  cd "$target_dir"
                  git add "$target_file"  # This stages the deletion
                  cd - > /dev/null
                fi
              fi
            done
          }

          # Function to update component index table
          update_component_index() {
            local source_dir="$1"
            local target_dir="$2"
            local component_type="$3"
            local index_file="readme/docs/Component/${component_type}.mdx"

            echo "Updating component index for $component_type..."

            # Remove existing table if it exists
            if [[ "${OSTYPE}" == "darwin"* ]]; then
              # macOS
              sed -i '' '/^ *|.*| *$/d; /^[[:space:]]*:-+[[:space:]]*|[[:space:]]*-+.*$/d' "$index_file"
              sed -i '' '/^$/N;/^\n$/D' "$index_file"
            else
              sed -i '/^ *|.*| *$/d; /^[[:space:]]*:-+[[:space:]]*|[[:space:]]*-+.*$/d' "$index_file"
              sed -i '/^$/N;/^\n$/D' "$index_file"
            fi

            # Add new table header
            echo "" >> "$index_file"
            echo "| Name | Description |" >> "$index_file"
            echo "|:--|:--|" >> "$index_file"

            # Add components to table
            for component_file in "$target_dir"/*.mdx; do
              if [[ -f "$component_file" ]]; then
                component_id=$(basename "$component_file" .mdx)

                # Find the corresponding source directory by matching component_id in definition.yaml files
                component_source_dir=""
                for dir in "$source_dir"/*; do
                  if [[ -d "$dir" ]]; then
                    get_component_metadata "$dir"
                    if [[ "$COMPONENT_ID" == "$component_id" ]]; then
                      component_source_dir="$dir"
                      break
                    fi
                  fi
                done

                # Use the metadata we found
                if [[ -n "$component_source_dir" ]]; then
                  component_title="$COMPONENT_TITLE"
                  component_description="$COMPONENT_DESCRIPTION"
                else
                  component_title="$component_id"
                  component_description="Component definition is missing"
                fi

                # Create table row
                echo "| [$component_title](/docs/$component_id) | $component_description |" >> "$index_file"
              fi
            done

            # Stage the updated index file
            cd "readme/docs/Component"
            git add "${component_type}.mdx"
            cd - > /dev/null
          }

          # Compare each component type
          compare_and_sync "pipeline-backend/pkg/component/ai" "readme/docs/Component/ai" "AI"
          compare_and_sync "pipeline-backend/pkg/component/operator" "readme/docs/Component/operator" "Operator"
          compare_and_sync "pipeline-backend/pkg/component/application" "readme/docs/Component/application" "Application"
          compare_and_sync "pipeline-backend/pkg/component/data" "readme/docs/Component/data" "Data"
          compare_and_sync "pipeline-backend/pkg/component/generic" "readme/docs/Component/generic" "Generic"

          # Update component index tables
          update_component_index "pipeline-backend/pkg/component/ai" "readme/docs/Component/ai" "ai"
          update_component_index "pipeline-backend/pkg/component/operator" "readme/docs/Component/operator" "operator"
          update_component_index "pipeline-backend/pkg/component/application" "readme/docs/Component/application" "application"
          update_component_index "pipeline-backend/pkg/component/data" "readme/docs/Component/data" "data"
          update_component_index "pipeline-backend/pkg/component/generic" "readme/docs/Component/generic" "generic"

      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.botGPGPrivateKey }}
          passphrase: ${{ secrets.botGPGPassphrase }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          workdir: readme

      - name: Commit changes to readme repo
        working-directory: readme
        run: |
          # Check if there are any changes to commit
          if [[ `git status --porcelain` ]]; then
            git add *
            git commit -S -m "chore: sync component docs" -m "${{ inputs.commit_message }}"
            git push
          else
            echo "No changes to commit"
          fi
