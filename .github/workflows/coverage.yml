name: Coverage

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  codecov:
    name: codecov
    runs-on: ubuntu-24.04-8core-amd64
    permissions:
      contents: read
      pull-requests: write
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load .env file
        uses: cardinalby/export-env-action@v2
        with:
          envFile: .env

      # Go is used for the test database migration
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOLANG_VERSION }}
          cache: false

      # Set up Docker Buildx for advanced caching features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      # Check if cached image exists and is recent
      - name: Check for cached image
        id: cache_check
        run: |
          # Get the hash of files that would affect the Docker build
          BUILD_CONTEXT_HASH=$(find . -name "Dockerfile.dev" -o -name "go.mod" -o -name "go.sum" -o -path "./pkg/component/resources/onnx/*" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1)
          echo "build_context_hash=${BUILD_CONTEXT_HASH}" >> $GITHUB_OUTPUT

          # Check GitHub Container Registry for cached image first
          echo "cache_hit=false" >> $GITHUB_OUTPUT
          echo "Checking for cached image with hash: ${BUILD_CONTEXT_HASH}"

      # Build dev image with comprehensive caching strategy (only if cache miss)
      - name: Build dev image with cache
        if: steps.cache_check.outputs.cache_hit != 'true'
        run: |
          # Build with multiple cache sources and export cache
          docker buildx build \
            --build-arg SERVICE_NAME=${{ env.SERVICE_NAME }} \
            --build-arg K6_VERSION=${{ env.K6_VERSION }} \
            --build-arg XK6_VERSION=${{ env.XK6_VERSION }} \
            --build-arg XK6_SQL_VERSION=${{ env.XK6_SQL_VERSION }} \
            --build-arg XK6_SQL_POSTGRES_VERSION=${{ env.XK6_SQL_POSTGRES_VERSION }} \
            --cache-from type=gha,scope=${{ github.ref_name }}-dev \
            --cache-from type=gha,scope=main-dev \
            --cache-from type=gha,scope=base-deps \
            --cache-from type=gha,scope=binary-deps \
            --cache-from type=gha,scope=go-deps \
            --cache-from type=gha,scope=model-artifacts \
            --cache-to type=gha,mode=max,scope=${{ github.ref_name }}-dev \
            --cache-to type=gha,mode=max,scope=base-deps \
            --cache-to type=gha,mode=max,scope=binary-deps \
            --cache-to type=gha,mode=max,scope=go-deps \
            --cache-to type=gha,mode=max,scope=model-artifacts \
            -f Dockerfile.dev \
            -t instill/${{ env.SERVICE_NAME }}:dev \
            -t instill/${{ env.SERVICE_NAME }}:cache-${{ steps.cache_check.outputs.build_context_hash }} \
            --load \
            .

      - name: Generate coverage report
        run: |
          make coverage DBTEST=true OCR=true ONNX=true

      - name: Upload coverage report
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
