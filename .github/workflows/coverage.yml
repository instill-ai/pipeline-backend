name: Coverage

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  codecov:
    name: codecov
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      # Tests can fail due to insufficient disk space, so we optimize the disk
      # usage.
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 10240
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"
          build-mount-path: "/var/lib/docker"

      - name: Restart docker
        run: sudo service docker restart

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Start PostgreSQL as a container after disk optimization
      - name: Start PostgreSQL
        run: |
          docker run -d \
            --name postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=password \
            -e POSTGRES_DB=pipeline_test \
            -p 5432:5432 \
            --health-cmd="pg_isready -U postgres" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=5 \
            postgres:15

          # Wait for PostgreSQL to be healthy
          echo "Waiting for PostgreSQL to be ready..."
          while [ "$(docker inspect --format='{{.State.Health.Status}}' postgres)" != "healthy" ]; do
            echo "Waiting for PostgreSQL health check..."
            sleep 2
          done
          echo "PostgreSQL is ready!"

      - name: Load .env file
        uses: cardinalby/export-env-action@v2
        with:
          envFile: .env

      # Go is used for the test database migration
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOLANG_VERSION }}
          cache: false

      # Set up Docker Buildx for advanced caching features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      # Check if cached image exists and is recent
      - name: Check for cached image
        id: cache_check
        run: |
          # Get the hash of files that would affect the Docker build
          BUILD_CONTEXT_HASH=$(find . -name "Dockerfile.dev" -o -name "go.mod" -o -name "go.sum" -o -path "./pkg/component/resources/onnx/*" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1)
          echo "build_context_hash=${BUILD_CONTEXT_HASH}" >> $GITHUB_OUTPUT

          # Check GitHub Container Registry for cached image first
          echo "cache_hit=false" >> $GITHUB_OUTPUT
          echo "Checking for cached image with hash: ${BUILD_CONTEXT_HASH}"

      # Build dev image with comprehensive caching strategy (only if cache miss)
      - name: Build dev image with cache
        if: steps.cache_check.outputs.cache_hit != 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.dev
          load: true
          build-args: |
            SERVICE_NAME=${{ env.SERVICE_NAME }}
            K6_VERSION=${{ env.K6_VERSION }}
            XK6_VERSION=${{ env.XK6_VERSION }}
            XK6_SQL_VERSION=${{ env.XK6_SQL_VERSION }}
            XK6_SQL_POSTGRES_VERSION=${{ env.XK6_SQL_POSTGRES_VERSION }}
          tags: |
            instill/${{ env.SERVICE_NAME }}:dev
            instill/${{ env.SERVICE_NAME }}:cache-${{ steps.cache_check.outputs.build_context_hash }}
          cache-from: |
            type=gha,scope=${{ github.ref_name }}-dev
            type=gha,scope=main-dev
            type=gha,scope=base-deps
            type=gha,scope=binary-deps
            type=gha,scope=go-deps
            type=gha,scope=model-artifacts
          cache-to: |
            type=gha,mode=max,scope=${{ github.ref_name }}-dev
            type=gha,mode=max,scope=base-deps
            type=gha,mode=max,scope=binary-deps
            type=gha,mode=max,scope=go-deps
            type=gha,mode=max,scope=model-artifacts

      - name: Generate coverage report
        env:
          CFG_DATABASE_HOST: localhost
          CFG_DATABASE_NAME: pipeline_test
          CFG_DATABASE_USERNAME: postgres
          CFG_DATABASE_PASSWORD: password
          CFG_DATABASE_PORT: 5432
        run: |
          make coverage DBTEST=true OCR=true ONNX=true

      - name: Upload coverage report
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      # Cleanup PostgreSQL container
      - name: Cleanup PostgreSQL
        if: always()
        run: |
          docker stop postgres || true
          docker rm postgres || true
