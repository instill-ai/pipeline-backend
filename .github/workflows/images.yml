name: Build and Push Images

on:
  workflow_call:
  release:
    types: [published]

jobs:
  docker-hub:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          overprovision-lvm: "true"
          remove-dotnet: "true"
          build-mount-path: "/var/lib/docker/"

      - name: Restart docker
        run: sudo service docker restart

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.botGitHubToken }}

      - name: Load .env file
        uses: cardinalby/export-env-action@v2
        with:
          envFile: .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: dropletbot
          password: ${{ secrets.botDockerHubPassword }}

      - name: Build and push (latest)
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          push: true
          build-args: |
            SERVICE_NAME=pipeline-backend
          tags: instill/pipeline-backend:latest
          cache-from: type=registry,ref=instill/pipeline-backend:buildcache
          cache-to: type=registry,ref=instill/pipeline-backend:buildcache,mode=max

      - name: Set Versions
        if: github.event_name == 'release'
        uses: actions/github-script@v6
        id: set_version
        with:
          script: |
            const tag = '${{ github.ref_name }}'
            const no_v_tag = tag.replace('v', '')
            core.setOutput('tag', tag)
            core.setOutput('no_v_tag', no_v_tag)

      - name: Build and push (release)
        if: github.event_name == 'release'
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          push: true
          build-args: |
            SERVICE_NAME=pipeline-backend
          tags: instill/pipeline-backend:${{steps.set_version.outputs.no_v_tag}}
          cache-from: type=registry,ref=instill/pipeline-backend:buildcache
          cache-to: type=registry,ref=instill/pipeline-backend:buildcache,mode=max
